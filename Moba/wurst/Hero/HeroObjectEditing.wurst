package HeroObjectEditing

import UtilityFunctions
import LinkedList
import General
import AbilityObjEditing
import public ObjectEditingPreset
import public ObjectIds
import public ObjectIdGenerator
import HashMap

/*
You cannot add learnable abilities to hero with code, it must be done with object data.
Hero skills will have specific abilityIds:

A+SpecialCharacter+Hero+Hotkey

SpecialCharacter: Z,Y,..
Anything that is not normally used in ability ids

Hero: Different for every hero: 0-9, a-z, A-Z
Means 62 heroes per special character.

PQWER


*/

public constant COMPILETIME_TOOLTIPS = true

public constant CHANNELING_SPELL = "|cffffcc00Channeling Spell:|r\n"

public constant C_STR = color(255, 187, 102)
public constant C_INT = color(102, 187, 255)


public interface LevelString
    function getString(int level) returns string

public function real.str() returns string
    return this.toInt().toString()

public function int.str() returns string
        return this.toString()

public function AbilityDefinition.setLearnString(string intro, LevelString levelString)
    string learnString = intro+"\n"
    for i = 1 to 5
        learnString += getLevelString(i) + levelString.getString(i)

    this.setTooltipLearnExtended(learnString +"\n ")

    destroy levelString


public function AbilityDefinition.setDescriptionString(boolean showCooldown, int lvl, string description)
    if showCooldown
        this.setTooltipNormalExtended(lvl, description+ "\n" + "Cooldown: " + "<" + this.getNewId().toRawCode() + ",Cool"+lvl.toString()+">" + "\n ")
    else
        this.setTooltipNormalExtended(lvl, description+ "\n ")

public function getLevelString(int level) returns string
    return " \n|cffffcc00Level "+level.toString()+"|r - "

public function int.getBonusString() returns string
    if(this==0)
        return " "
    return " (+"+this.toString()+") "

public function real.getBonusString() returns string
    if(this==0)
        return " "
    return " (+"+this.toInt().toString()+") "

public function int.getBonusString(color c) returns string
    if(this==0)
        return " "
    return c.toColorString()+" (+"+this.toString()+")|r "

public function real.getBonusString(color c) returns string
    if(this==0)
        return " "
    return c.toColorString()+" (+"+this.toInt().toString()+")|r "

public enum TargetType
    INSTANT
    UNIT
    POINT
    UNIT_OR_POINT
    AREA

public function AbilityDefinitionIllidanChannel.setupChannel(TargetType targetType, string orderId, real castBackSwing)
    this
        ..setArtCaster("")
        ..setArtEffect("")
        ..setArtTarget("")
        ..setArtSpecial("")
    for lvl = 1 to 5
        this
            ..setOptions(lvl, 1)
            ..setFollowThroughTime(lvl, castBackSwing)
            ..setDisableOtherAbilities(lvl, false)
            ..setBaseOrderID(lvl, orderId)
            ..setArtDuration(lvl, 0)

        if targetType == TargetType.INSTANT
            this.setTargetType(lvl, 0)
        else if targetType == TargetType.UNIT
            this.setTargetType(lvl, 1)
        else if targetType == TargetType.POINT
            this.setTargetType(lvl, 2)
        else if targetType == TargetType.UNIT_OR_POINT
            this.setTargetType(lvl, 3)
        else if targetType == TargetType.AREA
            this.setTargetType(lvl, 2)
            this.setOptions(lvl, 3)

public function AbilityDefinition.setupIcon(string name)
        string sNormal = name
        string sLearn

        if name.length() < 20 or not name.startsWith("ReplaceableTextures")
            sNormal = "ReplaceableTextures\\CommandButtons\\" + sNormal
        if not name.endsWith(".blp")
            sNormal += ".blp"

            
        if name.startsWith("PAS")
            sLearn = "ReplaceableTextures\\CommandButtons\\BTN" + name.substring(3) + ".blp"
        else
            sLearn = sNormal




        this.setIconResearch(sLearn)
        this.setIconNormal(sNormal)

public function AbilityDefinition.setTurnOff(string name, string hotkey)
    for i = 1 to 5
        this.setTooltipTurnOff(i, "("+hotkey+") "+name+" - [|cffffcc00Level "+i.toString()+"|r]")
        this.setTooltipTurnOffExtended(i, "Description missing.")

public function AbilityDefinition.setupWithHotKey(string name, string hotkey)
    this.presetHotkey(hotkey)
    this.setButtonPositionNormalY(2)
    this.setButtonPositionTurnOffY(2)
    this.setButtonPositionResearchY(0)
    this.setHeroAbility(true)
    this.setLevels(5)
    this.setRequiredLevel(1)
    this.setName(name)
    this.setRequirements("")
    this.setCheckDependencies(false)
    this.setTooltipLearn("("+hotkey+")"+" Learn "+name+" - [|cffffcc00Level %d|r]")
    this.setTooltipLearnExtended("Description missing. Use \"-"+ hotkey +"\" to get the tooltip.")
    for i = 1 to 5
        this.setTooltipNormalExtended(i, "description missing")
        this.setTooltipTurnOffExtended(i, "description missing")
        this.setTooltipNormal(i, "("+hotkey+") "+name+" - [|cffffcc00Level "+i.toString()+"|r]")
        this.setTooltipTurnOff(i, "("+hotkey+") "+name+" - [|cffffcc00Level "+i.toString()+"|r]")
        
    if(hotkey=="Q")
        this..presetHotkey("Q")
            ..setButtonPositionNormalX(0)
            ..setButtonPositionResearchX(0)
            ..setButtonPositionTurnOffX(0)

    if(hotkey=="W")
        this..presetHotkey("W")
            ..setButtonPositionNormalX(1)
            ..setButtonPositionResearchX(1)
            ..setButtonPositionTurnOffX(1)
        return

    if(hotkey=="E")
        this..presetHotkey("E")
            ..setButtonPositionNormalX(2)
            ..setButtonPositionResearchX(2)
            ..setButtonPositionTurnOffX(2)
        return

    if(hotkey=="R")
        this..presetHotkey("R")
            ..setButtonPositionNormalX(3)
            ..setButtonPositionResearchX(3)
            ..setButtonPositionTurnOffX(3)
            ..setRequiredLevel(6)
            ..setLevelSkipRequirement(3)
        return

    if(hotkey=="D")
        this..presetHotkey("D")
            ..setButtonPositionNormalX(2)
            ..setButtonPositionResearchX(2)
            ..setButtonPositionNormalY(1)
            ..setButtonPositionResearchY(1)
            ..setLevelSkipRequirement(4)
        return

    print("!")

public function bonus(int statValue, real atHundred) returns string
    return (atHundred*statValue/100).toString()

public function string.removeDynamics() returns string
    int i = 0
    string preString = this
    while true
        string newString = preString.replace("{I" + i.toString() + "}","")
        if(preString == newString)
            break
        preString = newString
        i++
    i = 0
    while true
        string newString = preString.replace("{S" + i.toString() + "}","")
        if(preString == newString)
            break
        preString = newString
        i++
    return preString

public function string.replaceDynamics() returns string
    int i = 0
    string preString = this
    while true
        string newString = preString.replace("{I" + i.toString() + "}", C_INT.toColorString()+" (int)" )
        if(preString == newString)
            break
        preString = newString
        i++
    i = 0
    while true
        string newString = preString.replace("{S" + i.toString() + "}", C_STR.toColorString()+" (str)")
        if(preString == newString)
            break
        preString = newString
        i++
    return preString

public function string.evaluateIntelligence(LinkedList<real> replacers, int intelligence, bool const) returns string
    var result = this
    var i = 0
    for dynamicInteger in replacers
        if const
            result = result.replace("{I" + i.toString() + "}", C_INT.toColorString()+" (+"+(intelligence * dynamicInteger/100).toSmartString()+"% int)|r " )
        else
            result = result.replace("{I" + i.toString() + "}", C_INT.toColorString()+" (+"+(intelligence * dynamicInteger/100).toSmartString()+")|r " )
        i++
    return result

public function string.evaluateStrength(LinkedList<real> replacers, int strength, bool const) returns string
    var result = this
    var i = 0
    for dynamicInteger in replacers
        if const
            result = result.replace("{S" + i.toString() + "}", C_STR.toColorString()+" (+"+(strength * dynamicInteger/100).toSmartString()+"% str)|r " )
        else
            result = result.replace("{S" + i.toString() + "}", C_STR.toColorString()+" (+"+(strength * dynamicInteger/100).toSmartString()+")|r ")
        i++
    return result

public function string.evaluateBonus(LinkedList<real> replaceStrength, int strength, LinkedList<real> replaceIntelligence, int intelligence, bool const) returns string
    return this.evaluateStrength(replaceStrength, strength, const).evaluateIntelligence(replaceIntelligence, intelligence, const)
    
public class DynamicTooltip
    
    private int abilityTypeId
    private string array[5] normalString
    private string array[5] turnOffString
    private string array[5] learnLevelString
    private string learnString
    private boolean useTurnOff

    private static constant idToTooltip = new HashMap<int,DynamicTooltip>

    private constant replaceIntelligence = new LinkedList<real>
    private constant replaceStrength = new LinkedList<real>
    private AbilityDefinition aDef = null

    function getAbilityTypeId() returns int
        return this.abilityTypeId

    static function getDynamicTooltip(int abilityTypeId) returns DynamicTooltip
        return idToTooltip.get(abilityTypeId)

    construct(int abilityTypeId)
        this.abilityTypeId = abilityTypeId
        this.useTurnOff = false
        idToTooltip.put(abilityTypeId, this)

    construct(AbilityDefinition aDef)
        this.abilityTypeId = aDef.getNewId()
        this.useTurnOff = false
        idToTooltip.put(abilityTypeId, this)
        this.aDef = aDef

    function getUseTurnOff() returns boolean
        return this.useTurnOff

    function setReplaceIntelligence(vararg real replacements)
        for replacement in replacements
            replaceIntelligence.add(replacement)

    function setReplaceStrength(vararg real replacements)
        for replacement in replacements
            replaceStrength.add(replacement)

    function format(vararg string replacements)
        var result = this.learnString
        var i = 0
        for replacement in replacements
            result = result.replace("{N" + i.toString() + "}", replacement)
            i++
        this.learnString = result

        for j=1 to 5
            result = this.normalString[j]
            i = 0
            for replacement in replacements
                result = result.replace("{N" + i.toString() + "}", replacement)
                i++
            this.normalString[j] = result

    function writeData()
        if aDef == null
            return
        aDef.setTooltipLearnExtended(this.evaluateLearnString())
        for i = 1 to 5
            aDef.setTooltipNormalExtended(i, this.evaluateNormalString(i))
        if this.getUseTurnOff()
            for i = 1 to 5
                aDef.setTooltipTurnOffExtended(i, this.evaluateTurnOffString(i))

    function setLearnString(string intro, LevelString levelString)
        this.learnString = intro + "\n"

        for i = 1 to 5
            this.learnString += getLevelString(i) + levelString.getString(i)
            this.learnLevelString[i-1] = levelString.getString(i)

        destroy levelString
        this.learnString += "\n "


    function setNormalString(boolean showCooldown, int level, string normalString)
        this.normalString[level-1] = normalString

        if showCooldown
            this.normalString[level - 1] += "\n" + "Cooldown: " + "<" + this.getAbilityTypeId().toRawCode() + ",Cool"+level.toString()+">" + "\n "
        else
            this.normalString[level - 1] += "\n "

    function setTurnOffString(boolean showCooldown, int level, string turnOffString)
        this.useTurnOff = true
        this.turnOffString[level-1] = turnOffString

        if showCooldown
            this.turnOffString[level - 1] += "\n" + "Cooldown: " + "<" + this.getAbilityTypeId().toRawCode() + ",Cool"+level.toString()+">" + "\n "
        else
            this.turnOffString[level - 1] += "\n "


    
    function evaluateLearnStringLevel(int level, int strength, int intelligence, bool const) returns string
        return this.learnLevelString[level-1].evaluateBonus(replaceStrength, strength, replaceIntelligence, intelligence, const)

    function evaluateLearnString(int strength, int intelligence, bool const) returns string
        return this.learnString.evaluateBonus(replaceStrength, strength, replaceIntelligence, intelligence, const)

    function evaluateNormalString(int level, int strength, int intelligence, bool const) returns string
        string ret = ""
        if level != 0
            ret = this.normalString[level-1].evaluateBonus(replaceStrength, strength, replaceIntelligence, intelligence, const)
        return ret

    function evaluateTurnOffString(int level, int strength, int intelligence, bool const) returns string
        string ret = ""
        if level != 0
            ret = this.turnOffString[level-1].evaluateBonus(replaceStrength, strength, replaceIntelligence, intelligence, const)
        return ret

    // Overloaded functions:

    function evaluateLearnStringLevel(int level) returns string
        return evaluateLearnStringLevel(level, 100, 100, true)

    function evaluateLearnStringLevel(unit whichUnit) returns string
        return evaluateLearnStringLevel(whichUnit.getAbilityLevel(this.abilityTypeId), whichUnit.getStr(), whichUnit.getInt(), false)

    function evaluateLearnStringLevel(unit whichUnit, int level) returns string
        return evaluateLearnStringLevel(level, whichUnit.getStr(), whichUnit.getInt(), false)


    function evaluateLearnString() returns string
        return evaluateLearnString(100, 100, true)

    function evaluateLearnString(unit whichUnit) returns string
        return evaluateLearnString(whichUnit.getStr(), whichUnit.getInt(), false)


    function evaluateNormalString(int level) returns string
        return evaluateNormalString(level, 100, 100, true)

    function evaluateNormalString(unit whichUnit) returns string
        return evaluateNormalString(whichUnit.getAbilityLevel(this.abilityTypeId), whichUnit.getStr(), whichUnit.getInt(), false)

    function evaluateNormalString(unit whichUnit, int level) returns string
        return evaluateNormalString(level, whichUnit.getStr(), whichUnit.getInt(), false)


    function evaluateTurnOffString(int level) returns string
        return evaluateTurnOffString(level, 100, 100, true)

    function evaluateTurnOffString(unit whichUnit) returns string
        return evaluateTurnOffString(whichUnit.getAbilityLevel(this.abilityTypeId), whichUnit.getStr(), whichUnit.getInt(), false)

    function evaluateTurnOffString(unit whichUnit, int level) returns string
        return evaluateTurnOffString(level, whichUnit.getStr(), whichUnit.getInt(), false)




