package HeroObjectEditing

import UtilityFunctions
import LinkedList
import General
import AbilityObjEditing
import public ObjectEditingPreset
import public ObjectIds
import public ObjectIdGenerator
import HashMap

/*
You cannot add learnable abilities to hero with code, it must be done with object data.
Hero skills will have specific abilityIds:

A+SpecialCharacter+Hero+Hotkey

SpecialCharacter: Z,Y,..
Anything that is not normally used in ability ids

Hero: Different for every hero: 0-9, a-z, A-Z
Means 62 heroes per special character.

PQWER


*/


/*  This flag can be set to false to disable setting tooltips at compiletime
**  Could speed up compiling the map. For the moment it is required due to a bug in 1.30 */
public constant COMPILETIME_TOOLTIPS_NORMAL = false
public constant COMPILETIME_TOOLTIPS_LEARN = true

public constant ABIL_DEF_MAP = new HashMap<int,AbilityDefinition>

public constant DYNAMIC_TOOLTIPS = true

public constant CHANNELING_SPELL = "|cffffcc00Channeling Spell:|r\n"

public constant C_STR = color(255, 187, 102)
public constant C_INT = color(102, 187, 255)


public interface LevelString
    function getString(int level) returns string

public function real.str() returns string
    return this.toInt().toString()

public function int.str() returns string
        return this.toString()

public function AbilityDefinition.setLearnString(string intro, LevelString levelString)
    string learnString = intro+"\n"
    for i = 1 to 5
        learnString += getLevelString(i) + levelString.getString(i)

    this.setTooltipLearnExtended(learnString +"\n ")

    destroy levelString


public function AbilityDefinition.setDescriptionString(boolean showCooldown, int lvl, string description)
    if showCooldown
        this.setTooltipNormalExtended(lvl, description+ "\n" + "Cooldown: " + "<" + this.getNewId().toRawCode() + ",Cool"+lvl.toString()+">" + "\n ")
    else
        this.setTooltipNormalExtended(lvl, description+ "\n ")

public function getLevelString(int level) returns string
    return " \n|cffffcc00Level "+level.toString()+"|r - "

public function int.getBonusString() returns string
    if(this==0)
        return " "
    return " (+"+this.toString()+") "

public function real.getBonusString() returns string
    if(this==0)
        return " "
    return " (+"+this.toInt().toString()+") "

public function int.getBonusString(color c) returns string
    if(this==0)
        return " "
    return c.toColorString()+" (+"+this.toString()+")|r "

public function real.getBonusString(color c) returns string
    if(this==0)
        return " "
    return c.toColorString()+" (+"+this.toInt().toString()+")|r "

public enum TargetType
    INSTANT
    UNIT
    POINT
    UNIT_OR_POINT
    AREA

public function AbilityDefinitionIllidanChannel.setupChannel(TargetType targetType, string orderId, real castBackSwing)
    this
        ..setArtCaster("")
        ..setArtEffect("")
        ..setArtTarget("")
        ..setArtSpecial("")
    for lvl = 1 to 5
        this
            ..setOptions(lvl, 1)
            ..setFollowThroughTime(lvl, castBackSwing)
            ..setDisableOtherAbilities(lvl, false)
            ..setBaseOrderID(lvl, orderId)
            ..setArtDuration(lvl, 0)

        if targetType == TargetType.INSTANT
            this.setTargetType(lvl, 0)
        else if targetType == TargetType.UNIT
            this.setTargetType(lvl, 1)
        else if targetType == TargetType.POINT
            this.setTargetType(lvl, 2)
        else if targetType == TargetType.UNIT_OR_POINT
            this.setTargetType(lvl, 3)
        else if targetType == TargetType.AREA
            this.setTargetType(lvl, 2)
            this.setOptions(lvl, 3)

public function AbilityDefinition.setupIcon(string name)
        string sNormal = name
        string sLearn

        if name.length() < 20 or not name.startsWith("ReplaceableTextures")
            sNormal = "ReplaceableTextures\\CommandButtons\\" + sNormal
        if not name.endsWith(".blp")
            sNormal += ".blp"

            
        if name.startsWith("PAS")
            sLearn = "ReplaceableTextures\\CommandButtons\\BTN" + name.substring(3) + ".blp"
        else
            sLearn = sNormal




        this.setIconResearch(sLearn)
        this.setIconNormal(sNormal)

public function AbilityDefinition.setTurnOff(string name, string hotkey)
    for i = 1 to 5
        this.setTooltipTurnOff(i, "("+hotkey+") "+name+" - [|cffffcc00Level "+i.toString()+"|r]")
        this.setTooltipTurnOffExtended(i, "Description missing.")

public function AbilityDefinition.setupWithHotKey(string name, string hotkey)
    if not compiletime
        return
    ABIL_DEF_MAP.put(this.getNewId(), this)
    this.presetHotkey(hotkey)
    this.setButtonPositionNormalY(2)
    this.setButtonPositionTurnOffY(2)
    this.setButtonPositionResearchY(0)
    this.setHeroAbility(true)
    this.setLevels(5)
    this.setRequiredLevel(1)
    this.setName(name)
    this.setRequirements("")
    this.setCheckDependencies(false)
    this.setTooltipLearn("("+hotkey+")"+" Learn "+name+" - [|cffffcc00Level %d|r]")
    this.setTooltipLearnExtended("Description missing. Use \"-"+ hotkey +"\" to get the tooltip.")
    for i = 1 to 5
        this.setTooltipNormalExtended(i, "description missing")
        this.setTooltipTurnOffExtended(i, "description missing")
        this.setTooltipNormal(i, "("+hotkey+") "+name+" - [|cffffcc00Level "+i.toString()+"|r]")
        this.setTooltipTurnOff(i, "("+hotkey+") "+name+" - [|cffffcc00Level "+i.toString()+"|r]")
        
    if(hotkey=="Q")
        this..presetHotkey("Q")
            ..setButtonPositionNormalX(0)
            ..setButtonPositionResearchX(0)
            ..setButtonPositionTurnOffX(0)

    if(hotkey=="W")
        this..presetHotkey("W")
            ..setButtonPositionNormalX(1)
            ..setButtonPositionResearchX(1)
            ..setButtonPositionTurnOffX(1)
        return

    if(hotkey=="E")
        this..presetHotkey("E")
            ..setButtonPositionNormalX(2)
            ..setButtonPositionResearchX(2)
            ..setButtonPositionTurnOffX(2)
        return

    if(hotkey=="R")
        this..presetHotkey("R")
            ..setButtonPositionNormalX(3)
            ..setButtonPositionResearchX(3)
            ..setButtonPositionTurnOffX(3)
            ..setRequiredLevel(6)
            ..setLevelSkipRequirement(3)
        return

    if(hotkey=="D")
        this..presetHotkey("D")
            ..setButtonPositionNormalX(2)
            ..setButtonPositionResearchX(2)
            ..setButtonPositionNormalY(1)
            ..setButtonPositionResearchY(1)
            ..setLevelSkipRequirement(4)
        return


abstract class DynamicElement
    function evaluate(int _strength, int _intelligence, real _cooldown, bool _const) returns string
        return ""

class DynamicText extends DynamicElement
    string message

    construct(string message)
        this.message = message

    override function evaluate(int strength, int intelligence, real cooldown, bool const) returns string
        return this.message

class DynamicStrength extends DynamicElement
    real factor
    construct(real factor)
        this.factor = factor

    override function evaluate(int strength, int intelligence, real cooldown, bool const) returns string
        if const
            return C_STR.toColorString()+" (+"+(factor).toSmartString()+"% str)|r "
        else
            return C_STR.toColorString()+" (+"+(strength * factor/100).toSmartString()+")|r "

class DynamicIntelligence extends DynamicElement
    real factor
    construct(real factor)
        this.factor = factor

    override function evaluate(int strength, int intelligence, real cooldown, bool const) returns string
        if const
            return C_INT.toColorString()+" (+"+(factor).toSmartString()+"% int)|r "
        else
            return C_INT.toColorString()+" (+"+(intelligence * factor/100).toSmartString()+")|r "

class DynamicCooldown extends DynamicElement
    construct()

    override function evaluate(int strength, int intelligence, real cooldown, bool const) returns string
        return cooldown.toSmartString()

public class DynamicTooltip
    
    private int abilityTypeId

    private LinkedList<DynamicElement> array[5] normalList
    private LinkedList<DynamicElement> array[5] turnOffList
    private LinkedList<DynamicElement> array[5] learnLevelList
    private LinkedList<DynamicElement> learnList

    private boolean useTurnOff

    private static constant idToTooltip = new HashMap<int,DynamicTooltip>

    private constant replaceIntelligence = new LinkedList<real>
    private constant replaceStrength = new LinkedList<real>
    private AbilityDefinition aDef = null

    function getAbilityTypeId() returns int
        return this.abilityTypeId

    static function getDynamicTooltip(int abilityTypeId) returns DynamicTooltip
        return idToTooltip.get(abilityTypeId)

    construct(int abilityTypeId)
        this.abilityTypeId = abilityTypeId
        this.useTurnOff = false
        idToTooltip.put(abilityTypeId, this)
        if compiletime
            this.aDef = ABIL_DEF_MAP.get(this.abilityTypeId)


    private function evaluateList(LinkedList<DynamicElement> list, int strength, int intelligence, real cooldown, bool const) returns string
        string s = ""
        for elem in list
            s+=elem.evaluate(strength, intelligence, cooldown, const)
        return s

    /*
    **  Dynamic Tooltips are list based, because iterating through a list is a lot faster compared to replacing substrings.
    */
    private function convertToList(string tooltip) returns LinkedList<DynamicElement>
        LinkedList<DynamicElement> list = new LinkedList<DynamicElement>()
        int current = 0
        int i = 0
        let l = tooltip.length()
        while i<l
            string substr = tooltip.charAt(i)
            if(substr=="{")
                list.add(new DynamicText(tooltip.substring(current, i)))
                string referenceType = tooltip.charAt(i+1)
                if(referenceType=="I")
                    int id = S2I(tooltip.charAt(i+2))
                    if replaceIntelligence.size() <= id
                        if compiletime
                            compileError("Replace int list missing entry: "+I2S(id)+ " for tooltip:\""+tooltip+"\"")
                    list.add(new DynamicIntelligence(replaceIntelligence.get(id)))
                else if(referenceType=="S")
                    int id = S2I(tooltip.charAt(i+2))
                    if replaceStrength.size() <= id
                        if compiletime
                            compileError("Replace str list missing entry: "+I2S(id)+ " for tooltip:\""+tooltip+"\"")
                    list.add(new DynamicStrength(replaceStrength.get(id)))
                else if(referenceType=="C")
                    list.add(new DynamicCooldown())
                i+=3
                current = i+1
            i++

        list.add(new DynamicText(tooltip.substring(current)))
        return list

    function getUseTurnOff() returns boolean
        return this.useTurnOff

    function writeData()
        if aDef == null
            return
        if COMPILETIME_TOOLTIPS_LEARN
            aDef.setTooltipLearnExtended(this.evaluateLearnString())

        if COMPILETIME_TOOLTIPS_NORMAL
            for i = 1 to 5
                aDef.setTooltipNormalExtended(i, this.evaluateNormalString(i))
            if this.getUseTurnOff()
                for i = 1 to 5
                    aDef.setTooltipTurnOffExtended(i, this.evaluateTurnOffString(i))

    function setReplaceIntelligence(vararg real replacements)
        for replacement in replacements
            replaceIntelligence.add(replacement)

    function setReplaceStrength(vararg real replacements)
        for replacement in replacements
            replaceStrength.add(replacement)
        

    function setLearnString(string intro, LevelString levelString)
        string newString = intro + "\n"

        for i = 1 to 5
            newString += getLevelString(i) + levelString.getString(i)
            this.learnLevelList[i-1] = this.convertToList(levelString.getString(i))

        destroy levelString
        newString += "\n "
        this.learnList = this.convertToList(newString)


    function setNormalString(boolean showCooldown, int level, string normalString)
        string newString = normalString

        if showCooldown
            if compiletime
                newString += "\n" + "Cooldown: " + "<" + this.getAbilityTypeId().toRawCode() + ",Cool"+level.toString()+">" + " seconds\n "
            else
                newString += "\n" + "Cooldown: " + "{CD}" + " seconds\n "
        else
            newString += "\n "

        this.normalList[level - 1] = this.convertToList(newString)


    function setTurnOffString(boolean showCooldown, int level, string turnOffString)
        this.useTurnOff = true
        string newString = turnOffString

        if showCooldown
            if compiletime
                newString += "\n" + "Cooldown: " + "<" + this.getAbilityTypeId().toRawCode() + ",Cool"+level.toString()+">" + " seconds\n "
            else
                newString += "\n" + "Cooldown: " + "{CD}" + " seconds\n "
        else
            newString += "\n "
            
        this.turnOffList[level - 1] = this.convertToList(newString)


    
    function evaluateLearnStringLevel(int level, int strength, int intelligence, bool const) returns string
        return this.evaluateList(this.learnLevelList[level-1], strength, intelligence, -1, const)

    function evaluateLearnString(int strength, int intelligence, bool const) returns string
        return this.evaluateList(this.learnList, strength, intelligence, -1, const)

    function evaluateNormalString(int level, int strength, int intelligence, real cooldown, bool const) returns string
        string ret = ""
        if level != 0
            ret = this.evaluateList(this.normalList[level-1], strength, intelligence, cooldown, const)
        return ret

    function evaluateTurnOffString(int level, int strength, int intelligence, real cooldown, bool const) returns string
        string ret = ""
        if level != 0
            ret = this.evaluateList(this.turnOffList[level-1], strength, intelligence, cooldown, const)
        return ret

    // Overloaded functions:

    function evaluateLearnStringLevel(int level) returns string
        return evaluateLearnStringLevel(level, 100, 100, true)

    function evaluateLearnStringLevel(unit whichUnit) returns string
        return evaluateLearnStringLevel(whichUnit.getAbilityLevel(this.abilityTypeId), whichUnit.getStr(), whichUnit.getInt(), false)

    function evaluateLearnStringLevel(unit whichUnit, int level) returns string
        return evaluateLearnStringLevel(level, whichUnit.getStr(), whichUnit.getInt(), false)


    function evaluateLearnString() returns string
        return evaluateLearnString(100, 100, true)

    function evaluateLearnString(unit whichUnit) returns string
        return evaluateLearnString(whichUnit.getStr(), whichUnit.getInt(), false)


    function evaluateNormalString(int level) returns string
        return evaluateNormalString(level, 100, 100, -1 ,true)

    function evaluateNormalString(unit whichUnit) returns string
        let level = whichUnit.getAbilityLevel(this.abilityTypeId)
        return evaluateNormalString(level, whichUnit.getStr(), whichUnit.getInt(), BlzGetUnitAbilityCooldown(whichUnit, this.abilityTypeId, level), false)

    function evaluateNormalString(unit whichUnit, int level) returns string
        return evaluateNormalString(level, whichUnit.getStr(), whichUnit.getInt(), BlzGetUnitAbilityCooldown(whichUnit, this.abilityTypeId, level), false)


    function evaluateTurnOffString(int level) returns string
        return evaluateTurnOffString(level, 100, 100, -1, true)

    function evaluateTurnOffString(unit whichUnit) returns string
        let level = whichUnit.getAbilityLevel(this.abilityTypeId)
        return evaluateTurnOffString(level, whichUnit.getStr(), whichUnit.getInt(), BlzGetUnitAbilityCooldown(whichUnit, this.abilityTypeId, level), false)

    function evaluateTurnOffString(unit whichUnit, int level) returns string
        return evaluateTurnOffString(level, whichUnit.getStr(), whichUnit.getInt(), BlzGetUnitAbilityCooldown(whichUnit, this.abilityTypeId, level), false)




