package HeroObjectEditing

import UtilityFunctions
import LinkedList
import General
import AbilityObjEditing
import public ObjectEditingPreset
import public ObjectIds
import public ObjectIdGenerator

/*
You cannot add learnable abilities to hero with code, it must be done with object data.
Hero skills will have specific abilityIds:

A+SpecialCharacter+Hero+Hotkey

SpecialCharacter: Z,Y,..
Anything that is not normally used in ability ids

Hero: Different for every hero: 0-9, a-z, A-Z
Means 62 heroes per special character.

PQWER


*/

public constant CHANNELING_SPELL = "|cffffcc00Channeling Spell:|r|n"

public constant C_STR = color(255, 187, 102)
public constant C_INT = color(102, 187, 255)


public interface LevelString
    function getString(int level) returns string

public function real.str() returns string
    return this.toInt().toString()

public function int.str() returns string
        return this.toString()

public function AbilityDefinition.setLearnString(string intro, LevelString levelString)
    string learnString = intro+"|n"
    for i = 1 to 5
        learnString += getLevelString(i) + levelString.getString(i)

    this.setTooltipLearnExtended(learnString +"|n ")

    destroy levelString


public function AbilityDefinition.setDescriptionString(boolean showCooldown, int lvl, string description)
    if showCooldown
        this.setTooltipNormalExtended(lvl, description+ "|n" + "Cooldown: " + "<" + this.getNewId().toRawCode() + ",Cool"+lvl.toString()+">" + "|n ")
    else
        this.setTooltipNormalExtended(lvl, description+ "|n ")

public function getLevelString(int level) returns string
    return " |n|cffffcc00Level "+level.toString()+"|r - "

public function int.getBonusString() returns string
    if(this==0)
        return " "
    return " (+"+this.toString()+") "

public function real.getBonusString() returns string
    if(this==0)
        return " "
    return " (+"+this.toInt().toString()+") "

public function int.getBonusString(color c) returns string
    if(this==0)
        return " "
    return c.toColorString()+" (+"+this.toString()+")|r "

public function real.getBonusString(color c) returns string
    if(this==0)
        return " "
    return c.toColorString()+" (+"+this.toInt().toString()+")|r "

public enum TargetType
    INSTANT
    UNIT
    POINT
    UNIT_OR_POINT
    AREA

public function AbilityDefinitionIllidanChannel.setupChannel(TargetType targetType, string orderId)
    for lvl = 1 to 5
        this
            ..setOptions(lvl, 1)
            ..setFollowThroughTime(lvl, 0)
            ..setDisableOtherAbilities(lvl, false)
            ..setBaseOrderID(lvl, orderId)
            ..setArtDuration(lvl, 0)

        if targetType == TargetType.INSTANT
            this.setTargetType(lvl, 0)
        else if targetType == TargetType.UNIT
            this.setTargetType(lvl, 1)
        else if targetType == TargetType.POINT
            this.setTargetType(lvl, 2)
        else if targetType == TargetType.UNIT_OR_POINT
            this.setTargetType(lvl, 3)
        else if targetType == TargetType.AREA
            this.setTargetType(lvl, 2)
            this.setOptions(lvl, 3)

public function AbilityDefinition.setupIcon(string name)
        string sNormal = name
        string sLearn

        if name.length() < 20 or not name.startsWith("ReplaceableTextures")
            sNormal = "ReplaceableTextures\\CommandButtons\\" + sNormal
        if not name.endsWith(".blp")
            sNormal += ".blp"

            
        if name.startsWith("PAS")
            sLearn = "ReplaceableTextures\\CommandButtons\\BTN" + name.substring(3) + ".blp"
        else
            sLearn = sNormal




        this.setIconResearch(sLearn)
        this.setIconNormal(sNormal)

public function AbilityDefinition.setupWithHotKey(string name, string hotkey)
    this.presetHotkey(hotkey)
    this.setButtonPositionNormalY(2)
    this.setButtonPositionTurnOffY(2)
    this.setButtonPositionResearchY(0)
    this.setHeroAbility(true)
    this.setLevels(5)
    this.setRequiredLevel(1)
    this.setName(name)
    this.setRequirements("")
    this.setCheckDependencies(false)
    this.setTooltipLearn("("+hotkey+")"+" Learn "+name+" - [|cffffcc00Level %d|r]")
    this.setTooltipLearnExtended("<description missing>")
    for i = 1 to 5
        this.setTooltipNormalExtended(i, "<description missing>")
        this.setTooltipNormal(i, "("+hotkey+") "+name+" - [|cffffcc00Level "+i.toString()+"|r]")
        
    if(hotkey=="Q")
        this..presetHotkey("Q")
            ..setButtonPositionNormalX(0)
            ..setButtonPositionResearchX(0)
            ..setButtonPositionTurnOffX(0)

    if(hotkey=="W")
        this..presetHotkey("W")
            ..setButtonPositionNormalX(1)
            ..setButtonPositionResearchX(1)
            ..setButtonPositionTurnOffX(1)
        return

    if(hotkey=="E")
        this..presetHotkey("E")
            ..setButtonPositionNormalX(2)
            ..setButtonPositionResearchX(2)
            ..setButtonPositionTurnOffX(2)
        return

    if(hotkey=="R")
        this..presetHotkey("R")
            ..setButtonPositionNormalX(3)
            ..setButtonPositionResearchX(3)
            ..setButtonPositionTurnOffX(3)
            ..setRequiredLevel(6)
            ..setLevelSkipRequirement(3)
        return

    if(hotkey=="D")
        this..presetHotkey("D")
            ..setButtonPositionNormalX(2)
            ..setButtonPositionResearchX(2)
            ..setButtonPositionNormalY(1)
            ..setButtonPositionResearchY(1)
            ..setLevelSkipRequirement(4)
        return

    print("!")

public function bonus(int statValue, real atHundred) returns string
    return (atHundred*statValue/100).toString()

public function string.evaluateIntelligence(LinkedList<real> replacers, int intelligence) returns string
    var result = this
    var i = 0
    for dynamicInteger in replacers
        result = result.replace("{I" + i.toString() + "}", C_INT.toColorString()+" (+"+(intelligence * dynamicInteger/100).toSmartString()+")|r " )
        i++
    return result

public function string.evaluateStrength(LinkedList<real> replacers, int strength) returns string
    var result = this
    var i = 0
    for dynamicInteger in replacers
        result = result.replace("{S" + i.toString() + "}", C_STR.toColorString()+" (+"+(strength * dynamicInteger/100).toSmartString()+")|r ")
        i++
    return result

public function string.evaluateBonus(LinkedList<real> replaceStrength, int strength, LinkedList<real> replaceIntelligence, int intelligence) returns string
    return this.evaluateStrength(replaceStrength, strength).evaluateIntelligence(replaceIntelligence, intelligence)
    
public class DynamicTooltip
    
    private int abilityTypeId
    private string array[5] normalString
    private string learnString

    private constant replaceIntelligence = new LinkedList<real>
    private constant replaceStrength = new LinkedList<real>

    function getAbilityTypeId() returns int
        return this.abilityTypeId

    construct(int abilityTypeId)
        this.abilityTypeId = abilityTypeId

    function setReplaceIntelligence(vararg real replacements)
        for replacement in replacements
            replaceIntelligence.add(replacement)

    function setReplaceStrength(vararg real replacements)
        for replacement in replacements
            replaceStrength.add(replacement)

    function format(vararg string replacements)
        var result = this.learnString
        var i = 0
        for replacement in replacements
            result = result.replace("{N" + i.toString() + "}", replacement)
            i++
        this.learnString = result

        for j=1 to 5
            result = this.normalString[j]
            i = 0
            for replacement in replacements
                result = result.replace("{N" + i.toString() + "}", replacement)
                i++
            this.normalString[j] = result



    function setLearnString(string intro, LevelString levelString)
        this.learnString = intro + "|n"

        for i = 1 to 5
            this.learnString += getLevelString(i) + levelString.getString(i)

        destroy levelString
        this.learnString += "|n "

    function evaluateLearnString(unit whichUnit) returns string
        return this.learnString.evaluateBonus(replaceStrength, whichUnit.getStr(), replaceIntelligence, whichUnit.getInt())

    function setNormalString(boolean showCooldown, int level, string normalString)
        this.normalString[level-1] = normalString

        if showCooldown
            this.normalString[level - 1] += "|n" + "Cooldown: " + "<" + this.getAbilityTypeId().toRawCode() + ",Cool"+level.toString()+">" + "|n "
        else
            this.normalString[level - 1] += "|n "

    function evaluateNormalString(unit whichUnit) returns string
        let lvl = whichUnit.getAbilityLevel(this.abilityTypeId)
        string ret = ""
        if lvl != 0
            ret = this.normalString[lvl-1].evaluateBonus(replaceStrength, whichUnit.getStr(), replaceIntelligence, whichUnit.getInt())
        return ret
