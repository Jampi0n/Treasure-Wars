package HeroControl

import PlayerControl
import HashMap
import GameTimer
import HeroType
import Upgrades
import TimerUtils
import ClosureTimers
import Execute
import ErrorHandling

constant HP_PER_LEVEL = 15
constant STRENGTH_BONUS = 45

constant int array ASSIST_BOUNTY = [0, 60, 40, 30, 24]
constant int array KILL_BOUNTY = [240, 180, 160, 150, 144]

public function delayInit(real maxDelay, CallbackSingle cb)
    doAfter(GetRandomReal(1, maxDelay), cb)

public class Hero

    static constant assistDuration = 10.

    private CPlayer owner
    private HeroType heroType
    private unit hero
    private integer level
    private static constant onDamageTrigger = CreateTrigger()
    private static constant onDeathTrigger = CreateTrigger()
    private static constant onLevelUpTrigger = CreateTrigger()
    private static string array assistName
    protected static Hero array heroes
    private static constant unitToHero = new HashMap<unit,Hero>
    private constant assistMap = new HashMap<player,real>
    private player lastAssistant = null
    private trigger onSpellCastTrigger
    private timer reviveTimer
    private timerdialog reviveWindow
    private boolean firstTeam

    private int array [5] skillIds

    private real array [4] defaultCooldown
    //modifies each cooldown seperately
    private real array [4] cooldownMod

    //when gold or xp is shared, their values are mostly non integer. To avoid rounding errors, the remainder will be stored here.
    private real sharedXp = 0

    private unit heroGlow = null

    protected static function classInit()
        onDamageTrigger.addAction(function onDamageStatic)
        onDeathTrigger.addAction(function onDeathStatic)
        onLevelUpTrigger.addAction(function onLevelUpStatic)

        CreateTrigger()
            ..addAction(() -> (begin
                let heroUnit = GetTriggerUnit()
                let hero = unitToHero.get(heroUnit)
                if hero != null
                    for i = 0 to 3
                        hero.defaultCooldown[i] = BlzGetAbilityCooldown(hero.skillIds[i], hero.toUnit().getAbilityLevel(hero.skillIds[i]))
                    hero.updateCooldowns()

            end))
            ..registerAnyUnitEvent(EVENT_PLAYER_HERO_SKILL)


    function setup()
        firstTeam = this.owner.getId() <= HERO_PLAYER_TEAM_1_LAST

        this.heroType = HeroType.getHeroType(this.hero.getTypeId())
            ..updateTooltipsStr(this.hero)
            ..updateTooltipsInt(this.hero)
        let upgradePlayer = owner.getPlayer()

        this.skillIds[0] = this.heroType.getAbilityId(AbilitySlot.Q)
        this.skillIds[1] = this.heroType.getAbilityId(AbilitySlot.W)
        this.skillIds[2] = this.heroType.getAbilityId(AbilitySlot.E)
        this.skillIds[3] = this.heroType.getAbilityId(AbilitySlot.R)
        this.skillIds[4] = this.heroType.getAbilityId(AbilitySlot.PASSIVE)

        for i = 0 to 3
            this.cooldownMod[i] = 0
            this.defaultCooldown[i] = 0

        execute( -> this.heroType.initialize())
        
        unitToHero.put(this.hero, this)
        heroes[this.owner.getId()] = this
        onDamageTrigger.registerUnitEvent(this.hero, EVENT_UNIT_DAMAGED)
        onDeathTrigger.registerUnitEvent(this.hero, EVENT_UNIT_DEATH)
        onLevelUpTrigger.registerUnitEvent(this.hero, EVENT_UNIT_HERO_LEVEL)
        onSpellCastTrigger = this.heroType.getOnSpellCastTrigger()
        onSpellCastTrigger.registerUnitEvent(this.hero, EVENT_UNIT_SPELL_EFFECT)

        let wrapper = this.hero.wrapper()

        this.reviveTimer = getTimer()
        ..setData(this castTo int)
        this.reviveWindow = CreateTimerDialog(this.reviveTimer)
        TimerDialogDisplay(this.reviveWindow, false)
        TimerDialogSetTitle(this.reviveWindow, this.owner.getPlayer().getFullColoredName())

        if this.heroType.getBonusCalculation() != null
            wrapper.setBonusCalculation(this.heroType.getBonusCalculation())
        //print("setup completed: "+this.hero.getName())

        if this.heroType.getUsesHeroGlow()
            this.heroGlow = createUnit(this.hero.getOwner(), 'n00H', this.hero.getPos(), angle(0))

            

            doPeriodically(0.03, (CallbackPeriodic _) ->(begin
                if this.hero.isAlive()
                    this.heroGlow.setXY(this.hero.getPos())
            end))

        wrapper.addStatAbsoluteBonus(Stat.MR, this.heroType.getBase(Stat.MR) * 1 )
        wrapper.addStatAbsoluteBonus(Stat.HR, this.heroType.getBase(Stat.HR) * 3 )

        wrapper.addStatAbsoluteBonus(Stat.HP, this.heroType.getBase(Stat.HP) * 15 + HP_PER_LEVEL )
        wrapper.addStatAbsoluteBonus(Stat.MP, this.heroType.getBase(Stat.MP) * 10 )

        //upgrade level 1
        SetPlayerTechResearched(upgradePlayer, UPG_AD , this.heroType.getBase(Stat.AD))
        SetPlayerTechResearched(upgradePlayer, UPG_AR , this.heroType.getBase(Stat.AR))
        SetPlayerTechResearched(upgradePlayer, UPG_AS , this.heroType.getBase(Stat.AS))

        SetPlayerTechResearched(upgradePlayer, UPG_MS , this.heroType.getBase(Stat.MS))
        this.hero.updateDefaultMovementSpeed()

        SetHeroStr(this.hero, this.heroType.getBase(Stat.STR) + STRENGTH_BONUS , true)
        SetHeroAgi(this.hero, this.heroType.getBase(Stat.AGI), true)
        SetHeroInt(this.hero, this.heroType.getBase(Stat.INT), true)

        wrapper.updateBaseStatsHero()

        for int i = 0 to 10
            wrapper.updateTotalStatBonus(i castTo Stat)

        if this.heroType.getOnCreateFunction() != null
            this.heroType.getOnCreateFunction().onCreate(this)


        this.heroType.updateTooltipsStr(this.hero)
        this.heroType.updateTooltipsInt(this.hero)


    construct(CPlayer p, int unitId, vec2 pos, angle facing )
        objectCount++
        this.hero = createUnit(p.getPlayer(), unitId, pos, facing)
        this.owner = p
        this.level = 1
        this.setup()
    
    construct(unit u)
        objectCount++
        this.hero = u
        this.level = GetHeroLevel(this.hero)
        this.owner = u.getOwner().getCPlayer()
        this.setup()

    function toUnit() returns unit
        return this.hero

    function upgrade()
        int newLvl = GetHeroLevel(this.hero)
        player upgradePlayer = this.owner.getPlayer()
        let wrapper = this.hero.wrapper()
        SetPlayerTechResearched(upgradePlayer, UPG_AD , this.heroType.calculateStat(Stat.AD, newLvl))
        SetPlayerTechResearched(upgradePlayer, UPG_AR , this.heroType.calculateStat(Stat.AR, newLvl))
        SetPlayerTechResearched(upgradePlayer, UPG_AS , this.heroType.calculateStat(Stat.AS, newLvl))
        

        wrapper.addStatAbsoluteBonus(Stat.HP, (this.heroType.calculateStat(Stat.HP, newLvl) - this.heroType.calculateStat(Stat.HP, this.level)) * 15 )
        //upgrade bug
        //SetPlayerTechResearched(upgradePlayer, UPG_HP , this.heroType.calculateStat(Stat.HP, newLvl))
        //SetPlayerTechResearched(upgradePlayer, UPG_HR , this.heroType.calculateStat(Stat.HR, lvl))
        
        wrapper.addStatAbsoluteBonus(Stat.MP, (this.heroType.calculateStat(Stat.MP, newLvl) - this.heroType.calculateStat(Stat.MP, this.level)) * 10 )
        //upgrade bug
        //SetPlayerTechResearched(upgradePlayer, UPG_MP , this.heroType.calculateStat(Stat.MP, newLvl))
        //SetPlayerTechResearched(upgradePlayer, UPG_MR , this.heroType.calculateStat(Stat.MR, lvl))
        
        wrapper.addStatAbsoluteBonus(Stat.MR, (this.heroType.calculateStat(Stat.MR, newLvl) - this.heroType.calculateStat(Stat.MR, this.level)) * 1 )
        wrapper.addStatAbsoluteBonus(Stat.HR, (this.heroType.calculateStat(Stat.HR, newLvl) - this.heroType.calculateStat(Stat.HR, this.level)) * 3 )

        wrapper.addStatAbsoluteBonus(Stat.HP, (newLvl - this.level) * HP_PER_LEVEL )

        SetPlayerTechResearched(upgradePlayer, UPG_MS , this.heroType.calculateStat(Stat.MS, newLvl))
        this.hero.updateDefaultMovementSpeed()

        //this.hero.wrapper().addStatAbsoluteBonus(Stat.MS, this.heroType.calculateStat(Stat.MS, lvl) - this.heroType.calculateStat(Stat.MS, lvl-1))

        SetHeroStr(this.hero, this.heroType.calculateStat(Stat.STR, newLvl) + STRENGTH_BONUS , true)
        SetHeroAgi(this.hero, this.heroType.calculateStat(Stat.AGI, newLvl), true)
        SetHeroInt(this.hero, this.heroType.calculateStat(Stat.INT, newLvl), true)

        wrapper.updateBaseStatsHero()

        for int i = 0 to 10
            wrapper.updateTotalStatBonus(i castTo Stat)

        this.level = newLvl
        
    function onLevelUp()
        this.upgrade()

    static function onLevelUpStatic()
        unitToHero.get( GetTriggerUnit()).onLevelUp()
    
    //handles assists
    function addAssistDuration(player p)
        this.assistMap.put(p,getElapsedGameTime() + assistDuration)
        this.lastAssistant = p

    function onDamage()
        let damageSource = GetEventDamageSource().getOwner()
        let damageSourceId = damageSource.getId()
        if damageSource != null
            if firstTeam
                if damageSourceId >= HERO_PLAYER_TEAM_2_FIRST and damageSourceId <= HERO_PLAYER_TEAM_2_LAST
                    this.addAssistDuration(damageSource)
            else
                if damageSourceId >= HERO_PLAYER_TEAM_1_FIRST and damageSourceId <= HERO_PLAYER_TEAM_1_LAST
                    this.addAssistDuration(damageSource)

    static function onDamageStatic()
        unitToHero.get( GetTriggerUnit()).onDamage()

    function revive()
        TimerDialogDisplay(this.reviveWindow, false)
        vec2 pos
        if this.owner.getTeam() == Team.TEAM1
            pos = gg_rct_GreenAltar.getCenter()+vec2(128,128)
        else
            pos = gg_rct_BrownAltar.getCenter()-vec2(128,128)
            
        this.hero.revive(pos, true)
        this.hero.setMana(this.hero.getMaxMana())
        this.upgrade()
        if this.heroGlow != null
            this.heroGlow
                ..setXY(pos)
                ..setVertexColor(colorA(255, 255, 255, 255))


    static function reviveStatic()
        let t = GetExpiredTimer()
        let hero = t.getData() castTo Hero
        t.pause()
        hero.revive()

    //handles death
    function onDeath()
        //indetify true killer

        if this.heroGlow != null
            this.heroGlow.setVertexColor(colorA(255, 255, 255, 0))

        let owningPlayer = this.owner.getPlayer()

        player killingPlayer = GetKillingUnit().getOwner()
        int killingId = killingPlayer.getId()

        //replace killer with last assistant, if killer is not an enemy hero
        boolean replaceKiller = false

        //team 1 hero dies
        if firstTeam
            //killer not in team 2
            if killingId < HERO_PLAYER_TEAM_2_FIRST or killingId > HERO_PLAYER_TEAM_2_LAST
                replaceKiller = true
        //team 2 hero dies
        else
            //killer not in team 1
            if killingId < HERO_PLAYER_TEAM_1_FIRST or killingId > HERO_PLAYER_TEAM_1_LAST
                replaceKiller = true

        let gameTime = getElapsedGameTime()
        let assistList = new LinkedList<player>

        string assistString

        let enemyList = CPlayer.getEnemyHeroPlayers(this.owner.getTeam())
        int i = 0
        for assistantC in enemyList
            let assistant = assistantC.getPlayer()
            let time = this.assistMap.get(assistant)
            if(time > gameTime and assistant!=killingPlayer)
                if not replaceKiller or lastAssistant != assistant
                    assistList.add(assistant)
                    assistName[i] = assistant.getFullColoredName()
                    i++


        let assistants = assistList.size()

        //creating the assist string with correct use of <,> and <and>
        if assistants > 2
            if assistants == 3
                assistString = assistName[0]+", "+assistName[1]+" and "+assistName[2]
            else // 4
                assistString = assistName[0]+", "+assistName[1]+", "+assistName[2]+" and "+assistName[3]
        else
            if assistants == 1
                assistString = assistName[0]
            else //2
                assistString = assistName[0]+" and "+assistName[1]


        boolean unknownKiller = false

        if replaceKiller
            if assistMap.get(lastAssistant) > gameTime
                killingPlayer = lastAssistant
                killingId = killingPlayer.getId()
            else
                if killingId != TEAM_PLAYER_TEAM_1 and killingId != TEAM_PLAYER_TEAM_2 and killingId != PLAYER_NEUTRAL_AGGRESSIVE
                    unknownKiller = true

        if  not unknownKiller
            if killingId <= HERO_PLAYER_TEAM_2_LAST
                int assistBounty = ASSIST_BOUNTY[assistants]

                int killBounty = KILL_BOUNTY[assistants]

                if assistants == 0
                    printTimed("{0} was killed by {1} for {2} gold.".format(
                        owningPlayer.getFullColoredName(), 
                        killingPlayer.getFullColoredName(),
                        "|cffffcc00"+killBounty.toString()+"|r"
                    ), 10)

                else
                    printTimed("{0} was killed by {1} for {3} gold. {2} get{5} {4} gold for helping.".format(
                        owningPlayer.getFullColoredName(), 
                        killingPlayer.getFullColoredName(),
                        assistString,
                        "|cffffcc00"+killBounty.toString()+"|r",
                        "|cffffcc00"+assistBounty.toString()+"|r",
                        assistants==1?"s":""
                    ), 10)

                        


                doAfter(0.1) ->
                    for p in assistList
                        p.getCPlayer()
                            ..addGoldEx(assistBounty)
                            ..addAssist()
                    killingPlayer.getCPlayer()
                        ..addGoldEx(killBounty)
                        ..addHeroKill(killingId <= HERO_PLAYER_TEAM_2_LAST)
                
                    let xp = (this.level + 5) * 10.
                    for cPLayer in CPlayer.getEnemyHeroPlayers(this.owner.getTeam())
                        let hero = Hero.getHero(cPLayer)
                        if hero != null
                            hero.addXp(xp)

                    destroy assistList
            else
                printTimed("{0} was killed by {1}.".format(
                    owningPlayer.getFullColoredName(), 
                    killingPlayer.getName()
                ), 10)

                destroy assistList
        else
            printTimed("{0} died.".format(
                owningPlayer.getFullColoredName()
            ), 10)
            destroy assistList

        

        
        this.reviveTimer
            ..start(10.+level*2, function reviveStatic)
        if GetLocalPlayer() == owningPlayer
            TimerDialogDisplay(this.reviveWindow, true)

        doAfter(0.1) ->
            this.owner.addDeath()

    static function onDeathStatic()
        unitToHero.get( GetTriggerUnit()).onDeath()

    //kills the Hero without specifying the killer
    function killHero()
        this.hero.kill()
    
    //kills the Hero, the killer is specified
    function killHero(unit killer)
        this.hero.setHP(1)
        killer.damageTarget(this.hero, 10)

    //kills the Hero. If the killing player is a HeroPlayer,
    //the corresponding Hero is the killer
    //else the Hero is killed wihtout a killer.
    function killHero(CPlayer killer)
        if(killer.getPlayerType() == PlayerType.HERO)
            this.killHero(heroes[(killer).getId()].hero)
        else
            this.killHero()

    function toString() returns string
        return "Hero "+ this.owner.getPlayer().getName() +"="+this.hero.getName()

    function getHeroType() returns HeroType
        return this.heroType

    function getLevel() returns int
        return this.level

    static function getHero(unit whichUnit) returns Hero
        return unitToHero.get(whichUnit)

    static function getHero(int index) returns Hero
        if index < 0 or index > MAX_HERO_COUNT - 1
            printWarning("Index does not exist")
            return null
        return heroes[index]
    
    static function getHero(CPlayer owner) returns Hero
        return getHero(owner.getId())

    static function getHero(player owner) returns Hero
        return getHero(owner.getId())


    function addXp(real xp)
        this.sharedXp += xp
        let intXp = this.sharedXp.toInt()
        this.hero.addXp(intXp, true)
        this.sharedXp -= intXp

    //once the game is over
    function destroyTimer()
        TimerDialogDisplay(this.reviveWindow, false)
        DestroyTimerDialog(this.reviveWindow)
        this.reviveTimer.release()

    /*
    **  Changing cooldowns of morph abilities crashes the game, once they are used.
    */
    function updateCooldowns()
        /*let heroUnit = this.toUnit()
        for i = 0 to 3
            real newCd = (this.defaultCooldown[i]+this.cooldownMod[i]) / (1.0+0.01*heroUnit.wrapper().getStatTotalValue(Stat.CD))
            BlzSetUnitAbilityCooldown(heroUnit, skillIds[i], GetUnitAbilityLevel(heroUnit, skillIds[i]), newCd )  */
        /*
        this.getHeroType()
            ..updateTooltipsStr(heroUnit)
            ..updateTooltipsInt(heroUnit)*/

        
function displayTooltip(int pId, AbilitySlot slot)
    let hero = Hero.getHero(pId)
    if hero != null
        let abilityTypeId = hero.getHeroType().getAbilityId(slot)
        let tooltip = DynamicTooltip.getDynamicTooltip(abilityTypeId)
        if tooltip != null
            printTimedToPlayer("\n\n"+ GetObjectName(abilityTypeId) + "\n" + tooltip.evaluateLearnString(hero.toUnit())+"\n", 20, players[pId])
        else
            printTimedToPlayer("this skill does not have a dynamic tooltip; read the skill description instead", 5, players[pId])

function displayTooltipLevelShort(int pId, AbilitySlot slot, int level)
    
    if 1 <= level and level <= 5
        let hero = Hero.getHero(pId)
        if hero != null
            let abilityTypeId = hero.getHeroType().getAbilityId(slot)
            let tooltip = DynamicTooltip.getDynamicTooltip(abilityTypeId)
            if tooltip != null
                printTimedToPlayer("\n\n"+ GetObjectName(abilityTypeId) + " (" +level.toString()+ ") - " + tooltip.evaluateLearnStringLevel(hero.toUnit(), level)+"\n", 20, players[pId])
            else
                printTimedToPlayer("this skill does not have a dynamic tooltip; read the skill description instead", 5, players[pId])

function displayTooltipLevelFull(int pId, AbilitySlot slot, int level)
    if 1 <= level and level <= 5
        let hero = Hero.getHero(pId)
        if hero != null
            let abilityTypeId = hero.getHeroType().getAbilityId(slot)
            let tooltip = DynamicTooltip.getDynamicTooltip(abilityTypeId)
            if tooltip != null
                printTimedToPlayer("\n\n"+ GetObjectName(abilityTypeId) + " (" +level.toString()+ ") - " + tooltip.evaluateNormalString(hero.toUnit(), level)+"\n", 20, players[pId])
            else
                printTimedToPlayer("this skill does not have a dynamic tooltip; read the skill description instead", 5, players[pId])


function charToAbilitySlot(string char) returns AbilitySlot
    AbilitySlot ret = AbilitySlot.PASSIVE
    string s = char.toUpperCase()
    if s == "Q"
        ret = AbilitySlot.Q
    else if s == "W"
        ret = AbilitySlot.W
    else if s == "E"
        ret = AbilitySlot.E
    else if s == "R"
        ret = AbilitySlot.R
    else if s == "D"
        ret = AbilitySlot.PASSIVE
    else
        error("unknown skill slot: "+char)

    return ret


init
    Hero.classInit()

    //for i = HERO_PLAYER_TEAM_1_FIRST to HERO_PLAYER_TEAM_2_LAST
        /*CreateTrigger()
            ..registerPlayerChatEvent(players[i], "-ql", true)
            ..registerPlayerChatEvent(players[i], "-wl", true)
            ..registerPlayerChatEvent(players[i], "-el", true)
            ..registerPlayerChatEvent(players[i], "-rl", true)
            ..registerPlayerChatEvent(players[i], "-pl", true)
            ..addAction() ->
                displayTooltip(GetTriggerPlayer().getId(), charToAbilitySlot(GetEventPlayerChatString().substring(1, 2)))*/

        /*CreateTrigger()
            ..registerPlayerChatEvent(players[i], "-q", true)
            ..registerPlayerChatEvent(players[i], "-w", true)
            ..registerPlayerChatEvent(players[i], "-e", true)
            ..registerPlayerChatEvent(players[i], "-r", true)
            ..registerPlayerChatEvent(players[i], "-d", true)
            ..addAction() ->
                displayTooltip(GetTriggerPlayer().getId(), charToAbilitySlot(GetEventPlayerChatString().substring(1, 2)))*/
            /*
            ..addAction() ->
                let slot = charToAbilitySlot(GetEventPlayerChatString().substring(1, 2))
                let hero = Hero.getHero(GetTriggerPlayer())
                let abilityTypeId = hero.getHeroType().getAbilityId(slot)
                displayTooltipLevelFull(GetTriggerPlayer().getId(), slot, hero.toUnit().getAbilityLevel(abilityTypeId))*/

        /*CreateTrigger()
            ..registerPlayerChatEvent(players[i], "-q", false)
            ..registerPlayerChatEvent(players[i], "-w", false)
            ..registerPlayerChatEvent(players[i], "-e", false)
            ..registerPlayerChatEvent(players[i], "-r", false)
            ..registerPlayerChatEvent(players[i], "-p", false)
            ..addAction() ->
                displayTooltipLevelFull(GetTriggerPlayer().getId(), charToAbilitySlot(GetEventPlayerChatString().substring(1, 2)), S2I(GetEventPlayerChatString().substring(2,3)))*/
                

                