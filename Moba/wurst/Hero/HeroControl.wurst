package HeroControl

import PlayerControl
import HashMap
import GameTimer
import HeroType
import Upgrades
import Stats
import ErrorHandling

public class Hero

    static constant assistDuration = 10.

    private CPlayer owner
    private HeroType heroType
    private unit hero
    private integer level
    private static constant onDamageTrigger = CreateTrigger()
    private static constant onDeathTrigger = CreateTrigger()
    private static constant onLevelUpTrigger = CreateTrigger()
    protected static Hero array heroes
    private static constant unitToHero = new HashMap<unit,Hero>
    private static constant assistMap = new HashMap<CPlayer,real>
    private trigger onSpellCastTrigger
    private int array[11] statsAbsoluteBonus //default = 0
    private real array[11] statsRelativeBonus //default = 0.00
    private int array[11] statsTotalBonus //default = 0

    protected static function classInit()
        onDamageTrigger.addAction(function onDamageStatic)
        onDeathTrigger.addAction(function onDeathStatic)
        onLevelUpTrigger.addAction(function onLevelUpStatic)

    function setup()
        unitToHero.put(this.hero, this)
        heroes[this.owner.getId()] = this
        onDamageTrigger.registerUnitEvent(this.hero, EVENT_UNIT_DAMAGED)
        onDeathTrigger.registerUnitEvent(this.hero, EVENT_UNIT_DEATH)
        onLevelUpTrigger.registerUnitEvent(this.hero, EVENT_UNIT_HERO_LEVEL)
        this.heroType = HeroType.getHeroType(this.hero.getTypeId())
        onSpellCastTrigger = this.heroType.getOnSpellCastTrigger()
        onSpellCastTrigger.registerUnitEvent(this.hero, EVENT_UNIT_SPELL_EFFECT)

        for int i = 0 to 10
            statsAbsoluteBonus[i] = 0
            statsRelativeBonus[i] = 0

        //print("setup completed: "+this.hero.getName())

        this.upgrade()

    construct(CPlayer p, int unitId, vec2 pos, angle facing )
        this.hero = createUnit(p.getPlayer(), unitId, pos, facing)
        this.owner = p
        this.level = 1
        this.setup()
    
    construct(unit u)
        this.hero = u
        this.level = GetHeroLevel(this.hero)
        this.owner = u.getOwner().getCPlayer()
        this.setup()

    function toUnit() returns unit
        return this.hero

    //
    function upgrade()
        integer lvl = this.level
        player upgradePlayer = this.owner.getPlayer()
        SetPlayerTechResearched(upgradePlayer, UPG_AD , this.heroType.calculateStat(Stat.AD, lvl))
        SetPlayerTechResearched(upgradePlayer, UPG_AR , this.heroType.calculateStat(Stat.AR, lvl))
        SetPlayerTechResearched(upgradePlayer, UPG_AS , this.heroType.calculateStat(Stat.AS, lvl))
        SetPlayerTechResearched(upgradePlayer, UPG_HP , this.heroType.calculateStat(Stat.HP, lvl))
        SetPlayerTechResearched(upgradePlayer, UPG_HR , this.heroType.calculateStat(Stat.HR, lvl))
        SetPlayerTechResearched(upgradePlayer, UPG_MP , this.heroType.calculateStat(Stat.MP, lvl))
        SetPlayerTechResearched(upgradePlayer, UPG_MR , this.heroType.calculateStat(Stat.MR, lvl))
        SetPlayerTechResearched(upgradePlayer, UPG_MS , this.heroType.calculateStat(Stat.MS, lvl))
        SetHeroStr(this.hero, this.heroType.calculateStat(Stat.STR, lvl), true)
        SetHeroAgi(this.hero, this.heroType.calculateStat(Stat.WP, lvl), true)
        SetHeroInt(this.hero, this.heroType.calculateStat(Stat.INT, lvl), true)
        
    function onLevelUp()
        this.level = GetHeroLevel(this.hero)
        this.upgrade()

    static function onLevelUpStatic()
        unitToHero.get( GetTriggerUnit()).onLevelUp()
    
    //handles assists
    function addAssistDuration(CPlayer p)
        assistMap.put(p,getElapsedGameTime() + assistDuration)

    function onDamage()
        CPlayer damageSource
        damageSource = GetEventDamageSource().getOwner().getCPlayer()
        if( damageSource.getTeam()!=this.owner.getTeam())
            this.addAssistDuration(damageSource)

    static function onDamageStatic()
        unitToHero.get( GetTriggerUnit()).onDamage()

    //handles death
    function onDeath()
        for i = 0 to 15
            CPlayer assistant = getCPlayer(i)
            if(assistMap.get(assistant) > getElapsedGameTime() )
                print("assist:"+assistant.toString())


    static function onDeathStatic()
        unitToHero.get( GetTriggerUnit()).onDeath()

    //kills the Hero without specifying the killer
    function killHero()
        this.hero.kill()
    
    //kills the Hero, the killer is specified
    function killHero(unit killer)
        this.hero.setHP(1)
        killer.damageTarget(this.hero, 10)

    //kills the Hero. If the killing player is a HeroPlayer,
    //the corresponding Hero is the killer
    //else the Hero is killed wihtout a killer.
    function killHero(CPlayer killer)
        if(killer.getPlayerType() == PlayerType.HERO)
            this.killHero(heroes[(killer).getId()].hero)
        else
            this.killHero()

    function toString() returns string
        return "Hero "+ this.owner.getPlayer().getName() +"="+this.hero.getName()

    function getHeroType() returns HeroType
        return this.heroType

    static function getHero(unit whichUnit) returns Hero
        return unitToHero.get(whichUnit)

    static function getHero(int index) returns Hero
        if index < 0 or index > 9
            error("Index does not exist")
            return null
        return heroes[index]
    
    static function getHero(CPlayer owner) returns Hero
        return getHero(owner.getId())

    static function getHero(player owner) returns Hero
        return getHero(owner.getId())

    /**
    Updates the total stat bonus based on base stat, absolute stat bonus and relative stat bonus
    **/
    private function updateTotalStatBonus(Stat whichStat)
        int stat = whichStat.toInt()
        this.statsTotalBonus[stat] = (this.heroType.calculateStat(whichStat, this.level) + this.statsAbsoluteBonus[stat]) * (1. + this.statsRelativeBonus[stat]).toInt()

    /**
    Sets the absolute stat bonus and updates the total bonus.
    **/
    function setStatAbsoluteBonus(Stat whichStat, int newValue)
        int stat = whichStat.toInt()
        this.statsAbsoluteBonus[stat] = newValue
        updateTotalStatBonus(whichStat)


    /**
    Sets the relative stat bonus and updates the total bonus.
    **/
    function setStatRelativeBonus(Stat whichStat, real newValue)
        int stat = whichStat.toInt()
        this.statsRelativeBonus[stat] = newValue
        updateTotalStatBonus(whichStat)

    function addStatAbsoluteBonus(Stat whichStat, int plusValue)
        this.setStatAbsoluteBonus(whichStat, this.statsAbsoluteBonus[whichStat.toInt()] + plusValue)

    function addStatRelativeBonus(Stat whichStat, real plusValue)
        this.setStatRelativeBonus(whichStat, this.statsRelativeBonus[whichStat.toInt()] + plusValue)
        
init
    Hero.classInit()