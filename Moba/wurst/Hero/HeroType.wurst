package HeroType

import HashMap
import OnAttack
import public Stats
import public Buff
import public BuffTypeConfig
import public General
import public UnitWrapper
import public HeroObjectEditing
import public Assets
import public AbilityObjEditing
import public LinkedList
import initlater HeroControl

public interface OnCreateFunction
    function onCreate(Hero hero)

public interface OnInitFunction
    function onInit()

public constant HERO_MAX_LEVEL = 25

public class HeroType

    private int array[STAT_COUNT] statsBase
    private int array[STAT_COUNT] statsMax

    private static constant unitIdToHeroType = new HashMap<integer, HeroType>
    private int unitId
    private trigger onSpellCastTrigger = CreateTrigger()
    private OnAttackFunctionAdvanced onAttack = null
    private CalculateTotalBonus bonusCalculation = null

    private OnCreateFunction onCreateFunction = null
    private OnInitFunction onInitFunction = null

    private boolean useHeroGlow = false

    static HeroType array heroTypes 
    static int heroTypeCount = 0

    private string icon = "ReplaceableTextures\\CommandButtons\\BTNSelectHeroOn.blp"

    construct(int id, string icon)
        objectCount++
        unitIdToHeroType.put(id, this)
        this.unitId = id
        for i = 0 to STAT_COUNT-1
            statsBase[i]=0
            statsMax[i]=0

        string realIcon = icon
        if icon.length() < 20 or not icon.startsWith("ReplaceableTextures")
            realIcon = "ReplaceableTextures\\CommandButtons\\" + realIcon
        if not icon.endsWith(".blp")
            realIcon += ".blp"

        this.icon = realIcon


        heroTypes[heroTypeCount] = this
        heroTypeCount++

    //only initialize every herotype once
    function initialize()
        if getOnInitFunction() != null
            getOnInitFunction().onInit()
            setOnInitFunction(null)

    function addMorph(int id)
        unitIdToHeroType.put(id, this)

    function setBase(Stat stat, integer value)
        this.statsBase[stat.toInt()] = value

    function getBase(Stat stat) returns integer
        return this.statsBase[stat.toInt()]

    function setMax(Stat stat, integer value)
        this.statsMax[stat.toInt()] = value

    function getMax(Stat stat) returns integer
        return this.statsMax[stat.toInt()]

    function setStat(Stat stat, integer min, integer max)
        this.statsBase[stat.toInt()] = min
        this.statsMax[stat.toInt()] = max

    function getUnitId() returns integer
        return this.unitId

    function onSpellCast()
        this.onSpellCastTrigger.execute()

    function onAttack(unit attacker, unit target, boolean isActive, boolean advanced)
        if this.onAttack != null
            this.onAttack.onAttack(attacker, target, isActive, advanced)

    function setOnAttackFunc(OnAttackFunctionAdvanced onAttack)
        this.onAttack = onAttack

    function addOnSpellCastFunc(code onSpellCast)
        onSpellCastTrigger.addAction(onSpellCast)    

    function getOnSpellCastTrigger() returns trigger
        return this.onSpellCastTrigger

    /** Calulates the stat of the hero type for a given level */
    function calculateStat(Stat stat, integer level) returns integer
        if level == 0
            return 0

        let result = getBase(stat) + ( ( this.getMax(stat) - getBase(stat) ) *( (level - 1 )/(HERO_MAX_LEVEL - 1) ) ).toInt()
        //print(stat.toString()+" -> "+result.toString())
        return result
    
    function setBonusCalculation(CalculateTotalBonus bonusCalculation)
        this.bonusCalculation = bonusCalculation

    function getBonusCalculation() returns CalculateTotalBonus
        return this.bonusCalculation

    static function getHeroType(integer unitId) returns HeroType
        return unitIdToHeroType.get(unitId)

    function useHeroGlow()
        this.useHeroGlow = true

    function getUsesHeroGlow() returns boolean
        return this.useHeroGlow

    /**
        HeroType and Hero are created. Now certain hero specific code can be run.
    **/
    function setOnCreateFunction(OnCreateFunction onCreate)
        this.onCreateFunction = onCreate

    function getOnCreateFunction() returns OnCreateFunction
        return this.onCreateFunction

    /**
        Initializes the HeroType object. Used to setup all triggers and the stats. If the herotype is unused this is not run and saves a lot of memory.
    **/
    function setOnInitFunction(OnInitFunction onInit)
        this.onInitFunction = onInit

    function getOnInitFunction() returns OnInitFunction
        return this.onInitFunction

    function getIcon() returns string
        return this.icon