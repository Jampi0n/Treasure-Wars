package SeaDruid

//3

import HeroType
import Knockback2d
import Missile
import TimerUtils
import ClosureTimers
import Fx
import SoundUtils

public constant HERO_SEA_DRUID = 'H00K'
constant THIS_HERO = HERO_SEA_DRUID
constant THIS_ID = 3
constant THIS_BUTTON_POS = 3 //button pos from 0 to 11
constant THIS_ICON = "BTNSeaDruid"
HeroType heroType = null

constant ABILITY_ANCIENT_KNOWLEDGE = 'AZ3P'
constant ABILITY_TIDAL_FURY = 'AZ3Q'
constant ABILITY_GIANT_FISH = 'AZ3W'
constant ABILITY_MANA_SHIELD = 'AZ3E'
constant ABILITY_RITUAL_OF_THE_SEAS = 'AZ3R'


constant real array ANCIENT_KNOWLEDGE_HP_BONUS = [6, 5.5, 5, 4.5, 4]
constant real array ANCIENT_KNOWLEDGE_MP_BONUS = [12, 11, 10, 9, 8]


function ancientKnowledge(int abilityId)
    if compiletime
        createNoEffectAbiltiy(abilityId)
            ..setupIcon("PASSeaDruidism")
            ..setupWithHotKey("Ancient Knowledge", "D")

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(0)
    tooltip.setSummary("Increases hit points by a portion of his maximum mana points and vice versa.")
    tooltip.setLearnString("Increases his maximum hit points for a portion of his maximum mana ponits and increases his maximum mana points by "+
    "a portion of his maximum hit points.", (int lvl) -> (begin
        return "1 hit point for every {0} mana points, 1 mana point for every {1} hit points".format(
        ANCIENT_KNOWLEDGE_HP_BONUS[lvl-1].toExactString(), ANCIENT_KNOWLEDGE_MP_BONUS[lvl-1].toExactString())
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(false, lvl, ("Increases maximum hit points by 1 for every {0} points of his maximum mana points and "+
        "increases his maximum mana points by 1 for every {1} points of his maximum hit points.").format(
            ANCIENT_KNOWLEDGE_HP_BONUS[lvl-1].toExactString(), ANCIENT_KNOWLEDGE_MP_BONUS[lvl-1].toExactString())
        )
    addDynamicTooltipIntelligence(heroType, tooltip)

constant real array TIDAL_FURY_HIT_DMG = [75, 110, 145, 180, 215]
constant real TIDAL_FURY_HIT_DMG_BONUS = 120

constant real array TIDAL_FURY_WAVE_DMG = [20, 35, 50, 65, 80]
constant real TIDAL_FURY_WAVE_DMG_BONUS = 60

constant real TIDAL_FURY_AOE = 400


function tidalFury(int abilityId)

    if compiletime
        int array MANA = [100, 110, 120, 130, 140]
        real array COOLDOWN = [8, 8, 8, 8, 8]

        let aDef = new AbilityDefinitionPitLordHowlofTerror(abilityId)
            ..setAnimationNames("attack,slam")
            ..setupIcon(Icons.bTNCrushingWave)
            ..setupWithHotKey("Tidal Fury", "Q")
            ..setArtCaster("")

        for lvl = 1 to 5
            aDef
                ..setCooldown(lvl, COOLDOWN[lvl-1])
                ..setManaCost(lvl, MANA[lvl-1])
                ..setTargetsAllowed(lvl, "none")

    let tooltip = new DynamicTooltip(abilityId)
    tooltip
        ..setReplaceStrength(TIDAL_FURY_HIT_DMG_BONUS)
        ..setReplaceIntelligence(TIDAL_FURY_WAVE_DMG_BONUS)
    tooltip.setLearnString("Knocks nearby enemy units back, dealing damage and releasing a crushing wave for every enemy unit hit. The wave deals damage to every enemy it passes through.", (int lvl) -> (begin
        return "{0}{S0} knockback damage, {1}{I0} wave damage.".format(
        TIDAL_FURY_HIT_DMG[lvl-1].str(), TIDAL_FURY_WAVE_DMG[lvl-1].str())
    end))
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Knocks nearby enemy units back, dealing {0}{S0} damage and releasing a crushing wave for every enemy unit hit. The wave deals {1}{I0} damage to every enemy it passes through.".format(
            TIDAL_FURY_HIT_DMG[lvl-1].str(), TIDAL_FURY_WAVE_DMG[lvl-1].str()))
    addDynamicTooltipBoth(heroType, tooltip)


constant real array FISH_DAMAGE = [100, 140, 180, 220, 260]
constant real FISH_DAMAGE_BONUS = 140

constant int array FISH_ATTACK_SPEED = [30, 40, 50, 60, 70]
constant int array FISH_MOVE_SPEED = [30, 40, 50, 60, 70]

constant real array FISH_SLOW_DURATION = [3, 3.5, 4, 4.5, 5]

constant real array FISH_AOE = [200, 225, 250, 275, 300]

constant int FISH_SPEED = 1000

constant int FISH_BUFF_ID = compiletime(createAuraBuff("Giant Fish", "This unit was hit by a giant fish; its movement and attack speed are slowed.", "BTNDeepseaMurloc"))
constant int FISH_ABILTIY_ID = compiletime(createNegativeBuffAbility(5, FISH_BUFF_ID, Abilities.stasisTotemTarget, "overhead"))

constant int FISH_ARTILLERY = compiletime(ArtilleryDetection.createArtilleryDummy(0, 0, 50, 3, "Fesh_Final2.mdx", FISH_SPEED, 0.3))

constant SOUND_FISH_IMPACT = new SoundDefinition(Sounds.artilleryCorpseExplodeDeath1, false, true)

BuffType buffFish



function giantFish(int abilityId)

    if compiletime
        int array MANA = [115, 130, 145, 160, 175]
        real array COOLDOWN = [12, 12, 12, 12, 12]
        real array RANGE = [1200, 1200, 1200, 1200, 1200]

        let aDef = new AbilityDefinitionIllidanChannel(abilityId)
            ..setupIcon("BTNDeepseaMurloc")
            ..setupWithHotKey("Giant Fish", "W")
            ..setArtCaster("")
            ..setArtEffect("")
            ..setMissileArt("")
            ..setArtTarget("")
            ..setAnimationNames("spell")
            ..setupChannel(TargetType.AREA, "shockwave", 0.75)

        for lvl = 1 to 5
            aDef
                ..setCooldown(lvl, COOLDOWN[lvl-1])
                ..setManaCost(lvl, MANA[lvl-1])
                ..setCastRange(lvl, RANGE[lvl-1])
                ..setAreaofEffect(lvl, FISH_AOE[lvl-1])

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(FISH_DAMAGE_BONUS)
    tooltip.setLearnString("Throws a giant fish at the target location, damaging and slowing enemies in the area.", (int lvl) -> (begin
        return "{0}{I0} damage, {1}% attack speed. {2}% movement speed, {3} seconds.".format(
            FISH_DAMAGE[lvl-1].str(), FISH_ATTACK_SPEED[lvl-1].str(), FISH_MOVE_SPEED[lvl-1].str(), FISH_SLOW_DURATION[lvl-1].str())
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Throws a giant fish at the target location, dealing {0}{I0} magic damage and slowing attack speed by {1}% and movement speed by {2}% for {3} seconds.".format(
            FISH_DAMAGE[lvl-1].str(), FISH_ATTACK_SPEED[lvl-1].str(), FISH_MOVE_SPEED[lvl-1].str(), FISH_SLOW_DURATION[lvl-1].str()))
    addDynamicTooltipIntelligence(heroType, tooltip)


constant int MANA_SHIELD_BUFF_ID = compiletime(createBasicBuff("Mana Shield", "Uses mana to reduce incoming damage.", Icons.bTNNeutralManaShield, Abilities.manaShieldCaster, "origin"))

public constant real array MANA_SHIELD_REDUCTION = [0.2, 0.3, 0.4, 0.5, 0.6]
public constant real array MANA_PER_DAMAGE = [0.7, 0.7, 0.7, 0.7, 0.7]

public BuffType buffManaShield // the actual effect is in OnAttack


function manaShield(int abilityId)

    if compiletime
        int array MANA = [50, 50, 50, 50, 50]
        real array MANA_PER_SECOND = [8, 11, 14, 17, 20]
        real array COOLDOWN = [5, 5, 5, 5, 5]

        let aDef = new AbilityDefinitionDemonHunterImmolation(abilityId)
            ..setAnimationNames("")
            ..setupIcon(Icons.bTNNeutralManaShield)
            ..setIconTurnOff(Icons.bTNneutralManaShieldOff)
            ..setupWithHotKey("Mana Shield", "E")
            ..setTurnOff("Deactivate Mana Shield", "E")

        for lvl = 1 to 5
            aDef
                ..setCooldown(lvl, COOLDOWN[lvl-1])
                ..setManaCost(lvl, MANA[lvl-1])
                ..setDurationHero(lvl, 1)
                ..setDurationNormal(lvl, 1)
                ..setDamageperInterval(lvl, 0)
                ..setBuffs(lvl, MANA_SHIELD_BUFF_ID.toRawCode()+",BEia")
                ..setManaDrainedperSecond(lvl, MANA_PER_SECOND[lvl-1])
                ..setTargetsAllowed(lvl, "none")

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(0)
    tooltip.setLearnString("Reduces incoming damage at the cost of mana. Also drains mana while activated.", (int lvl) -> (begin
        return "{0}% reduction, {1} mana points per blocked damage point.".format(
            (MANA_SHIELD_REDUCTION[lvl-1]*100).str(), MANA_PER_DAMAGE[lvl-1].toExactString()
        )
    end) )

    for lvl = 1 to 5
        tooltip.setNormalString(false, lvl, "Reduces incoming damage by {0}%, by spending {1} mana points for every blocked point of damage. Also drains mana while activated.".format(
            (MANA_SHIELD_REDUCTION[lvl-1]*100).str(), MANA_PER_DAMAGE[lvl-1].toExactString()
        ))
        tooltip.setTurnOffString(false, lvl, "Deactivate Mana Shield to stop draining mana.")
    addDynamicTooltipIntelligence(heroType, tooltip)



constant real array RITUAL_HP_DRAIN = [70, 100, 130, 160, 190]
constant real array RITUAL_MANA_DRAIN = [30, 45, 60, 75, 90]

constant real RITUAL_HP_DRAIN_BONUS = 120
constant real RITUAL_MANA_DRAIN_BONUS = 60

constant real array RITUAL_AOE = [900, 900, 900, 900, 900]

constant int array RITUAL_WAVE_COUNT = [6, 7, 8, 9, 10]

constant int RITUAL_HP_RATIO = 50
constant int RITUAL_MANA_RATIO = 25


function ritualOfTheSeas(int abilityId)

    if compiletime
        int array MANA = [250, 300, 350, 400, 450]
        real array COOLDOWN = [120, 120, 120, 120, 120]

        let aDef = new AbilityDefinitionKeeperoftheGroveTranquility(abilityId)
            ..setAnimationNames("spell,channel")
            ..setupIcon("BTNGuardianofTheSea")
            ..setupWithHotKey("Ritual of the Seas", "R")

        for lvl = 1 to 5
            aDef
                ..setCooldown(lvl, COOLDOWN[lvl-1])
                ..setManaCost(lvl, MANA[lvl-1])
                ..setDurationHero(lvl, RITUAL_WAVE_COUNT[lvl-1]*2 + 0.1)
                ..setDurationNormal(lvl, RITUAL_WAVE_COUNT[lvl-1]*2 + 0.1)
                ..setEffects(lvl, "X000")
                ..setTargetsAllowed(lvl, "none")

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(RITUAL_HP_DRAIN_BONUS, RITUAL_MANA_DRAIN_BONUS)
    tooltip.setLearnString(CHANNELING_SPELL + "Sends out magical energy, that drains hit points and mana from nearby enemies.|nThe Sea Druid gets {0}% of the hit points and {1}% of the mana drained from enemy heroes.".format(
        RITUAL_HP_RATIO.str(), RITUAL_MANA_RATIO.str()), (int lvl) -> (begin
        return "{0}{I0} damage, {1}{I1} mana, lasts for {2} waves.".format(
            RITUAL_HP_DRAIN[lvl-1].str(), RITUAL_MANA_DRAIN[lvl-1].str(), RITUAL_WAVE_COUNT[lvl-1].str())
    end) )
    
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, CHANNELING_SPELL + "Sends out magical energy, that drain {0}{I0} hit points and {1}{I1} mana from nearby enemies.|nLasts for {2} waves.|nThe Sea Druid gets {3}% of the hit points and {4}% of the mana drained from enemy heroes.".format(
            RITUAL_HP_DRAIN[lvl-1].str(), RITUAL_MANA_DRAIN[lvl-1].str(), RITUAL_WAVE_COUNT[lvl-1].str(), RITUAL_HP_RATIO.str(), RITUAL_MANA_RATIO.str()))
    addDynamicTooltipIntelligence(heroType, tooltip)

function setupStats()
    heroType
        
        ..setStat(Stat.AR, 32, 51)
        ..setStat(Stat.AS, 23, 32)
        ..setStat(Stat.HP, 14, 61)
        ..setStat(Stat.HR, 14, 42)
        ..setStat(Stat.MP, 19, 84)
        ..setStat(Stat.MR, 18, 75)
        ..setStat(Stat.MS, 25, 42)
        ..setStat(Stat.STR, 20, 74)
        ..setStat(Stat.AGI, 35, 59)
        ..setStat(Stat.INT, 13, 47)

function castTidalFury()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)
    let casterPos = caster.getPos()
    group nearby = CreateGroup()
    nearby.enumUnitsInRange(casterPos, TIDAL_FURY_AOE)

    let hitDmg = TIDAL_FURY_HIT_DMG[level-1].bonus(caster.getStr(), TIDAL_FURY_HIT_DMG_BONUS)

    while(not nearby.isEmpty())
        unit target = FirstOfGroup(nearby)
        nearby.removeUnit(target)
        if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(caster.getOwner(), false, true)
            caster.dealDamage(target, hitDmg, ReductionType.PHYSICAL)
            if target.isMovable() and not target.isType(UNIT_TYPE_FLYING)
                Knockback2d.knockback(target, caster.getPos().polarOffset(caster.getPos().angleTo(target.getPos()), 500), 1000)

            new Missile(caster, caster.getPos().withZ(80), 900, caster.getPos().angleTo(target.getPos()), Abilities.crushingWaveMissile)
                ..hitOnce()
                ..setSize(125)
                ..setHitCondition((Missile missile, unit target) -> (begin
                return not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(missile.getOwner().getOwner(), false, true)
            end) )
                ..setHitFunction((Missile missile, unit target) -> (begin
                let missileCaster = missile.getOwner()
                missileCaster.dealDamage(target, (TIDAL_FURY_WAVE_DMG[level-1]).bonus(missileCaster.getInt(), TIDAL_FURY_WAVE_DMG_BONUS), ReductionType.MAGIC)
    
            end) )
                ..setMaxRange(500)
    nearby.destr()

function castGiantFish()
    let caster = GetTriggerUnit()
    ArtilleryDetection.fireArtillery(caster, FISH_ARTILLERY, caster.getPos(), vec2(GetSpellTargetX(), GetSpellTargetY())) (unit detectionUnit, unit caster, int data) ->
        group nearby = CreateGroup()
        let level = caster.getAbilityLevel(ABILITY_GIANT_FISH)
        nearby.enumUnitsInRange(detectionUnit.getPos(), FISH_AOE[level-1])

        let dmg = FISH_DAMAGE[level-1].bonus(caster.getInt(), FISH_DAMAGE_BONUS)

        while(not nearby.isEmpty())
            unit target = FirstOfGroup(nearby)
            nearby.removeUnit(target)
            if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(detectionUnit.getOwner(), false, true)

                caster.dealDamage(target, dmg, ReductionType.MAGIC)
                target.addBuffReduced(caster, FISH_SLOW_DURATION[level-1], buffFish, level)

        nearby.destr()

        let fx = new Fx(detectionUnit.getPos(), Abilities.stampedeMissileDeath)
        fx.setScale(3)
        destroy fx

        SOUND_FISH_IMPACT.playOnPoint(detectionUnit.getPos3Zero()).snd.setVolume(120)
        

function castManaShield()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)
    caster.addBuff(caster, -1, buffManaShield, level)

function castRitualOfTheSea()
    let caster = GetTriggerUnit()
    new RitualOfTheSeas(caster)

class RitualOfTheSeas

    private unit caster
    private int level
    private timer checkTimer
    private int count

    construct(unit caster)
        this.count = 0
        this.caster = caster
        this.level = caster.getAbilityLevel(ABILITY_RITUAL_OF_THE_SEAS)


        this.checkTimer = getTimer()
            ..setData(this castTo int)
            ..startPeriodic(0.1, function updateStatic)

    function update()
        this.count++
        if this.count == 20
            this.count = 0

            this.caster.addEffect("Models\\PsyWave.mdx", "origin").destr()

            group nearby = CreateGroup()
            nearby.enumUnitsInRange(this.caster.getPos(), RITUAL_AOE[level-1])


            let manaDrain = RITUAL_MANA_DRAIN[level-1].bonus(caster.getInt(), RITUAL_MANA_DRAIN_BONUS)
            let hpDrain = RITUAL_HP_DRAIN[level-1].bonus(caster.getInt(), RITUAL_HP_DRAIN_BONUS)

            while(not nearby.isEmpty())
                unit target = FirstOfGroup(nearby)
                nearby.removeUnit(target)
                if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(this.caster.getOwner(), false, true) and target.isVisible(this.caster.getOwner())
                    doAfter(target.getPos().distanceTo(caster.getPos())/1000 , () -> (begin

                        if target.isAlive() and target.wrapper() != null
                            let manaDrained = min( target.getMana(), manaDrain.reduceMagic(target.getWp()))
                            let hpDrained = min( target.getHP(), hpDrain.reduceMagic(target.getWp()))

                            if target.isType(UNIT_TYPE_HERO)
                                caster.healMana(caster, manaDrained * RITUAL_MANA_RATIO/100 )
                                caster.healHP(caster, hpDrained * RITUAL_HP_RATIO/100 )

                            caster.damageMana(target, manaDrain.reduceMagic(target.getWp()), ReductionType.NONE)
                            caster.dealDamage(target, hpDrain, ReductionType.MAGIC)


                    end))
                    
            nearby.destr()

            return

        if this.caster.getCurrentOrder()!= OrderId("tranquility")
            destroy this
            return
    
    static function updateStatic()
        (GetExpiredTimer().getData() castTo RitualOfTheSeas).update()

    ondestroy

        this.checkTimer.release()



    
function retreatAI(HeroAI ai)
    ai.issue("immolation")


function attackAI(HeroAI ai)
    let hero = ai.getHeroUnit()

    ai.issue("unimmolation")

    if hero.getMana()/hero.getMaxMana() > 0.5

        let targetPos = hero.findAreaTarget(800, FISH_AOE[hero.getAbilityLevel(ABILITY_GIANT_FISH)-1], 3)
        if targetPos.getValue() >= 6
            ai.issue("shockwave", targetPos.getPos())

        let g = CreateGroup()
        unit u
        int count = 0
        g.enumUnitsInRange(hero.getPos(), TIDAL_FURY_AOE)
        while(true)
            u = FirstOfGroup(g)
            if u == null
                break
            g.removeUnit(u)
            if u.isTargetable(hero.getOwner(), false, true) and not u.isType(UNIT_TYPE_STRUCTURE)
                if u.isType(UNIT_TYPE_HERO)
                    count += 3
                else
                    count ++
        g.destr()

        if count >= 4
            if ai.issue("howlofterror")
                return

    unit target = hero.findTarget(250, AbilityTargetFocus.ENEMY, AbilityTargetPriority.LOW_HEALTH, null)
    if target.isTargetable(hero.getOwner(), false, true)
        ai.attack(target)

    target = hero.findTarget(500, AbilityTargetFocus.ENEMY, AbilityTargetPriority.LOW_DISTANCE, null)
    if target.isTargetable(hero.getOwner(), false, true)
        ai.attack(target)

function teamFightAI(HeroAI ai)

    let hero = ai.getHeroUnit()

    ai.issue("immolation")


    
    let g = CreateGroup()
    unit u
    int count = 0
    g.enumUnitsInRange(hero.getPos(), TIDAL_FURY_AOE)
    while(true)
        u = FirstOfGroup(g)
        if u == null
            break
        g.removeUnit(u)
        if u.isTargetable(hero.getOwner(), false, true)
            if u.isType(UNIT_TYPE_HERO)
                count++

    if count != 0
        if ai.issue("howlofterror")
            return


    count = 0
    g.enumUnitsInRange(hero.getPos(), RITUAL_AOE[hero.getAbilityLevel(ABILITY_RITUAL_OF_THE_SEAS)-1])
    while(true)
        u = FirstOfGroup(g)
        if u == null
            break
        g.removeUnit(u)
        if u.isTargetable(hero.getOwner(), false, true)
            if u.isType(UNIT_TYPE_HERO)
                count++

    g.destr()
    if count > 1
        if ai.issue("tranquility")
            return

        
    unit target = ai.getTeamFightTarget()
    if target.isTargetable(hero.getOwner(), false, true)
        ai.issue("shockwave", target.getPos())
        if not ai.getAttacking()
            ai.attack(target)

@compiletime
function setupTooltips()

    ancientKnowledge(ABILITY_ANCIENT_KNOWLEDGE)
    tidalFury(ABILITY_TIDAL_FURY)
    giantFish(ABILITY_GIANT_FISH)
    manaShield(ABILITY_MANA_SHIELD)
    ritualOfTheSeas(ABILITY_RITUAL_OF_THE_SEAS)
    createHeroButton(THIS_ID, THIS_BUTTON_POS, THIS_ICON)


function initHeroType()
    setupStats()
    onCast(ABILITY_TIDAL_FURY, () -> castTidalFury())
    onCast(ABILITY_GIANT_FISH, () -> castGiantFish())
    onCast(ABILITY_MANA_SHIELD, () -> castManaShield())
    onCast(ABILITY_RITUAL_OF_THE_SEAS, () -> castRitualOfTheSea())
    heroType..setSkillBuild("QWEQQWEQWQEWEWE")
    ..addItem(ITEM_ID_HEAVY_BOOTS)
    ..addItem(ITEM_ID_BLESSED_GOBLET)
    ..addItem(ITEM_ID_BRACER_OF_POWER)
    ..addItem(ITEM_ID_SPIKED_ARMOR)
    ..addItem(ITEM_ID_ARCANE_BLADE)
    ..addItem(ITEM_ID_ARCANE_SHIELD)
    ..setBonusCalculation((UnitWrapper whichWrapper, Stat whichStat) -> (begin
        let lvl = whichWrapper.toUnit().getAbilityLevel(ABILITY_ANCIENT_KNOWLEDGE)
        if lvl == 0
            UnitWrapper.defaultCalcualtion.calculate(whichWrapper, whichStat)
        else
            if whichStat == Stat.HP or whichStat == Stat.MP //if hp or mana was changed, calculate special values.
                let hp = Stat.HP.toInt()
                let mp = Stat.MP.toInt()
                UnitWrapper.defaultCalcualtion.calculate(whichWrapper, Stat.HP)
                UnitWrapper.defaultCalcualtion.calculate(whichWrapper, Stat.MP)
                let hpBonus = whichWrapper.statsTotalBonus[hp]
                let mpBonus = whichWrapper.statsTotalBonus[mp]
                //print("hpBonus = "+hpBonus.toString()+", mpBonus = "+mpBonus.toString())
                whichWrapper.statsTotalBonus[hp] = hpBonus + ((1/ANCIENT_KNOWLEDGE_HP_BONUS[lvl-1]) * (mpBonus + whichWrapper.getStatBaseValue(Stat.MP)) ).toInt()
                whichWrapper.statsTotalBonus[mp] = mpBonus + ((1/ANCIENT_KNOWLEDGE_MP_BONUS[lvl-1]) * (hpBonus + whichWrapper.getStatBaseValue(Stat.HP)) ).toInt()
                //print("newHpBonus = "+whichWrapper.statsTotalBonus[hp].toString()+", newHpBonus = "+whichWrapper.statsTotalBonus[mp].toString())
                whichWrapper.applyTotalStatBonus(Stat.HP)
                whichWrapper.applyTotalStatBonus(Stat.MP)
            else //else calculate default values
                UnitWrapper.defaultCalcualtion.calculate(whichWrapper, whichStat)
    end))
    delayInit(5) ->
        heroType
            ..setRetreatAI((HeroAI ai) -> (retreatAI(ai)))
            ..setAttackAI((HeroAI ai) -> (attackAI(ai)))
            ..setTeamFightAI((HeroAI ai) -> (teamFightAI(ai)))

        buffFish = new BuffType(false, true)

        var abilityList = new LinkedList<int>
            ..add(FISH_ABILTIY_ID)
        buffFish.setup(abilityList, FISH_BUFF_ID)

        buffFish.addFirstFunction( (Buff whichBuff) -> (begin
            let level = whichBuff.getLevel()
            whichBuff.getTarget().wrapper()
                ..addStatAbsoluteBonus(Stat.AS, -FISH_ATTACK_SPEED[level - 1])
                ..addStatRelativeBonus(Stat.MS, -FISH_MOVE_SPEED[level - 1]*10)
        end))

        buffFish.addEndFunction( (Buff whichBuff) -> (begin
            let level = whichBuff.getLevel()
            whichBuff.getTarget().wrapper()
                ..addStatAbsoluteBonus(Stat.AS, FISH_ATTACK_SPEED[level - 1])
                ..addStatRelativeBonus(Stat.MS, FISH_MOVE_SPEED[level - 1]*10)
        end))

        buffManaShield = new BuffType(true, true) // the actual effect is in OnAttack
            ..setPeriodicTime(0.1)
        buffManaShield.addPeriodicFunction( (Buff whichBuff) -> (begin
            let caster = whichBuff.getCaster()
            if not caster.hasAbility(MANA_SHIELD_BUFF_ID)
                whichBuff.dispel()
        end))

function createHeroType(Hero hero)
    CreateTrigger()
    ..addAction(() -> (begin
        GetTriggerUnit().wrapper()
            ..updateTotalStatBonus(Stat.HP)
            ..updateTotalStatBonus(Stat.MP)
    end))
    ..registerUnitEvent(hero.toUnit(), EVENT_UNIT_HERO_SKILL)

init
    heroType = new HeroType(THIS_HERO, THIS_ICON, THIS_ID, true)
    ..setOnInitFunction(() -> initHeroType())
    ..setOnCreateFunction((Hero hero) -> createHeroType(hero))

    setupTooltips()
    addButtonToTavern(THIS_ID, THIS_BUTTON_POS, heroType, 0)
      

   