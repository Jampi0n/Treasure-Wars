package Destroyer

//13

import HeroType
import BuffObjEditing

public constant HERO_DESTROYER = 'H00R'
HeroType heroType

public constant ABILITY_DEATH_FRENZY = 'AY3P'
constant ABILITY_PREY = 'AY3Q'
constant ABILITY_IMMOLATION = 'AY3W'
constant ABILITY_SERPENT_WARD = 'AY3E'
constant ABILITY_BIG_BAD_VOODOO = 'AY3R'

unit heroDestroyer = null

public constant real array DEATH_FRENZY_BONUS = [25, 35, 45, 55, 65]

@compiletime
function passive()
    let aDef = createNoEffectAbiltiy(ABILITY_DEATH_FRENZY)
        ..setupIcon("PASbloodpresence")
        ..setupWithHotKey("Death Frenzy", "D")
        ..setLearnString("The Destroyer deals increased damage from all sources, the more injured he becomes.", (int lvl) -> (begin
            return "up to {0}% increased damage.".format(
                DEATH_FRENZY_BONUS[lvl-1].str())
        end) )

    for lvl = 1 to 5
        aDef
            ..setDescriptionString(false, lvl, "The Destroyer deals up to {0}% increased damage from all sources, the more injured he becomes".format( 
                DEATH_FRENZY_BONUS[lvl-1].str())
            )


constant real array PREY_BONUS_DAMAGE = [25, 40, 55, 70, 85]
constant real PREY_DURATION = 8
constant real PREY_DURATION_BONUS = 2.5
constant int array PREY_MOVE_SPEED = [100, 150, 200, 250, 300]

BuffType buffPreyTarget
BuffType buffPreyCaster

constant int PREY_TARGET_BUFF_ID = compiletime(createAuraBuff("Prey", "This unit is under the effect of Prey; it is revealed and takes increased damage from the caster.", "BTNBlood_eye"))
constant int PREY_TARGET_ABILITY_ID = compiletime(createNegativeBuffAbility(5, PREY_TARGET_BUFF_ID, Abilities.curseTarget, "overhead"))


constant int PREY_CASTER_BUFF_ID = compiletime(createAuraBuff("Prey", "This unit has casted Prey; it's movement speed is increased while moving towards the target.", "BTNBlood_eye"))
constant int PREY_CASTER_ABILITY_ID = compiletime(createNegativeBuffAbility(5, PREY_CASTER_BUFF_ID, "", ""))

@compiletime
function abilityQ()
    int array MANA = [90, 95, 100, 105, 110]
    real array COOLDOWN = [16, 16, 16, 16, 16]
    real array RANGE = [2000, 2000, 2000, 2000, 2000]

    let aDef = new AbilityDefinitionIllidanChannel(ABILITY_PREY)
        ..setupIcon("BTNBlood_eye")
        ..setupWithHotKey("Prey", "Q")
        ..setAnimationNames("spell")
        ..setupChannel(TargetType.UNIT, "channel", 0.5)

    for lvl = 1 to 5
        aDef
            ..setCooldown(lvl, COOLDOWN[lvl-1])
            ..setManaCost(lvl, MANA[lvl-1])
            ..setCastRange(lvl, RANGE[lvl-1])
            ..setTargetsAllowed(lvl, "ground,enemy,nonancient,neutral,organic,air")


constant real array IMMOLATION_DAMAGE = [20, 30, 40, 50, 60]
constant real IMMOLATION_DAMAGE_BONUS = 30

constant int array IMMOLATION_ATTACK_SPEED = [15, 20, 25, 30, 35]
constant real array IMMOLATION_MANA_DRAIN = [5, 6, 7, 8, 9]

BuffType buffImmolation
constant IMMOLATION_BUFF_ID = compiletime(BUFF_ID_GEN.next())


@compiletime
function abilityW()
    int array MANA = [25, 25, 25, 25, 25]
    real AOE = 250
    
    new BuffDefinition(IMMOLATION_BUFF_ID, 'BEim')
        ..setTooltipNormalExtended(1, "This unit has Immolation; it attacks faster and nearby enemy units will take damage over time.")
        ..setArtSpecial(1, Abilities.immolationRedDamage)
        ..setArtTarget(1, Abilities.immolationREDTarget)

    let aDef = new AbilityDefinitionDemonHunterImmolation(ABILITY_IMMOLATION)
        ..setupIcon(Icons.bTNImmolationOn)
        ..setIconTurnOff(Icons.bTNImmolationOff)
        ..setupWithHotKey("Immolation", "W")
        ..setTurnOff("Deactivate Immolation","W")
        ..setAnimationNames("spell")

    for lvl = 1 to 5
        aDef
            ..setCooldown(lvl, 0)
            ..setManaCost(lvl, MANA[lvl-1])
            ..setAreaofEffect(lvl, AOE)
            ..setManaDrainedperSecond(lvl, IMMOLATION_MANA_DRAIN[lvl-1])
            ..setBuffs(lvl, IMMOLATION_BUFF_ID.toRawCode()+",BEia")
            ..setTargetsAllowed(lvl, "ground,enemy,nonancient,neutral,organic,air")


constant int array SERPEND_WARD_HP = [0, 150, 300, 450, 600]
constant real SERPENT_WARD_DURATION = 30
constant real array SERPENT_POISON_DURATION = [2, 2.25, 2.5, 2.75, 3]

constant int SERPENT_POISON_ARMOR = 1
constant int SERPENT_POISON_SLOW = 2

constant int array SERPENT_STACKS = [3, 4, 5, 6, 7]

BuffType buffSerpentPoison
constant SERPENT_POISON_BUFF_ID = compiletime(createAuraBuff("Serpent Poison", "This unit was hit by Serpent Ward; it is slowed and has reduced armor.", Icons.bTNSerpentWard))
constant SERPENT_POISON_ABILITY_ID = compiletime(createNegativeBuffAbility(5, SERPENT_POISON_BUFF_ID, Abilities.poisonStingTarget, "chest"))

@compiletime
function abilityE()
    int array MANA = [60, 60, 60, 60, 60]
    real array COOLDOWN = [6, 6, 6, 6, 6]
    real array RANGE = [500, 500, 500, 500, 500]


    let aDef = new AbilityDefinitionIllidanChannel(ABILITY_SERPENT_WARD)
        ..setAnimationNames("spell")
        ..setupIcon(Icons.bTNSerpentWard)
        ..setupWithHotKey("Serpent Ward", "E")
        ..setupChannel(TargetType.POINT, "ward", 0.5)

    for lvl = 1 to 5
        aDef
            ..setCastRange(lvl, RANGE[lvl-1])
            ..setCooldown(lvl, COOLDOWN[lvl-1])
            ..setManaCost(lvl, MANA[lvl-1])


        
constant real array BBV_DAMAGE = [50, 65, 80, 95, 110]
constant real BBV_DAMAGE_BONUS = 80
constant real BBV_DURATION = 5

constant integer BUFF_ID_ON_DEATH_COIL = compiletime(createDummyBuff())

@compiletime
function abilityR()
    int array MANA = [160, 170, 180, 190, 200]
    real array COOLDOWN = [110, 110, 110, 110, 110]

    let aDef = new AbilityDefinitionKeeperoftheGroveTranquility(ABILITY_BIG_BAD_VOODOO)
        ..setLevels(5)
        ..setupIcon(Icons.bTNBigBadVoodooSpell)
        ..setupWithHotKey("Death Pact", "R")
        ..setAnimationNames("spell,channel")


    for lvl = 1 to 5
        aDef
            ..setCooldown(lvl, COOLDOWN[lvl-1])
            ..setManaCost(lvl, MANA[lvl-1])
            ..setTargetsAllowed(lvl, "none")
            ..setDurationHero(lvl, BBV_DURATION)
            ..setDurationNormal(lvl, BBV_DURATION)
            ..setEffects(lvl, "X000")


function setupStats()
    heroType
        //..setStat(Stat.AD, 5, 40)
        ..setStat(Stat.AR, 11, 27)
        ..setStat(Stat.AS, 14, 48)
        ..setStat(Stat.HP, 11, 39)
        ..setStat(Stat.HR, 11, 29)
        ..setStat(Stat.MP, 17, 33)
        ..setStat(Stat.MR, 15, 29)
        ..setStat(Stat.MS, 0, 0)
        ..setStat(Stat.STR, 14, 71)
        ..setStat(Stat.AGI, 8, 23)
        ..setStat(Stat.INT, 9, 33)

function onDamage()


function onAttack(unit attacker, unit target, boolean _isActive)

    let prey = BuffList.getBuffOfType(target, buffPreyTarget)
    if prey != null
        let level = prey.getLevel()
        attacker.dealDamage(target, PREY_BONUS_DAMAGE[level-1], ReductionType.PHYSICAL)


function onSpellCast()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)

    if(spellId==ABILITY_PREY)
        let target = GetSpellTargetUnit()
        target.addBuffReduced(caster, PREY_DURATION.bonus(caster.getInt(), PREY_DURATION_BONUS), buffPreyTarget, level)
        caster.addBuff(caster, -1, buffPreyCaster, level)

    if(spellId==ABILITY_IMMOLATION)
        caster.addBuff(caster, -1, buffImmolation, 1)

    if(spellId==ABILITY_SERPENT_WARD)

    

    if(spellId==ABILITY_BIG_BAD_VOODOO)

        


function retreatAI(HeroAI _ai)

function attackAI(HeroAI _ai)

function teamFightAI(HeroAI _ai)
            

function setupTooltips()
    DynamicTooltip tooltip = new DynamicTooltip(ABILITY_PREY)
    tooltip.setLearnString("Marks the target enemy unit as his prey. The target will be revealed, the Destroyer will deal bonus damage against the target and have increased movmement speed when moving towards the target. Lasts {0}{I0} seconds.".format(PREY_DURATION.toExactString()), (int lvl) -> (begin
        return "{0} damage, {1}% movement speed".format(
            PREY_BONUS_DAMAGE[lvl-1].str(),
            PREY_MOVE_SPEED[lvl-1].str())
    end) )
    
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Marks the target enemy unit as his prey. The target will be revealed, the Destroyer will deal {1} bonus damage against the target and have move {2}% faster when moving towards the target. Lasts {0}{I0} seconds.".format(
            PREY_DURATION.str(),
            PREY_BONUS_DAMAGE[lvl-1].str(),
            PREY_MOVE_SPEED[lvl-1].str())
        )
    tooltip.setReplaceIntelligence(PREY_DURATION_BONUS)
    heroType.addDynamicTooltipIntelligence(tooltip)

    tooltip = new DynamicTooltip(ABILITY_IMMOLATION)
    tooltip.setLearnString("Engulfs the Destroyer in flames, damaging nearby enemies and the Destroyer himself. Also increases the Destroyer's attack speed.|nDrains mana until deactivated.", (int lvl) -> (begin
        return "{0}{I0} damage per second, {1}% attack speed.".format(
        IMMOLATION_DAMAGE[lvl-1].str(),
        IMMOLATION_ATTACK_SPEED[lvl-1].str())
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Engulfs the Destroyer in flames, dealing {0}{I0} damage per second to nearby enemies and the Destroyer himself. Also increases the Destroyer's attack speed by {1}%.|nDrains mana until deactivated.".format(
            IMMOLATION_DAMAGE[lvl-1].str(),
            IMMOLATION_ATTACK_SPEED[lvl-1].str()))
    tooltip.setReplaceIntelligence(IMMOLATION_DAMAGE_BONUS)
    heroType.addDynamicTooltipIntelligence(tooltip)

    tooltip = new DynamicTooltip(ABILITY_SERPENT_WARD)
    tooltip.setLearnString("Summons an immobile serpentine ward to attack nearby enemies for {0} seconds. Attacked targets have their armor and movement speed reduced.".format(SERPENT_WARD_DURATION.toExactString()), (int lvl) -> (begin
        return "{0} armor, {1}% movement speed per attack, {2} seconds.".format(
        (SERPENT_POISON_ARMOR*SERPENT_STACKS[lvl-1]).str(),
        (SERPENT_POISON_SLOW*SERPENT_STACKS[lvl-1]).str(),
        SERPENT_POISON_DURATION[lvl-1].toExactString())
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Summons an immobile serpentine ward to attack nearby enemies for {3} seconds. Attacked targets have their armor reduced by {0} and movement speed by {1}% for {2} seconds per attack.".format(
            (SERPENT_POISON_ARMOR*SERPENT_STACKS[lvl-1]).str(),
            (SERPENT_POISON_SLOW*SERPENT_STACKS[lvl-1]).str(),
            SERPENT_POISON_DURATION[lvl-1].toExactString(),
            SERPENT_WARD_DURATION.toExactString()))

    tooltip.setReplaceIntelligence(0)
    heroType.addDynamicTooltipIntelligence(tooltip)

    tooltip = new DynamicTooltip(ABILITY_BIG_BAD_VOODOO)
    tooltip.setLearnString("Deals void damage to all enemy heroes while channeling.".format(BBV_DURATION.toExactString()), (int lvl) -> (begin
        return "{0}{I0} damage per second.".format(
        BBV_DAMAGE[lvl-1].str())
    end) )
    
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Deals {0}{I0} void damage per second to all enemy heroes while channeling.".format(
            BBV_DAMAGE[lvl-1].str()))
    tooltip.setReplaceIntelligence(BBV_DAMAGE_BONUS)
    heroType.addDynamicTooltipIntelligence(tooltip)

function initHeroType()
    setupStats()
    setupTooltips()
    heroType.setSkillBuild("QWQWQWQWQWEEEEE")
    delayInit(5) ->
        heroType
            ..setOnAttackFunc((unit attacker, unit target, boolean isActive, boolean advanced) -> onAttack(attacker, target, isActive))
            ..addOnSpellCastFunc(function onSpellCast)
            ..setRetreatAI((HeroAI ai) -> (retreatAI(ai)))
            ..setAttackAI((HeroAI ai) -> (attackAI(ai)))
            ..setTeamFightAI((HeroAI ai) -> (teamFightAI(ai)))
            ..addItem(ITEM_ID_HEAVY_BOOTS)
            ..addItem(ITEM_ID_BLOOD_SWORD)
            ..addItem(ITEM_ID_INFERNAL_BOW)
            ..addItem(ITEM_ID_RUNIC_ARMOR)
            ..addItem(ITEM_ID_SACRIFICIAL_DAGGER)
            ..addItem(ITEM_ID_CURSED_SWORD)

        var abilityList = new LinkedList<int>
        ..add(PREY_TARGET_ABILITY_ID)
        buffPreyTarget = new BuffType(false, true)
        buffPreyTarget.setup(abilityList, PREY_TARGET_BUFF_ID)
        buffPreyTarget.setPeriodicTime(0.2)

        buffPreyTarget.addPeriodicFunction( (Buff whichBuff) -> (begin
            let caster = whichBuff.getCaster()
            let target = whichBuff.getTarget()
            let direction = caster.getPos().angleTo(target.getPos())
            let facing = caster.getFacingAngle()
            var diffDegrees = (direction - facing).degrees() %360

            if diffDegrees < 0
                diffDegrees += 360
            if diffDegrees > 180
                diffDegrees = 360 - diffDegrees

            if diffDegrees < 90
                if whichBuff.getData() == 0
                    whichBuff.setData(1)
                    caster.wrapper().addStatRelativeBonus(Stat.MS, PREY_MOVE_SPEED[whichBuff.getLevel()-1]*10)
            else
                if whichBuff.getData() == 1
                    whichBuff.setData(0)
                    caster.wrapper().addStatRelativeBonus(Stat.MS, -PREY_MOVE_SPEED[whichBuff.getLevel()-1]*10)
                
        end))

        buffPreyTarget.addFirstFunction( (Buff whichBuff) -> (begin
            let caster = whichBuff.getCaster()
            let target = whichBuff.getTarget()
            let level = whichBuff.getLevel()
            whichBuff.setData(0)
            let direction = caster.getPos().angleTo(target.getPos())
            let facing = caster.getFacingAngle()
            var diffDegrees = (direction - facing).degrees() %360

            if diffDegrees < 0
                diffDegrees += 360
            if diffDegrees > 180
                diffDegrees = 360 - diffDegrees

            if diffDegrees < 90
                whichBuff.setData(1)
                caster.wrapper().addStatRelativeBonus(Stat.MS, PREY_MOVE_SPEED[level-1]*10)

            target.wrapper().incReveal()
        end))

        buffPreyTarget.addEndFunction( (Buff whichBuff) -> (begin
            let caster = whichBuff.getCaster()
            let target = whichBuff.getTarget()
            let level = whichBuff.getLevel()
            if whichBuff.getData()==1
                caster.wrapper().addStatRelativeBonus(Stat.MS, -PREY_MOVE_SPEED[level-1]*10)

            target.wrapper().decReveal()
            let casterBuff = BuffList.getBuffOfType(caster, buffPreyCaster)
            if casterBuff!= null
                casterBuff.dispel()
        end))

        abilityList = new LinkedList<int>
        ..add(PREY_CASTER_ABILITY_ID)
        buffPreyCaster = new BuffType(true, true)
        buffPreyCaster.setup(abilityList, PREY_CASTER_BUFF_ID)

        buffImmolation = new BuffType(true, true)
        buffImmolation.setPeriodicTime(0.2)

        buffImmolation.addFirstFunction( (Buff whichBuff) -> (begin
            let level = whichBuff.getLevel()
            whichBuff.setData(level)
            heroDestroyer.wrapper().addStatAbsoluteBonus(Stat.AS, IMMOLATION_ATTACK_SPEED[level-1])
        end))

        buffImmolation.addEndFunction( (Buff whichBuff) -> (begin
            let level = whichBuff.getData()
            heroDestroyer.wrapper().addStatAbsoluteBonus(Stat.AS, -IMMOLATION_ATTACK_SPEED[level-1])
        end))

        buffImmolation.addPeriodicFunction((Buff whichBuff) -> (begin
            let owner = heroDestroyer.getOwner()
            let level = whichBuff.getData()
            if heroDestroyer.hasAbility(IMMOLATION_BUFF_ID)
                let dmg = IMMOLATION_DAMAGE[level-1].bonus(heroDestroyer.getInt(), IMMOLATION_DAMAGE_BONUS) * 0.2
                //use hp to not trigger damage event
                heroDestroyer.addHP(-(dmg.reduceMagic(heroDestroyer.getInt())))
                group g = CreateGroup()
                g.enumUnitsInRange(heroDestroyer.getPos(), 250)
                while true
                    let u = FirstOfGroup(g)
                    if u == null
                        break
                    g.removeUnit(u)
                    if not u.isType(UNIT_TYPE_STRUCTURE) and u.isTargetable(owner, false, true)
                        heroDestroyer.dealDamage(u, dmg, ReductionType.MAGIC)
            else
                whichBuff.dispel()
        end))

    
init
    
    heroType = new HeroType(HERO_DESTROYER, "BTNEligor", 13, false)
        ..setOnInitFunction(() -> initHeroType())
        ..setOnCreateFunction((Hero h) -> begin
        heroDestroyer = h.toUnit()
    end)
        
