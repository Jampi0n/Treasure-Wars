package Warlock

import Missile
import ClosureTimers
//5

import HeroType

public constant HERO_WARLOCK = 'H00H'
HeroType heroType

constant ABILITY_FEL_MAGIC = 'AZ5P'
constant ABILITY_FIREBOLT = 'AZ5Q'
constant ABILITY_INFERNAL_METEOR = 'AZ5W'
constant ABILITY_SOUL_BURN = 'AZ5E'
constant ABILITY_RAY_OF_DEATH = 'AZ5R'

BuffType buffRayOfDeath

function setupStats()
    heroType
        //..setStat(Stat.AD, 5, 40)
        ..setStat(Stat.AR, 5, 15)
        ..setStat(Stat.AS, 10, 20)
        ..setStat(Stat.HP, 10, 30)
        ..setStat(Stat.HR, 10, 20)
        ..setStat(Stat.MP, 20, 60)
        ..setStat(Stat.MR, 15, 50)
        ..setStat(Stat.MS, 10, 40)
        ..setStat(Stat.STR, 10, 50)
        ..setStat(Stat.AGI, 10, 20)
        ..setStat(Stat.INT, 15, 50)


        

        
constant int array FEL_MAGIC_INTEL = [5, 10, 15, 20, 25]

@compiletime
function passive()
    let aDef =createNoEffectAbiltiy(ABILITY_FEL_MAGIC)
        ..setupWithHotKey("Fel Magic", "D")
        ..setupIcon("PASHeartOfSearinox")
        ..setLearnString("Increases the Warlock's intelligence.", (int lvl) -> (begin
            return "{0}% bonus intelligence".format(
                FEL_MAGIC_INTEL[lvl-1].str())
        end) )

    for lvl = 1 to 5
        aDef
            ..setTooltipNormalExtended(lvl, "Increases the Warlock's intelligence by {0}%.".format(
                FEL_MAGIC_INTEL[lvl-1].str())
            )

constant real array FIREBOLT_DAMAGE = [80, 120, 160, 200, 240]
constant real FIREBOLT_DAMAGE_BONUS = 200

@compiletime
function firebolt()
    int array MANA = [70, 75, 80, 85, 90]
    real array COOLDOWN = [5, 5, 5, 5, 5]
    real array RANGE = [700, 700, 700, 700, 700]

    let aDef = new AbilityDefinitionIllidanChannel(ABILITY_FIREBOLT)
        ..setupIcon("BTNChaosOrb")
        ..setupWithHotKey("Fire Ball", "Q")
        ..setArtCaster("")
        ..setArtEffect("")
        ..setMissileArt("")
        ..setArtTarget("")
        ..setAnimationNames("spell,throw")
        ..setupChannel(TargetType.POINT, "shockwave")
        ..setLearnString("Summons a ball to fly to the target direction, dealing magic damage to the first unit it hits.", (int lvl) -> (begin
            return "{0} damage.".format(
            FIREBOLT_DAMAGE[lvl-1].str()+FIREBOLT_DAMAGE_BONUS.getBonusString(C_INT))
        end) )

    for lvl = 1 to 5
        aDef
            ..setCooldown(lvl, COOLDOWN[lvl-1])
            ..setManaCost(lvl, MANA[lvl-1])
            ..setCastRange(lvl, RANGE[lvl-1])
            ..setTooltipNormalExtended(lvl, "Summons a ball to fly to the target direction, dealing {0} magic damage to the first unit it hits.".format(
                FIREBOLT_DAMAGE[lvl-1].str()+FIREBOLT_DAMAGE_BONUS.getBonusString(C_INT))
            )

constant real array METEOR_DAMAGE = [70, 105, 140, 175, 210]
constant real METEOR_DAMAGE_BONUS = 160

constant real array METEOR_AOE = [200, 225, 250, 275, 300]

constant real array METEOR_STUN_DURATION = [1, 1.25, 1.5, 1.75, 2]

@compiletime
function infernalMeteor()
    int array MANA = [160, 175, 190, 205, 220]
    real array COOLDOWN = [9, 9, 9, 9, 9]
    real array RANGE = [600, 675, 750, 825, 900]

    let aDef = new AbilityDefinitionIllidanChannel(ABILITY_INFERNAL_METEOR)
        ..setupIcon("BTNMeteor")
        ..setupWithHotKey("Infernal Meteor", "W")
        ..setArtCaster("")
        ..setArtEffect("")
        ..setMissileArt("")
        ..setArtTarget("")
        ..setAnimationNames("spell,slam")
        ..setupChannel(TargetType.AREA, "inferno")
        ..setLearnString("Calls down a burning meteor from the sky dealing magic damage and stunning enemies in the target area.", (int lvl) -> (begin
            return "{0} damage, {1} seconds stun.".format(
                METEOR_DAMAGE[lvl-1].str()+METEOR_DAMAGE_BONUS.getBonusString(C_INT), METEOR_STUN_DURATION[lvl-1].toString()
            )
        end) )

    for lvl = 1 to 5
        aDef
            ..setCooldown(lvl, COOLDOWN[lvl-1])
            ..setManaCost(lvl, MANA[lvl-1])
            ..setCastRange(lvl, RANGE[lvl-1])
            ..setAreaofEffect(lvl, METEOR_AOE[lvl-1])
            ..setTooltipNormalExtended(lvl, "Calls down a burning meteor from the sky dealing {0} magic damage and stunning enemies in the target area for {1} seconds.".format(
                METEOR_DAMAGE[lvl-1].str()+METEOR_DAMAGE_BONUS.getBonusString(C_INT), METEOR_STUN_DURATION[lvl-1].toString()
            ))




constant real array SOUL_BURN_DURATION = [6, 7, 8, 9, 10]
constant real array SOUL_BURN_DAMAGE = [20, 24, 28, 32, 36]
constant real SOUL_BURN_DAMAGE_BONUS = 30

constant real array SOUL_BURN_SILENCE = [2, 2.25, 2.5, 2.75, 3]

constant real SOUL_BURN_AOE = 700

constant BUFF_ID_SOUL_BURN = compiletime(createAuraBuff("Soul Burn", "", "BTNSoulBurn2"))
constant ABILITY_ID_SOUL_BURN = compiletime(createNegativeBuffAbility(5, BUFF_ID_SOUL_BURN, Abilities.immolationDamage, "head"))

BuffType buffSoulBurn

@compiletime
function soulburn()
    int array MANA = [150, 160, 170, 180, 190]
    real array COOLDOWN = [12, 12, 12, 12, 12]
    real array RANGE = [700, 700, 700, 700, 700]

    let aDef = new AbilityDefinitionIllidanChannel(ABILITY_SOUL_BURN)
        ..setupIcon("BTNSoulBurn2")
        ..setupWithHotKey("Soul Burn", "E")
        ..setArtCaster("")
        ..setArtEffect("")
        ..setMissileArt("")
        ..setArtTarget("")
        ..setAnimationNames("spell,one")
        ..setupChannel(TargetType.UNIT, "soulburn")
        ..setLearnString("Deals damage over time to the target enemy unit. If the unit dies, while under the effect of Soul Burn, nearby enemy units will be affected by Soul Burn. The initial target is silenced for a short time.", (int lvl) -> (begin
            return "{0} damage per second, {1} seconds.".format(
                SOUL_BURN_DAMAGE[lvl-1].str()+SOUL_BURN_DAMAGE_BONUS.getBonusString(C_INT), SOUL_BURN_DURATION[lvl-1].toString(), SOUL_BURN_SILENCE[lvl-1].toString()
            )
        end) )

    for lvl = 1 to 5
        aDef
            ..setCooldown(lvl, COOLDOWN[lvl-1])
            ..setManaCost(lvl, MANA[lvl-1])
            ..setCastRange(lvl, RANGE[lvl-1])
            ..setTargetsAllowed(lvl, "enemies,nonancient,ground,organic")
            ..setTooltipNormalExtended(lvl, "Deals {0} damage per second to the target enemy unit for {1} seconds. If the unit dies, while under the effect of Soul Burn, nearby enemy units will be affected by Soul Burn. The initial target is silenced for {2} seconds.".format(
                SOUL_BURN_DAMAGE[lvl-1].str()+SOUL_BURN_DAMAGE_BONUS.getBonusString(C_INT), SOUL_BURN_DURATION[lvl-1].toString(), SOUL_BURN_SILENCE[lvl-1].toString()
            ))

constant BUFF_ID_RAY_OF_DEATH = compiletime(createBasicBuff("Ray of Death", "", "BTNNetherBolt", "", ""))

constant real array RAY_OF_DEATH_DURATION = [2, 2.25, 2.5, 2.75, 3]
constant real array RAY_OF_DEATH_DAMAGE = [50, 65, 80, 95, 110]
constant real RAY_OF_DEATH_DAMAGE_BONUS = 80

constant real array RAY_OF_DEATH_AFTER_DAMAGE = [150, 175, 200, 225, 250]
constant real RAY_OF_DEATH_AFTER_DAMAGE_BONUS = 150

constant real RAY_OF_DEATH_AFTER_AOE = 250

@compiletime
function rayOfDeath()
    int array MANA = [300, 325, 350, 375, 400]
    real array COOLDOWN = [90, 85, 80, 75, 70]
    real array RANGE = [600, 600, 600, 600, 600]

    let aDef = new AbilityDefinitionAerialShackles(ABILITY_RAY_OF_DEATH)
        ..setupIcon("BTNNetherBolt")
        ..setupWithHotKey("Ray of Death", "R")
        ..setArtCaster("")
        ..setArtEffect("")
        ..setMissileArt("")
        ..setArtTarget("")
        ..setLightningEffects("MBUR")
        ..setAnimationNames("spell,channel")
        ..setLearnString(CHANNELING_SPELL + "Channels a powerful ray at the target enemy hero, disabling the target and dealing damage over time. If he channels for the full duration, he summons an explosion at the target's location dealing additional damage.", (int lvl) -> (begin
            return "{0} damage per second, {1} explosion damage, {2} seconds".format(
            RAY_OF_DEATH_DAMAGE[lvl-1].str()+RAY_OF_DEATH_DAMAGE_BONUS.getBonusString(C_INT), RAY_OF_DEATH_AFTER_DAMAGE[lvl-1].str()+RAY_OF_DEATH_AFTER_DAMAGE_BONUS.getBonusString(C_INT), RAY_OF_DEATH_DURATION[lvl-1].toString()
            )
        end) )

    for lvl = 1 to 5
        aDef
            ..setCooldown(lvl, COOLDOWN[lvl-1])
            ..setManaCost(lvl, MANA[lvl-1])
            ..setDamagePerSecond(lvl, 0)
            ..setCastRange(lvl, RANGE[lvl-1])
            ..setDurationHero(lvl, 60)
            ..setDurationNormal(lvl, 60)
            ..setBuffs(lvl, "Bmlc,"+int2fourchar(BUFF_ID_RAY_OF_DEATH))
            ..setTargetsAllowed(lvl, "enemies,nonancient,ground,organic")
            ..setTooltipNormalExtended(lvl, CHANNELING_SPELL + "Channels a powerful ray at the target enemy hero, disabling the target and dealing {0} damage per second. If he channels for the full duration, he summons an explosion at the target's location dealing {1} additional damage.|nLasts {2} seconds.".format(
                RAY_OF_DEATH_DAMAGE[lvl-1].str()+RAY_OF_DEATH_DAMAGE_BONUS.getBonusString(C_INT), RAY_OF_DEATH_AFTER_DAMAGE[lvl-1].str()+RAY_OF_DEATH_AFTER_DAMAGE_BONUS.getBonusString(C_INT), RAY_OF_DEATH_DURATION[lvl-1].toString()
            ))


function onSpellCast()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)

    if spellId == ABILITY_FIREBOLT
        new Missile(caster, caster.getPos().withZ(80), 1000, caster.getPos().angleTo(vec2(GetSpellTargetX(), GetSpellTargetY())), Abilities.demonHunterMissile)
                ..hitOnce()
                ..setSize(40)
                ..setHitCondition((Missile missile, unit target) -> (begin
                return not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(missile.getOwner().getOwner(), false, true)
            end) )
                ..setHitFunction((Missile missile, unit target) -> (begin
                let missileCaster = missile.getOwner()
                missileCaster.dealDamage(Missile.getMissileTarget(), (FIREBOLT_DAMAGE[level-1]).bonus(missileCaster.getInt(), FIREBOLT_DAMAGE_BONUS), ReductionType.MAGIC)
                missile.destr()

            end) )
                ..setMaxRange(800)

    else if spellId == ABILITY_INFERNAL_METEOR
        let pos = vec2(GetSpellTargetX(), GetSpellTargetY())
        addEffect(Units.infernalBirth, pos).destr()
        doAfter(1, () -> (begin
            group nearby = CreateGroup()
            nearby.enumUnitsInRange(pos, METEOR_AOE[level-1])
        
            let dmg = METEOR_DAMAGE[level - 1].bonus(caster.getInt(), METEOR_DAMAGE_BONUS)

            while(not nearby.isEmpty())
                unit target = FirstOfGroup(nearby)
                nearby.removeUnit(target)
                if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(caster.getOwner(), false, true)
                    caster.dealDamage(target, dmg, ReductionType.MAGIC)
                    target.addBuffReduced(caster, METEOR_STUN_DURATION[level-1], STUNNED, 1)
            nearby.destr()
        end))

    else if spellId == ABILITY_SOUL_BURN
        let target = GetSpellTargetUnit()
        target.addBuffReduced(caster, SOUL_BURN_DURATION[level-1], buffSoulBurn, level)
        target.addBuffReduced(caster, SOUL_BURN_SILENCE[level-1], SILENCED, 1)

    else if spellId == ABILITY_RAY_OF_DEATH
        let target = GetSpellTargetUnit()
        target.addBuffReduced(caster, RAY_OF_DEATH_DURATION[level-1], buffRayOfDeath, level)


function initHeroType()
    setupStats()
    heroType
        ..addOnSpellCastFunc(function onSpellCast)

    buffRayOfDeath = new BuffType(false, true)
        ..addEndFunction((Buff whichBuff) ->(begin
            whichBuff.getTarget().removeAbility(BUFF_ID_RAY_OF_DEATH)
        end))
        ..addExpireFunction((Buff whichBuff) ->(begin
            let caster = whichBuff.getCaster()
            let pos = whichBuff.getTarget().getPos()

            addEffect("NoxCloudExplosion.mdx", pos).destr()

            group nearby = CreateGroup()
            nearby.enumUnitsInRange(pos, RAY_OF_DEATH_AFTER_AOE)

            let dmg = RAY_OF_DEATH_AFTER_DAMAGE[caster.getAbilityLevel(ABILITY_RAY_OF_DEATH)-1].bonus(caster.getInt(), RAY_OF_DEATH_AFTER_DAMAGE_BONUS)

            while(not nearby.isEmpty())
                unit target = FirstOfGroup(nearby)
                nearby.removeUnit(target)
                if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(caster.getOwner(), false, true)
                    caster.dealDamage(target, dmg, ReductionType.MAGIC)
        
            nearby.destr()

        end))
        ..setPeriodicTime(0.1)
        ..addPeriodicFunction((Buff whichBuff) ->(begin
            let target = whichBuff.getTarget()
            let caster = whichBuff.getCaster()
            if not caster.getCurrentOrder() == OrderId("magicleash")
                whichBuff.dispel()
            else
                caster.dealDamage(target, 0.1 * RAY_OF_DEATH_DAMAGE[caster.getAbilityLevel(ABILITY_RAY_OF_DEATH)-1].bonus(caster.getInt(), RAY_OF_DEATH_DAMAGE_BONUS), ReductionType.MAGIC)
                target.addEffect(Abilities.illidanMissile, "chest").destr()
        end))

    buffSoulBurn = new BuffType(false, true)
    var abilityList = new LinkedList<int>
        ..add(ABILITY_ID_SOUL_BURN)
    buffSoulBurn
        ..setup(abilityList, BUFF_ID_SOUL_BURN)
        ..setPeriodicTime(0.5)
        ..addPeriodicFunction((Buff whichBuff) ->(begin
            let target = whichBuff.getTarget()
            let caster = whichBuff.getCaster()
            caster.dealDamage(target, 0.5 * SOUL_BURN_DAMAGE[caster.getAbilityLevel(ABILITY_SOUL_BURN)-1].bonus(caster.getInt(), SOUL_BURN_DAMAGE_BONUS), ReductionType.MAGIC)
        end))

    CreateTrigger()
        ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)
        ..addAction(() ->(begin
            let u = GetTriggerUnit()
            if BuffList.hasBuffType(u, buffSoulBurn)
                let pos = u.getPos()
                let whichBuff = BuffList.getBuffOfType(u, buffSoulBurn)
                let caster = whichBuff.getCaster()
                let level = whichBuff.getLevel()

                group nearby = CreateGroup()
                nearby.enumUnitsInRange(pos, SOUL_BURN_AOE)

                let dur = whichBuff.getRemaining()

                while(not nearby.isEmpty())
                    unit target = FirstOfGroup(nearby)
                    nearby.removeUnit(target)
                    if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(caster.getOwner(), false, true) and not BuffList.hasBuffType(target, buffSoulBurn)
                        target.addBuffReduced(caster, dur, buffSoulBurn, level)
            
                nearby.destr()
    end))

    CreateTrigger()
        ..registerAnyUnitEvent(EVENT_PLAYER_HERO_SKILL)
        ..addAction(() -> (begin
            let u = GetTriggerUnit()
            if GetLearnedSkill() == ABILITY_FEL_MAGIC
                let newLevel = u.getAbilityLevel(ABILITY_FEL_MAGIC)
                if newLevel!= 1
                    u.wrapper().addStatRelativeBonus(Stat.INT, -FEL_MAGIC_INTEL[newLevel-2]*10)

                u.wrapper().addStatRelativeBonus(Stat.INT, FEL_MAGIC_INTEL[newLevel-1]*10)
        end))

    
        
init
    heroType = new HeroType(HERO_WARLOCK)
        ..setOnInitFunction(() -> initHeroType())