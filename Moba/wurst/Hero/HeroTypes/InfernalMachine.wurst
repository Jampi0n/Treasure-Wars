package InfernalMachine

import OnAttack

import Fx

//8

import HeroType
import ClosureTimers

public constant HERO_INFERNAL_MACHINE = 'H017'
public constant HERO_INFERNAL_MACHINE_MORPH = 'H01D'
HeroType heroType = null


constant ABILITY_FIERY_HANDS = 'AZ8P'
constant ABILITY_BASH = 'AZ8Q'
constant ABILITY_INNER_FIRE = 'AZ8W'
constant ABILITY_FLAME_THROWER = 'AZ8E'
constant ABILITY_RAPID_FIRE = 'AZ8R'

constant MELEE = compiletime(UNIT_ID_GEN.next())

function meleeDummy()
    new UnitDefinition(MELEE, 'hfoo')
        ..setNormalAbilities("Aloc")
        ..setModelFile("")
        ..setShadowImageUnit("")
        ..setAttacksEnabled(0)
        ..setMovementType(MovementType.Fly)
        ..setCollisionSize(0)
        ..setFoodCost(0)
        ..setSightRadiusDay(0)
        ..setSightRadiusNight(0)
        ..setUpgradesUsed("")
        ..setUnitSoundSet("")
        ..setName("Melee")



        
constant real FIERY_HANDS_AOE = 250
constant real array FIERY_HANDS_DMG = [15, 25, 35, 45, 55]
constant real FIERY_HANDS_DMG_BONUS = 30


function passive(int abilityId)
    if compiletime
        createNoEffectAbiltiy(abilityId)
            ..setupWithHotKey("Fiery Hands", "D")
            ..setupIcon("PASFierySoul")

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(FIERY_HANDS_DMG_BONUS)
    tooltip.setLearnString("Killing a unit creates a fire explosion, dealing magic damage to nearby targets.", (int lvl) -> (begin
        return "{0}{I0} damage".format(FIERY_HANDS_DMG[lvl-1].str())
    end))
    for lvl = 1 to 5
        tooltip.setNormalString(false, lvl, "Killing a unit creates a fire explosion, dealing {0}{I0} magic damage to nearby targets.".format(
            FIERY_HANDS_DMG[lvl-1].str()
        ))
    addDynamicTooltipIntelligence(heroType, tooltip)

public constant int array BASH_DAMAGE_BONUS = [50, 85, 120, 155, 190]
constant real array BASH_STUN_DURATION = [1.2, 1.4, 1.6, 1.8, 2]
constant real BASH_BUFF_DURATION = 4
constant int array BASH_MOVEMENT_SPEED = [100, 125, 150, 175, 200]

constant int BASH_BUFF_ID = compiletime(createAuraBuff("Bash", "This unit's movement speed is increased and its next attack will stun the opponent.", "BTNFistOfFire"))
constant int BASH_ABILITY_ID = compiletime(createPositiveBuffAbility(5, BASH_BUFF_ID, "", ""))

public BuffType buffBash


function bash(int abilityId)

    if compiletime
        int array MANA = [60, 60, 60, 60, 60]
        real array COOLDOWN = [9, 9, 9, 9, 9]

        meleeDummy()
        let aDef = new AbilityDefinitionBeserk(abilityId)
            ..setupIcon("BTNFistOfFire")
            ..setAnimationNames("")
            ..setupWithHotKey("Bash", "Q")
            ..setLightningEffects("")
            ..setArtTarget("")
            ..setMissileArt("")
            ..setArtSpecial("")
            ..setLightningEffects("")
            ..setCheckDependencies(true)
            ..setRequirements(MELEE.toRawCode())

        for lvl = 1 to 5
            aDef
                ..setCooldown(lvl, COOLDOWN[lvl-1])
                ..setManaCost(lvl, MANA[lvl-1])
                ..setAttackSpeedIncrease(lvl, 0)
                ..setDamageTakenIncrease(lvl, 0)
                ..setMovementSpeedIncrease(lvl, 0)
                ..setBuffs(lvl, BASH_BUFF_ID.toRawCode())
                ..setDurationHero(lvl, 0.01)
                ..setTargetsAllowed(lvl, "air,enemies,ground,neutral,nonancient,organic,nonhero")

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(0)
    tooltip.setLearnString("Increases the movement speed of the Infernal Machine and causes the next attack to stun the target and deal bonus damage. Lasts {0} seconds.".format(BASH_BUFF_DURATION.toSmartString()), (int lvl) -> (begin
        return "{0} bonus damage, {1} seconds stun.".format(
            BASH_DAMAGE_BONUS[lvl-1].str(), BASH_STUN_DURATION[lvl-1].toSmartString()
            )
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Increases the movement speed of the Infernal Machine and causes the next attack to stun the target for {0} seconds and deal {1} bonus bonus damage. Lasts {2} seconds.".format(
            BASH_STUN_DURATION[lvl-1].toSmartString(), BASH_DAMAGE_BONUS[lvl-1].str(), BASH_BUFF_DURATION.toSmartString()
        ))
    addDynamicTooltipIntelligence(heroType, tooltip)


constant int array INNER_FIRE_DMG = [5, 10, 15, 20, 25]
constant int INNER_FIRE_DMG_BONUS = 10

constant int array INNER_FIRE_DEF = [10, 15, 20, 25, 30]
constant int INNER_FIRE_DEF_BONUS = 20

constant real INNER_FIRE_DURATION = 10

constant int INNER_FIRE_BUFF_ID = compiletime(createAuraBuff("Inner Fire", "This unit's strength and armor and willpower are increased.", Icons.bTNInnerFire))
constant int INNER_FIRE_ABILITY_ID = compiletime(createPositiveBuffAbility(5, INNER_FIRE_BUFF_ID, Abilities.innerFireTarget, "overhead"))

constant real INNER_FIRE_AOE = 900

public BuffType buffInnerFire


function innerFire(int abilityId)

    if compiletime
        int array MANA = [80, 85, 90, 95, 100]
        real array COOLDOWN = [19, 19, 19, 19, 19]

        let aDef = new AbilityDefinitionRoar(abilityId)
            ..setAnimationNames("spell")
            ..setupIcon(Icons.bTNInnerFire)
            ..setupWithHotKey("Inner Fire", "W")

        for lvl = 1 to 5
            aDef
                ..setCooldown(lvl, COOLDOWN[lvl-1])
                ..setManaCost(lvl, MANA[lvl-1])
                ..setTargetsAllowed(lvl, "none")

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(INNER_FIRE_DMG_BONUS.toReal(), INNER_FIRE_DEF_BONUS.toReal())
    tooltip.setLearnString("Increases nearby units strength, armor and willpower.", (int lvl) -> (begin
        return "+{0}{I0}% strength, +{1}{I1} armor and willpower, {2} seconds".format(
        INNER_FIRE_DMG[lvl-1].str(),
        INNER_FIRE_DEF[lvl-1].str(),
        INNER_FIRE_DURATION.toSmartString()
        )
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Increases nearby units' strength by {0}{I0}% and armor and willpower by {1}{I1} for {2} seconds.".format(
            INNER_FIRE_DMG[lvl-1].str(),
            INNER_FIRE_DEF[lvl-1].str(),
            INNER_FIRE_DURATION.toSmartString()
        ))
    addDynamicTooltipIntelligence(heroType, tooltip)

constant real array FLAME_THROWER_DAMAGE = [60, 90, 120, 150, 180]
constant real FLAME_THROWER_DAMAGE_BONUS = 100

constant real array FLAME_THROWER_DOT = [16, 24, 32, 40, 48]
constant real FLAME_THROWER_DOT_BONUS = 30

constant real array FLAME_THROWER_DURATION = [3, 3.5, 4, 4.5, 5]

constant real array FLAME_THROWER_AOE = [350, 350, 350, 350, 350]

constant int FLAME_THROWER_BUFF_ID = compiletime(createAuraBuff("Flame Thrower", "This unit was hit by Flame Thrower; it takes damage over time.", Icons.bTNWallOfFire))
constant int FLAME_THROWER_ABILTIY_ID = compiletime(createNegativeBuffAbility(5, FLAME_THROWER_BUFF_ID, Abilities.breathOfFireDamage, "origin"))

constant int FLAME_THROWER_IMPACT = compiletime(ArtilleryDetection.createDetectionDummy())
constant int FLAME_THROWER_ARTILLERY = compiletime(ArtilleryDetection.createArtilleryDummy(30, 20, 210, 2.5, Abilities.redDragonMissile, 900, 0.3, FLAME_THROWER_IMPACT))


BuffType buffFlameThrower



function flameThrower(int abilityId)

    if compiletime
        int array MANA = [90, 100, 110, 120, 130]
        real array COOLDOWN = [11, 11, 11, 11, 11]
        real array RANGE = [900, 900, 900, 900, 900]

        let aDef = new AbilityDefinitionIllidanChannel(abilityId)
            ..setupIcon(Icons.bTNWallOfFire)
            ..setupWithHotKey("Flame Thrower", "E")
            ..setArtCaster("")
            ..setArtEffect("")
            ..setMissileArt("")
            ..setArtTarget("")
            ..setAnimationNames("spell,throw")
            ..setupChannel(TargetType.AREA, "shockwave", 0.5)

        for lvl = 1 to 5
            aDef
                ..setCooldown(lvl, COOLDOWN[lvl-1])
                ..setManaCost(lvl, MANA[lvl-1])
                ..setCastRange(lvl, RANGE[lvl-1])
                ..setAreaofEffect(lvl, FLAME_THROWER_AOE[lvl-1])

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(FLAME_THROWER_DAMAGE_BONUS, FLAME_THROWER_DOT_BONUS)
    tooltip.setLearnString("Launches a fiery missile at the target location that deals large initial damage and ignites the targets, dealing additional damage over time.", (int lvl) -> (begin
        return "{0}{I0} initial damage, {1}{I1} damage per second for {2} seconds.".format(
            FLAME_THROWER_DAMAGE[lvl-1].str(),
            FLAME_THROWER_DOT[lvl-1].str(),
            FLAME_THROWER_DURATION[lvl-1].toSmartString()
        )
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Launches a fiery missile at the target location that deals {0}{I0} initial damage and ignites the targets, dealing {1}{I1} damage per second for {2} seconds.".format(
            FLAME_THROWER_DAMAGE[lvl-1].str(),
            FLAME_THROWER_DOT[lvl-1].str(),
            FLAME_THROWER_DURATION[lvl-1].toSmartString()
        ))
    addDynamicTooltipIntelligence(heroType, tooltip)

constant int array RAPID_FIRE_ATTACK_SPEED = [80, 120, 160, 200, 240]
constant real RAPID_FIRE_DURATION = 3
constant real array RAPID_FIRE_STUN_DURATION = [0.2, 0.2, 0.2, 0.2, 0.2]

constant int RAPID_FIRE_BUFF_ID = compiletime(createDummyBuff("Rapid Fire"))


function rapidFire(int abilityId)

    if compiletime
        int array MANA = [150, 165, 180, 195, 210]
        real array COOLDOWN = [120, 120, 120, 120, 120]

        let aDef = new AbilityDefinitionAlchemistChemicalRage(abilityId)
            ..setupIcon(Icons.bTNHumanMissileUpThree)
            ..setupWithHotKey("Rapid Fire", "R")

        for lvl = 1 to 5
            aDef
                ..setCooldown(lvl, COOLDOWN[lvl-1])
                ..setManaCost(lvl, MANA[lvl-1])
                ..setNormalFormUnit(lvl, HERO_INFERNAL_MACHINE.toRawCode())
                ..setAlternateFormUnit(lvl, HERO_INFERNAL_MACHINE_MORPH.toRawCode())
                ..setDurationNormal(lvl, 0)
                ..setDurationHero(lvl, RAPID_FIRE_DURATION)
                ..setAttackSpeedBonusInfoPanelOnly(lvl, 0.8)
                ..setMoveSpeedBonusInfoPanelOnly(lvl, 0)
                ..setBuffs(lvl, RAPID_FIRE_BUFF_ID.toRawCode())

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(0)
    tooltip.setLearnString("Enables a rapid firing ranged attack for the Infernal Machine, that stuns enemies it hits for a short time. Bash is disabled while under the effect of Rapid Fire.|nLasts {0} seconds.".format(RAPID_FIRE_DURATION.str()), (int lvl) -> (begin
        return "+{0}% attack speed, {1} stun duration.".format(
            RAPID_FIRE_ATTACK_SPEED[lvl-1].str(), RAPID_FIRE_STUN_DURATION[lvl-1].toSmartString()
        )
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Enables a rapid firing ranged attack with {0}% faster attack speed for the Infernal Machine, that stuns enemies it hits for {1} seconds. Bash is disabled while under the effect of Rapid Fire.|nLasts {2} seconds.".format(
            RAPID_FIRE_ATTACK_SPEED[lvl-1].str(), RAPID_FIRE_STUN_DURATION[lvl-1].toSmartString(), RAPID_FIRE_DURATION.str()
        ))
    addDynamicTooltipIntelligence(heroType, tooltip)

            
unit array melee_dummy

function onRapidStats(unit caster, int level) // add bonus
    caster.wrapper().addStatAbsoluteBonus(Stat.AS, RAPID_FIRE_ATTACK_SPEED[level-1] - 80)
    caster.wrapper().addStatAbsoluteBonus(Stat.MS, 0)

function onRapid(unit caster, int level) // add bonus
    doAfter(0, () -> (begin
        onRapidStats(caster, level)
        OnAttack.useAdvanced(caster, true)
        let track = AttackOrderTrack.getAttackTrack(caster)
        if track != null
            let target =track.getTarget()
            if target != null
                caster.issueImmediateOrder("stop")
                doAfter(0, () -> caster.issueTargetOrder("attack", target))
    end))
    melee_dummy[caster.getOwner().getId()].setOwner(Player(PLAYER_NEUTRAL_PASSIVE), false)
    if BuffList.hasBuffType(caster, buffBash)
        BuffList.getBuffOfType(caster, buffBash).dispel()

function onRapidEndStats(unit caster, int level) // remove bonus
    caster.wrapper().addStatAbsoluteBonus(Stat.AS, -RAPID_FIRE_ATTACK_SPEED[level-1] + 80)
    caster.wrapper().addStatAbsoluteBonus(Stat.MS, 0)


function onRapidEnd(unit caster, int level) // remove bonus
    doAfter(0, () -> (begin
        onRapidEndStats(caster, level)
        OnAttack.useAdvanced(caster, false)
    end))
    melee_dummy[caster.getOwner().getId()].setOwner(Player(caster.getOwner().getId()), false)
    



function onAttack(unit attacker, unit target, boolean _isActive, boolean advanced)
    if target.isTargetable(attacker.getOwner(), false, true) and not target.isType(UNIT_TYPE_STRUCTURE)
        if attacker.getTypeId() == HERO_INFERNAL_MACHINE and BuffList.hasBuffType(attacker, buffBash)
            let bash = BuffList.getBuffOfType(attacker, buffBash)
            target.addBuffReduced(attacker, BASH_STUN_DURATION[bash.getLevel()-1], STUNNED, 1)
            attacker.dealDamage(target, BASH_DAMAGE_BONUS[bash.getLevel()-1].toReal(), ReductionType.PHYSICAL)
            bash.dispel()
        else if advanced
            target.addBuffReduced(attacker, RAPID_FIRE_STUN_DURATION[attacker.getAbilityLevel(ABILITY_RAPID_FIRE)-1], STUNNED, 1)




function onSpellCast()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)

    if spellId == ABILITY_BASH
        caster.addBuff(caster, 4, buffBash, level)

    else if spellId==ABILITY_INNER_FIRE
        group nearby = CreateGroup()
        nearby.enumUnitsInRange(caster.getPos(), INNER_FIRE_AOE)

        while(not nearby.isEmpty())
            unit target = FirstOfGroup(nearby)
            nearby.removeUnit(target)
            if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(caster.getOwner(), true, false)
                target.addBuff( caster, INNER_FIRE_DURATION, buffInnerFire, level)

        nearby.destr()

    else if spellId == ABILITY_FLAME_THROWER
        ArtilleryDetection.fireArtillery(caster.getOwner(), FLAME_THROWER_ARTILLERY, caster.getPos(), vec2(GetSpellTargetX(), GetSpellTargetY()))

    else if spellId == ABILITY_RAPID_FIRE
        if caster.getTypeId() == HERO_INFERNAL_MACHINE
            doAfter( 0, () -> onRapid(caster, level))
        else
            doAfter( 0, () -> onRapidEnd(caster, level))

class AttackOrderTrack

    private unit trackUnit
    private trigger trackTrigger
    //linked list instead of hashmap, because the number of elements is 0 or 1
    //still this implementation supports MUI, even if there is no intention to have same heroes at the moment
    private static constant attackTracks = new LinkedList<AttackOrderTrack>()

    private boolean targetedAttack = false
    private unit target = null

    construct(unit u)
        this.trackUnit = u
        attackTracks.add(this)
        this.trackTrigger = CreateTrigger()
            ..registerUnitEvent(u, EVENT_UNIT_ISSUED_ORDER)
            ..registerUnitEvent(u, EVENT_UNIT_ISSUED_POINT_ORDER)
            ..registerUnitEvent(u, EVENT_UNIT_ISSUED_TARGET_ORDER)
            ..addAction(function onOrder)

    static function getAttackTrack(unit u) returns AttackOrderTrack
        for AttackOrderTrack track in attackTracks
            if track.trackUnit == u
                return track
        return null

    static function onOrder()
        AttackOrderTrack thisTrack = getAttackTrack(GetTriggerUnit())
        if thisTrack == null
            return
        let orderTarget = GetOrderTargetUnit()
        if GetIssuedOrderId() == OrderId("attack") and orderTarget != null
            thisTrack.targetedAttack = true
            thisTrack.target = GetOrderTargetUnit()
        else
            if GetIssuedOrderId() == OrderId("smart") and orderTarget.isTargetable(thisTrack.trackUnit.getOwner(), false, true)
                thisTrack.targetedAttack = true
                thisTrack.target = GetOrderTargetUnit()
            else
                if GetIssuedOrderId() != OrderId("chemicalrage")
                    thisTrack.targetedAttack = false
                    thisTrack.target = null

    function getTarget() returns unit
        return this.target

    ondestroy
        this.trackTrigger.clearActions()
        this.trackTrigger.destr()
        attackTracks.remove(this)


function setupStats()
    heroType
        //..setStat(Stat.AD, 5, 40)
        ..setStat(Stat.AR, 31, 59)
        ..setStat(Stat.AS, 7, 22)
        ..setStat(Stat.HP, 13, 52)
        ..setStat(Stat.HR, 17, 34)
        ..setStat(Stat.MP, 15, 41)
        ..setStat(Stat.MR, 13, 28)
        ..setStat(Stat.MS, 18, 41)
        ..setStat(Stat.STR, 17, 52)
        ..setStat(Stat.AGI, 30, 55)
        ..setStat(Stat.INT, 6, 16)




function retreatAI(HeroAI ai)
    ai.issue("berserk")

function attackAI(HeroAI ai)
    let hero = ai.getHeroUnit()

    if hero.getMana()/hero.getMaxMana() > 0.5
        let targetPos = hero.findAreaTarget(800, FLAME_THROWER_AOE[hero.getAbilityLevel(ABILITY_FLAME_THROWER)-1], 3)
        if targetPos.getValue() >= 6
            ai.issue("shockwave", targetPos.getPos())

    unit target = hero.findTarget(250, AbilityTargetFocus.ENEMY, AbilityTargetPriority.LOW_HEALTH, null)
    if target.isTargetable(hero.getOwner(), false, true)
        ai.attack(target)

    target = hero.findTarget(500, AbilityTargetFocus.ENEMY, AbilityTargetPriority.LOW_DISTANCE, null)
    if target.isTargetable(hero.getOwner(), false, true)
        ai.attack(target)

function teamFightAI(HeroAI ai)
    let hero = ai.getHeroUnit()

    unit target = ai.getTeamFightTarget()


    if target.isTargetable(hero.getOwner(), false, true)

        if hero.getTypeId() == HERO_INFERNAL_MACHINE
            if target.getPos().distanceTo(hero.getPos()) < 600
                ai.issue("chemicalrage")
                ai.issue("berserk")
            ai.issue("roar")
            ai.issue("shockwave", target.getPos())

        if not ai.getAttacking()
            ai.attack(target)

@compiletime
function setupTooltips()

    passive(ABILITY_FIERY_HANDS)
    bash(ABILITY_BASH)
    innerFire(ABILITY_INNER_FIRE)
    flameThrower(ABILITY_FLAME_THROWER)
    rapidFire(ABILITY_RAPID_FIRE)


function initHeroType()
    setupStats()
    setupTooltips()
    heroType.setSkillBuild("QEWQQWQEQWEWEWE")
    delayInit(5) ->

        heroType
            ..setOnAttackFunc((unit attacker, unit target, boolean isActive, boolean advanced) -> onAttack(attacker, target, isActive, advanced))
            ..addOnSpellCastFunc(function onSpellCast)
            ..addMorph(HERO_INFERNAL_MACHINE_MORPH)
            ..setRetreatAI((HeroAI ai) -> (retreatAI(ai)))
            ..setAttackAI((HeroAI ai) -> (attackAI(ai)))
            ..setTeamFightAI((HeroAI ai) -> (teamFightAI(ai)))
            ..addItem(ITEM_ID_HEAVY_BOOTS)
            ..addItem(ITEM_ID_RUNIC_ARMOR)
            ..addItem(ITEM_ID_FIREHAND_GAUNTLETS)
            ..addItem(ITEM_ID_AXE_OF_DECAY)
            ..addItem(ITEM_ID_WAR_DRUM)
            ..addItem(ITEM_ID_ARCANE_SHIELD)

        buffBash = new BuffType(true, false)

        var abilityList = new LinkedList<int>
            ..add(BASH_ABILITY_ID)
        buffBash.setup(abilityList, BASH_BUFF_ID)
        buffBash.addFirstFunction((Buff whichBuff) -> (begin
            whichBuff.getTarget().wrapper().addStatAbsoluteBonus(Stat.MS, BASH_MOVEMENT_SPEED[whichBuff.getLevel()-1])
        end))
        buffBash.addEndFunction((Buff whichBuff) -> (begin
            whichBuff.getTarget().wrapper().addStatAbsoluteBonus(Stat.MS, -BASH_MOVEMENT_SPEED[whichBuff.getLevel()-1])
        end))


        buffInnerFire = new BuffType(true, false)
        abilityList = new LinkedList<int>
            ..add(INNER_FIRE_ABILITY_ID)
        buffInnerFire.setup(abilityList, INNER_FIRE_BUFF_ID)
        buffInnerFire.addFirstFunction((Buff whichBuff) -> (begin
            let level = whichBuff.getLevel()
            let wrapper = whichBuff.getTarget().wrapper()
            let intel = whichBuff.getCaster().getInt()
            whichBuff.setData(intel)

            if whichBuff.getTarget().isType(UNIT_TYPE_HERO)
                wrapper.addStatRelativeBonus(Stat.STR, 10 * INNER_FIRE_DMG[level-1].bonus(intel, INNER_FIRE_DMG_BONUS).toInt() )
            else
                wrapper.addStatRelativeBonus(Stat.AD, 10 * INNER_FIRE_DMG[level-1].bonus(intel, INNER_FIRE_DMG_BONUS).toInt() )

            wrapper.addStatAbsoluteBonus(Stat.AR, INNER_FIRE_DEF[level-1].bonus(intel, INNER_FIRE_DEF_BONUS).toInt() )
            wrapper.addStatAbsoluteBonus(Stat.AGI, INNER_FIRE_DEF[level-1].bonus(intel, INNER_FIRE_DEF_BONUS).toInt() )
        end))
        buffInnerFire.addEndFunction((Buff whichBuff) -> (begin
            let level = whichBuff.getLevel()
            let wrapper = whichBuff.getTarget().wrapper()
            let intel = whichBuff.getData()

            if whichBuff.getTarget().isType(UNIT_TYPE_HERO)
                wrapper.addStatRelativeBonus(Stat.STR, -10 * INNER_FIRE_DMG[level-1].bonus(intel, INNER_FIRE_DMG_BONUS).toInt() )
            else
                wrapper.addStatRelativeBonus(Stat.AD, -10 * INNER_FIRE_DMG[level-1].bonus(intel, INNER_FIRE_DMG_BONUS).toInt() )

            wrapper.addStatAbsoluteBonus(Stat.AR, -INNER_FIRE_DEF[level-1].bonus(intel, INNER_FIRE_DEF_BONUS).toInt() )
            wrapper.addStatAbsoluteBonus(Stat.AGI, -INNER_FIRE_DEF[level-1].bonus(intel, INNER_FIRE_DEF_BONUS).toInt() )
        end))


        buffFlameThrower = new BuffType(false, true)

        abilityList = new LinkedList<int>
            ..add(FLAME_THROWER_ABILTIY_ID)
        buffFlameThrower.setup(abilityList, FLAME_THROWER_BUFF_ID)

        buffFlameThrower.setPeriodicTime(0.25)
        buffFlameThrower.addPeriodicFunction((Buff whichBuff) -> (begin
            let caster = whichBuff.getCaster()
            let target = whichBuff.getTarget()
            if target.isTargetable(caster.getOwner(), false, true)
                caster.dealDamage(target, 0.25 * FLAME_THROWER_DOT[whichBuff.getLevel()-1].bonus(caster.getInt(), FLAME_THROWER_DOT_BONUS), ReductionType.MAGIC)
        end))

        ArtilleryDetection.registerArtilleryHit(FLAME_THROWER_IMPACT, (unit impact) ->(begin
            group nearby = CreateGroup()
            let caster = Hero.getHero(impact.getOwner()).toUnit()
            let level = caster.getAbilityLevel(ABILITY_FLAME_THROWER)
            nearby.enumUnitsInRange(impact.getPos(), FLAME_THROWER_AOE[level-1])

            
            var fx = new Fx(impact.getPos(), Abilities.liquidfire)
            fx.setScale(3.5)
            doAfter(1, () -> destroy fx)

            for i = 0 to 10
                fx = new Fx(impact.getPos().polarOffset(GetRandomDirectionDeg().fromDeg(), GetRandomReal(0, 300)), Abilities.flameStrikeEmbers)
                fx.setScale(2)
                doAfter(0.5, () -> destroy fx)
                

            let dmg = (FLAME_THROWER_DAMAGE[level-1]).bonus(caster.getInt(), FLAME_THROWER_DAMAGE_BONUS)
            while(not nearby.isEmpty())
                unit target = FirstOfGroup(nearby)
                nearby.removeUnit(target)
                if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(impact.getOwner(), false, true)

                    caster.dealDamage(target, dmg, ReductionType.MAGIC)
                    target.addBuffReduced(caster, FLAME_THROWER_DURATION[level-1], buffFlameThrower, level)

            nearby.destr()

            addEffect(Abilities.demolisherFireMissile, impact.getPos()).destr()
        end))

        CreateTrigger()
        ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)
        ..addAction(() -> (begin
            let killer = GetKillingUnit()
            let dyingUnit = GetTriggerUnit()
            if not dyingUnit.isType(UNIT_TYPE_STRUCTURE) and killer.hasAbility(ABILITY_FIERY_HANDS)
                addEffect(Abilities.fireLordDeathExplode, dyingUnit.getPos()).destr()
                let g = CreateGroup()
                g.enumUnitsInRange(dyingUnit.getPos(), FIERY_HANDS_AOE)
                let dmg = FIERY_HANDS_DMG[killer.getAbilityLevel(ABILITY_FIERY_HANDS)-1].bonus(killer.getInt(), FIERY_HANDS_DMG_BONUS)
                for unit u in g
                    if not u.isType(UNIT_TYPE_STRUCTURE) and u.isTargetable(killer.getOwner(), false, true)
                        killer.dealDamage(u, dmg, ReductionType.MAGIC)
                g.destr()
        end))

        

function createHeroType(Hero hero)
    let heroUnit = hero.toUnit()
    melee_dummy[heroUnit.getOwner().getId()] = createUnit(heroUnit.getOwner(), MELEE, heroUnit.getPos(), angle(0))
    new AttackOrderTrack(hero.toUnit())


    CreateTrigger()
    ..registerUnitEvent(heroUnit, EVENT_UNIT_DEATH)
    ..addAction(() -> (begin
        if GetTriggerUnit().getTypeId() == HERO_INFERNAL_MACHINE_MORPH
            let u = GetTriggerUnit()
            onRapidEnd(u, u.getAbilityLevel(ABILITY_RAPID_FIRE))
    end))

    CreateTrigger()
    ..registerUnitEvent(heroUnit, EVENT_UNIT_HERO_SKILL)
    ..addAction(() -> (begin
        let u = GetTriggerUnit()

        if GetLearnedSkill() == ABILITY_RAPID_FIRE and u.getTypeId() == HERO_INFERNAL_MACHINE_MORPH
            let newLevel = u.getAbilityLevel(ABILITY_RAPID_FIRE)
            onRapidEndStats(u, newLevel - 1)
            onRapidStats(u, newLevel)
    end))

init
    heroType = new HeroType(HERO_INFERNAL_MACHINE, Icons.bTNInfernalCannon, 8, true)
        ..setOnInitFunction(() -> initHeroType())
        ..setOnCreateFunction((Hero hero) -> createHeroType(hero))

   


