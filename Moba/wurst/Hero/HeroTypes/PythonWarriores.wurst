package PythonWarriores

//0

import HeroType
import HeroControl
import Stats
import OnAttack
import LinkedList
import Buff
import General
import BuffTypeConfig
import ClosureTimers
import OnUnitEnterLeave
import SoundUtils
import Assets
import AbilityObjEditing
import HeroObjectEditing
import FormatStrings


constant SOUND_PARALYZING_STRIKE = new SoundDefinition(Sounds.shadowStrikeBirth1, false, true)
constant SOUND_POISON_SPIT = new SoundDefinition(Sounds.corrosiveBreathMissileTarget1, false, true)
constant SOUND_EMPOWERED_STRIKE = new SoundDefinition(Sounds.metalHeavySliceFlesh3, false, true)

constant ABILITY_ENVENOMED_BLADES = 'AZ0P'
constant ABILITY_MISTWALK = 'AZ0Q'
constant ABILITY_POISON_SPIT = 'AZ0W'
constant ABILITY_EMPOWERED_STRIKE = 'AZ0E'
constant ABILITY_PARALYZING_STRIKE = 'AZ0R'

public constant HERO_PYTHON_WARRIORES = 'H00J'
HeroType heroType

constant BUFF_ENVENOMED_BLADES = new BuffType(false, true)

constant BUFF_POISON_SPIT = new BuffType(false, true)

//Balancing and Object Editing
constant real array ENVENOMED_BLADES_DAMAGE = [5, 10, 15, 20, 25]
constant real ENVENOMED_BLADES_DAMAGE_BONUS = 20
constant real array ENVENOMED_BLADES_DURATION = [5, 5 ,5 ,5 ,5 ]

constant real array MISTWALK_DURATION = [4, 5, 6, 7, 8]
constant real MISTWALK_DURATION_BONUS = 4

constant real array POISON_SPIT_SLOW_MS = []
constant real array POISON_SPIT_SLOW_AS = []
constant real array POISON_SPIT_DOT = []
constant real POISON_SPIT_DOT_BONUS = 7.
constant real array POISON_SPIT_ARMOR_REDUCTION = []

constant real array EMPOWERED_STRIKE_DAMAGE = []
constant real EMPOWERED_STRIKE_DAMAGE_BONUS = 7

@compiletime
function envenomedBlades()
    let aDef = createNoEffectAbiltiy(ABILITY_ENVENOMED_BLADES)
        ..presetIcon("PASPoisonBlades")
        ..setupWithHotKey("Envenomed Blades", "D")
        ..setLearnString("Attacks deal poison damage every second.", (int lvl) -> (begin
            return formatString("%s damage, %s seconds.", 
            ENVENOMED_BLADES_DAMAGE[lvl-1].str()+ENVENOMED_BLADES_DAMAGE_BONUS.getBonusString(C_INT), 
            ENVENOMED_BLADES_DURATION[lvl-1])
        end) )

    for lvl = 1 to 5
        aDef
            ..setTooltipNormalExtended(lvl, formatString("Attacks deal %s poison damage every second for %s seconds.", 
            ENVENOMED_BLADES_DAMAGE[lvl-1].str()+ENVENOMED_BLADES_DAMAGE_BONUS.getBonusString(C_INT), 
            ENVENOMED_BLADES_DURATION[lvl-1])
            )
    
@compiletime
function mistwalk()
    int array MANA = [180, 190, 200, 210, 220]
    real array COOLDOWN = [60, 60, 60, 60, 60]

    let aDef = new AbilityDefinitionRoar(ABILITY_MISTWALK)
        ..presetIcon("BTNNoxiousFumes")
        ..setAnimationNames("morph, first")
        ..setupWithHotKey("Mistwalk", "Q")
        ..setLightningEffects("")
        ..setArtCaster("")
        ..setArtEffect("")
        ..setMissileArt("")
        ..setArtTarget("")
        ..setTooltipLearnExtended("learn")

    for i = 1 to 5
        aDef
            ..setCooldown(i, COOLDOWN[i-1])
            ..setManaCost(i, MANA[i-1])
            ..setTargetsAllowed(i, "none")
            ..setTooltipNormalExtended(i, "Turns the Python Warriores invisibile for "
            +MISTWALK_DURATION[i-1].toInt().toString()+" (+"+MISTWALK_DURATION_BONUS.toInt().toString()+
            ") seconds.")

@compiletime
function paralyzingStrike()
    real array RANGE = [500, 600, 700, 800, 900]
    int array MANA = [180, 190, 200, 210, 220]
    real array COOLDOWN = [60, 60, 60, 60, 60]

    let aDef = new AbilityDefinitionFarseerChainLightning(ABILITY_PARALYZING_STRIKE)
        ..presetIcon("BTNINV_ThrowingKnife_04")
        ..setAnimationNames("spell, slam")
        ..setupWithHotKey("Paralyzing Strike", "R")
        ..setLightningEffects("")
        ..setMissileArt("")
        ..setArtTarget("")
        ..setTooltipLearnExtended("learn")

    for i = 1 to 5
        aDef
            ..setDamageperTarget(i, 0)
            ..setDamageReductionperTarget(i, 0)
            ..setNumberofTargetsHit(i, 0)
            ..setCastRange(i, RANGE[i-1])
            ..setCooldown(i, COOLDOWN[i-1])
            ..setManaCost(i, MANA[i-1])
            ..setTargetsAllowed(i, "air,enemies,ground,neutral,nonancient,organic")
            ..setTooltipNormalExtended(i, "Range = "+RANGE[i-1].toString()+"|nCooldown = "+COOLDOWN[i-1].toString()+"|nMana = "+MANA[i-1].toString())




group spitDummies = CreateGroup()

function setupStats()
    heroType
        //..setStat(Stat.AD, 10, 40)
        ..setStat(Stat.AR, 10, 25)
        ..setStat(Stat.AS, 25, 60)
        ..setStat(Stat.HP, 15, 40)
        ..setStat(Stat.HR, 20, 50)
        ..setStat(Stat.MP, 10, 30)
        ..setStat(Stat.MR, 15, 25)
        ..setStat(Stat.MS, 20, 60)
        ..setStat(Stat.STR, 5+10, 20+40)
        ..setStat(Stat.WP, 20, 35)
        ..setStat(Stat.INT, 5, 40)

function onSpellCast()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)

    if(spellId==ABILITY_MISTWALK)
        caster.dispelBuffs(true, true)
        new Buff(caster, caster, (MISTWALK_DURATION[level-1]).bonus(caster.getInt(), MISTWALK_DURATION_BONUS), INVIS, 1)
        return

    if(spellId=='A00H') //Poison Spit
        let x = GetSpellTargetX()
        let y = GetSpellTargetY()
        let attacker = createUnit(caster.getOwner(), 'u000', caster.getPos(), angle(Atan2(y - caster.getY(), x - caster.getX())))
        attacker.setAbilityLevel('A00I', level)

        if(not attacker.issuePointOrder("attackground", vec2(x,y)))
            print("failed to order attackground")
        attacker.setTimedLife(1)
        return

    if(spellId==ABILITY_PARALYZING_STRIKE)
        let target = GetSpellTargetUnit()
        var targetPos = target.getPos()
        var casterPos = caster.getPos()
        var portPos = targetPos.polarOffset(casterPos.angleTo(targetPos), 100)
        SOUND_PARALYZING_STRIKE.playOnPoint(targetPos.toVec3())
        doAfter(0, () -> caster.setPos(portPos))
        new Buff(target, caster, (2.5+0.5*level).bonus(caster.getInt(), 2) , STUNNED, 1)
        caster.dealDamage(target, (225+75*level).bonus(caster.getInt(), 400) , ReductionType.MAGIC)
        return

    if(spellId=='A00A')
        let target = GetSpellTargetUnit()
        caster.dealDamage(target, (25+25*level).bonus(caster.getStr(), 100) , ReductionType.PHYSICAL)
        SOUND_EMPOWERED_STRIKE.playOnPoint(target.getPos3Zero()).snd.setVolume(150)
        return

function onAttack()
    let level = OnAttack.getAttacker().getAbilityLevel(ABILITY_ENVENOMED_BLADES)
    if level != 0
        
        new Buff(OnAttack.getTarget(), OnAttack.getAttacker(), ENVENOMED_BLADES_DURATION[level-1], BUFF_ENVENOMED_BLADES, level)


//in for group
function poisonSpitPeriodic()
    unit poisonSpitDummy = GetEnumUnit()
    int level = poisonSpitDummy.getTypeId()+1-'n007'
    player owner =poisonSpitDummy.getOwner()
    unit hero =  Hero.getHero(owner).toUnit()
    if(level>3)
        level = poisonSpitDummy.getTypeId()+4-'n00A'

    group nearby = CreateGroup()
    nearby.enumUnitsInRange(poisonSpitDummy.getPos(), 175.+25*level)

    while(not nearby.isEmpty())
        unit target = FirstOfGroup(nearby)
        nearby.removeUnit(target)
        if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(poisonSpitDummy.getOwner(), false, true)
            new Buff(target, hero, 0.5, BUFF_POISON_SPIT, level)

    nearby.destr()

init
    heroType = new HeroType(HERO_PYTHON_WARRIORES)
    heroType.addOnAttackFunc(function onAttack)

    setupStats()

    var abilityList = new LinkedList<int>
    ..add('A009')
    BUFF_ENVENOMED_BLADES.setup(abilityList, 'B007')
    BUFF_ENVENOMED_BLADES.setPeriodicTime(1)
    BUFF_ENVENOMED_BLADES.addPeriodicFunction(()-> (begin
        let thisBuff = Buff.getTriggerBuff()
        thisBuff.getCaster().dealDamage(thisBuff.getTarget(), 
        (ENVENOMED_BLADES_DAMAGE[thisBuff.getLevel()-1]).bonus(thisBuff.getCaster().getInt(), ENVENOMED_BLADES_DAMAGE_BONUS)
        , ReductionType.MAGIC)
        //print(thisBuff.getTarget().getName()+" poisoned with level "+thisBuff.getLevel().toString()+" dealing"+(5.*thisBuff.getLevel()).bonus(thisBuff.getCaster().getInt(), 20).toString()+" damage.")
    end) )
    

    //Poison Spit
    abilityList = new LinkedList<int>
    ..add('A00J')
    ..add('A00K')
    BUFF_POISON_SPIT.setup(abilityList, 'B00B')
    BUFF_POISON_SPIT.addApplyFunction( () -> (begin
        let thisBuff = Buff.getTriggerBuff()
        thisBuff.getCaster().dealDamage(thisBuff.getTarget(), 
        (1.25*thisBuff.getLevel()).bonus(thisBuff.getCaster().getInt(), 5)
        , ReductionType.MAGIC)
    end) )

    onEnter(() -> (begin
        let spitDummy = getEnterLeaveUnit()
        int level = spitDummy.getTypeId()+1-'n007'
        if(level>3)
            level = spitDummy.getTypeId()+4-'n00A'

        if level >= 1 and level <= 5
            spitDummies.addUnit(spitDummy)
            SOUND_POISON_SPIT.playOnPoint(spitDummy.getPos3Zero())
            real x
            real y
            real angle
            for i = 0 to 9 + level*3
                angle = i/(10 + level*3)*2*bj_PI
                x = spitDummy.getX() + (140 + 25*level) * angle.cos()
                y = spitDummy.getY() + (140 + 25*level) * angle.sin()
                var e = AddSpecialEffect("Units\\Undead\\PlagueCloud\\PlagueCloudtarget.mdl", x, y)
                doAfter(5.+level, () -> DestroyEffect(e))

    end) )

    onLeave(() -> (begin
        let spitDummy = getEnterLeaveUnit()
        int level = spitDummy.getTypeId()+1-'n007'
        if(level>3)
            level = spitDummy.getTypeId()+4-'n00A'

        if level >= 1 and level <= 5
            
            spitDummies.removeUnit(spitDummy)
    end) )

    let spitPeriodicTrigger = CreateTrigger()
    spitPeriodicTrigger.registerTimerEvent(0.25, true)
    spitPeriodicTrigger.addAction(() -> (begin
        ForGroup(spitDummies, function poisonSpitPeriodic)
    end) )


    heroType.addOnSpellCastFunc(function onSpellCast)



