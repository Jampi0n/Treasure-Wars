package Freezer
//9

import HeroType
import UnitTypeConfig
import TimerUtils
import MapBounds
import HashMap
import OnAttack

public constant HERO_FREEZER = 'H00V'
constant THIS_HERO = HERO_FREEZER
constant THIS_ID = 9
constant THIS_BUTTON_POS = 9 //button pos from 0 to 11
constant THIS_ICON = Icons.bTNFrostArmor
HeroType heroType = null

constant ABILITY_COLD_HAND = 'AZ9P'
constant ABILITY_FROST_NOVA = 'AZ9Q'
constant ABILITY_FROST_ARMOR = 'AZ9W'
constant ABILITY_FROST_WYRM = 'AZ9E'
constant ABILITY_FREEZE = 'AZ9R'

constant SUMMON_MAP = new HashMap<unit,unit>

function setupStats()
    heroType
        
        ..setStat(Stat.AR, 27, 38)
        ..setStat(Stat.AS, 0, 26)
        ..setStat(Stat.HP, 7, 29)
        ..setStat(Stat.HR, 4, 12)
        ..setStat(Stat.MP, 25, 78)
        ..setStat(Stat.MR, 19, 63)
        ..setStat(Stat.MS, 7, 43)
        ..setStat(Stat.STR, 3, 21)
        ..setStat(Stat.AGI, 31, 43)
        ..setStat(Stat.INT, 18, 63)

constant int array COLD_HAND_MP = [2, 3, 4, 5, 6]


function coldHand(int abilityId)
    if compiletime
        createNoEffectAbiltiy(abilityId)
            ..setupWithHotKey("Cold Hand", "D")
            ..setupIcon("PASDarkRitual")
            ..setIconResearch(Icons.bTNDarkRitual)

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(0)
    tooltip.setLearnString("Attacking restores mana points.", (int lvl) -> (begin
        return "{0} mana points per attack".format(
            COLD_HAND_MP[lvl-1].str())
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(false, lvl, "Attacking restores {0} mana points.".format(
            COLD_HAND_MP[lvl-1].str())
        )
    addDynamicTooltipIntelligence(heroType, tooltip)

constant real array NOVA_TARGET_DMG =[50, 65, 80, 95, 110]
constant real NOVA_TARGET_DMG_BONUS = 65

constant real array NOVA_AOE_DMG =[50, 75, 100, 125, 150]
constant real NOVA_AOE_DMG_BONUS = 90

constant real NOVA_AOE = 250

constant real array NOVA_DURATION = [1.6, 2, 2.4, 2.8, 3.2]
constant real NOVA_DURATION_BONUS = 1.5

constant int array NOVA_MS = [30, 30, 30, 30, 30]
constant int array NOVA_AS = [20, 20, 20, 20, 20]

BuffType buffFrostNova

constant int NOVA_BUFF_ID = compiletime(createAuraBuff("Frost Nova", "This unit was hit by Frost Nova; its movement and attack speed are slowed.", Icons.bTNGlacier))
constant int NOVA_ABILTIY_ID = compiletime(createNegativeBuffAbility(5, NOVA_BUFF_ID, Abilities.frostDamage, "chest"))


function frostNova(int abilityId)

    if compiletime
        int array MANA = [130, 145, 160, 175, 190]
        real array COOLDOWN = [10, 10, 10, 10, 10]
        real array RANGE = [800, 800, 800, 800, 800]
        
        let aDef = new AbilityDefinitionIllidanChannel(abilityId)
            ..setAnimationNames("spell")
            ..setArtCaster("")
            ..setArtTarget("")
            ..setArtSpecial("")
            ..setArtEffect("")
            ..setupIcon(Icons.bTNGlacier)
            ..setupChannel(TargetType.UNIT, "frostnova", 1.1)
            ..setupWithHotKey("Frost Nova", "Q")
        
        for lvl = 1 to 5
            aDef
                ..setCooldown(lvl, COOLDOWN[lvl-1])
                ..setManaCost(lvl, MANA[lvl-1])
                ..setCastRange(lvl, RANGE[lvl-1])
                ..setTargetsAllowed(lvl, "ground,enemy,nonancient,neutral,organic,air")

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(NOVA_TARGET_DMG_BONUS, NOVA_AOE_DMG_BONUS, NOVA_DURATION_BONUS)
    tooltip.setLearnString("Blasts enemy units around a target enemy unit with a wave of damaging frost that slows movement and attack rate.", (int lvl) -> (begin
        return "{0}{I0} target damage, {1}{I1} nova damage, {2}{I2} seconds.".format(
            NOVA_TARGET_DMG[lvl-1].str(),
            NOVA_AOE_DMG[lvl-1].str(),
            NOVA_DURATION[lvl-1].toExactString())
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Blasts enemy units with a wave of frost that deals {0}{I0} damage to the target, and {1}{I1} nova damage. Cold damage slows units' movement and attack rate for {2}{I2} seconds.".format(
            NOVA_TARGET_DMG[lvl-1].str(),
            NOVA_AOE_DMG[lvl-1].str(),
            NOVA_DURATION[lvl-1].toExactString()))
    addDynamicTooltipIntelligence(heroType, tooltip)


constant int array ARMOR_AR = [15, 20, 25, 30, 35]
constant int ARMOR_AR_BONUS = 15
constant real ARMOR_DURATION = 10
constant int array ARMOR_SLOW = [25, 25, 25, 25, 25]
constant real array ARMOR_SLOW_DURATION = [1, 1.25, 1.5, 1.75, 2]
constant real ARMOR_SLOW_DURATION_BONUS = 1

BuffType buffFrostArmor
BuffType buffFrostArmorSlow

constant int ARMOR_BUFF_ID = compiletime(createAuraBuff("Frost Armor", "This unit has Frost Armor; its armor is increased and units that attack it will have their movement speed and attack rate reduced for a short duration.", "BTNSpell_Frost_ChillingArmor"))
constant int ARMOR_ABILTIY_ID = compiletime(createPositiveBuffAbility(5, ARMOR_BUFF_ID, Abilities.frostArmorTarget, "chest"))

constant int ARMOR_SLOW_BUFF_ID = compiletime(createAuraBuff("Slowed", "This unit attacked a unit with Frost Armor; its movement and attack speed are slowed.", Icons.bTNFrost))
constant int ARMOR_SLOW_ABILTIY_ID = compiletime(createNegativeBuffAbility(5, ARMOR_SLOW_BUFF_ID, Abilities.frostDamage, "chest"))


function frostArmor(int abilityId)

    if compiletime
        int array MANA = [100, 100, 100, 100, 100]
        real array COOLDOWN = [5, 5, 5, 5, 5]
        real array RANGE = [700, 700, 700, 700, 700]

        let aDef = new AbilityDefinitionIllidanChannel(abilityId)
            ..setAnimationNames("spell")
            ..setArtCaster("")
            ..setArtTarget("")
            ..setArtEffect("")
            ..setupChannel(TargetType.UNIT, "frostarmor", 1.1)
            ..setupIcon("BTNSpell_Frost_ChillingArmor")
            ..setupWithHotKey("Frost Armor", "W")

        for lvl = 1 to 5
            aDef
                ..setCooldown(lvl, COOLDOWN[lvl-1])
                ..setManaCost(lvl, MANA[lvl-1])
                ..setCastRange(lvl, RANGE[lvl-1])
                ..setTargetsAllowed(lvl, "friend,nonancient,self")

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(ARMOR_AR_BONUS.toReal(), ARMOR_SLOW_DURATION_BONUS)
    tooltip.setLearnString("Creates a shield of frost around a target friendly unit. The shield adds armor and slows units that attack it. Lasts {0} seconds.".format(ARMOR_DURATION.str()), (int lvl) -> (begin
        return "{0}{I0} armor, {1} slow for {2}{I1} seconds.".format(
            ARMOR_AR[lvl-1].str(),
            ARMOR_SLOW[lvl-1].str(),
            ARMOR_SLOW_DURATION[lvl-1].toExactString())
    end) )

    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Creates a shield of frost around a target friendly unit. The shield adds {0}{I0} armor and slows units that attack it by {1}% for {2}{I1} seconds. Lasts {3} seconds.".format(
            ARMOR_AR[lvl-1].str(),
            ARMOR_SLOW[lvl-1].str(),
            ARMOR_SLOW_DURATION[lvl-1].toExactString(),
            ARMOR_DURATION.str()))
    addDynamicTooltipIntelligence(heroType, tooltip)

constant int array FROST_WYRM_HP = [100, 300, 500, 750, 1000]
constant int array FROST_WYRM_DMG = [10, 20, 30, 40, 50]

constant int FROST_WYRM_INT_FACTOR = 50

constant real FROST_WYRM_AOE = 175

constant int array FROST_BREATH_SLOW = [20, 20, 20, 20, 20]
constant real array FROST_BREATH_DUR = [2, 2.25, 2.5, 2.75, 3]

BuffType buffFrostBreath

constant int FROST_BREATH_BUFF_ID = compiletime(createAuraBuff("Frost Breath", "This unit was hit by a Frost Wyrm; its movement and attack speed are slowed.", Icons.bTNBreathOfFrost))
constant int FROST_BREATH_ABILTIY_ID = compiletime(createNegativeBuffAbility(5, FROST_BREATH_BUFF_ID, Abilities.frostDamage, "chest"))
        

function frostWyrm(int abilityId)

    if compiletime
        int array MANA = [200, 250, 300, 350, 400]
        real array COOLDOWN = [45, 45, 45, 45, 45]

        let aDef = new AbilityDefinitionRoar(abilityId)
            ..setAnimationNames("spell")
            ..setArtCaster("")
            ..setupIcon(Icons.bTNFrostWyrm)
            ..setupWithHotKey("Summon Frost Wyrm", "E")

        for lvl = 1 to 5
            aDef
                ..setCooldown(lvl, COOLDOWN[lvl-1])
                ..setManaCost(lvl, MANA[lvl-1])
                ..setTargetsAllowed(lvl, "none")

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(FROST_WYRM_INT_FACTOR.toReal())  
    tooltip.setSummary("Summons a powerful Frost Wyrm, that slows enemies it attacks.")
    tooltip.setLearnString("Summons a powerful Frost Wyrm. The Frost Wyrm's attack speed and hit points scale with the respective stats of the Hero. The Frost Wyrm's attacks slow the targets.", (int lvl) -> (begin
        return "{0}{I0} bonus damage, {1} bonus hit points, {2}% slow for {3} seconds.".format(
            FROST_WYRM_DMG[lvl-1].str(),
            FROST_WYRM_HP[lvl-1].str(),
            FROST_BREATH_SLOW[lvl-1].str(),
            FROST_BREATH_DUR[lvl-1].toExactString()
        )
    end) )
    
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Summons a powerful Frost Wyrm. The Frost Wyrm's attack speed and hit points scale with the respective stats of the Hero. Deals {0}{I0} bonus damage and has {1} additional hit points. The Frost Wyrm's attacks slow the targets by {2}% for {3} seconds.".format(
            FROST_WYRM_DMG[lvl-1].str(),
            FROST_WYRM_HP[lvl-1].str(),
            FROST_BREATH_SLOW[lvl-1].str(),
            FROST_BREATH_DUR[lvl-1].toExactString()
        ))      
    addDynamicTooltipIntelligence(heroType, tooltip)


constant real FREEZE_AOE = 900
constant real array FREEZE_DMG = [80, 100, 120, 140, 160]
constant real FREEZE_DMG_BONUS = 100

constant real array FREEZE_DURATION = [2.5, 2.75, 3, 3.25, 3.5]

constant int FREEZE_DEF = 100

BuffType buffFreeze

constant int FREEZE_BUFF_ID = compiletime(createAuraBuff("Freeze", "This unit is under the effect of freeze; it is stunned; but has increased armor and willpower.", Icons.bTNFreezingBreath))
constant int FREEZE_ABILTIY_ID = compiletime(createNegativeBuffAbility(5, FREEZE_BUFF_ID, "", ""))


function freeze(int abilityId)

    if compiletime
        int array MANA = [350, 350, 350, 350, 350]
        real array COOLDOWN = [150, 140, 130, 120, 110]

        generateDummyUnit()
        let aDef = new AbilityDefinitionKeeperoftheGroveTranquility(abilityId)
            ..setAnimationNames("spell,channel")
            ..setupIcon(Icons.bTNFreezingBreath)
            ..setupWithHotKey("Freeze", "R")

        for lvl = 1 to 5
            aDef
                ..setCooldown(lvl, COOLDOWN[lvl-1])
                ..setManaCost(lvl, MANA[lvl-1])
                ..setDurationHero(lvl, FREEZE_DURATION[lvl-1])
                ..setDurationNormal(lvl, FREEZE_DURATION[lvl-1])
                ..setEffects(lvl, "X000")
                ..setTargetsAllowed(lvl, "none")

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(FREEZE_DMG_BONUS)
    tooltip.setLearnString(CHANNELING_SPELL + "Freezes nearby enemies, disabling them and dealing damage over time. However, targets covered with ice have their armor and willpower increased by {0}.".format(FREEZE_DEF.str()), (int lvl) -> (begin
        return "{0}{I0} damage per second, lasts {1} seconds.".format(
            FREEZE_DMG[lvl-1].str(),
            FREEZE_DURATION[lvl-1].toExactString()
            )
    end) )
    
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, CHANNELING_SPELL + "Freezes nearby enemies, disabling them for up to {1} seconds and dealing {0}{I0} damage per second. However, targets covered with ice have their armor and willpower increased by {2}.".format(
            FREEZE_DMG[lvl-1].str(),
            FREEZE_DURATION[lvl-1].toExactString(),
            FREEZE_DEF.str()
        ))
    addDynamicTooltipIntelligence(heroType, tooltip)

constant int FREEZE_EFFECT = compiletime(UNIT_ID_GEN.next())

function generateDummyUnit()
    let u = new UnitDefinition(FREEZE_EFFECT, 'ewsp')
    u..setName("Effect Dummy Unit")
    ..setUpgradesUsed("")
    ..setStructuresBuilt("")
    ..setCollisionSize(0.0)
    ..setRace(Race.Commoner)
    ..setFoodCost(0)
    ..setArmorType(ArmorType.Divine)
    ..setIconGameInterface("ReplaceableTextures\\CommandButtons\\BTNtemp.blp")
    ..setSpeedBase(522)
    ..setModelFile(Abilities.freezingBreathTargetArt)
    ..setAnimationBlendTimeseconds(0.0)
    ..setAnimationCastBackswing(0.0)
    ..setMaximumPitchAngledegrees(0.0)
    ..setMaximumRollAngledegrees(0.0)
    ..setArtSpecial("")
    ..setProjectileImpactZ(0.0)
    ..setProjectileLaunchZ(0.0)
    ..setSightRadiusDay(1)
    ..setSightRadiusNight(1)
    ..setUnitClassification("_")
    ..setPropulsionWindowdegrees(1.0)
    ..setTooltipBasic("")
    ..setNormalAbilities("Avul,Aloc")
    ..setScalingValue(0.75)

class Freeze

    private unit caster
    private int level
    private timer checkTimer

    protected static constant effectMap = new HashMap<int,unit>()

    construct(unit caster, int level)
        this.caster = caster
        this.level = level
        this.checkTimer = getTimer()
            ..setData(this castTo int)
            ..startPeriodic(0.05, function updateStatic)

        let g = CreateGroup()
        g.enumUnitsInRange(this.caster.getPos(), FREEZE_AOE)
        for unit u in g
            if u.isTargetable(this.caster.getOwner(), false, true) and not u.isType(UNIT_TYPE_STRUCTURE)
                u.addBuff(this.caster, -1, buffFreeze, this.level)
        g.destr()

    function update()
        if this.caster.getCurrentOrder()!= OrderId("tranquility")
            destroy this
            return
    
    static function updateStatic()
        (GetExpiredTimer().getData() castTo Freeze).update()

    ondestroy
        this.checkTimer.release()
        let g = CreateGroup()
        g.enumUnitsInRect(playableMapRect)
        for unit u in g
            let freezeBuff = BuffList.getBuffOfType(u, buffFreeze)
            if freezeBuff != null
                if freezeBuff.getCaster() == this.caster
                    freezeBuff.dispel()

        g.destr()

function onAttack(unit attacker, unit target)
    if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(attacker.getOwner(), false, true)
        let level = attacker.getAbilityLevel(ABILITY_COLD_HAND)
        if level != 0
            attacker.healMana(attacker, COLD_HAND_MP[level-1].toReal())


function castFrostNova()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)
    let target = GetSpellTargetUnit()
    group nearby = CreateGroup()

    nearby.enumUnitsInRange(target.getPos(), NOVA_AOE)
    addEffect(Abilities.frostNovaTarget, target.getPos()).destr()

    let dmg = NOVA_AOE_DMG[level-1].bonus(caster.getInt(), NOVA_AOE_DMG_BONUS)
    let dur = NOVA_DURATION[level-1].bonus(caster.getInt(), NOVA_DURATION_BONUS)

    while(not nearby.isEmpty())
        unit u = FirstOfGroup(nearby)
        nearby.removeUnit(u)
        if not u.isType(UNIT_TYPE_STRUCTURE) and u.isTargetable(caster.getOwner(), false, true)
            caster.dealDamage(u, dmg, ReductionType.MAGIC)
            u.addBuffReduced(caster, dur, buffFrostNova, level)

    nearby.destr()

    caster.dealDamage(target, NOVA_TARGET_DMG[level-1].bonus(caster.getInt(), NOVA_TARGET_DMG_BONUS), ReductionType.MAGIC)

function castFrostArmor()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)
    GetSpellTargetUnit().addBuff( caster, ARMOR_DURATION, buffFrostArmor, level)

function castFrostWyrm()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)
    SUMMON_MAP.get(caster).kill()
    let frostWyrm = createUnit(caster.getOwner(), FROST_WYRM, caster.getPos(), angle(0))
    SUMMON_MAP.put(caster, frostWyrm)
    let wrapper = frostWyrm.wrapper()
    wrapper.addStatAbsoluteBonus(Stat.AS, caster.wrapper().getStatTotalBonus(Stat.AS))
    wrapper.addStatAbsoluteBonus(Stat.HP, caster.wrapper().getStatTotalBonus(Stat.HP) + FROST_WYRM_HP[level-1] )
    wrapper.addStatAbsoluteBonus(Stat.STR, ( (FROST_WYRM_INT_FACTOR/100) * caster.getInt() ).toInt()  + FROST_WYRM_DMG[level-1] )

function castFreeze()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)
    new Freeze(caster, level)

function retreatAI(HeroAI _ai)

function attackAI(HeroAI ai)
    let hero = ai.getHeroUnit()

    let frostWyrm = SUMMON_MAP.get(hero)

    if not frostWyrm.isAlive()
        ai.issue("roar")

    unit target
    if hero.getMana()/hero.getMaxMana() > 0.5
        target = hero.findTarget(800, AbilityTargetFocus.ENEMY_HERO, AbilityTargetPriority.LOW_HEALTH, null)
        if target.isTargetable(hero.getOwner(), false, true)
            ai.issue("frostnova", target)

    target = hero.findTarget(600, AbilityTargetFocus.ENEMY, AbilityTargetPriority.LOW_HEALTH, null)
    if target.isTargetable(hero.getOwner(), false, true)
        if not ai.getAttacking()
            ai.attack(target)

    if frostWyrm.getCurrentOrder() != OrderId("patrol")
        frostWyrm.issueTargetOrder("patrol", hero)
 
function teamFightAI(HeroAI ai)
    let ulti = heroType.getAbilityId( AbilitySlot.R)
    let hero = ai.getHeroUnit()

    let frostWyrm = SUMMON_MAP.get(hero)

    if not frostWyrm.isAlive()
        ai.issue("roar")


    ai.issue("frostnova", ai.getTeamFightTarget())

    if hero.getAbilityLevel(ulti) > 0
        let g = CreateGroup()
        unit u
        int count = 0
        g.enumUnitsInRange(hero.getPos(), FREEZE_AOE)
        while(true)
            u = FirstOfGroup(g)
            if u == null
                break
            g.removeUnit(u)
            if u.isTargetable(hero.getOwner(), false, true)
                if u.isType(UNIT_TYPE_HERO)
                    count++

        g.destr()
        if count > 1
            if ai.issue("tranquility")
                return

        
    unit target = hero.findTarget(600, AbilityTargetFocus.FRIEND_HERO, AbilityTargetPriority.HIGH_HEALTH, (unit u) -> (begin
        return not BuffList.hasBuffType(u, buffFrostArmor)
    end))
    if target.isTargetable(hero.getOwner(), true, false)
        ai.issue("frostarmor", target)

    target = ai.getTeamFightTarget()
    if target.isTargetable(hero.getOwner(), false, true)


        if not ai.getAttacking()
            ai.attack(target)

        if frostWyrm.getCurrentOrder() != OrderId("attack")
            frostWyrm.issueTargetOrder("attack", target)

@compiletime
function setupTooltips()

    coldHand(ABILITY_COLD_HAND)
    frostNova(ABILITY_FROST_NOVA)
    frostArmor(ABILITY_FROST_ARMOR)
    frostWyrm(ABILITY_FROST_WYRM)
    freeze(ABILITY_FREEZE)
    createHeroButton(THIS_ID, THIS_BUTTON_POS, THIS_ICON)

function initHeroType()
    setupStats()
    onCast(ABILITY_FROST_NOVA, () -> castFrostNova())
    onCast(ABILITY_FROST_ARMOR, () -> castFrostArmor())
    onCast(ABILITY_FROST_WYRM, () -> castFrostWyrm())
    onCast(ABILITY_FREEZE, () -> castFreeze())
    heroType..setSkillBuild("EQWQQQQEWEWEWEW")
    ..addItem(ITEM_ID_BOOTS_OF_DARKNESS)
    ..addItem(ITEM_ID_ENCHANTED_ARMOR)
    ..addItem(ITEM_ID_BLESSED_GOBLET)
    ..addItem(ITEM_ID_SCROLL_OF_CONJURATION)
    ..addItem(ITEM_ID_VAMPIRIC_GOBLET)
    ..addItem(ITEM_ID_RUNIC_ARMOR)
    delayInit(5) ->
        heroType
            ..setOnAttackFunc((unit attacker, unit target, boolean isActive, boolean advanced) -> onAttack(attacker, target))
            ..setRetreatAI((HeroAI ai) -> (retreatAI(ai)))
            ..setAttackAI((HeroAI ai) -> (attackAI(ai)))
            ..setTeamFightAI((HeroAI ai) -> (teamFightAI(ai)))

        buffFrostNova = new BuffType(false, true)

        var abilityList = new LinkedList<int>
        ..add(NOVA_ABILTIY_ID)
        buffFrostNova.setup(abilityList, NOVA_BUFF_ID)

        buffFrostNova.addFirstFunction( (Buff whichBuff) -> (begin
            let level = whichBuff.getLevel()
            whichBuff.getTarget().wrapper()
                ..addStatAbsoluteBonus(Stat.AS, -NOVA_AS[level - 1])
                ..addStatRelativeBonus(Stat.MS, -NOVA_MS[level - 1]*10)
                ..incBlue()
        end))

        buffFrostNova.addEndFunction( (Buff whichBuff) -> (begin
            let level = whichBuff.getLevel()
            whichBuff.getTarget().wrapper()
                ..addStatAbsoluteBonus(Stat.AS, NOVA_AS[level - 1])
                ..addStatRelativeBonus(Stat.MS, NOVA_MS[level - 1]*10)
                ..decBlue()
        end))


        buffFrostArmor = new BuffType(true, true)

        abilityList = new LinkedList<int>
        ..add(ARMOR_ABILTIY_ID)
        buffFrostArmor.setup(abilityList, ARMOR_BUFF_ID)

        buffFrostArmor.addFirstFunction( (Buff whichBuff) -> (begin
            let level = whichBuff.getLevel()
            let intel = whichBuff.getCaster().getInt()
            whichBuff.setData(intel)
            whichBuff.getTarget().wrapper()
                ..addStatAbsoluteBonus(Stat.AR, ARMOR_AR[level - 1].bonus(intel, ARMOR_AR_BONUS).round())
        end))

        buffFrostArmor.addEndFunction( (Buff whichBuff) -> (begin
            let intel = whichBuff.getData()
            let level = whichBuff.getLevel()
            whichBuff.getTarget().wrapper()
                ..addStatAbsoluteBonus(Stat.AR, -ARMOR_AR[level - 1].bonus(intel, ARMOR_AR_BONUS).round())
        end))


        buffFrostArmorSlow = new BuffType(false, true)

        abilityList = new LinkedList<int>
        ..add(ARMOR_SLOW_ABILTIY_ID)
        buffFrostArmorSlow.setup(abilityList, ARMOR_SLOW_BUFF_ID)

        buffFrostArmorSlow.addFirstFunction( (Buff whichBuff) -> (begin
            let level = whichBuff.getLevel()
            whichBuff.getTarget().wrapper()
                ..addStatAbsoluteBonus(Stat.AS, -ARMOR_SLOW[level - 1])
                ..addStatRelativeBonus(Stat.MS, -ARMOR_SLOW[level - 1]*10)
                ..incBlue()
        end))

        buffFrostArmorSlow.addEndFunction( (Buff whichBuff) -> (begin
            let level = whichBuff.getLevel()
            whichBuff.getTarget().wrapper()
                ..addStatAbsoluteBonus(Stat.AS, ARMOR_SLOW[level - 1])
                ..addStatRelativeBonus(Stat.MS, ARMOR_SLOW[level - 1]*10)
                ..decBlue()
        end))


        buffFrostBreath = new BuffType(false, true)

        abilityList = new LinkedList<int>
        ..add(FROST_BREATH_ABILTIY_ID)
        buffFrostBreath.setup(abilityList, FROST_BREATH_BUFF_ID)

        buffFrostBreath.addFirstFunction( (Buff whichBuff) -> (begin
            let level = whichBuff.getLevel()
            whichBuff.getTarget().wrapper()
                ..addStatRelativeBonus(Stat.MS, -FROST_BREATH_SLOW[level - 1]*10)
                ..incBlue()
        end))

        buffFrostBreath.addEndFunction( (Buff whichBuff) -> (begin
            let level = whichBuff.getLevel()
            whichBuff.getTarget().wrapper()
                ..addStatRelativeBonus(Stat.MS, FROST_BREATH_SLOW[level - 1]*10)
                ..decBlue()
        end))



        buffFreeze= new BuffType(false, true)

        abilityList = new LinkedList<int>
        ..add(FREEZE_ABILTIY_ID)
        buffFreeze.setup(abilityList, FREEZE_BUFF_ID)

        buffFreeze.addFirstFunction( (Buff whichBuff) -> (begin
            whichBuff.getTarget().addBuff(whichBuff.getCaster(), 0.1, STUNNED, 1)
            let fx = createUnit(Player(PLAYER_NEUTRAL_PASSIVE), FREEZE_EFFECT, whichBuff.getTarget().getPos(), angle(GetRandomReal(0, 2 * bj_PI)))
            whichBuff.setData(fx.getHandleId())
            Freeze.effectMap.put(fx.getHandleId(), fx)
            let wrapper = whichBuff.getTarget().wrapper()
            wrapper.addStatAbsoluteBonus(Stat.AR, FREEZE_DEF)
            wrapper.addStatAbsoluteBonus(Stat.AGI, FREEZE_DEF)
        end))
        buffFreeze.setPeriodicTime(0.05)
        buffFreeze.addPeriodicFunction( (Buff whichBuff) -> (begin
            let target = whichBuff.getTarget()
            let caster = whichBuff.getCaster()
            let level = whichBuff.getLevel()
            let fx = Freeze.effectMap.get(whichBuff.getData())
            if target.isTargetable(caster.getOwner(), false, true)
                fx.setXY(target.getPos())
                target.addBuff(whichBuff.getCaster(), 0.1, STUNNED, 1)
                caster.dealDamage(target, 0.05 * FREEZE_DMG[level-1].bonus(caster.getInt(), FREEZE_DMG_BONUS), ReductionType.MAGIC)
            else
                whichBuff.dispel()
        end))

        buffFreeze.addEndFunction( (Buff whichBuff) -> (begin
            let fx = Freeze.effectMap.get(whichBuff.getData())
            fx.remove()
            whichBuff.setData(0)
            let wrapper = whichBuff.getTarget().wrapper()
            wrapper.addStatAbsoluteBonus(Stat.AR, -FREEZE_DEF)
            wrapper.addStatAbsoluteBonus(Stat.AGI, -FREEZE_DEF)
        end))

        OnAttack.addOnAttackFunc((unit attacker, unit target, boolean isActive) -> (begin
            if attacker.getTypeId() == FROST_WYRM
                group nearby = CreateGroup()
                nearby.enumUnitsInRange(target.getPos(), FROST_WYRM_AOE)

                let dmg = attacker.wrapper().getStatTotalValue(Stat.STR) * 0.5
                let level = SUMMON_MAP.get(attacker).getAbilityLevel(ABILITY_FROST_WYRM)

                if not target.isType(UNIT_TYPE_STRUCTURE)
                    target.addBuffReduced(attacker, FROST_BREATH_DUR[level-1], buffFrostBreath, level)

                while(not nearby.isEmpty())
                    unit u = FirstOfGroup(nearby)
                    nearby.removeUnit(u)
                    if not u.isType(UNIT_TYPE_STRUCTURE) and u.isTargetable(attacker.getOwner(), false, true) and u != target
                        u.addBuffReduced(attacker, FROST_BREATH_DUR[level-1], buffFrostBreath, level)
                        attacker.dealDamage(u, dmg, ReductionType.PHYSICAL)

                nearby.destr()
        end))

        OnAttack.addOnAttackFunc((unit attacker, unit target, boolean isActive) -> (begin
            if BuffList.hasBuffType(target, buffFrostArmor) and not attacker.isType(UNIT_TYPE_STRUCTURE) and attacker.isTargetable(target.getOwner(), false, true)
                let armorBuff = BuffList.getBuffOfType(target, buffFrostArmor)
                let level = armorBuff.getLevel()
                attacker.addBuffReduced(armorBuff.getCaster(), ARMOR_SLOW_DURATION[level-1].bonus(armorBuff.getData(), ARMOR_SLOW_DURATION_BONUS), buffFrostArmorSlow, level)
        end))

        CreateTrigger()
        ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)
        ..addAction() ->
            if GetTriggerUnit().getTypeId() == FROST_WYRM
                SUMMON_MAP.remove(GetTriggerUnit())

   

        
init
    heroType = new HeroType(THIS_HERO, THIS_ICON, THIS_ID, true)
    ..setOnInitFunction(() -> initHeroType())

    setupTooltips()
    addButtonToTavern(THIS_ID, THIS_BUTTON_POS, heroType, 0)