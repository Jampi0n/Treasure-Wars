package ElementalMage

//11

import HeroType
import Missile
import ClosureTimers
import HeroControl
import Fx


public constant HERO_ELEMENTAL_MAGE = 'H00P'

HeroType heroType


constant ABILITY_FRENZY = 'AY1P'
constant ABILITY_FROST_BOLT = 'AY1Q'
constant ABILITY_FIRE_BLINK = 'AY1W'
constant ABILITY_ELEMENTAL_MARK = 'AY1E'
constant ABILITY_FROST_AND_FLAME = 'AY1R'


BuffType buffFrenzy
constant FRENZY_BUFF_ID = compiletime(createAuraBuff("Frenzy", "This unit is under the effect of Frenzy; it attacks faster.", "PASFrostFireFrenzy"))
constant FRENZY_ABILITY_ID = compiletime(createPositiveBuffAbility(5, FRENZY_BUFF_ID, "", ""))

constant real FRENZY_DURATION = 3.
constant real array FRENZY_BONUS = [2, 2.5, 3, 3.5, 4]

@compiletime
function passive()
    let aDef =createNoEffectAbiltiy(ABILITY_FRENZY)
        ..setupWithHotKey("Frenzy", "D")
        ..setupIcon("PASFrostFireFrenzy")
        ..setLearnString("Increases the Elemental Mage's attack speed everytime he attacks. If he does not attack for {0} seconds, the bonus is gone.".format(FRENZY_DURATION.toExactString()), (int lvl) -> (begin
            return "{0}% attack speed bonus".format(
                FRENZY_BONUS[lvl-1].toExactString())
        end) )

    for lvl = 1 to 5
        aDef
            ..setDescriptionString(false, lvl, "Increases the Elemental Mage's attack speed by {1}% everytime he attacks. If he does not attack for {0} seconds, the bonus is gone.".format(
                FRENZY_DURATION.toExactString(), FRENZY_BONUS[lvl-1].toExactString())
            )


BuffType buffFrostBolt
constant FROST_BOLT_BUFF_ID = compiletime(createAuraBuff("Frost Attack", "This unit was hit by a Frost Attack; it is slowed.", Icons.bTNOrbOfFrost))
constant FROST_BOLT_ABILITY_ID = compiletime(createNegativeBuffAbility(5, FROST_BOLT_BUFF_ID, Abilities.frostDamage, "chest"))

constant int array FROST_BOLT_SLOW = [40, 45, 50, 55, 60]
constant real array FROST_BOLT_DURATION = [2, 2.5, 3, 3.5, 4]


constant real array FROST_BOLT_DAMAGE = [60, 100, 140, 180, 220]
constant real FROST_BOLT_DAMAGE_BONUS = 100

@compiletime
function abilityQ()
    int array MANA = [120, 125, 130, 135, 140]
    real array COOLDOWN = [8, 8, 8, 8, 8]

    let aDef = new AbilityDefinitionIllidanChannel(ABILITY_FROST_BOLT)
        ..setupIcon("BTNOrbOfFrost2")
        ..setupChannel(TargetType.POINT, "channel", 1.1)
        ..setAnimationNames("spell")
        ..setupWithHotKey("Frost Bolt", "Q")
        ..setLightningEffects("")
        ..setArtTarget("")
        ..setMissileArt("")
        ..setArtSpecial("")
        ..setLightningEffects("")

    for lvl = 1 to 5
        aDef
            ..setCooldown(lvl, COOLDOWN[lvl-1])
            ..setManaCost(lvl, MANA[lvl-1])
            ..setCastRange(lvl, 800)


constant real array FIRE_BLINK_MAX_RANGE =[700, 700, 700, 700, 700]
constant real array FIRE_BLINK_COOLDOWN = [13, 13, 13, 13, 13]

constant real array FIRE_BLINK_DAMAGE = [80, 140, 200, 260, 320]
constant real FIRE_BLINK_DAMAGE_BONUS = 150

constant real FIRE_BLINK_AOE = 300

@compiletime
function abiltiyW()
    int array MANA = [140, 150, 160, 170, 180]

    let aDef = new AbilityDefinitionWardenBlink(ABILITY_FIRE_BLINK)
        ..setAnimationNames("")
        ..setupIcon("BTNSupernova")
        ..setupWithHotKey("Aspect of Fire", "W")
        ..setLightningEffects("")
        ..setArtTarget("")
        ..setMissileArt("")
        ..setArtSpecial("")
        ..setLightningEffects("")

    for lvl = 1 to 5
        aDef
            ..setCastRange(lvl, FIRE_BLINK_MAX_RANGE[lvl-1])
            ..setCooldown(lvl, FIRE_BLINK_COOLDOWN[lvl-1])
            ..setManaCost(lvl, MANA[lvl-1])
            ..setMinimumRange(lvl, 250)
            ..setMaximumRange(lvl, FIRE_BLINK_MAX_RANGE[lvl-1])

constant real MARK_DURATION = 8
constant real array MARK_DMG = [15, 25, 35, 45, 55]
constant real MARK_DMG_BONUS = 70

constant int array MARK_WP_REDUCTION = [10, 15, 20, 25, 30]
constant real MARK_STUN = 1.5

BuffType buffElementalMark
constant MARK_BUFF_ID = compiletime(createAuraBuff("Elemental Mark", "This unit is under the effect of Elemental Mark; it has reduced willpower and it will take additional magic damage when attacked by the Elemental Mage. The unit will be stunned after 5 attacks.", "BTNElementalMark"))
constant MARK_ABILITY_ID = compiletime(createNegativeBuffAbility(5, MARK_BUFF_ID, "ElementalMark2.mdx", "overhead"))

@compiletime
function abilityE()
    int array MANA = [135, 140, 145, 150, 155]
    real array COOLDOWN = [10, 10, 10, 10, 10]

    let aDef = new AbilityDefinitionIllidanChannel(ABILITY_ELEMENTAL_MARK)
        ..setupIcon("BTNElementalMark")
        ..setupChannel(TargetType.UNIT, "soulburn", 1.1)
        ..setAnimationNames("spell")
        ..setupWithHotKey("Elemental Mark", "E")

    for lvl = 1 to 5
        aDef
            ..setCooldown(lvl, COOLDOWN[lvl-1])
            ..setManaCost(lvl, MANA[lvl-1])
            ..setCastRange(lvl, 600)
            ..setTargetsAllowed(lvl, "ground,enemy,nonancient,neutral,organic,air")


constant int FF_FROST_IMPACT = compiletime(ArtilleryDetection.createDetectionDummy())
constant int FF_FROST_ARTILLERY = compiletime(ArtilleryDetection.createArtilleryDummy(0, 0, 600, 2.5, Abilities.frostWyrmMissile, 1600, 0.1, FF_FROST_IMPACT))
constant int FF_FLAME_IMPACT = compiletime(ArtilleryDetection.createDetectionDummy())
constant int FF_FLAME_ARTILLERY = compiletime(ArtilleryDetection.createArtilleryDummy(0, 0, 600, 2.5, Abilities.redDragonMissile, 1600, 0.1, FF_FLAME_IMPACT))

constant real array FF_IMPACT_DAMAGE = [200, 250, 300, 350, 400]
constant real FF_IMPACT_DAMAGE_BONUS = 150

constant real array FF_DOT = [30, 40, 50, 60, 70]
constant real FF_DOT_BONUS = 40

constant int array FF_SLOW = [30, 40, 50, 60, 70]
constant real array FF_BUFF_DURATION = [3, 3.5, 4, 4.5, 5]
constant real FF_BUFF_DURATION_BONUS = 1

constant real FF_AOE = 400

BuffType buffFFBuff
constant FF_BUFF_ID = compiletime(createAuraBuff("Frost and Flame", "This unit was hit by Frost and Flame; it is slowed and takes damage over time.", "BTNMageOrb"))
constant FF_ABILITY_ID = compiletime(ABIL_ID_GEN.next())


@compiletime
function abilityR()
    int array MANA = [225, 250, 275, 300, 325]
    real array COOLDOWN = [60, 60, 60, 60, 60]

    let buffADef = new AbilityDefinitionAuraSlow(FF_ABILITY_ID)
        ..setArtTarget(Abilities.frostDamage+","+Abilities.breathOfFireDamage)
        ..setTargetAttachmentPoint("chest")
        ..setTargetAttachmentPoint1("origin")
        ..setTargetAttachments(2)
        ..hideIcon()
    for i = 1 to 5
        buffADef
            ..setTargetsAllowed(i, "invulnerable,self,vulnerable")
            ..setAreaofEffect(i, 1)
            ..setMovementSpeedFactor(i, 0)
            ..setAttackSpeedFactor(i, 0)
            ..setBuffs(i, FF_BUFF_ID.toRawCode())

    let aDef = new AbilityDefinitionIllidanChannel(ABILITY_FROST_AND_FLAME)
        ..setupIcon("BTNMageOrb")
        ..setupWithHotKey("Frost and Flame", "R")
        ..setupChannel(TargetType.AREA, "silence", 1.1)
        ..setLightningEffects("")


    for lvl = 1 to 5
        aDef
            ..setCooldown(lvl, COOLDOWN[lvl-1])
            ..setManaCost(lvl, MANA[lvl-1])
            ..setDurationHero(lvl, 0.01)
            ..setTargetsAllowed(lvl, "none")
            ..setCastRange(lvl, 3000)
            ..setAreaofEffect(lvl, FF_AOE)


function onAttack(unit attacker, unit target, boolean _advanced)
    let level = attacker.getAbilityLevel(ABILITY_FRENZY)
    if level > 0
        attacker.addBuff(attacker, FRENZY_DURATION, buffFrenzy, level)

    if BuffList.hasBuffType(target, buffElementalMark)
        let mark = BuffList.getBuffOfType(target, buffElementalMark)
        let markLevel = mark.getLevel()
        int stacks = mark.getData() + 1
        if stacks == 5
            stacks = 0
            target.addBuffReduced(attacker, MARK_STUN, STUNNED, 1)
        mark.setData(stacks)
        attacker.dealDamage(target, MARK_DMG[markLevel-1].bonus(attacker.getInt(), MARK_DMG_BONUS), ReductionType.MAGIC)


function onSpellCast()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)

    if(spellId == ABILITY_FROST_BOLT)
        let facing = caster.getPos().angleTo(vec2(GetSpellTargetX(), GetSpellTargetY()))
        new Missile(caster, caster.getPos().withZ(80), 900, facing, Abilities.frostBoltMissile)
            ..hitOnce()
            ..setSize(100)
            ..addModel(Abilities.zigguratFrostMissile)
            ..setScale(2)
            ..setHitCondition((Missile missile, unit target) -> (begin
            return not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(missile.getOwner().getOwner(), false, true)
        end) )
            ..setHitFunction((Missile missile, unit target) -> (begin
            let missileCaster = missile.getOwner()
            missileCaster.dealDamage(Missile.getMissileTarget(), (FROST_BOLT_DAMAGE[level-1]).bonus(missileCaster.getInt(), FROST_BOLT_DAMAGE_BONUS), ReductionType.MAGIC)
            Missile.getMissileTarget().addBuffReduced(missileCaster, FROST_BOLT_DURATION[level-1], buffFrostBolt, level)
        end) )
            ..setMaxRange(800)
    else if (spellId == ABILITY_FIRE_BLINK)

        group nearby = CreateGroup()

        nearby.enumUnitsInRange(vec2(GetSpellTargetX(),GetSpellTargetY()), FIRE_BLINK_AOE)



        let dmg = (FIRE_BLINK_DAMAGE[level-1]).bonus(caster.getInt(), FIRE_BLINK_DAMAGE_BONUS)
        while(not nearby.isEmpty())
            unit target = FirstOfGroup(nearby)
            nearby.removeUnit(target)
            if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(caster.getOwner(), false, true)

                caster.dealDamage(target, dmg, ReductionType.MAGIC)
                target.addEffect(Abilities.redDragonMissile, "chest").destr()

        nearby.destr()

    else if spellId == ABILITY_ELEMENTAL_MARK
        let target = GetSpellTargetUnit()
        target.addBuffReduced(caster, MARK_DURATION, buffElementalMark, level)

    else if spellId == ABILITY_FROST_AND_FLAME
        let casterPos = caster.getPos()
        let casterAngle = caster.getFacingAngle()
        let behindCaster = casterPos.polarOffset(casterAngle, -1000)
        let targetPos = vec2(GetSpellTargetX(), GetSpellTargetY())
        ArtilleryDetection.fireArtillery(caster.getOwner(), FF_FLAME_ARTILLERY, behindCaster.polarOffset(casterAngle + angle(bj_PI/2), 600), targetPos)
        ArtilleryDetection.fireArtillery(caster.getOwner(), FF_FROST_ARTILLERY, behindCaster.polarOffset(casterAngle - angle(bj_PI/2), 600), targetPos)



function setupStats()
    heroType
        //..setStat(Stat.AD, 5, 40)
        ..setStat(Stat.AR, 7, 14)
        ..setStat(Stat.AS, 31, 86)
        ..setStat(Stat.HP, 8, 39)
        ..setStat(Stat.HR, 7, 21)
        ..setStat(Stat.MP, 21, 51)
        ..setStat(Stat.MR, 23, 56)
        ..setStat(Stat.MS, 11, 42)
        ..setStat(Stat.STR, 22, 74)
        ..setStat(Stat.AGI, 9, 17)
        ..setStat(Stat.INT, 18, 57)

function retreatAI(HeroAI _ai)

function attackAI(HeroAI _ai)

function teamFightAI(HeroAI _ai)



function setupTooltips()
    DynamicTooltip tooltip = new DynamicTooltip(ABILITY_FROST_BOLT)
    tooltip.setLearnString("Summons an orb of frost that damages and slows all enemies close to it.", (int lvl) -> (begin
        return "{0}{I0} damage, {1}% slow for {2} seconds.".format(
            FROST_BOLT_DAMAGE[lvl-1].str(), FROST_BOLT_SLOW[lvl-1].str(), FROST_BOLT_DURATION[lvl-1].toExactString())
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Summons an orb of frost that deals {0}{I0} magic damage to all enemies close to it and slows them by {1}% for {2} seconds.".format(
            FROST_BOLT_DAMAGE[lvl-1].str(), FROST_BOLT_SLOW[lvl-1].str(), FROST_BOLT_DURATION[lvl-1].toExactString()
        ))
    tooltip.setReplaceIntelligence(FROST_BOLT_DAMAGE_BONUS)
    heroType.addDynamicTooltipIntelligence(tooltip)

    tooltip = new DynamicTooltip(ABILITY_FIRE_BLINK)
    tooltip.setLearnString("Teleports the Elemental Mage to the target location, dealing fire damage to nearby enemy units.", (int lvl) -> (begin
        return "{0}{I0} damage.".format(
            FIRE_BLINK_DAMAGE[lvl-1].str())
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Teleports the Elemental Mage to the target location, dealing {0}{I0} fire damage to nearby enemy units.".format(
            FIRE_BLINK_DAMAGE[lvl-1].str()
        ))
    tooltip.setReplaceIntelligence(FIRE_BLINK_DAMAGE_BONUS)
    heroType.addDynamicTooltipIntelligence(tooltip)

    tooltip = new DynamicTooltip(ABILITY_ELEMENTAL_MARK)
    tooltip.setLearnString("Reduces the target unit's willpower and makes it take additional magic damage, when the Elemental Mage attacks. After 5 attacks the target is stunned for {0} seconds. Lasts {1} seconds.".format(
        MARK_STUN.toExactString(), MARK_DURATION.toExactString()
    ), (int lvl) -> (begin
        return "-{0} willpower, {1}{I0} magic damage.".format(
            MARK_WP_REDUCTION[lvl-1].toString(), MARK_DMG[lvl-1].str()
        )
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Reduces the target unit's willpower by {2} and makes it take {3}{I0} additional magic damage, when the Elemental Mage attacks. After 5 attacks the target is stunned for {0} seconds. Lasts {1} seconds.".format(
            MARK_STUN.toExactString(), MARK_DURATION.toExactString(), MARK_WP_REDUCTION[lvl-1].toString(), MARK_DMG[lvl-1].str()
        ))
    tooltip.setReplaceIntelligence(MARK_DMG_BONUS)
    heroType.addDynamicTooltipIntelligence(tooltip)


    tooltip = new DynamicTooltip(ABILITY_FROST_AND_FLAME)
    tooltip.setLearnString("Calls the power of Frost and Flame to fall from the sky at the target location to slow down and ignite nearby enemies.", (int lvl) -> (begin
        return "{0}{I0} impact damage, {1}{I1} damage per second, {2}% slow, lasts {3}{I2} seconds.".format(
            FF_IMPACT_DAMAGE[lvl-1].str(), FF_DOT[lvl-1].str(), FF_SLOW[lvl-1].str(), FF_BUFF_DURATION[lvl-1].toExactString()
        )
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Calls the power of Frost and Flame to fall from the sky at the target location to slow down and ignite nearby enemies. "+
        "Deals {0}{I0} impact damage, {1}{I1} damage per second and slows movement speed by {2}%. Lasts {3}{I2} seconds.".format(
            FF_IMPACT_DAMAGE[lvl-1].str(), FF_DOT[lvl-1].str(), FF_SLOW[lvl-1].str(), FF_BUFF_DURATION[lvl-1].toExactString()
        ))
    tooltip.setReplaceIntelligence(FF_IMPACT_DAMAGE_BONUS, FF_DOT_BONUS, FF_BUFF_DURATION_BONUS)
    heroType.addDynamicTooltipIntelligence(tooltip)


function initHeroType()
    setupStats()
    setupTooltips()
    
    buffFFBuff = new BuffType(false, true)

    LinkedList<int> abilityList = new LinkedList<int>
    ..add(FF_ABILITY_ID)
    buffFFBuff.setup(abilityList, FF_BUFF_ID)

    buffFFBuff.addFirstFunction( (Buff whichBuff) -> (begin
        let level = whichBuff.getLevel()
        whichBuff.getTarget().wrapper()
            ..addStatRelativeBonus(Stat.MS, -FF_SLOW[level - 1]*10)
            ..incBlue()
    end))

    buffFFBuff.addEndFunction( (Buff whichBuff) -> (begin
        let level = whichBuff.getLevel()
        whichBuff.getTarget().wrapper()
            ..addStatRelativeBonus(Stat.MS, FF_SLOW[level - 1]*10)
            ..decBlue()
    end))

    buffFFBuff.setPeriodicTime(0.25)
    buffFFBuff.addPeriodicFunction((Buff whichBuff) -> (begin
        let caster = whichBuff.getCaster()
        let target = whichBuff.getTarget()
        if target.isTargetable(caster.getOwner(), false, true)
            caster.dealDamage(target, 0.25 * FF_DOT[whichBuff.getLevel()-1].bonus(caster.getInt(), FF_DOT_BONUS), ReductionType.MAGIC)
    end))

    buffFrostBolt = new BuffType(false, true)

    abilityList = new LinkedList<int>
    ..add(FROST_BOLT_ABILITY_ID)
    buffFrostBolt.setup(abilityList, FROST_BOLT_BUFF_ID)

    buffFrostBolt.addFirstFunction( (Buff whichBuff) -> (begin
        let level = whichBuff.getLevel()
        whichBuff.getTarget().wrapper()
            ..addStatRelativeBonus(Stat.MS, -FROST_BOLT_SLOW[level - 1]*10)
            ..addStatAbsoluteBonus(Stat.AS, -FROST_BOLT_SLOW[level - 1])
            ..incBlue()
    end))

    buffFrostBolt.addEndFunction( (Buff whichBuff) -> (begin
        let level = whichBuff.getLevel()
        whichBuff.getTarget().wrapper()
            ..addStatRelativeBonus(Stat.MS, FROST_BOLT_SLOW[level - 1]*10)
            ..addStatAbsoluteBonus(Stat.AS, FROST_BOLT_SLOW[level - 1])
            ..decBlue()
    end))

    heroType
        ..addOnSpellCastFunc(function onSpellCast)
        ..setOnAttackFunc((unit attacker, unit target, boolean isActive, boolean advanced) -> onAttack(attacker, target, advanced))
        ..setRetreatAI((HeroAI ai) -> (retreatAI(ai)))
        ..setAttackAI((HeroAI ai) -> (attackAI(ai)))
        ..setTeamFightAI((HeroAI ai) -> (teamFightAI(ai)))
        ..setSkillBuild("QWEQWQWQWQWEEEE")
        ..addItem(ITEM_ID_HEAVY_BOOTS)
        ..addItem(ITEM_ID_RUNIC_ARMOR)
        ..addItem(ITEM_ID_AXE_OF_DECAY)
        ..addItem(ITEM_ID_BLESSED_GOBLET)
        ..addItem(ITEM_ID_ARCANE_SHIELD)
        ..addItem(ITEM_ID_WAR_DRUM)


    buffFrenzy = new BuffType(true, true)

    abilityList = new LinkedList<int>
        ..add(FRENZY_ABILITY_ID)
    buffFrenzy.setup(abilityList, FRENZY_BUFF_ID)
    
    buffFrenzy.addFirstFunction( (Buff whichBuff) -> (begin
        let level = whichBuff.getLevel() - 1
        let stacks = (FRENZY_BONUS[level]*10).toInt()
        whichBuff.getTarget().wrapper()
            ..addStatAbsoluteBonus(Stat.AS, stacks div 10 )
        whichBuff.setData(stacks)
    end))

    buffFrenzy.addStackFunction( (Buff whichBuff) -> (begin
        let level = whichBuff.getLevel() - 1
        let oldStacks = whichBuff.getData()
        let newStacks = min(oldStacks + (FRENZY_BONUS[level]*10).toInt(), 1000)

        whichBuff.setData(newStacks)
        whichBuff.getTarget().wrapper()
            ..addStatAbsoluteBonus(Stat.AS, (newStacks div 10) - (oldStacks div 10))
    end))


    buffFrenzy.addEndFunction( (Buff whichBuff) -> (begin
        let stacks = whichBuff.getData()
        whichBuff.getTarget().wrapper()
            ..addStatAbsoluteBonus(Stat.AS, -(stacks div 10))
    end))

    buffElementalMark = new BuffType(false, true)

    abilityList = new LinkedList<int>
    ..add(MARK_ABILITY_ID)
    buffElementalMark.setup(abilityList, MARK_BUFF_ID)

    buffElementalMark.addFirstFunction( (Buff whichBuff) -> (begin
        let level = whichBuff.getLevel()
        whichBuff.getTarget().wrapper()
            ..addStatAbsoluteBonus(Stat.AGI, -MARK_WP_REDUCTION[level - 1])
    end))

    buffElementalMark.addEndFunction( (Buff whichBuff) -> (begin
        let level = whichBuff.getLevel()
        whichBuff.getTarget().wrapper()
            ..addStatAbsoluteBonus(Stat.AGI, MARK_WP_REDUCTION[level - 1])
    end))

    ArtilleryDetection.registerArtilleryHit(FF_FLAME_IMPACT, (unit impact) ->(begin
        group nearby = CreateGroup()
        let caster = Hero.getHero(impact.getOwner()).toUnit()
        let level = caster.getAbilityLevel(ABILITY_FROST_AND_FLAME)
        nearby.enumUnitsInRange(impact.getPos(), FF_AOE)

        
        Fx fx

        for i = 0 to 10
            fx = new Fx(impact.getPos().polarOffset(GetRandomDirectionDeg().fromDeg(), GetRandomReal(0, 300)), Abilities.flameStrikeEmbers)
            fx.setScale(2)
            doAfter(0.5, () -> destroy fx)

        for i = 0 to 10
            fx = new Fx(impact.getPos().polarOffset(GetRandomDirectionDeg().fromDeg(), GetRandomReal(0, 300)), Abilities.breathOfFrostTarget)
            fx.setScale(2)
            destroy fx
            

        let dmg = (FF_IMPACT_DAMAGE[level-1]).bonus(caster.getInt(), FF_IMPACT_DAMAGE_BONUS)
        let dur = FF_BUFF_DURATION[level-1].bonus(caster.getInt(), FF_BUFF_DURATION_BONUS)
        while(not nearby.isEmpty())
            unit target = FirstOfGroup(nearby)
            nearby.removeUnit(target)
            if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(impact.getOwner(), false, true)
                caster.dealDamage(target, dmg, ReductionType.MAGIC)
                target.addBuffReduced(caster, dur, buffFFBuff, level)

        nearby.destr()
    end))

init
    heroType = new HeroType(HERO_ELEMENTAL_MAGE, "BTNCloakOfResistance", 11)
        ..setOnInitFunction(() -> initHeroType())

   


