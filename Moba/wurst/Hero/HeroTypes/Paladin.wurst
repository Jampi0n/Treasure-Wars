package Paladin

import HeroType
import DummyRecycler
import TimerUtils
import ClosureTimers
import SoundUtils


public constant HERO_PALADIN = 'H000'
HeroType heroType

constant ABILITY_HEAVY_ARMORED = 'AZ2P'
constant ABILITY_SHIELD_BASH = 'AZ2Q'
constant ABILITY_BATTLE_ROAR = 'AZ2W'
constant ABILITY_HOLY_SHIELD = 'AZ2E'
constant ABILITY_DIVINE_PUNISHMENT = 'AZ2R'

constant BUFF_HOLY_SHIELD = new BuffType(true, true)

constant SOUND_SHIELD_BASH = new SoundDefinition(Sounds.metalHeavyBashMetal2, false, true)

constant SOUND_DIVINE_PUNISHMENT = new SoundDefinition(Sounds.holyBolt, false, true)

//Balancing and Object Editing

constant real array HEAVY_ARMOED_REDUCTION = [4, 6, 8, 10, 12]

@compiletime
function heavyArmored()
    let aDef = new AbilityDefinitionHardenedSkin(ABILITY_HEAVY_ARMORED)
        ..setCheckDependencies(false)
        ..setRequirements("")
        ..presetIcon("PASHolyArmor")
        ..setupWithHotKey("Heavy Armored", "D")
        ..setLearnString("Reduces damage from incoming attacks.", (int lvl) -> (begin
            return "{0} damage reduction.".format(
            HEAVY_ARMOED_REDUCTION[lvl-1].str())
        end) )

    for lvl = 1 to 5
        aDef
            ..setTooltipNormalExtended(lvl, "Reduces damage from incoming attacks by {0}.".format(
            HEAVY_ARMOED_REDUCTION[lvl-1].str())
            )

constant real array SHIELD_BASH_DMG = [75, 100, 125, 150, 175]
constant real SHIELD_BASH_DMG_BONUS = 50

constant real array SHIELD_BASH_DURATION = [1, 1.25, 1.5, 1.75, 2]
constant real SHIELD_BASH_DURATION_BONUS = 1

@compiletime
function shieldBash()
    int array MANA = [50, 50, 50, 50, 50]
    real array COOLDOWN = [6, 6, 6, 6, 6]

    let aDef = new AbilityDefinitionPitLordHowlofTerror(ABILITY_SHIELD_BASH)
        ..setAnimationNames("spell,throw")
        ..presetIcon("BTNAbility_Warrior_ShieldBash")
        ..setupWithHotKey("Shield Bash", "Q")
        ..setArtCaster("")
        ..setLearnString("Bashes enemies in front of him with his shield, dealing physical damage and stunning them.", (int lvl) -> (begin
            return "{0} damage, {1} seconds stun.".format(
            SHIELD_BASH_DMG[lvl-1].str()+SHIELD_BASH_DMG_BONUS.getBonusString(C_STR),
            SHIELD_BASH_DURATION[lvl-1].toString()+SHIELD_BASH_DURATION_BONUS.getBonusString(C_STR))
        end) )

    for lvl = 1 to 5
        aDef
            ..setCooldown(lvl, COOLDOWN[lvl-1])
            ..setManaCost(lvl, MANA[lvl-1])
            ..setTargetsAllowed(lvl, "none")
            ..setTooltipNormalExtended(lvl, "Bashes enemies in front of him with his shield, dealing {0} physical damage and stunning them for {1} seconds.".format(
            SHIELD_BASH_DMG[lvl-1].str()+SHIELD_BASH_DMG_BONUS.getBonusString(C_STR),
            SHIELD_BASH_DURATION[lvl-1].toString()+SHIELD_BASH_DURATION_BONUS.getBonusString(C_STR)))

constant real array BATTLE_ROAR_AOE = [600, 700, 800, 900, 1000]
constant real array BATTLE_ROAR_AS = [30, 35, 40, 45, 50]
constant int array BATTLE_ROAR_MS = [30, 35, 40, 45, 50]
constant real array BATTLE_ROAR_DURATION = [5, 6, 7, 8, 9]
constant real BATTLE_ROAR_DURATION_BONUS = 2

constant integer ABILITY_BATTLE_ROAR_BUFF = compiletime(ABIL_ID_GEN.next())

constant integer BUFF_ID_BATTLE_ROAR = compiletime(createAuraBuff("Battle Roar", "This unit is under the effect of Battle Roar; it attacks and moves faster.", "BTNBattleRoar"))

constant BATTLE_ROAR = new BuffType(true, true)


@compiletime
function battleRoar()
    int array MANA = [80, 90, 100, 110, 120]
    real array COOLDOWN = [22, 22, 22, 22, 22]

    let aDef = new AbilityDefinitionRoar(ABILITY_BATTLE_ROAR)
        ..setAnimationNames("spell")
        ..presetIcon("BTNBattleRoar")
        ..setupWithHotKey("Battle Roar", "W")
        ..setLearnString("Increases nearby units' attack and movement speed.", (int lvl) -> (begin
            return "{0} attack speed, {1} movement speed, {2} seconds".format(
            BATTLE_ROAR_AS[lvl-1].str()+"%",
            BATTLE_ROAR_MS[lvl-1].str()+"%",
            BATTLE_ROAR_DURATION[lvl-1].toString()+BATTLE_ROAR_DURATION_BONUS.getBonusString(C_INT))
        end) )

    for lvl = 1 to 5
        aDef
            ..setCooldown(lvl, COOLDOWN[lvl-1])
            ..setManaCost(lvl, MANA[lvl-1])
            ..setTargetsAllowed(lvl, "none")
            ..setTooltipNormalExtended(lvl, "Increases nearby units' attack speed by {0} and movement speed by {1} for {2} seconds.".format(
            BATTLE_ROAR_AS[lvl-1].str()+"%",
            BATTLE_ROAR_MS[lvl-1].str()+"%",
            BATTLE_ROAR_DURATION[lvl-1].str()+BATTLE_ROAR_DURATION_BONUS.getBonusString(C_INT)
            ))

    let aDefAura = new AbilityDefinitionAuraEnduranceCreep(ABILITY_BATTLE_ROAR_BUFF)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(-11)
        ..setArtTarget("Abilities\\Spells\\NightElf\\BattleRoar\\RoarTarget.mdl")
        ..setTargetAttachmentPoint("overhead")
        ..setLevels(5)

    for lvl = 1 to 5
        aDefAura
            ..setAttackSpeedIncrease(lvl, BATTLE_ROAR_AS[lvl-1]/100)
            //..setMovementSpeedIncrease(lvl, BATTLE_ROAR_MS[lvl-1]/100)
            ..setMovementSpeedIncrease(lvl, 0)
            ..setTargetsAllowed(lvl, "invulnerable,self,vulnerable")
            ..setAreaofEffect(lvl, 1)
            ..setBuffs(lvl, int2fourchar(BUFF_ID_BATTLE_ROAR))

constant real array HOLY_SHIELD_DURATION = [4, 5, 6, 7, 8]
constant real HOLY_SHIELD_DURATION_BONUS = 4

constant int BUFF_ID_HOLY_SHIELD = compiletime(createAuraBuff("Holy Shield", "This unit is protected by Holy Shield; it is untargetable.", "BTNAngelicShield"))
constant int ABILITY_HOLY_SHIELD_BUFF = compiletime(createPositiveBuffAbility(5, BUFF_ID_HOLY_SHIELD, "Abilities\\Spells\\Human\\DivineShield\\DivineShieldTarget.mdl", "origin"))

@compiletime
function holyShield()
    int array MANA = [80, 90, 100, 110, 120]
    real array COOLDOWN = [14, 14, 14, 14, 14]
    real array RANGE = [600, 600, 600, 600, 600]

    let aDef = new AbilityDefinitionIllidanChannel(ABILITY_HOLY_SHIELD)
        ..setAnimationNames("spell")
        ..setArtCaster("")
        ..setArtTarget("")
        ..setArtEffect("")
        ..presetIcon("BTNAngelicShield")
        ..setupWithHotKey("Holy Shield", "E")
        ..setLearnString("Turns the target frendly hero untargetable.", (int lvl) -> (begin
            return "{0} seconds.".format(
            HOLY_SHIELD_DURATION[lvl-1].toString()+HOLY_SHIELD_DURATION_BONUS.getBonusString(C_INT))
        end) )

    for lvl = 1 to 5
        aDef
            ..setCooldown(lvl, COOLDOWN[lvl-1])
            ..setManaCost(lvl, MANA[lvl-1])
            ..setCastRange(lvl, RANGE[lvl-1])
            ..setArtDuration(lvl, 0)
            ..setBaseOrderID(lvl, "channel")
            ..setDisableOtherAbilities(lvl, false)
            ..setFollowThroughTime(lvl, 0)
            ..setOptions(lvl, 1)
            ..setTargetType(lvl, 1)
            ..setTargetsAllowed(lvl, "friend,nonancient")
            ..setTooltipNormalExtended(lvl, "Turns the target frendly hero untargetable for {0} seconds.".format(
            HOLY_SHIELD_DURATION[lvl-1].str()+HOLY_SHIELD_DURATION_BONUS.getBonusString(C_INT)
            ))


constant real DIVINE_PUNISHMENT_AOE = 600
constant real array DIVINE_PUNISHMENT_DMG = [250, 300, 350, 400, 450]
constant real DIVINE_PUNISHMENT_DMG_BONUS = 300

@compiletime
function divinePunishment()
    int array MANA = [170, 185, 200, 215, 230]
    real array COOLDOWN = [90, 90, 90, 90, 90]


    let aDef = new AbilityDefinitionKeeperoftheGroveTranquility(ABILITY_DIVINE_PUNISHMENT)
        ..setAnimationNames("spell,channel")
        ..presetIcon("BTNHolyBan")
        ..setupWithHotKey("Divine Punishment", "R")
        ..setLearnString("Calls upon the power of the gods. After two seconds of channeling nearby enemies will be struck by divine magic.", (int lvl) -> (begin
            return "{0} damage.".format(
            DIVINE_PUNISHMENT_DMG[lvl-1].str()+DIVINE_PUNISHMENT_DMG_BONUS.getBonusString(C_INT))
        end) )

    for lvl = 1 to 5
        aDef
            ..setCooldown(lvl, COOLDOWN[lvl-1])
            ..setManaCost(lvl, MANA[lvl-1])
            ..setDurationHero(lvl, 2.1)
            ..setDurationNormal(lvl, 2.1)
            ..setEffects(lvl, "X000")

            ..setTargetsAllowed(lvl, "none")
            ..setTooltipNormalExtended(lvl, "Calls upon the power of the gods. After two seconds of channeling nearby enemies will be struck by divine magic and take {0} damage.".format(
            DIVINE_PUNISHMENT_DMG[lvl-1].str()+DIVINE_PUNISHMENT_DMG_BONUS.getBonusString(C_INT)
            ))
        

class DivinePunishment

    private unit caster
    private int level
    private effect model
    private timer checkTimer
    private int count
    private boolean succesful

    private unit dummy

    construct(unit caster)
        this.count = 0
        this.succesful = false
        this.caster = caster
        SOUND_DIVINE_PUNISHMENT.playOnPoint(caster.getPos3Zero()).snd.setVolume(120)
        this.level = caster.getAbilityLevel(ABILITY_DIVINE_PUNISHMENT)
        this.dummy = DummyRecycler.get(caster.getPos(), caster.getFacingAngle())
        this.dummy.setFacing(caster.getFacingAngle())
        this.model = this.dummy.addEffect("Abilities\\Spells\\Human\\Resurrect\\ResurrectCaster.mdl", "origin")
        this.checkTimer = getTimer()
            ..setData(this castTo int)
            ..startPeriodic(0.1, function updateStatic)

    function update()
        this.count++
        if this.count == 20
            this.succesful = true
            group nearby = CreateGroup()
            nearby.enumUnitsInRange(this.caster.getPos(), DIVINE_PUNISHMENT_AOE)

            while(not nearby.isEmpty())
                unit target = FirstOfGroup(nearby)
                nearby.removeUnit(target)
                if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(this.caster.getOwner(), false, true) and target.isVisible(this.caster.getOwner())
                    
                    target.addEffect("Abilities\\Spells\\Human\\Resurrect\\ResurrectTarget.mdl", "origin").destr()
                    doAfter(0.4, () -> (begin
                        this.caster.dealDamage(target, DIVINE_PUNISHMENT_DMG[level-1].bonus(this.caster.getInt(), DIVINE_PUNISHMENT_DMG_BONUS), ReductionType.MAGIC)
                    end) )

            return

        if this.count>=45
            destroy this
            return

        if this.caster.getCurrentOrder()!= OrderId("tranquility") and not succesful
            destroy this
            return
    
    static function updateStatic()
        (GetExpiredTimer().getData() castTo DivinePunishment).update()

    ondestroy
        this.model.destr()
        DummyRecycler.recycle(this.dummy)
        this.checkTimer.release()

function setupStats()
    heroType
        //..setStat(Stat.AD, 5, 25)
        ..setStat(Stat.AR, 11, 46)
        ..setStat(Stat.AS, 16, 43)
        ..setStat(Stat.HP, 17, 52)
        ..setStat(Stat.HR, 14, 37)
        ..setStat(Stat.MP, 8, 27)
        ..setStat(Stat.MR, 7, 23)
        ..setStat(Stat.MS, 0, 22)
        ..setStat(Stat.STR, 24, 71)
        ..setStat(Stat.AGI, 13, 44)
        ..setStat(Stat.INT, 4, 19)

function onSpellCast()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)

    if(spellId == ABILITY_SHIELD_BASH) //shield bash
        let casterPos = caster.getPos()
        SOUND_SHIELD_BASH.playOnPoint(casterPos.toVec3()).snd.setVolume(150)
        group nearby = CreateGroup()
        nearby.enumUnitsInRange(casterPos.polarOffset(caster.getFacingAngle(), 100), 150)

        while(not nearby.isEmpty())
            unit target = FirstOfGroup(nearby)
            nearby.removeUnit(target)
            if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(caster.getOwner(), false, true)
                caster.dealDamage(target, SHIELD_BASH_DMG[level-1].bonus(caster.getStr(), SHIELD_BASH_DMG_BONUS), ReductionType.PHYSICAL)
                target.addBuffReduced( caster, SHIELD_BASH_DURATION[level-1].bonus(caster.getStr(), SHIELD_BASH_DURATION_BONUS), STUNNED, 1)

    if(spellId==ABILITY_BATTLE_ROAR) //Battle Roar
        group nearby = CreateGroup()
        nearby.enumUnitsInRange(caster.getPos(), BATTLE_ROAR_AOE[level-1])

        while(not nearby.isEmpty())
            unit target = FirstOfGroup(nearby)
            nearby.removeUnit(target)
            if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(caster.getOwner(), true, false)
                target.addBuff( caster, BATTLE_ROAR_DURATION[level-1].bonus(caster.getInt(), BATTLE_ROAR_DURATION_BONUS), BATTLE_ROAR, level)

        nearby.destr()

    if(spellId == ABILITY_HOLY_SHIELD) //holy shield
        let target = GetSpellTargetUnit()
        let dur = HOLY_SHIELD_DURATION[level-1].bonus(caster.getInt(), HOLY_SHIELD_DURATION_BONUS)
        target.addBuff( caster, dur, UNTARGETABLE, 1)
        target.addBuff( caster, dur, BUFF_HOLY_SHIELD, level)


    if(spellId == ABILITY_DIVINE_PUNISHMENT) //divine punishment
        
        new DivinePunishment(caster)

function initHeroType()
    heroType.addOnSpellCastFunc(function onSpellCast)

    var abilityList = new LinkedList<int>
        ..add(ABILITY_HOLY_SHIELD_BUFF)
    BUFF_HOLY_SHIELD.setup(abilityList, BUFF_ID_HOLY_SHIELD)
    
    abilityList = new LinkedList<int>
        ..add(ABILITY_BATTLE_ROAR_BUFF)
    BATTLE_ROAR.setup(abilityList, BUFF_ID_BATTLE_ROAR)
    BATTLE_ROAR.addFirstFunction( (Buff thisBuff) -> (begin
        thisBuff.getTarget().wrapper().addStatRelativeBonus( Stat.MS, BATTLE_ROAR_MS[thisBuff.getLevel()-1]*10 )
    end) )
    BATTLE_ROAR.addEndFunction( (Buff thisBuff) -> (begin
        if thisBuff == null
            print("thisBuff = null")

        if thisBuff.getTarget() == null
            print("target = null")

        if thisBuff.getTarget().wrapper() == null
            print("wrapper = null")

        thisBuff.getTarget().wrapper().addStatRelativeBonus( Stat.MS, -BATTLE_ROAR_MS[thisBuff.getLevel()-1]*10 )
    end) )

    setupStats()



init
    heroType = new HeroType(HERO_PALADIN)
        ..setOnInitFunction(() -> initHeroType())
  
