package Paladin

import HeroType
import Stats
import Buff
import LinkedList
import BuffTypeConfig
import General
import DummyRecycler
import TimerUtils
import ClosureTimers
import SoundUtils
import Assets
import AbilityObjEditing

public constant HERO_PALADIN = 'H000'
HeroType heroType

constant HOLY_SHIELD = new BuffType(true, true)
constant BATTLE_ROAR = new BuffType(true, true)
constant DIVINE_PUNISHMENT = 'A00U'

public constant SOUND_SHIELD_BASH = new SoundDefinition(Sounds.metalHeavyBashMetal2, false, true)

public constant SOUND_DIVINE_PUNISHMENT = new SoundDefinition(Sounds.holyBolt, false, true)

class DivinePunishment

    private unit caster
    private int level
    private effect model
    private timer checkTimer
    private int count
    private boolean succesful

    private unit dummy

    construct(unit caster)
        this.count = 0
        this.succesful = false
        this.caster = caster
        SOUND_DIVINE_PUNISHMENT.playOnPoint(caster.getPos3Zero()).snd.setVolume(120)
        this.level = caster.getAbilityLevel(DIVINE_PUNISHMENT)
        this.dummy = DummyRecycler.get(caster.getPos(), caster.getFacingAngle())
        this.dummy.setFacing(caster.getFacingAngle())
        this.model = this.dummy.addEffect("Abilities\\Spells\\Human\\Resurrect\\ResurrectCaster.mdl", "origin")
        this.checkTimer = getTimer()
            ..setData(this castTo int)
            ..startPeriodic(0.1, function updateStatic)

    function update()
        this.count++
        if this.count == 20
            this.succesful = true
            group nearby = CreateGroup()
            nearby.enumUnitsInRange(this.caster.getPos(), 600)

            while(not nearby.isEmpty())
                unit target = FirstOfGroup(nearby)
                nearby.removeUnit(target)
                if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(this.caster.getOwner(), false, true) and target.isVisible(this.caster.getOwner())
                    
                    target.addEffect("Abilities\\Spells\\Human\\Resurrect\\ResurrectTarget.mdl", "origin").destr()
                    doAfter(0.4, () -> (begin
                        this.caster.dealDamage(target, (200.+75*level).bonus(this.caster.getInt(), 300), ReductionType.MAGIC)
                    end) )

            return

        if this.count>=45
            destroy this
            return

        if this.caster.getCurrentOrder()!= OrderId("tranquility") and not succesful
            destroy this
            return
    
    static function updateStatic()
        (GetExpiredTimer().getData() castTo DivinePunishment).update()

    ondestroy
        this.model.destr()
        DummyRecycler.recycle(this.dummy)
        this.checkTimer.release()

function setupStats()
    heroType
        //..setStat(Stat.AD, 5, 25)
        ..setStat(Stat.AR, 10, 40)
        ..setStat(Stat.AS, 10, 30)
        ..setStat(Stat.HP, 15, 40)
        ..setStat(Stat.HR, 10, 30)
        ..setStat(Stat.MP, 5, 20)
        ..setStat(Stat.MR, 5, 20)
        ..setStat(Stat.MS, 0, 30)
        ..setStat(Stat.STR, 15+5, 40+25)
        ..setStat(Stat.WP, 10, 40)
        ..setStat(Stat.INT, 5, 20)

function onAttack()

function onSpellCast()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)

    if(spellId == 'A00M') //shield bash
        let casterPos = caster.getPos()
        SOUND_SHIELD_BASH.playOnPoint(casterPos.toVec3()).snd.setVolume(150)
        group nearby = CreateGroup()
        nearby.enumUnitsInRange(casterPos.polarOffset(caster.getFacingAngle(), 100), 150)

        while(not nearby.isEmpty())
            unit target = FirstOfGroup(nearby)
            nearby.removeUnit(target)
            if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(caster.getOwner(), false, true)
                caster.dealDamage(target, (25.+25*level).bonus(caster.getStr(), 50), ReductionType.PHYSICAL)
                new Buff(target, caster, 0.75 + 0.25*level, STUNNED, 1)

    if(spellId=='A00V') //Battle Roar
        group nearby = CreateGroup()
        nearby.enumUnitsInRange(caster.getPos(), 600.+100*level)

        while(not nearby.isEmpty())
            unit target = FirstOfGroup(nearby)
            nearby.removeUnit(target)
            if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(caster.getOwner(), true, false)
                new Buff(target, caster, (6.).bonus(caster.getInt(),6), BATTLE_ROAR, level)

        nearby.destr()

    if(spellId == 'A00R') //holy shield
        let target = GetSpellTargetUnit()
        new Buff(target, caster, 1.5 + 0.5*level, UNTARGETABLE, 1)
        new Buff(target, caster, 1.5 + 0.5*level, HOLY_SHIELD, level)


    if(spellId == DIVINE_PUNISHMENT) //divine punishment
        
        new DivinePunishment(caster)

init
    heroType = new HeroType(HERO_PALADIN)
    heroType.addOnAttackFunc(function onAttack)
    heroType.addOnSpellCastFunc(function onSpellCast)

    var abilityList = new LinkedList<int>
    ..add('A00S')
    HOLY_SHIELD.setup(abilityList, 'B00D')
    abilityList = new LinkedList<int>
    ..add('A00W')
    BATTLE_ROAR.setup(abilityList, 'B00F')

    setupStats()

@compiletime
function setupAbilities()
    let aDef = new AbilityDefinition('AAAA','Amgl')
    aDef.setTooltipLearnExtended("test")
