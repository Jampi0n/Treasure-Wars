package VoodooArcher

//12

import HeroType
import ClosureTimers
import UnitTypeConfig
import OnAttack
import Fx

public constant HERO_VOODOO_ARCHER = 'H012'
constant THIS_HERO = HERO_VOODOO_ARCHER
constant THIS_ID = 12
constant THIS_BUTTON_POS = 0 //button pos from 0 to 11
constant THIS_ICON = Icons.bTNShadowHunter
HeroType heroType = null

constant ABILITY_VOODOO_ARROWS = 'AY2P'
constant ABILITY_GHOST_ARROWS = 'AY2Q'
constant ABILITY_MIND_CURSE = 'AY2W'
constant ABILITY_SERPENT_WARD = 'AY2E'
constant ABILITY_BIG_BAD_VOODOO = 'AY2R'


constant real array VOODOO_ARROW_DAMAGE = [5, 10, 15, 20, 25]


function passive(int abilityId)
    if compiletime
        createNoEffectAbiltiy(abilityId)
            ..setupIcon("PASDemonArrow")
            ..setupWithHotKey("Voodoo Arrows", "D")


    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceStrength(0)
    tooltip.setLearnString("Each attack deals additional void damage.", (int lvl) -> (begin
        return "{0} damage.".format(
            VOODOO_ARROW_DAMAGE[lvl-1].str())
    end) )
    
    for lvl = 1 to 5
        tooltip.setNormalString(false, lvl, "Each attack deals {0} additional void damage.".format( 
            VOODOO_ARROW_DAMAGE[lvl-1].str())
        )
    addDynamicTooltipStrength(heroType, tooltip)


constant real array GHOST_ARROWS_DAMAGE = [70, 110, 150, 190, 230]
constant real GHOST_ARROWS_DAMAGE_BONUS = 115


function abilityQ(int abilityId)

    if compiletime
        int array MANA = [90, 95, 100, 105, 110]
        real array COOLDOWN = [9, 9, 9, 9, 9]
        real array RANGE = [700, 700, 700, 700, 700]

        let aDef = new AbilityDefinitionIllidanChannel(abilityId)
            ..setupIcon("BTNThunderArrow")
            ..setupWithHotKey("Ghost Arrows", "Q")
            ..setAnimationNames("spell")
            ..setupChannel(TargetType.UNIT, "channel", 0.5)

        for lvl = 1 to 5
            aDef
                ..setCooldown(lvl, COOLDOWN[lvl-1])
                ..setManaCost(lvl, MANA[lvl-1])
                ..setCastRange(lvl, RANGE[lvl-1])
                ..setTargetsAllowed(lvl, "ground,enemy,nonancient,neutral,organic,air")

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceStrength(GHOST_ARROWS_DAMAGE_BONUS)
    tooltip.setLearnString("Summons Ghost Arrows to pierce the target enemy unit dealing damage.", (int lvl) -> (begin
        return "{0}{S0} damage.".format(
            GHOST_ARROWS_DAMAGE[lvl-1].str())
    end) )
    
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Summons Ghost Arrows to pierce the target enemy unit dealing {0}{S0} damage.".format(
            GHOST_ARROWS_DAMAGE[lvl-1].str())
        )
    addDynamicTooltipStrength(heroType, tooltip)


constant real array MIND_CURSE_MANA_DRAIN = [30, 40, 50, 60, 70]
constant real MIND_CURSE_MANA_DRAIN_BONUS = 30

constant real array MIND_CURSE_DURATION = [2.4, 2.8, 3.2, 3.6, 4]
constant real MIND_CURSE_DURATION_BONUS = 4

BuffType buffMindCurseTarget

constant MIND_CURSE_BUFF_ID = compiletime(createAuraBuff("Mind Curse", "This unit is under the effect of Mind Curse; it loses mana over time and cannot cast spells.", "BTNWitchDoctorRitual"))
constant MIND_CURSE_ABILITY_ID = compiletime(createNegativeBuffAbility(5, MIND_CURSE_BUFF_ID, Abilities.manaDrainTarget, "origin"))


function abilityW(int abilityId)

    if compiletime
        int array MANA = [65, 65, 65, 65, 65]
        real array COOLDOWN = [10, 10, 10, 10, 10]
        real array RANGE = [800, 800, 800, 800, 800]
        
        let aDef = new AbilityDefinitionIllidanChannel(abilityId)
            ..setupIcon("BTNWitchDoctorRitual")
            ..setupWithHotKey("Mind Curse", "W")
            ..setAnimationNames("spell")
            ..setupChannel(TargetType.UNIT, "manaburn", 0.5)

        for lvl = 1 to 5
            aDef
                ..setCooldown(lvl, COOLDOWN[lvl-1])
                ..setManaCost(lvl, MANA[lvl-1])
                ..setCastRange(lvl, RANGE[lvl-1])
                ..setTargetsAllowed(lvl, "ground,enemy,nonancient,neutral,organic,air")

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(MIND_CURSE_MANA_DRAIN_BONUS, MIND_CURSE_DURATION_BONUS)
    tooltip.setLearnString("Burns mana of the target enemy unit over time and silences it.", (int lvl) -> (begin
        return "{0}{I0} mana per second, {1}{I1} seconds.".format(
        MIND_CURSE_MANA_DRAIN[lvl-1].str(),
        MIND_CURSE_DURATION[lvl-1].toExactString())
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Burns {0}{I0} mana per second of the target enemy unit over time and silences it for {1}{I1} seconds.".format(
            MIND_CURSE_MANA_DRAIN[lvl-1].str(),
        MIND_CURSE_DURATION[lvl-1].toExactString()))
    addDynamicTooltipIntelligence(heroType, tooltip)


constant int array SERPEND_WARD_HP = [0, 50, 100, 150, 200]
constant real SERPENT_WARD_DURATION = 30
constant real array SERPENT_POISON_DURATION = [2, 2.25, 2.5, 2.75, 3]

constant int SERPENT_POISON_ARMOR = 1
constant int SERPENT_POISON_SLOW = 1

constant int array SERPENT_STACKS = [20, 25, 30, 35, 40]

constant int SERPENT_POSION_MAX_STACKS = 15

BuffType buffSerpentPoison
constant SERPENT_POISON_BUFF_ID = compiletime(createAuraBuff("Serpent Poison", "This unit was hit by Serpent Ward; it is slowed and has reduced armor.", Icons.bTNSerpentWard))
constant SERPENT_POISON_ABILITY_ID = compiletime(createNegativeBuffAbility(5, SERPENT_POISON_BUFF_ID, Abilities.poisonStingTarget, "chest"))


function abilityE(int abilityId)

    if compiletime
        int array MANA = [60, 60, 60, 60, 60]
        real array COOLDOWN = [6, 6, 6, 6, 6]
        real array RANGE = [500, 500, 500, 500, 500]

        let aDef = new AbilityDefinitionIllidanChannel(abilityId)
            ..setAnimationNames("spell")
            ..setupIcon(Icons.bTNSerpentWard)
            ..setupWithHotKey("Serpent Ward", "E")
            ..setupChannel(TargetType.POINT, "ward", 0.5)

        for lvl = 1 to 5
            aDef
                ..setCastRange(lvl, RANGE[lvl-1])
                ..setCooldown(lvl, COOLDOWN[lvl-1])
                ..setManaCost(lvl, MANA[lvl-1])

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(0)
    tooltip.setLearnString("Summons an immobile serpentine ward to attack nearby enemies for {0} seconds. Attacked targets have their armor and movement speed reduced. Stacks up to {1} times.".format(SERPENT_WARD_DURATION.toExactString(), SERPENT_POSION_MAX_STACKS.toString()), (int lvl) -> (begin
        return "{0} armor, {1}% movement speed per attack, {2} seconds.".format(
        (SERPENT_POISON_ARMOR*SERPENT_STACKS[lvl-1]/10).toExactString(),
        (SERPENT_POISON_SLOW*SERPENT_STACKS[lvl-1]/10).toExactString(),
        SERPENT_POISON_DURATION[lvl-1].toExactString())
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Summons an immobile serpentine ward to attack nearby enemies for {3} seconds. Attacked targets have their armor reduced by {0} and movement speed by {1}% for {2} seconds per attack. Stacks up to {4} times.".format(
            (SERPENT_POISON_ARMOR*SERPENT_STACKS[lvl-1]).str(),
            (SERPENT_POISON_SLOW*SERPENT_STACKS[lvl-1]).str(),
            SERPENT_POISON_DURATION[lvl-1].toExactString(),
            SERPENT_WARD_DURATION.toExactString(),
            SERPENT_POSION_MAX_STACKS.toString()))

    addDynamicTooltipIntelligence(heroType, tooltip)
        
constant real array BBV_DAMAGE = [38, 46, 54, 62, 70]
constant real BBV_DAMAGE_BONUS = 50
constant real BBV_DURATION = 4

constant integer BUFF_ID_ON_DEATH_COIL = compiletime(createDummyBuff())


function abilityR(int abilityId)

    if compiletime
        int array MANA = [160, 170, 180, 190, 200]
        real array COOLDOWN = [110, 110, 110, 110, 110]

        let aDef = new AbilityDefinitionKeeperoftheGroveTranquility(abilityId)
            ..setLevels(5)
            ..setupIcon(Icons.bTNBigBadVoodooSpell)
            ..setupWithHotKey("Big Bad Voodoo", "R")
            ..setAnimationNames("spell,channel")


        for lvl = 1 to 5
            aDef
                ..setCooldown(lvl, COOLDOWN[lvl-1])
                ..setManaCost(lvl, MANA[lvl-1])
                ..setTargetsAllowed(lvl, "none")
                ..setDurationHero(lvl, BBV_DURATION)
                ..setDurationNormal(lvl, BBV_DURATION)
                ..setEffects(lvl, "X000")

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(BBV_DAMAGE_BONUS)
    tooltip.setLearnString("Deals void damage to all enemy heroes while channeling.".format(BBV_DURATION.toExactString()), (int lvl) -> (begin
        return "{0}{I0} damage per second.".format(
        BBV_DAMAGE[lvl-1].str())
    end) )
    
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Deals {0}{I0} void damage per second to all enemy heroes while channeling.".format(
            BBV_DAMAGE[lvl-1].str()))
    addDynamicTooltipIntelligence(heroType, tooltip)


function setupStats()
    heroType
        
        ..setStat(Stat.AR, 31, 47)
        ..setStat(Stat.AS, 14, 48)
        ..setStat(Stat.HP, 11, 39)
        ..setStat(Stat.HR, 11, 29)
        ..setStat(Stat.MP, 17, 33)
        ..setStat(Stat.MR, 15, 29)
        ..setStat(Stat.MS, 31, 51)
        ..setStat(Stat.STR, 13, 61)
        ..setStat(Stat.AGI, 28, 43)
        ..setStat(Stat.INT, 9, 33)

function onDamage()


function onAttack(unit attacker, unit target, boolean _isActive)
    let level = attacker.getAbilityLevel(ABILITY_VOODOO_ARROWS)
    attacker.dealDamage(target, VOODOO_ARROW_DAMAGE[level-1], ReductionType.NONE)


function castGhostArrows()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)
    let target = GetSpellTargetUnit()
    let angles = 12
    let angleStep = bj_PI*2/angles

    for i = 0 to angles - 1
        let mOffset = vec2(0,0).polarOffset(angle(angleStep*i), 250)
        let facing = angle(angleStep*i+bj_PI)
        let fx = new Fx((target.getPos()+mOffset).withZ(110), facing, "Models\\LujkaArrow.mdl")
        doPeriodicallyTimed(0.03, 0.99, (CallbackCounted cb)-> begin
            fx.setXY(target.getPos()+mOffset)
            fx.setXYAngle(facing)
        end)
        doAfter(1, -> begin
            doPeriodicallyTimed(0.03, 0.3, (CallbackCounted cb)-> begin
                fx.setXY(target.getPos()+mOffset*(cb.getCount()/10))
                if cb.isLast()
                    destroy fx
            end)
        end)
    doAfter(1.25) ->
        caster.dealDamage(target, GHOST_ARROWS_DAMAGE[level-1].bonus(caster.getStr(), GHOST_ARROWS_DAMAGE_BONUS), ReductionType.PHYSICAL)
    

function castMindCurse()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)
    let target = GetSpellTargetUnit()
    let dur = MIND_CURSE_DURATION[level-1].bonus(caster.getInt(), MIND_CURSE_DURATION_BONUS)
    target.addBuffReduced(caster, dur, buffMindCurseTarget, level)
    target.addBuffReduced(caster, dur, SILENCED, 1)

function castSerpentWard()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)
    let ward = createUnit(caster.getOwner(), SERPENT_WARD, vec2(GetSpellTargetX(), GetSpellTargetY()), angle(0))
    let wrapper = ward.wrapper()
    ward.setTimedLife(SERPENT_WARD_DURATION)

    wrapper.addStatAbsoluteBonus(Stat.HP, SERPEND_WARD_HP[level-1] )

function castBigBadVoodoo()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)
    let fx = caster.addEffect(Abilities.voodooAura, "origin")
    let enemyList = PlayerWrapper.getHeroTeam(PlayerWrapper.getTeam(caster.getOwner().getId()))
    doPeriodically(0.1, (cb) -> begin
        if not caster.isAlive() or caster.getCurrentOrder() != OrderId("tranquility")
            destroy cb
            fx.destr()
        else
            for p in enemyList
                for Hero hero in PlayerWrapper.getPlayerHeroes(p)
                    let target = hero.toUnit()
                    if target.isTargetable(caster.getOwner(), false, true)
                        caster.dealDamage(target, 0.1 * BBV_DAMAGE[level-1].bonus(caster.getInt(), BBV_DAMAGE_BONUS), ReductionType.NONE)
                        target.addEffect(Abilities.vengeanceMissile, "overhead").destr()
                
    end)

function retreatAI(HeroAI _ai)

function attackAI(HeroAI _ai)

function teamFightAI(HeroAI _ai)
            

@compiletime
function setupTooltips()
    passive(ABILITY_VOODOO_ARROWS)
    abilityQ(ABILITY_GHOST_ARROWS)
    abilityW(ABILITY_MIND_CURSE)
    abilityE(ABILITY_SERPENT_WARD)
    abilityR(ABILITY_BIG_BAD_VOODOO)
    createHeroButton(THIS_ID, THIS_BUTTON_POS, THIS_ICON)

function initHeroType()
    setupStats()
    onCast(ABILITY_GHOST_ARROWS, () -> castGhostArrows())
    onCast(ABILITY_MIND_CURSE, () -> castMindCurse())
    onCast(ABILITY_SERPENT_WARD, () -> castSerpentWard())
    onCast(ABILITY_BIG_BAD_VOODOO, () -> castBigBadVoodoo())
    heroType..setSkillBuild("QWQWQWQWQWEEEEE")
    ..addItem(ITEM_ID_HEAVY_BOOTS)
    ..addItem(ITEM_ID_BLOOD_SWORD)
    ..addItem(ITEM_ID_INFERNAL_BOW)
    ..addItem(ITEM_ID_RUNIC_ARMOR)
    ..addItem(ITEM_ID_SACRIFICIAL_DAGGER)
    ..addItem(ITEM_ID_CURSED_SWORD)
    delayInit(5) ->
        heroType
            ..setOnAttackFunc((unit attacker, unit target, boolean isActive, boolean advanced) -> onAttack(attacker, target, isActive))
            ..setRetreatAI((HeroAI ai) -> (retreatAI(ai)))
            ..setAttackAI((HeroAI ai) -> (attackAI(ai)))
            ..setTeamFightAI((HeroAI ai) -> (teamFightAI(ai)))

        var abilityList = new LinkedList<int>
        ..add(MIND_CURSE_ABILITY_ID)
        buffMindCurseTarget = new BuffType(false, true)
        buffMindCurseTarget.setup(abilityList, MIND_CURSE_BUFF_ID)

        buffMindCurseTarget.setPeriodicTime(0.25)
        buffMindCurseTarget.addPeriodicFunction((whichBuff) -> begin
            let target = whichBuff.getTarget()
            let caster = whichBuff.getCaster()
            let level = whichBuff.getLevel()
            caster.damageMana(target, 0.25 * MIND_CURSE_MANA_DRAIN[level-1].bonus(caster.getInt(), MIND_CURSE_MANA_DRAIN_BONUS), ReductionType.MAGIC)
        end)

        abilityList = new LinkedList<int>
        ..add(SERPENT_POISON_ABILITY_ID)
        buffSerpentPoison = new BuffType(false, true)
        buffSerpentPoison.setup(abilityList, SERPENT_POISON_BUFF_ID)

        /*
            About stacks:
            Stacks are used, so the buff is level independent.
            Instead more stacks are gained on higher levels.
            Stacks are divided by 10 to allow smaller numbers: 25 -> 2.5 stacks
            To use non-integer values for stacks, the total stack amount is rounded down.
            So if you have 3 times 2.5 stacks, you have 7 in total.
            The stack number times 10 is stored in data to have the accuracy of one decimal.
            To ensure no rounding errors, the new bonus is calculated by (stacks div 10) - (prevStacks div 10)
            So the new total bonus is calculated and the old total bonus is subtracted.
            This makes sure rounding only occures in the total bonus.

            Stacks SERPENT_POSION_MAX_STACKS times. In reality the total stack count is capped at
            SERPENT_POSION_MAX_STACKS * SERPENT_STACKS[level-1]
        */

        buffSerpentPoison.addFirstFunction( (Buff whichBuff) -> (begin
            let level = whichBuff.getLevel()
            whichBuff.getTarget().wrapper()
                ..addStatRelativeBonus(Stat.MS, -10 * SERPENT_POISON_SLOW * (SERPENT_STACKS[level-1] div 10)  )
                ..addStatAbsoluteBonus(Stat.AR, -SERPENT_POISON_ARMOR * (SERPENT_STACKS[level-1] div 10)  )
            whichBuff.setData(SERPENT_STACKS[level-1])
        end))

        buffSerpentPoison.addStackFunction( (Buff whichBuff) -> (begin
            let level = whichBuff.getLevel()
            let prevStacks = whichBuff.getData()
            let newStacks = min(prevStacks + SERPENT_STACKS[level-1], SERPENT_STACKS[level-1]*SERPENT_POSION_MAX_STACKS)
            let stackDiff = (newStacks div 10) - (prevStacks div 10)
            whichBuff.setData(newStacks)
            whichBuff.getTarget().wrapper()
                ..addStatRelativeBonus(Stat.MS, -10 * SERPENT_POISON_SLOW * stackDiff) 
                ..addStatAbsoluteBonus(Stat.AR, -SERPENT_POISON_ARMOR * stackDiff)
        end))


        buffSerpentPoison.addEndFunction( (Buff whichBuff) -> (begin
            let stacks = whichBuff.getData() div 10
            whichBuff.getTarget().wrapper()
                ..addStatRelativeBonus(Stat.MS, 10 * SERPENT_POISON_SLOW * (stacks))
                ..addStatAbsoluteBonus(Stat.AR, SERPENT_POISON_ARMOR * (stacks))
        end))

        OnAttack.addOnAttackFunc((unit attacker, unit target, boolean isActive) -> (begin
            if attacker.getTypeId() == SERPENT_WARD and not target.isType(UNIT_TYPE_STRUCTURE)
                let hero = PlayerWrapper.getPlayerHero(attacker.getOwner().getId(), 0).toUnit()
                let level = hero.getAbilityLevel(ABILITY_SERPENT_WARD)
                target.addBuffReduced(hero, SERPENT_POISON_DURATION[level-1], buffSerpentPoison, level)
        end))
    
init
    
    heroType = new HeroType(THIS_HERO, THIS_ICON, THIS_ID, false)
    ..setOnInitFunction(() -> initHeroType())

    setupTooltips()
    addButtonToTavern(THIS_ID, THIS_BUTTON_POS, heroType, 1)
        
