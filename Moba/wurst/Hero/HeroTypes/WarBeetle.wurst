package WarBeetle

//10

import HeroType
import TimerUtils
import HashMap
import ErrorHandling
import Knockback3



public constant HERO_WAR_BEETLE = 'H00S'

HeroType heroType

constant UPROOTED = compiletime(UNIT_ID_GEN.next())

constant ABILITY_HARD_SHELL = 'AY0P'
constant ABILITY_VENOMOUS_BEETLE = 'AY0Q'
constant ABILITY_WAR_STOMP = 'AY0W'
constant ABILITY_JUMP = 'AY0E'
constant ABILITY_UNBREAKABLE = 'AY0R'

constant int array HARD_SHELL_ARMOR = [12, 18, 24, 30, 36]

@compiletime
function passive()
    let aDef =createNoEffectAbiltiy(ABILITY_HARD_SHELL)
        ..setupWithHotKey("Hard Shell", "D")
        ..setupIcon("PASNagaArmorUp1")
        ..setLearnString("Increases the War Beetles's armor.", (int lvl) -> (begin
            return "{0} extra armor".format(
                HARD_SHELL_ARMOR[lvl-1].str())
        end) )

    for lvl = 1 to 5
        aDef
            ..setDescriptionString(true, lvl, "Increases the War Beetles's armor by {0}.".format(
                HARD_SHELL_ARMOR[lvl-1].str())
            )

constant int BEETLE_BITE = 'A00N'
constant int VENOMOUS_BEETLE = 'u002'

constant real array BITE_DAMAGE = [100, 160, 220, 280, 340]
constant real BITE_DAMAGEL_BONUS = 180

constant int BITE_SLOW = 200
constant real array BITE_SLOW_DURATION = [0.6, 0.9, 1.2, 1.5, 1.8]
constant real BITE_SLOW_DURATION_BONUS = 0.6

BuffType buffBite
constant BITE_BUFF_ID = compiletime(createAuraBuff("Venomous Beetle", "This unit was bitten by a Venomous Beetle; it is slowed.", Icons.bTNCarrionScarabs))
constant BITE_ABILITY_ID = compiletime(createNegativeBuffAbility(5, BITE_BUFF_ID, Abilities.poisonStingTarget, "chest"))

@compiletime
function venomousBeetle()
    int array MANA = [100, 105, 110, 115, 120]
    real array COOLDOWN = [9, 9, 9, 9, 9]

    let aDef = new AbilityDefinitionFarseerChainLightning(ABILITY_VENOMOUS_BEETLE)
        ..setupIcon(Icons.bTNCarrionScarabs)
        ..setAnimationNames("spell,slam")
        ..setupWithHotKey("Venomous Beetle", "Q")
        ..setLightningEffects("")
        ..setArtTarget("")
        ..setMissileArt("")
        ..setArtSpecial("")
        ..setLightningEffects("")

    for lvl = 1 to 5
        aDef
            ..setCooldown(lvl, COOLDOWN[lvl-1])
            ..setManaCost(lvl, MANA[lvl-1])
            ..setNumberofTargetsHit(lvl, 1)
            ..setDamageperTarget(lvl, 0)
            ..setCastRange(lvl, 600)
            ..setDurationNormal(lvl, 0.1)
            ..setTargetsAllowed(lvl, "enemies,ground,neutral,nonancient,organic")

constant real array WAR_STOMP_DURATION = [1.4, 1.6, 1.8, 2, 2.2]
constant real WAR_STOMP_DURATION_BONUS = 0.7
constant real array WAR_STOMP_DAMAGE = [60, 100, 140, 180, 220]
constant real WAR_STOMP_DAMAGE_BONUS = 120
constant real WAR_STOMP_AOE = 350

@compiletime
function warstomp()
    int array MANA = [120, 130, 140, 150, 160]
    real array COOLDOWN = [8, 8, 8, 8, 8]


    let aDef = new AbilityDefinitionPitLordHowlofTerror(ABILITY_WAR_STOMP)
        ..setupIcon(Icons.bTNSeaGiantWarStomp)
        ..setAnimationNames("spell,slam")
        ..setupWithHotKey("War Stomp", "W")
        ..setArtCaster(Abilities.warStompCaster)
    for lvl = 1 to 5
        aDef
            ..setCooldown(lvl, COOLDOWN[lvl-1])
            ..setManaCost(lvl, MANA[lvl-1])
            ..setTargetsAllowed(lvl, "none")




constant real array JUMP_RANGE = [800, 1000, 1200, 1400, 1600]
constant real array JUMP_COOLDOWN = [17, 16, 15, 14, 13]
constant int array JUMP_MANA = [120, 110, 100, 90, 80]

@compiletime
function root()
    let aDef = new AbilityDefinitionIllidanChannel(ABILITY_JUMP)
        ..setupIcon(Icons.bTNReplenishMana)
        ..setupChannel(TargetType.POINT, "channel", 0.51)
        ..setupWithHotKey("Dash", "E")
        ..setArtCaster("")
        ..setArtEffect("")
        ..setArtSpecial("")
        ..setArtTarget("")
        ..setLearnString("Dashes towards the target point.", (int lvl) -> (begin
        return "{0} range, {1} mana, {2} seconds cooldown".format( 
            JUMP_RANGE[lvl-1].str(), JUMP_MANA[lvl-1].str(), JUMP_COOLDOWN[lvl-1].toExactString()
        )
    end) )

    for lvl = 1 to 5
        aDef
            ..setCooldown(lvl, JUMP_COOLDOWN[lvl-1])
            ..setManaCost(lvl, JUMP_MANA[lvl-1])
            ..setCastRange(lvl, JUMP_RANGE[lvl-1])
            ..setDescriptionString(true, lvl, "Dashes towards the target point.")

constant int array UNBREAKABLE_HP =[400, 550, 700, 850, 1000]
constant int array UNBREAKABLE_DEF =[15, 20, 25, 30, 35]
constant int array UNBREAKABLE_STR =[30, 35, 40, 45, 50]

constant real UNBREAKABLE_DURATION = 20


constant int UNBREAKABLE_BUFF_ID = compiletime(createAuraBuff("Unbreakable", "This unit's maximum hit points; armor; willpower and strength are increased.", Icons.bTNAdvancedCreatureCarapace))
constant int UNBREAKABLE_ABILITY_ID = compiletime(createPositiveBuffAbility(5, UNBREAKABLE_BUFF_ID, "", "chest"))

constant real UNBREAKABLE_SCALE = 1.25

constant int UNBREAKABLE_DUMMY_BUFF = compiletime(createDummyBuff())

BuffType buffUnbreakable

@compiletime
function unbreakable()
    int array MANA = [175, 175, 175, 175, 175]
    real array COOLDOWN = [100, 100, 100, 100, 100]



    let aDef = new AbilityDefinitionBeserk(ABILITY_UNBREAKABLE)
        ..setupIcon(Icons.bTNAdvancedCreatureCarapace)
        ..setAnimationNames("")
        ..setupWithHotKey("Unbreakable", "R")
        ..setLightningEffects("")
        ..setArtTarget("")
        ..setMissileArt("")
        ..setArtSpecial("")
        ..setLightningEffects("")
        ..setCheckDependencies(true)
        ..setLearnString("Increases the War Beetle's strength, armor, willpower and hit points for {0} seconds.".format(UNBREAKABLE_DURATION.str()), (int lvl) -> (begin
        return "{0} strength, {1} armor and willpower, {2} hit points".format( 
            UNBREAKABLE_STR[lvl-1].str(), UNBREAKABLE_DEF[lvl-1].str(), UNBREAKABLE_HP[lvl-1].str()
        )
    end) )


    for lvl = 1 to 5
        aDef
            ..setCooldown(lvl, COOLDOWN[lvl-1])
            ..setManaCost(lvl, MANA[lvl-1])
            ..setAttackSpeedIncrease(lvl, 0)
            ..setDamageTakenIncrease(lvl, 0)
            ..setMovementSpeedIncrease(lvl, 0)
            ..setDurationHero(lvl, 0.01)
            ..setTargetsAllowed(lvl, "none")
            ..setBuffs(lvl, UNBREAKABLE_DUMMY_BUFF.toRawCode())
            ..setDescriptionString(true, lvl, "Increases the War Beetle's strength by {0}, armor and willpower by {1} and hit points by {2} for {3} seconds.".format(
            UNBREAKABLE_STR[lvl-1].str(), UNBREAKABLE_DEF[lvl-1].str(), UNBREAKABLE_HP[lvl-1].str(), UNBREAKABLE_DURATION.str()
        ))


function onSpellCast()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)

    if(spellId == ABILITY_VENOMOUS_BEETLE)
        new VenoumosBeetle(caster, GetSpellTargetUnit())

    else if (spellId == ABILITY_WAR_STOMP)
        group nearby = CreateGroup()
        nearby.enumUnitsInRange(caster.getPos(), WAR_STOMP_AOE)

        let dur = WAR_STOMP_DURATION[level-1].bonus(caster.getStr(), WAR_STOMP_DURATION_BONUS)
        let dmg = WAR_STOMP_DAMAGE[level-1].bonus(caster.getStr(), WAR_STOMP_DAMAGE_BONUS)

        while(not nearby.isEmpty())
            unit target = FirstOfGroup(nearby)
            nearby.removeUnit(target)
            if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(caster.getOwner(), false, true)
                caster.dealDamage(target, dmg, ReductionType.PHYSICAL)
                target.addBuffReduced( caster, dur, STUNNED, 1)

        nearby.destr()

    else if spellId == ABILITY_JUMP
        if caster.isMovable()
            Knockback3.add(caster, vec2(GetSpellTargetX(),GetSpellTargetY()), 500)

    else if spellId == ABILITY_UNBREAKABLE
        caster.removeAbility(UNBREAKABLE_DUMMY_BUFF)
        caster.addBuff(caster, UNBREAKABLE_DURATION, buffUnbreakable, level)
        caster.addEffect(Units.wispExplode, "chest").destr()

class VenoumosBeetle
    private unit owner
    private int ownerIntelligence
    private int level
    private timer checkTimer
    private unit dummy
    private unit target
    private trigger onBite
    private static constant unitToBeetle = new HashMap<unit, VenoumosBeetle>

    construct(unit caster, unit target)

        this.owner = caster
        this.ownerIntelligence = owner.getInt()
        this.target = target
        this.level = caster.getAbilityLevel(ABILITY_VENOMOUS_BEETLE)
        this.dummy = createUnit(owner.getOwner(), VENOMOUS_BEETLE, owner.getPos(), owner.getPos().angleTo(target.getPos()))
        this.dummy.setXY(owner.getPos())
        this.dummy.setPathing(false)
        this.dummy.issueTargetOrder("chainlightning", target)
        this.dummy.setColor(PLAYER_COLOR_TURQUOISE)
        unitToBeetle.put(this.dummy, this)

        this.checkTimer = getTimer()
            ..setData(this castTo int)
            ..startPeriodic(0.1, function updateStatic)

        this.onBite = CreateTrigger()
            ..registerUnitEvent(this.dummy, EVENT_UNIT_SPELL_EFFECT)
            ..addAction(function onBiteStatic)

    function update()
        if this.dummy.getCurrentOrder()!= OrderId("chainlightning")
            destroy this
            return
    
    static function updateStatic()
        (GetExpiredTimer().getData() castTo VenoumosBeetle).update()

    function onBite(unit biteTarget)
        if biteTarget == this.target
            owner.dealDamage(target, BITE_DAMAGE[level-1].bonus(ownerIntelligence, BITE_DAMAGEL_BONUS), ReductionType.MAGIC)
            target.addBuffReduced(this.owner, BITE_SLOW_DURATION[level-1].bonus(ownerIntelligence, BITE_SLOW_DURATION_BONUS), buffBite, level)
        else
            error("Bitten target is wrong!")
    static function onBiteStatic()
        unitToBeetle.get(GetTriggerUnit()).onBite(GetSpellTargetUnit())

    ondestroy
        unitToBeetle.remove(this.dummy)
        this.dummy.kill()
        this.checkTimer.release()



function setupStats()
    heroType
        //..setStat(Stat.AD, 5, 40)
        ..setStat(Stat.AR, 17, 41)
        ..setStat(Stat.AS, 11, 42)
        ..setStat(Stat.HP, 14, 59)
        ..setStat(Stat.HR, 12, 31)
        ..setStat(Stat.MP, 14, 38)
        ..setStat(Stat.MR, 12, 35)
        ..setStat(Stat.MS, 4, 32)
        ..setStat(Stat.STR, 21, 64)
        ..setStat(Stat.AGI, 14, 36)
        ..setStat(Stat.INT, 11, 37)

function retreatAI(HeroAI ai)
    let heroPos = ai.getHeroUnit().getPos()
    ai.issue("channel", heroPos.polarOffset(heroPos.angleTo(ai.getHomeLoc()), JUMP_RANGE[ai.getHeroUnit().getAbilityLevel(ABILITY_JUMP)-1]) )

function attackAI(HeroAI ai)
    let hero = ai.getHeroUnit()


    unit target
    if hero.getMana()/hero.getMaxMana() > 0.5
        target = hero.findTarget(600, AbilityTargetFocus.ENEMY_HERO, AbilityTargetPriority.LOW_HEALTH, null)
        if target.isTargetable(hero.getOwner(), false, true)
            ai.issue("chainlightning", target)

        let g = CreateGroup()
        unit u
        int count = 0
        g.enumUnitsInRange(hero.getPos(), WAR_STOMP_AOE)
        while(true)
            u = FirstOfGroup(g)
            if u == null
                break
            g.removeUnit(u)
            if u.isTargetable(hero.getOwner(), false, true) and not u.isType(UNIT_TYPE_STRUCTURE)
                if u.isType(UNIT_TYPE_HERO)
                    count += 3
                else
                    count ++
        g.destr()

        if count >= 4
            if ai.issue("howlofterror")
                return

    target = hero.findTarget(600, AbilityTargetFocus.ENEMY, AbilityTargetPriority.LOW_HEALTH, null)
    if target.isTargetable(hero.getOwner(), false, true)
        if not ai.getAttacking()
            ai.attack(target)



function teamFightAI(HeroAI ai)
    let hero = ai.getHeroUnit()

    ai.issue("berserk")

    let g = CreateGroup()
    unit u
    int count = 0
    g.enumUnitsInRange(hero.getPos(), WAR_STOMP_AOE)
    while(true)
        u = FirstOfGroup(g)
        if u == null
            break
        g.removeUnit(u)
        if u.isTargetable(hero.getOwner(), false, true)
            if u.isType(UNIT_TYPE_HERO)
                count++
    g.destr()

    if count != 0
        if ai.issue("howlofterror")
            return

    

    unit target = ai.getTeamFightTarget()
    if target.isTargetable(hero.getOwner(), false, true)
        ai.issue("chainlightning", target)
        if not ai.getAttacking()
            ai.attack(target)




function setupTooltips()
    DynamicTooltip tooltip = new DynamicTooltip(ABILITY_VENOMOUS_BEETLE)
    tooltip.setLearnString("Sends out a venomous beetle to bite the target enemy unit, dealing damage and slowing it.", (int lvl) -> (begin
        return "{0}{I0} damage, lasts {1}{I1} seconds.".format(
            BITE_DAMAGE[lvl-1].str(),
            BITE_SLOW_DURATION[lvl-1].toExactString())
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Sends out a venomous beetle to bite the target enemy unit, dealing {0}{I0} damage and slowing it for {1}{I1} seconds.".format(
            BITE_DAMAGE[lvl-1].str(),
            BITE_SLOW_DURATION[lvl-1].toExactString()
        ))
    tooltip.setReplaceIntelligence(BITE_DAMAGEL_BONUS, BITE_SLOW_DURATION_BONUS)
    heroType.addDynamicTooltipIntelligence(tooltip)

    tooltip = new DynamicTooltip(ABILITY_WAR_STOMP)
    tooltip.setLearnString("Slams the ground, stunning and damaging nearby enemy land units.", (int lvl) -> (begin
        return "{0}{S0} damage, {1}{S1} second.".format( WAR_STOMP_DAMAGE[lvl-1].str(), WAR_STOMP_DURATION[lvl-1].toExactString() )
    end) )

    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Slams the ground, dealing {0}{S0} damage to nearby enemy land units and stunning them for {1}{S1} seconds.".format(
            WAR_STOMP_DAMAGE[lvl-1].str(), WAR_STOMP_DURATION[lvl-1].toExactString()
        ))
    tooltip.setReplaceStrength(WAR_STOMP_DAMAGE_BONUS, WAR_STOMP_DURATION_BONUS)
    heroType.addDynamicTooltipStrength(tooltip)

function initHeroType()
    setupStats()
    heroType.setSkillBuild("QWEQWQWQWQWEEEE")
    delayInit(5) ->
        setupTooltips()

        heroType
            ..addOnSpellCastFunc(function onSpellCast)
            ..useHeroGlow()
            ..setRetreatAI((HeroAI ai) -> (retreatAI(ai)))
            ..setAttackAI((HeroAI ai) -> (attackAI(ai)))
            ..setTeamFightAI((HeroAI ai) -> (teamFightAI(ai)))
            ..addItem(ITEM_ID_HEAVY_BOOTS)
            ..addItem(ITEM_ID_RUNIC_ARMOR)
            ..addItem(ITEM_ID_AXE_OF_DECAY)
            ..addItem(ITEM_ID_BLESSED_GOBLET)
            ..addItem(ITEM_ID_ARCANE_SHIELD)
            ..addItem(ITEM_ID_WAR_DRUM)

        buffBite = new BuffType(false, true)

        var abilityList = new LinkedList<int>
        ..add(BITE_ABILITY_ID)
        buffBite.setup(abilityList, BITE_BUFF_ID)

        buffBite.addFirstFunction( (Buff whichBuff) -> (begin
            whichBuff.getTarget().wrapper()
                ..addStatRelativeBonus(Stat.MS, -BITE_SLOW * 10)

        end))

        buffBite.addEndFunction( (Buff whichBuff) -> (begin
            whichBuff.getTarget().wrapper()
                ..addStatRelativeBonus(Stat.MS, BITE_SLOW * 10)
        end))

        buffUnbreakable = new BuffType(true, true)

        abilityList = new LinkedList<int>
            ..add(UNBREAKABLE_ABILITY_ID)
        buffUnbreakable.setup(abilityList, UNBREAKABLE_BUFF_ID)
        buffUnbreakable.addFirstFunction((Buff whichBuff) -> (begin
            let level = whichBuff.getLevel()
            let target = whichBuff.getTarget()
            target.wrapper()
                ..addStatAbsoluteBonus(Stat.HP, UNBREAKABLE_HP[level-1])
                ..addStatAbsoluteBonus(Stat.STR, UNBREAKABLE_STR[level-1])
                ..addStatAbsoluteBonus(Stat.AR, UNBREAKABLE_DEF[level-1])
                ..addStatAbsoluteBonus(Stat.AGI, UNBREAKABLE_DEF[level-1])

            target.setScale(UNBREAKABLE_SCALE)
        end))

        buffUnbreakable.addEndFunction((Buff whichBuff) -> (begin
            let level = whichBuff.getLevel()
            let target = whichBuff.getTarget()
            target.wrapper()
                ..addStatAbsoluteBonus(Stat.HP, -UNBREAKABLE_HP[level-1])
                ..addStatAbsoluteBonus(Stat.STR, -UNBREAKABLE_STR[level-1])
                ..addStatAbsoluteBonus(Stat.AR, -UNBREAKABLE_DEF[level-1])
                ..addStatAbsoluteBonus(Stat.AGI, -UNBREAKABLE_DEF[level-1])

            target.setScale(0.9)
        end))

function createHeroType(Hero hero)
    let heroUnit = hero.toUnit()
    CreateTrigger()
        ..registerUnitEvent(heroUnit, EVENT_UNIT_HERO_SKILL)
        ..addAction(() -> (begin
            let u = GetTriggerUnit()
            if GetLearnedSkill() == ABILITY_HARD_SHELL
                let newLevel = u.getAbilityLevel(ABILITY_HARD_SHELL)
                if newLevel!= 1
                    u.wrapper().addStatAbsoluteBonus(Stat.AR, -HARD_SHELL_ARMOR[newLevel-2])

                u.wrapper().addStatAbsoluteBonus(Stat.AR, HARD_SHELL_ARMOR[newLevel-1])
        end))



init
    heroType = new HeroType(HERO_WAR_BEETLE, "BTNWarBeetle.blp", 10, true)
        ..setOnInitFunction(() -> initHeroType())
        ..setOnCreateFunction((Hero hero) -> createHeroType(hero))

   


