package TrollManhunter

//14

import HeroType
import ClosureTimers
import UnitTypeConfig
import SoundUtils
import OnAttack

public constant HERO_TROLL_MANHUNTER = 'H00U'
constant THIS_HERO = HERO_TROLL_MANHUNTER
constant THIS_ID = 14
constant THIS_BUTTON_POS = 2 //button pos from 0 to 11
constant THIS_ICON = "BTNHeroTrollManhunter"
HeroType heroType = null

public constant ABILITY_BLEEDING_WOUND = 'AY4P'
constant ABILITY_SHADOW_STRIKE = 'AY4Q'
constant ABILITY_DEATH_SPIN = 'AY4W'
constant ABILITY_CRIPPLING_PAIN = 'AY4E'
constant ABILITY_MIRROR_IMAGE = 'AY4R'

constant SOUND_SHADOW_STRIKE = new SoundDefinition(Sounds.metalHeavySliceFlesh2, false, true)
constant SOUND_CRIPPLING_PAIN = new SoundDefinition(Sounds.howlOfTerror, false, true)

constant NOT_SPINNING = compiletime(UNIT_ID_GEN.next())
unit notSpinning
unit trollManhunter
player heroOwner

public constant real array BLEEDING_WOUND_DMG = [4, 6, 8, 10, 12]
public constant real BLEEDING_WOUND_DURATION = 6.0

public BuffType buffBleedingWound

constant int BLEEDING_WOUND_BUFF_ID = compiletime(createAuraBuff("Bleeding Wound", "This is under the effect of Bleeding Wound; it takes damage over time.", "BTNBloodSpike"))
constant int BLEEDING_WOUND_ABILITY_ID = compiletime(createNegativeBuffAbility(5, BLEEDING_WOUND_BUFF_ID, "FatalWoundV2.mdx", "chest"))


function passive(int abilityId)
    if compiletime
        createNoEffectAbiltiy(abilityId)
            ..setupIcon("PASBloodSpike")
            ..setupWithHotKey("Bleeding Wound", "D")


    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceStrength(0)
    tooltip.setSummary("Damaging an enemy with an attack or a spell causes the target to bleed and take damage over time.")
    tooltip.setLearnString( ("Attacking an enemy unit or damaging it with a spell applies one stack of Bleeding Wound. If the target was not attacked for {0} seconds, "+
                            "all stacks are lost. Each stack deals physical damage over time:").format(BLEEDING_WOUND_DURATION.toSmartString()), (int lvl) -> (begin
        return "{0} damage per second.".format(
            BLEEDING_WOUND_DMG[lvl-1].toSmartString())
    end) )
    
    for lvl = 1 to 5
        tooltip.setNormalString(false, lvl, ("Attacking an enemy unit or damaging it with a spell applies one stack of Bleeding Wound. If the target was not attacked for {0} seconds, "+
        "all stacks are lost. Each stack deals {1} physical damage per second.").format(
            BLEEDING_WOUND_DURATION.toSmartString(),
            BLEEDING_WOUND_DMG[lvl-1].toSmartString())
        )
    addDynamicTooltipStrength(heroType, tooltip)


constant int SHADOW_STRIKE_SHADOW_UNIT = 'h01L'

constant real array SHADOW_STRIKE_DAMAGE = [75, 125, 175, 225, 275]
constant real SHADOW_STRIKE_DAMAGE_BONUS = 80

constant real array SHADOW_STRIKE_SLOW_DURATION = [1, 1.25, 1.5, 1.75, 2]
constant int SHADOW_STRIKE_SLOW = 200

BuffType buffShadowStrike
constant SHADOW_STRIKE_BUFF_ID = compiletime(createAuraBuff("Shadow Strike", "This unit was hit by Shadow Strike; it is slowed.", Icons.bTNBerserkForTrolls))
constant SHADOW_STRIKE_ABILITY_ID = compiletime(createNegativeBuffAbility(5, SHADOW_STRIKE_BUFF_ID, Abilities.shadowstrike, "overhead"))

function abilityQ(int abilityId)

    if compiletime
        int array MANA = [80, 80, 80, 80, 80]
        real array COOLDOWN = [8, 8, 8, 8, 8]
        real array RANGE = [600, 650, 700, 750, 800]
        let aDef = new AbilityDefinitionFarseerChainLightning(abilityId)
            ..setupIcon(Icons.bTNBerserkForTrolls)
            ..setupWithHotKey("Shadow Strike", "Q")
            ..setAnimationNames("spell")
            ..setLightningEffects("")
            ..setRequirements(NOT_SPINNING.toRawCode())
            ..setArtTarget("")
            ..setCheckDependencies(true)

        for lvl = 1 to 5
            aDef
                ..setCooldown(lvl, COOLDOWN[lvl-1])
                ..setManaCost(lvl, MANA[lvl-1])
                ..setCastRange(lvl, RANGE[lvl-1])
                ..setTargetsAllowed(lvl, "ground,enemy,nonancient,neutral,organic,air")
                ..setDamageperTarget(lvl, 0)
                ..setNumberofTargetsHit(lvl, 1)

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceStrength(SHADOW_STRIKE_DAMAGE_BONUS)
    tooltip.setLearnString("Summons an illusion of the Troll Headhunter to attack the target from behind, dealing physical damage and slowing it for a short time.", (int lvl) -> (begin
        return "{0}{S0} damage, {1} seconds slow.".format(
            SHADOW_STRIKE_DAMAGE[lvl-1].str(),
            SHADOW_STRIKE_SLOW_DURATION[lvl-1].toSmartString())
    end) )
    
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Summons an illusion of the Troll Headhunter to attack the target from behind, dealing {0}{S0} damage and slowing it for {1} seconds.".format(
            SHADOW_STRIKE_DAMAGE[lvl-1].str(),
            SHADOW_STRIKE_SLOW_DURATION[lvl-1].toSmartString()
            ))
    addDynamicTooltipStrength(heroType, tooltip)


function spinDummy()
    new UnitDefinition(NOT_SPINNING, 'hfoo')
        ..setNormalAbilities("Aloc")
        ..setModelFile("")
        ..setShadowImageUnit("")
        ..setAttacksEnabled(0)
        ..setMovementType(MovementType.Fly)
        ..setCollisionSize(0)
        ..setFoodCost(0)
        ..setSightRadiusDay(0)
        ..setSightRadiusNight(0)
        ..setUpgradesUsed("")
        ..setUnitSoundSet("")
        ..setName("Cannot be cast during Death Spin")

constant real array DEATH_SPIN_DAMAGE = [50, 75, 100, 125, 150]
constant real DEATH_SPIN_DAMAGE_BONUS = 50

constant int array DEATH_SPIN_DEFENSE = [20, 25, 30, 35, 40]
constant real DEATH_SPIN_DURATION = 3.0

constant real DEATH_SPIN_AOE = 250

BuffType buffDeathSpin

constant int DEATH_SPIN_BUFF_ID = compiletime(createAuraBuff("Death Spin", "This unit is under the effect of Death Spin; it cannot attack.", Icons.bTNWhirlwind))
constant int DEATH_SPIN_ABILITY_ID = compiletime(createNegativeBuffAbility(5, DEATH_SPIN_BUFF_ID, Abilities.lordofFlameMissile, "chest"))

constant int DEATH_SPIN_DISABLE_ATTACK = compiletime(ABIL_ID_GEN.next())

function abilityW(int abilityId)

    if compiletime
        spinDummy()

        new AbilityDefinitionCargoHoldBurrow(DEATH_SPIN_DISABLE_ATTACK)
            ..setCargoCapacity(1, 0)

        int array MANA = [75, 75, 75, 75, 75]
        real array COOLDOWN = [12, 11, 10, 9, 8]
        let aDef = new AbilityDefinitionBeserk(abilityId)
            ..setupIcon(Icons.bTNWhirlwind)
            ..setupWithHotKey("Death Spin", "W")

        for lvl = 1 to 5
            aDef
                ..setCooldown(lvl, COOLDOWN[lvl-1])
                ..setManaCost(lvl, MANA[lvl-1])
                ..setTargetsAllowed(lvl, "none")
                ..setAttackSpeedIncrease(lvl, 0)
                ..setDamageTakenIncrease(lvl, 0)
                ..setMovementSpeedIncrease(lvl, 0)
                ..setDurationHero(lvl, 0.01)

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceStrength(DEATH_SPIN_DAMAGE_BONUS)
    tooltip.setLearnString("Causes a bladestorm of destructive force around the Troll Headhunter, increasing armor and willpower and dealing damage per second to nearby enemy units.\nLasts {0} seconds.".format(DEATH_SPIN_DURATION.toSmartString()), (int lvl) -> (begin
        return "{0}{S0} damage per second, {1} armor and willpower.".format(
            DEATH_SPIN_DAMAGE[lvl-1].toSmartString(),
            DEATH_SPIN_DEFENSE[lvl-1].toString())
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(false, lvl, "Causes a bladestorm of destructive force around the Troll Headhunter, increasing armor and willpower by {0} and dealing {1}{S0} damage per second to nearby enemy units.\nLasts {2} seconds.".format(
            DEATH_SPIN_DEFENSE[lvl-1].toString(),
            DEATH_SPIN_DAMAGE[lvl-1].toSmartString(),
            DEATH_SPIN_DURATION.toSmartString()))
    addDynamicTooltipStrength(heroType, tooltip)


constant real array CRIPPLING_PAIN_DAMAGE = [20, 30, 40, 50, 60]
constant real CRIPPLING_PAIN_DAMAGE_BONUS = 30

constant int array CRIPPLING_PAIN_SLOW = [8, 10, 12, 14, 16]

constant real array CRIPPLING_PAIN_DURATION= [3, 3.5, 4, 4.5, 5]

BuffType buffCripplingPain

constant int CRIPPLING_PAIN_BUFF_ID = compiletime(createAuraBuff("Crippling Pain", "This unit is under the effect of Crippling Pain; it has reduced movement speed.", "BTNTorment"))
constant int CRIPPLING_PAIN_ABILITY_ID = compiletime(createNegativeBuffAbility(5, CRIPPLING_PAIN_BUFF_ID, Abilities.crippleTarget, "chest"))

constant real CRIPPLING_PAIN_AOE = 1500

function abilityE(int abilityId)

    if compiletime
        int array MANA = [80, 85, 90, 95, 100]
        real array COOLDOWN = [5, 5, 5, 5, 5]
        let aDef = new AbilityDefinitionPitLordHowlofTerror(abilityId)
            ..setAnimationNames("spell,slam")
            ..setupIcon("BTNTorment")
            ..setupWithHotKey("Crippling Pain", "E")
            ..setRequirements(NOT_SPINNING.toRawCode())
            ..setCheckDependencies(true)
            ..setArtCaster("")

        for lvl = 1 to 5
            aDef
                ..setCooldown(lvl, COOLDOWN[lvl-1])
                ..setManaCost(lvl, MANA[lvl-1])
                ..setTargetsAllowed(lvl, "none")

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(CRIPPLING_PAIN_DAMAGE_BONUS)
    tooltip.setLearnString(("Damages and slows enemies affected by Bleeding Wound."+
    " Deals damage and slows for every stack of Bleeding Wound, but consumes all stacks."), (int lvl) -> (begin
        return "{0}{I0} damage, {1}% slow, {2} seconds.".format(
            CRIPPLING_PAIN_DAMAGE[lvl-1].toSmartString(),
            CRIPPLING_PAIN_SLOW[lvl-1].toString(),
            CRIPPLING_PAIN_DURATION[lvl-1].toSmartString())
    end) )
    
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, ("Damages and slows enemies affected by Bleeding Wound."+
        " Deals {0}{I0} damage and slows by {1}% for every stack of Bleeding Wound for {2} seconds, but consumes all stacks.").format(
            CRIPPLING_PAIN_DAMAGE[lvl-1].toSmartString(),
            CRIPPLING_PAIN_SLOW[lvl-1].toString(),
            CRIPPLING_PAIN_DURATION[lvl-1].toSmartString()))
    addDynamicTooltipIntelligence(heroType, tooltip)


        
constant int MIRROR_IMAGE_ILLUSIONS = 1

unit mirrorImageUnit

//public constant real array MIRROR_IMAGE_DMG_FACTOR = [35, 40, 45, 50, 55]

constant real array MIRROR_IMAGE_DURATION = [18, 21, 24, 27, 30]

public BuffType buffMirrorImage // the actual effect is in OnAttack

constant int MIRROR_IMAGE_BUFF_ID = compiletime(createAuraBuff("Mirror Image", "This unit is under the effect of Mirror Image; it deals reduced damage.", "BTNSpell_Shadow_ShadowWard"))
constant int MIRROR_IMAGE_ABILITY_ID = compiletime(createPositiveBuffAbility(5, MIRROR_IMAGE_BUFF_ID, "", ""))



function abilityR(int abilityId)

    if compiletime
        int array MANA = [125, 125, 125, 125, 125]
        real array COOLDOWN = [80, 75, 70, 65, 60]
        let aDef = new AbilityDefinitionRoar(abilityId)
            ..setAnimationNames("spell")
            ..setArtCaster("")
            ..setupIcon("BTNSpell_Shadow_ShadowWard")
            ..setupWithHotKey("Mirror Image", "R")
            ..setCheckDependencies(true)
            ..setRequirements(NOT_SPINNING.toRawCode())

        for lvl = 1 to 5
            aDef
                ..setCooldown(lvl, COOLDOWN[lvl-1])
                ..setManaCost(lvl, MANA[lvl-1])
                ..setTargetsAllowed(lvl, "none")


    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(0)
    tooltip.setSummary("Summons a mirror image of the Troll Headhunter, that can attack, but cannot cast spells or use items.")
    tooltip.setLearnString(("Summons a mirror image of the Troll Headhunter."+
    " The mirror image's health, armor, willpower, attack speed and attack damage scale with the Troll Headhunter's respective stats."+
    " The mirror image applies Bleeding Wound, but cannot cast spells or use items.").format(MIRROR_IMAGE_ILLUSIONS.toString()), (int lvl) -> (begin
        return "{0} seconds".format(
            MIRROR_IMAGE_DURATION[lvl-1].str())
    end) )
    
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, ("Summons a mirror image of the Troll Headhunter."+
        " The mirror image's health, armor, willpower, attack speed and attack damage scale with the Troll Headhunter's respective stats."+
        " The mirror image applies Bleeding Wound, but cannot cast spells or use items.\nLasts {0} seconds.").format(
            MIRROR_IMAGE_DURATION[lvl-1].str())
        )
    addDynamicTooltipIntelligence(heroType, tooltip)



function setupStats()
    heroType
        //..setStat(Stat.AD, 5, 40)
        ..setStat(Stat.AR, 26, 41)
        ..setStat(Stat.AS, 63, 97)
        ..setStat(Stat.HP, 12, 33)
        ..setStat(Stat.HR, 16, 32)
        ..setStat(Stat.MP, 17, 32)
        ..setStat(Stat.MR, 18, 30)
        ..setStat(Stat.MS, 34, 64)
        ..setStat(Stat.STR, 12, 35)
        ..setStat(Stat.AGI, 28, 46)
        ..setStat(Stat.INT, 12, 25)









function onSpellCast()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)
    let pos = caster.getPos()

    if(spellId==ABILITY_SHADOW_STRIKE)
        
        let target = GetSpellTargetUnit()
        let targetPos = target.getPos()
        let angle = pos.angleTo(targetPos)
        let spawnPos = targetPos.polarOffset(angle, 100)
        let illusion = createUnit(caster.getOwner(), SHADOW_STRIKE_SHADOW_UNIT, spawnPos, angle+angle(bj_PI))
        illusion.setAnimation("attack")
        illusion.setVertexColor(255, 255, 255, 200)
        doAfter(0.3) ->
            if target.isTargetable(caster.getOwner(), false, true)
                SOUND_SHADOW_STRIKE.playOnPoint(caster.getPos().toVec3()).snd.setVolume(150)
                let bleedingWoundLevel = caster.getAbilityLevel(ABILITY_BLEEDING_WOUND)
                if bleedingWoundLevel > 0
                    let b = target.addBuffReduced(caster, BLEEDING_WOUND_DURATION, buffBleedingWound, bleedingWoundLevel)
                    b.setData(b.getData()+3)

                target.addBuffReduced(caster, SHADOW_STRIKE_SLOW_DURATION[level-1], buffShadowStrike, level)
                caster.dealDamage(target, SHADOW_STRIKE_DAMAGE[level-1].bonus(caster.getStr(), SHADOW_STRIKE_DAMAGE_BONUS), ReductionType.PHYSICAL)
        doAfter(0.85) ->
            addEffect(Abilities.mirrorImageDeathCaster, spawnPos).destr()
            illusion.remove()

    if(spellId==ABILITY_DEATH_SPIN)
        caster.removeAbility('Bbsk')
        caster.addBuff(caster, DEATH_SPIN_DURATION, buffDeathSpin, level)

    if(spellId==ABILITY_CRIPPLING_PAIN)
        SOUND_CRIPPLING_PAIN.playOnPoint(pos.toVec3()).snd.setVolume(150)
        let g = CreateGroup()
        g.enumUnitsInRange(pos, CRIPPLING_PAIN_AOE)
        unit u
        while true
            u = FirstOfGroup(g)
            if u == null
                break
            g.removeUnit(u)
            if BuffList.hasBuffType(u, buffBleedingWound)
                let bleedingWound = BuffList.getBuffOfType(u, buffBleedingWound)
                let stacks = bleedingWound.getData() div 4
                bleedingWound.dispel()
                caster.dealDamage(u, stacks * CRIPPLING_PAIN_DAMAGE[level-1].bonus(caster.getInt(), CRIPPLING_PAIN_DAMAGE_BONUS), ReductionType.MAGIC)

                u.wrapper().addStatRelativeBonus(Stat.MS, -10 * CRIPPLING_PAIN_SLOW[level-1] * stacks )
                if u.isAlive()
                    let b = u.addBuffReduced(caster, CRIPPLING_PAIN_DURATION[level-1], buffCripplingPain, level)
                    b.setData(stacks * CRIPPLING_PAIN_SLOW[level-1])

                

        g.destr()

    if(spellId==ABILITY_MIRROR_IMAGE)
        mirrorImageUnit = createUnit(caster.getOwner(), MIRROR_IMAGE_UNIT_ID, caster.getPos(), caster.getFacingAngle())
        mirrorImageUnit.setTimedLife(MIRROR_IMAGE_DURATION[level-1])
        mirrorImageUnit.setVertexColor(255, 255, 255, 200)
        let wrapper = mirrorImageUnit.wrapper()
        wrapper.addStatAbsoluteBonus(Stat.AS, caster.wrapper().getStatTotalBonus(Stat.AS))
        wrapper.addStatAbsoluteBonus(Stat.HP, caster.wrapper().getStatTotalBonus(Stat.HP))
        wrapper.addStatAbsoluteBonus(Stat.AD, caster.wrapper().getStatTotalBonus(Stat.STR))
        wrapper.addStatAbsoluteBonus(Stat.AR, caster.wrapper().getStatTotalBonus(Stat.AR))
        wrapper.addStatAbsoluteBonus(Stat.AGI, caster.wrapper().getStatTotalBonus(Stat.AGI))
        wrapper.addStatAbsoluteBonus(Stat.MS, caster.wrapper().getStatTotalBonus(Stat.MS))
        
function onAttack(unit attacker, unit target, boolean _isActive)
    let level = attacker.getAbilityLevel(ABILITY_BLEEDING_WOUND)
    if level != 0 and target.isTargetable(attacker.getOwner(), false, true) and not target.isType(UNIT_TYPE_STRUCTURE)
        let b = target.addBuffReduced( attacker, BLEEDING_WOUND_DURATION, buffBleedingWound, level)
        b.setData(b.getData()+3)

function retreatAI(HeroAI _ai)

function attackAI(HeroAI _ai)

function teamFightAI(HeroAI _ai)
            
@compiletime
function setupTooltips()

    passive(ABILITY_BLEEDING_WOUND)
    abilityQ(ABILITY_SHADOW_STRIKE)
    abilityW(ABILITY_DEATH_SPIN)
    abilityE(ABILITY_CRIPPLING_PAIN)
    abilityR(ABILITY_MIRROR_IMAGE)
    createHeroButton(THIS_ID, THIS_BUTTON_POS, THIS_ICON)


function initHeroType()
    setupStats()
    heroType..setSkillBuild("QWQWQWQWQWEEEEE")
    ..addItem(ITEM_ID_HEAVY_BOOTS)
    ..addItem(ITEM_ID_BLOOD_SWORD)
    ..addItem(ITEM_ID_INFERNAL_BOW)
    ..addItem(ITEM_ID_RUNIC_ARMOR)
    ..addItem(ITEM_ID_SACRIFICIAL_DAGGER)
    ..addItem(ITEM_ID_CURSED_SWORD)
    delayInit(5) ->
        heroType
            ..setOnAttackFunc((unit attacker, unit target, boolean isActive, boolean advanced) -> onAttack(attacker, target, isActive))
            ..addOnSpellCastFunc(function onSpellCast)
            ..setRetreatAI((HeroAI ai) -> (retreatAI(ai)))
            ..setAttackAI((HeroAI ai) -> (attackAI(ai)))
            ..setTeamFightAI((HeroAI ai) -> (teamFightAI(ai)))

    
        /*  bleeding wound: every attack increases actual stacks by 4, so bladestorm can increase by 1 every 0.25 seconds
            So dmg is 0.25 * 1/4 -> (interval) * (4 stacks)  */
        var abilityList = new LinkedList<int>
        ..add(BLEEDING_WOUND_ABILITY_ID)
        buffBleedingWound = new BuffType(false, true)
        buffBleedingWound.setup(abilityList, BLEEDING_WOUND_BUFF_ID)

        buffBleedingWound.addFirstFunction( (Buff whichBuff) -> (begin
            whichBuff.setData(1)
        end))

        buffBleedingWound.addStackFunction( (Buff whichBuff) -> (begin
            whichBuff.setData(whichBuff.getData()+1)
        end))

        buffBleedingWound.setPeriodicTime(0.25)
        buffBleedingWound.addPeriodicFunction( (Buff whichBuff) -> (begin
            let level = whichBuff.getLevel()
            whichBuff.getCaster().dealDamage(whichBuff.getTarget(), 1.0/16.0 * whichBuff.getData() * BLEEDING_WOUND_DMG[level-1], ReductionType.PHYSICAL)
        end))

        buffShadowStrike = new BuffType(false, true)

        abilityList = new LinkedList<int>
        ..add(SHADOW_STRIKE_ABILITY_ID)
        buffShadowStrike.setup(abilityList, SHADOW_STRIKE_BUFF_ID)

        buffShadowStrike.addFirstFunction( (Buff whichBuff) -> (begin
            whichBuff.getTarget().wrapper()
                ..addStatRelativeBonus(Stat.MS, -SHADOW_STRIKE_SLOW * 10)

        end))

        buffShadowStrike.addEndFunction( (Buff whichBuff) -> (begin
            whichBuff.getTarget().wrapper()
                ..addStatRelativeBonus(Stat.MS, SHADOW_STRIKE_SLOW * 10)
        end))

        abilityList = new LinkedList<int>
        ..add(DEATH_SPIN_ABILITY_ID)
        buffDeathSpin = new BuffType(false, true)
        buffDeathSpin.setup(abilityList, DEATH_SPIN_BUFF_ID)

        buffDeathSpin.addFirstFunction( (Buff whichBuff) -> (begin
            notSpinning.setOwner(players[PLAYER_NEUTRAL_PASSIVE], false)
            let target = whichBuff.getTarget()
            target.addAbility(DEATH_SPIN_DISABLE_ATTACK)
            AddUnitAnimationProperties(target, "spin", true)
            let level = whichBuff.getLevel()
            target.wrapper()
                ..addStatAbsoluteBonus(Stat.AR, DEATH_SPIN_DEFENSE[level-1])
                ..addStatAbsoluteBonus(Stat.AGI, DEATH_SPIN_DEFENSE[level-1])
        end))

        buffDeathSpin.setPeriodicTime(0.25)
        buffDeathSpin.addPeriodicFunction( (Buff whichBuff) -> (begin
            let caster = whichBuff.getCaster()
            let g = CreateGroup()
            let level = whichBuff.getLevel()
            g.enumUnitsInRange(caster.getPos(), DEATH_SPIN_AOE)
            unit u
            while true
                u = FirstOfGroup(g)
                if u == null
                    break
                g.removeUnit(u)
                if u.isTargetable(heroOwner, false, true) and not u.isType(UNIT_TYPE_STRUCTURE)
                    let bleedingWoundLevel = caster.getAbilityLevel(ABILITY_BLEEDING_WOUND)
                    if bleedingWoundLevel > 0
                        u.addBuffReduced(caster, BLEEDING_WOUND_DURATION, buffBleedingWound, bleedingWoundLevel)
                    caster.dealDamage(u, 0.25 * DEATH_SPIN_DAMAGE[level-1].bonus(caster.getStr(), DEATH_SPIN_DAMAGE_BONUS), ReductionType.PHYSICAL)
            g.destr()
        end))

        buffDeathSpin.addEndFunction( (Buff whichBuff) -> (begin
            notSpinning.setOwner(heroOwner, false)
            let target = whichBuff.getTarget()
            target.removeAbility(DEATH_SPIN_DISABLE_ATTACK)
            AddUnitAnimationProperties(target, "spin", false)
            let level = whichBuff.getLevel()
            target.wrapper()
                ..addStatAbsoluteBonus(Stat.AR, -DEATH_SPIN_DEFENSE[level-1])
                ..addStatAbsoluteBonus(Stat.AGI, -DEATH_SPIN_DEFENSE[level-1])
        end))

        abilityList = new LinkedList<int>
        ..add(CRIPPLING_PAIN_ABILITY_ID)
        buffCripplingPain = new BuffType(false, true)
        buffCripplingPain.setup(abilityList, CRIPPLING_PAIN_BUFF_ID)

        buffCripplingPain.addEndFunction( (Buff whichBuff) -> (begin
            let stacks = whichBuff.getData()
            whichBuff.getTarget().wrapper()
                ..addStatRelativeBonus(Stat.MS, 10 * stacks)
        end))


        abilityList = new LinkedList<int>
        ..add(MIRROR_IMAGE_ABILITY_ID)
        buffMirrorImage = new BuffType(false, true)
        buffMirrorImage.setup(abilityList, MIRROR_IMAGE_BUFF_ID)

        //bleeding wound for mirror image
        OnAttack.addOnAttackFunc((unit attacker, unit target, boolean isActive) -> (begin
            if attacker.getTypeId() == MIRROR_IMAGE_UNIT_ID
                let level = trollManhunter.getAbilityLevel(ABILITY_BLEEDING_WOUND)
                if level != 0 and target.isTargetable(heroOwner, false, true) and not target.isType(UNIT_TYPE_STRUCTURE)
                    let b = target.addBuffReduced( trollManhunter, BLEEDING_WOUND_DURATION, buffBleedingWound, level)
                    b.setData(b.getData()+3)
        end))

    
function createHeroType(Hero hero)
    trollManhunter = hero.toUnit()
    heroOwner = trollManhunter.getOwner()
    notSpinning = createUnit(heroOwner, NOT_SPINNING, trollManhunter.getPos(), angle(0))
    


init
    
    heroType = new HeroType(THIS_HERO, THIS_ICON, THIS_ID, false)
    ..setOnInitFunction(() -> initHeroType())
    ..setOnCreateFunction((Hero hero) -> createHeroType(hero))

    setupTooltips()
    addButtonToTavern(THIS_ID, THIS_BUTTON_POS, heroType, 1)