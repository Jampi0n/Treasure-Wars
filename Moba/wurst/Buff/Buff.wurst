package Buff

import TimerUtils
import BuffType
import LinkedList
import UnitIndexer
import HashMap

/*
Idea: each unit can have every buff only once

The buff object contains dynamic information and its type
The type contains static information

Dynamic:
caster, target, duration
Static:
aura based ability and corresponding buff

Reapplying the same buff type does not create a new buff object, but rather increases duration of the previous one
and updates caster and other dynamic duration.

Buff types can have closures that will be executed in certain situations:
onFirst -> buff is used on a unit that does not have the buff
onStack -> buff is used on a unit that does have the buff
onApply -> is used on a unit
onExpire -> duration runs out
onDispel -> buff removed before duration runs out: dispel, death, invulnerability, ...
To detect this: use native buff management of wc3
The buff abilities must not work on dead or invulnerable units for example.
onEnd -> buff gone in any way

Different levels of the same buff:
This should only happen when a hero levels up and has now a stronger spell.
Therefore one can safely overwrite the old buff.
Realization:
1. stats of buffs as dynamic information -> can easily be overwritten
2. multiple buff types for same buff with different levels -> how is the same buff with a different level removed?

Ability List for a buff. Each ability inside this list should only be used for this buff.

Duration is fixed when the buff is applied -> use one shot timer


*/



/** Keeps track of the buffs a certain unit has.
*/
public class BuffList extends LinkedList<Buff>

    private static constant unitBuffList = new HashMap<unit, BuffList>

    static function onIndex()
        let newList = new BuffList()
        unitBuffList.put(getIndexedUnit(), newList)

    static function onDeindex()
        let removeList = unitBuffList.get(getDeindexedUnit())
        unitBuffList.remove(getIndexedUnit())
        destroy removeList

    static function getBuffOfType(unit target, BuffType buffType) returns Buff
        let buffList = unitBuffList.get(target)
        let iter = buffList.iterator()
        while(iter.hasNext())
            let next = iter.next()
            if(next.getBuffType() == buffType)
                return next
        destroy iter
        return null

    static function hasBuffType(unit target, BuffType buffType) returns boolean
        return getBuffOfType(target, buffType) != null

    static function hasBuff(unit target, Buff whichBuff) returns boolean
        let buffList = unitBuffList.get(target)
        let iter = buffList.iterator()
        while(iter.hasNext())
            let next = iter.next()
            if(next == whichBuff)
                return true
        destroy iter
        return false
    
    static function getBuffList(unit target) returns BuffList
        return unitBuffList.get(target)


public class Buff

    private unit caster
    private unit target
    private BuffType buffType
    private timer expireTimer
    private trigger onFirst
    private trigger onStack
    private trigger onApply
    private trigger onExpire
    private trigger onDispel
    private trigger onEnd
    private trigger onPeriodicTrigger
    private timer periodicTimer

    private static Buff currentBuff 

    construct(unit target, unit caster, real duration, BuffType buffType)
        this.caster = caster
        this.target = target
        this.expireTimer = getTimer()
            ..setData(this castTo int)
            ..start(duration, function expireStatic)
        this.buffType = buffType
        this.onFirst = buffType.onFirst
        this.onStack = buffType.onStack
        this.onApply = buffType.onApply
        this.onExpire = buffType.onExpire
        this.onDispel = buffType.onDispel
        this.onEnd = buffType.onEnd
        this.onPeriodicTrigger = buffType.onPeriodicTrigger
        if(this.onPeriodicTrigger!=null)
            periodicTimer = getTimer()
                ..setData(this castTo int)
                ..startPeriodic(0.1, function onPeriodicStatic)
        currentBuff = this
        let oldBuff = BuffList.getBuffOfType(this.target, this.buffType)

        if(this.onApply!=null)
            this.onApply.execute()

        if(oldBuff!=null)
            print("stack")
            if(this.onStack!=null)
                this.onStack.execute()
            oldBuff.update(this.caster, duration)
            destroy this
        else
            print("first")
            BuffList.getBuffList(target).add(this)
            if(this.onFirst!=null)
                this.onFirst.execute()

        print(this.expireTimer.getRemaining())
        

    private function onPeriodic()
        currentBuff = this
        if(this.onPeriodicTrigger!=null)
            this.onPeriodicTrigger.execute()

    private static function onPeriodicStatic()
        let t = GetExpiredTimer()
        Buff thisBuff = t.getData() castTo Buff
        thisBuff.onPeriodic()
    
    private function expire()
        currentBuff = this
        if(this.onExpire!=null)
            this.onExpire.execute()
        if(this.onEnd!=null)
            this.onEnd.execute()
        destroy this

    private function dispel()
        currentBuff = this
        if(this.onDispel!=null)
            this.onDispel.execute()
        if(this.onEnd!=null)
            this.onEnd.execute()
        destroy this

    private static function expireStatic()
        let t = GetExpiredTimer()
        Buff thisBuff = t.getData() castTo Buff
        thisBuff.expire()
        
    function update(unit newCaster, real newDuration)
        this.caster = newCaster
        if(newDuration > this.expireTimer.getRemaining())
            this.expireTimer.release()
            this.expireTimer = getTimer()
                ..setData(this castTo int)
                ..start(newDuration, function expireStatic)


    function getCaster() returns unit
        return this.caster

    function getTarget() returns unit
        return this.target

    function getBuffType() returns BuffType
        return this.buffType

    function getRemaining() returns real
        return this.expireTimer.getRemaining()

    static function getTriggerBuff() returns Buff
        return currentBuff

    ondestroy
        BuffList.getBuffList(this.target).remove(this)
        this.expireTimer.release()
        if this.periodicTimer != null
            this.periodicTimer.release()
        //do not modify triggers. They belong to the BuffType


init
    onUnitIndex(function BuffList.onIndex )
    onUnitDeindex(function BuffList.onDeindex )