package TeamUtil

import IHero
import Constants
import LinkedList
import ErrorHandling

/*
Optimized package to deal with teams.
*/

// debug
function isValidTeamIndex(int i)
    if i < 0 or i > 2
        error("not a valid team index: " + i.toString())

function isValidArmyTeamIndex(int i)
    if i < 0 or i > 1
        error("not a valid army team index: " + i.toString())

function isValidPlayerIndex(int i)
    if i < 0 or i >= bj_MAX_PLAYER_SLOTS
        error("not a valid player index: " + i.toString())

function isValidHeroPlayerIndex(int i)
    if i < 0 or i >= 10
        error("not a valid hero player index: " + i.toString())

public constant TEAM_1 = 0
public constant TEAM_2 = 1
public constant TEAM_NEUTRAL = 2

public abstract class Teams
    // basic types use inline functions with compiletime evaluation
    protected static constant ARMY = [10, 11, -1]
    protected static constant FROM = [0, 5, -1]
    protected static constant TO = [4, 9, -1]
    protected static constant FROM_1 = FROM[TEAM_1]
    protected static constant TO_1 = TO[TEAM_1]
    protected static constant FROM_2 = FROM[TEAM_2]
    protected static constant TO_2 = TO[TEAM_2]
    protected static constant ARMY_1 = ARMY[TEAM_1]
    protected static constant ARMY_2 = ARMY[TEAM_2]
    // advanced types are accessed directly
    static constant NAME = ["Green","Brown","Neutral"]
    static constant COLOR = [
        compiletime(PLAYER_COLORS[ARMY_1].toColorString()),
        compiletime(PLAYER_COLORS[ARMY_2].toColorString()),
        compiletime(color(25, 25, 25).toColorString())
    ]
    static constant COLORED_NAME = [
        compiletime(COLOR[0] + NAME[0] + "|r"),
        compiletime(COLOR[1] + NAME[1] + "|r"),
        compiletime(COLOR[2] + NAME[2] + "|r")
    ]
    static constant HEROES = [new LinkedList<IHero>(), new LinkedList<IHero>(), new LinkedList<IHero>()]
    static constant HEROES_1 = HEROES[TEAM_1]
    static constant HEROES_2 = HEROES[TEAM_2]
    static constant HERO_COUNT = [0,0,0]

    static constant HERO_PLAYERS = [new LinkedList<int>(), new LinkedList<int>(), new LinkedList<int>()]
    static constant HERO_PLAYER_COUNT = [0,0,0]

    static constant HERO_KILLS = [0,0,0]

    static function addHeroPlayer(int team, int p)
        Teams.HERO_PLAYERS[team].add(p)
        Teams.HERO_PLAYER_COUNT[team]++

    @inline static function first(int team) returns int
        isValidArmyTeamIndex(team)
        return FROM[team]

    @inline static function last(int team) returns int
        isValidArmyTeamIndex(team)
        return TO[team]

    @inline static function first1() returns int
        return compiletime(FROM_1)

    @inline static function first2() returns int
        return compiletime(FROM_2)

    @inline static function last1() returns int
        return compiletime(TO_1)

    @inline static function last2() returns int
        return compiletime(TO_2)

    @inline static function army(int team) returns int
        isValidArmyTeamIndex(team)
        return ARMY[team]

    @inline static function army1() returns int
        return compiletime(ARMY_1)
    
    @inline static function army2() returns int
        return compiletime(ARMY_2)

    @inline static function invert(int team) returns int
        isValidArmyTeamIndex(team)
        return 1 - team

    @inline static function team(bool first) returns int
        int team
        if first
            team = compiletime(TEAM_1)
        else
            team = compiletime(TEAM_2)
        return team

    static function rewardXp(int team, vec2 pos, real xp)
        isValidArmyTeamIndex(team)
        let xpHeroes = new LinkedList<IHero>()
        let allies = HEROES[team]
        real tmpXp = xp
        for hero in allies
            let distance = hero.toUnit().getPos().distanceTo(pos)
            if distance < XP_RANGE
                xpHeroes.add(hero)
        let nearbyHeroes = xpHeroes.size()
        if nearbyHeroes > 0
            tmpXp /= nearbyHeroes
            for hero in xpHeroes
                hero.addXp(tmpXp)
        else
            tmpXp /= HERO_COUNT[team]
            for hero in allies
                hero.addXp(tmpXp)
        destroy xpHeroes


public abstract class Players
    protected static constant TEAM = [0,0,0,0,0,1,1,1,1,1,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
    protected static string array NAME
    protected static string array COLOR
    protected static string array COLORED_NAME

    protected static LinkedList<IHero> array HEROES

    protected static function initPlayers()
        for i = 0 to bj_MAX_PLAYER_SLOTS
            HEROES[i] = new LinkedList<IHero>
            NAME[i] = players[i].getName()
            COLOR[i] = players[i].getColor().toColor().toColorString()
            COLORED_NAME[i] = COLOR[i] + NAME[i] + "|r"

    @inline static function heroList(int p) returns LinkedList<IHero>
        isValidHeroPlayerIndex(p)
        return HEROES[p]

    @inline static function name(int p) returns string
        isValidPlayerIndex(p)
        return NAME[p]

    @inline static function color(int p) returns string
        isValidPlayerIndex(p)
        return COLOR[p]

    @inline static function coloredName(int p) returns string
        isValidPlayerIndex(p)
        return COLORED_NAME[p]

    @inline static function team(int p) returns int
        isValidPlayerIndex(p)
        return TEAM[p]

    @inline static function army(int p) returns int
        isValidPlayerIndex(p)
        return Teams.army(team(p))

    @inline static function isTeam1(int p) returns boolean
        isValidPlayerIndex(p)
        return team(p) == compiletime(TEAM_1)

    @inline static function isTeam2(int p) returns boolean
        isValidPlayerIndex(p)
        return team(p) == compiletime(TEAM_2)

    @inline static function isTeamNeutral(int p) returns boolean
        isValidPlayerIndex(p)
        return team(p) == compiletime(TEAM_NEUTRAL)

    @inline static function isTeam(int p, int team) returns boolean
        isValidPlayerIndex(p)
        isValidTeamIndex(team)
        return team(p) == team

    /** Returns true, if the player id belongs to a hero player of team 1. */
    @inline static function isHero1(int p) returns boolean
        isValidPlayerIndex(p)
        return p >= compiletime(Teams.first1()) and p <= compiletime(Teams.last1())

    /** Returns true, if the player id belongs to a hero player of team 2. */
    @inline static function isHero2(int p) returns boolean
        isValidPlayerIndex(p)
        return p >= compiletime(Teams.first2()) and p <= compiletime(Teams.last2())

    /** Returns true, if the player id belongs to a hero player of the team. */
    @inline static function isHeroX(int p, int team) returns boolean
        isValidPlayerIndex(p)
        isValidTeamIndex(team)
        return p >= Teams.FROM[team] and p <= Teams.TO[team]

    /** Returns true, if the player id belongs to a hero player. */    
    @inline static function isHero(int p) returns boolean
        isValidPlayerIndex(p)
        return p >= compiletime(Teams.first1()) and p <= compiletime(Teams.last2())

    /** Returns true, if the player id belongs to the army player of team 1. */
    @inline static function isArmy1(int p) returns boolean
        isValidPlayerIndex(p)
        return p == compiletime(Teams.ARMY_1)

    /** Returns true, if the player id belongs to the army player of team 2. */
    @inline static function isArmy2(int p) returns boolean
        isValidPlayerIndex(p)
        return p == compiletime(Teams.ARMY_2)

    /** Returns true, if the player id belongs to the army player of the team. */
    @inline static function isArmyX(int p, int team) returns boolean
        isValidPlayerIndex(p)
        isValidTeamIndex(team)
        return p == Teams.ARMY[team]

    /** Returns true, if the player id belongs to an army player. */
    @inline static function isArmy(int p) returns boolean
        isValidPlayerIndex(p)
        return isArmy1(p) or isArmy2(p)

    static function addHero(int p, IHero hero)
        isValidHeroPlayerIndex(p)
        let team = Players.team(p)
        HEROES[p].add(hero)
        Teams.HEROES[team].add(hero)
        Teams.HERO_COUNT[team]++


init
    Players.initPlayers()