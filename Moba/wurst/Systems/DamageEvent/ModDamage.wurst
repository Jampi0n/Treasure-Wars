package ModDamage

import SeaDruid
import TrollBerserker
import Paladin
import Destroyer
import StandardTextTags
//import ItemIds
import Gameplay
import FastDamageEvent
import Buff
import UnitLib
import DamageIds
import PassiveItemCooldown
import ItemIdDefinitions
import ItemsDefense
import ClosureTimers
import StandardBuffs
/*
Optimized damage modification function.
Items are handled by using DamageIds.
Heroes can generally be filtered by type ids. 
*/

public abstract class ModDamage
    @inline
    static function modDamage(unit source, unit target, DamageEventUnit _sourceWrapper, DamageEventUnit targetWrapper, int sourceTypeId, int targetTypeId, real originalDamage, bool attack, bool _active, bool advanced) returns real
        real currentDamage = originalDamage
        if originalDamage.abs() >= 0.000001 //damage very small, just ignore
            /*
                untargetable -> damage = 0 and no further damage handling
                only for attacks, because every other damage will be dealt in code and there I can decide individually, if I want to deal damage
            */
            if (target.isType(UNIT_TYPE_ANCIENT) and attack) or gameOver
                currentDamage = 0
            else
                // the following effects manage the damage dealt (attacker based)
                
                // critical strike - TROLL BERSERKER
                if advanced
                    if sourceTypeId == HeroTrollBerserker.UNIT_TYPE_ID or sourceTypeId == HeroTrollBerserker.HERO_TROLL_BERSERKER_MELEE
                        if not target.isType(UNIT_TYPE_STRUCTURE)
                            let critical = BuffList.getBuffOfType(source, HeroTrollBerserker.BUFF_CRITICAL_STRIKE)
                            currentDamage = currentDamage * (100 + HeroTrollBerserker.CRITICAL_DAMAGE_MULT[critical.getLevel()-1])/100
                            createCriticalStrikeTextTag(target, currentDamage.toInt())
                            critical.dispel()

                // death frenzy - DESTROYER
                if sourceTypeId == HeroDestroyer.UNIT_TYPE_ID
                    let deathFrenzyLevel = source.getAbilityLevel(HeroDestroyer.instance.ABILITY_ID_PASSIVE)
                    if deathFrenzyLevel > 0
                        currentDamage *= 1 + HeroDestroyer.DEATH_FRENZY_BONUS[deathFrenzyLevel-1]/100 * (1-source.getLife()/GetUnitState(source, UNIT_STATE_MAX_LIFE))
                        

                // the following effects manage damage taken (target based)

                //heavy armored
                if attack
                    if targetTypeId == HeroPaladin.UNIT_TYPE_ID
                        let heavyArmoredLevel = target.getAbilityLevel(HeroPaladin.instance.ABILITY_ID_PASSIVE)
                        if heavyArmoredLevel > 0
                            currentDamage -= HeroPaladin.HEAVY_ARMOED_REDUCTION[heavyArmoredLevel - 1]
                
                // shield - ITEM
                if attack
                    if targetWrapper.loadIntFast(D_SHIELD) > 0
                        //currentDamage = currentDamage - 15 * target.countItemsOfType(ITEM_ID_SHIELD)
                        //currentDamage = currentDamage - 20 * target.countItemsOfType(ITEM_ID_HOLY_SHIELD)



                // mana shield - SEA DRUID
                if targetTypeId == HeroSeaDruid.UNIT_TYPE_ID
                    if BuffList.hasBuffType(target, HeroSeaDruid.buffManaShield)
                        let manaShield = BuffList.getBuffOfType(target, HeroSeaDruid.buffManaShield)
                        let level = manaShield.getLevel()
                        manaShield.getTarget().damageMana(manaShield.getTarget(), HeroSeaDruid.MANA_SHIELD_REDUCTION[level-1] * HeroSeaDruid.MANA_PER_DAMAGE[level-1] * currentDamage, ReductionType.NONE)
                        currentDamage = currentDamage * (1.-HeroSeaDruid.MANA_SHIELD_REDUCTION[level-1])
                
                // void armor - ITEM
                if targetWrapper.loadIntFast(D_VOID_ARMOR) > 0
                    target.healMana(target, currentDamage * 0.1)
                    currentDamage *= 0.9

                if targetWrapper.loadIntFast(D_HEART_AMULET) > 0
                    let remainingHp = target.getHP() - currentDamage
                    if remainingHp < 0.5
                        if PassiveItemCooldown.tryStartCooldown(target, ITEM_ID_HEART_AMULET, HEART_AMULET_PASSIVE, HEART_AMULET_COOLDOWN * 1.0) or BuffList.hasBuffType(target, HEART_AMULET_BUFF)
                            currentDamage += remainingHp - 0.5
                            target.addBuff(target, HEART_AMULET_DURATION * 1.0, HEART_AMULET_BUFF, 1)
                            // delay invulnerable
                            // this means attack events still run as normal, though damage is already reduced
                            doAfter(0) -> 
                                target.addBuff(target, HEART_AMULET_DURATION * 1.0, INVULERNABLE, 1)
        return currentDamage
