package ItemDocumentation

/*

Initialization order is fixed, because of compiletime functions.

Packages:
    v
ItemShopRequirements
    v
ItemShopInitialize
    v
ShopArmor, ShopWeapons, ... (ShopConfiguration)
    v
ItemShopFinalize
    v
ItemShopSystem


ItemShopRequirements:
Just a function that happens to be needed by several other Item Packages.

ItemShopInitialize:
Defines compile time globals. Contains functions and classes to easily create new items.

ShopConfiguration:
Uses the functions of ItemShopInitialize to create items and shops at compiletime.
Uses the functions of ItemShopSystem (initlater) to give the items effects.
This must not happen on init, because the items must be initialized first.

ItemShopFinalize:
Has all configured objects there and decides the final outcome. For example order in shop, recipe descriptions referencing other items.
Concatenates important array data to a string at compiletime. Uses compiletime(string) to retain this string for runtime.
Converts the strings at runtime to arrays. The execute package is used to avoid the op limit.

Finally initializes the Item class in ItemShopSystem and creates the item objects based on the just generated arrays.
Now the runtime functions of ShopConfiguration can be run, as all required data is there.

ItemShopSystem:
Initializes as last. Has no compiletime functions, so initialization time does not really matter. Because of this it could be moved to the last position.
Contains classes and functions used in ShopConfiguration to give items the desired effects and handle the recipes.

*/