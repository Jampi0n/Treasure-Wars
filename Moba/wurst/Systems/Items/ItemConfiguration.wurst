package ItemConfiguration

import StringUtils
import LinkedList
import public ItemInShop
import public Icons
import ItemObjEditing
import ObjectIds
import HashMap
import public Execute
import public UnitWrapper
import public ClosureTimers

interface ItemPickUp
    function onItemPickUp()

interface ItemDrop
    function onItemDrop()

public function getTriggerItem() returns item
    return ItemEffect.triggerItem

public function getTriggerItemType() returns int
    return ItemEffect.triggerItem.getTypeId()

public function getTriggerUnit() returns unit
    return ItemEffect.triggerUnit

public class ItemEffect

    private int itemId

    protected static item triggerItem
    protected static unit triggerUnit

    private static constant itemIdToEffect = new HashMap<int, ItemEffect>
    private static trigger onItemPickUp = CreateTrigger()
    private static trigger onItemDrop = CreateTrigger()
    protected constant onPickUp = new LinkedList<ItemPickUp>
    protected constant onDrop = new LinkedList<ItemDrop>

    construct(int itemId)
        this.itemId = itemId
        itemIdToEffect.put(itemId, this)

    static function retrieveItemEffect(int itemId) returns ItemEffect
        if itemIdToEffect.has(itemId)
            return itemIdToEffect.get(itemId)
        else
            return new ItemEffect(itemId)

    static function classInit()
        onItemPickUp = CreateTrigger()
            ..addAction(function onItemPickUp)
            ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_PICKUP_ITEM)
        onItemDrop = CreateTrigger()
            ..addAction(function onItemDrop)
            ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DROP_ITEM)

    static function onItemPickUp()
        triggerItem = GetManipulatedItem()
        triggerUnit = GetTriggerUnit()
        let itemType = itemIdToEffect.get(triggerItem.getTypeId())
        if itemType != null
            for c in itemType.onPickUp
                c.onItemPickUp()

    static function onItemDrop()
        triggerItem = GetManipulatedItem()
        triggerUnit = GetTriggerUnit()
        let itemType = itemIdToEffect.get(triggerItem.getTypeId())
        if itemType != null
            for c in itemType.onDrop
                c.onItemDrop()


ItemEffect currentItemEffect
ItemDefinition currentItemDefinition
ItemInShop currentItemInShop

public function addPickupFunction(ItemPickUp onPickUp)
    if compiletime
        return
        
    currentItemEffect.onPickUp.add(onPickUp)

public function addDropFunction(ItemDrop onDrop)
    if compiletime
        return

    currentItemEffect.onDrop.add(onDrop)

public function addEffectStatBonusAbsolute(Stat whichStat, int bonus)
    if compiletime
        return

    addPickupFunction( ()-> (begin
        ItemEffect.triggerUnit.wrapper().addStatAbsoluteBonus(whichStat, bonus)
    end))

    addDropFunction( ()-> (begin
        ItemEffect.triggerUnit.wrapper().addStatAbsoluteBonus(whichStat, -bonus)
    end))

public function addEffectStatBonusRelative(Stat whichStat, int bonus)
    if compiletime
        return

    addPickupFunction( ()-> (begin
        ItemEffect.triggerUnit.wrapper().addStatRelativeBonus(whichStat, bonus)
    end))

    addDropFunction( ()-> (begin
        ItemEffect.triggerUnit.wrapper().addStatRelativeBonus(whichStat, -bonus)
    end))


public function setupItem(int itemId, int category, int goldCost)
    if compiletime
        let iDef = getItemDefintion(itemId)
        iDef.setGoldCost(goldCost)
        currentItemDefinition = iDef
    else
        currentItemInShop = ItemInShop.retrieveItemFromId(itemId)
        currentItemInShop.setupItem(category, iconFromItem(itemId), goldCost)
        currentItemEffect = ItemEffect.retrieveItemEffect(itemId)

public function setInfo(string name, string desc)
    if compiletime
        currentItemDefinition.setName(name)
        currentItemDefinition.setTooltipBasic(name)
        currentItemDefinition.setDescription(desc)
        currentItemDefinition.setTooltipExtended(desc)
    else
        currentItemInShop.setupStrings(name, desc)

public function setAbilities(vararg int ids)
    if compiletime
        let list = new LinkedList<int>
        for id in ids
            list.add(id)
        let result = list.joinBy((int i) -> i.toRawCode(), ",")
        currentItemDefinition.setAbilities(result)
        currentItemDefinition.setCooldownGroup(result.substring(0, 3))

public function addRequirement(int itemId)
    if not compiletime
        let child = ItemInShop.retrieveItemFromId(itemId)
        currentItemInShop.addRequirement(child)


init
    ItemEffect.classInit()