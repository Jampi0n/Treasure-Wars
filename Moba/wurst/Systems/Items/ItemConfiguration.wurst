package ItemConfiguration

import StringUtils
import LinkedList
import ItemInShop
import ItemObjEditing
import ObjectIds
import Icons
import HashMap
import UnitWrapper
import ClosureTimers

public int ITEM_ID_CIRCLET = compiletime(newItem(Icons.bTNCirclet))
public int ITEM_ID_CROWN = compiletime(newItem(Icons.bTNHelmutPurple))
public int ITEM_ID_AGI3 = compiletime(newItem(Icons.bTNSlippersOfAgility))
public int ITEM_ID_STR3 = compiletime(newItem(Icons.bTNGauntletsOfOgrePower))
public int ITEM_ID_INT3 = compiletime(newItem(Icons.bTNMantleOfIntelligence))

interface ItemPickUp
    function onItemPickUp()

interface ItemDrop
    function onItemDrop()

public function getTriggerItem() returns item
    return ItemEffect.triggerItem

public function getTriggerItemType() returns int
    return ItemEffect.triggerItem.getTypeId()

public function getTriggerUnit() returns unit
    return ItemEffect.triggerUnit

public class ItemEffect

    private int itemId

    protected static item triggerItem
    protected static unit triggerUnit

    private static constant itemIdToEffect = new HashMap<int, ItemEffect>
    private static trigger onItemPickUp = CreateTrigger()
    private static trigger onItemDrop = CreateTrigger()
    protected constant onPickUp = new LinkedList<ItemPickUp>
    protected constant onDrop = new LinkedList<ItemDrop>

    construct(int itemId)
        this.itemId = itemId
        itemIdToEffect.put(itemId, this)

    static function retrieveItemEffect(int itemId) returns ItemEffect
        if itemIdToEffect.has(itemId)
            return itemIdToEffect.get(itemId)
        else
            return new ItemEffect(itemId)

    static function classInit()
        onItemPickUp = CreateTrigger()
            ..addAction(function onItemPickUp)
            ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_PICKUP_ITEM)
        onItemDrop = CreateTrigger()
            ..addAction(function onItemDrop)
            ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DROP_ITEM)

    static function onItemPickUp()
        triggerItem = GetManipulatedItem()
        triggerUnit = GetTriggerUnit()
        let itemType = itemIdToEffect.get(triggerItem.getTypeId())
        if itemType != null
            for c in itemType.onPickUp
                c.onItemPickUp()

    static function onItemDrop()
        triggerItem = GetManipulatedItem()
        triggerUnit = GetTriggerUnit()
        let itemType = itemIdToEffect.get(triggerItem.getTypeId())
        if itemType != null
            for c in itemType.onDrop
                c.onItemDrop()


ItemEffect currentItemEffect
ItemDefinition currentItemDefinition
ItemInShop currentItemInShop

function addPickupFunction(ItemPickUp onPickUp)
    if compiletime
        return
        
    currentItemEffect.onPickUp.add(onPickUp)

function addDropFunction(ItemDrop onDrop)
    if compiletime
        return

    currentItemEffect.onDrop.add(onDrop)

function addEffectStatBonusAbsolute(Stat whichStat, int bonus)
    if compiletime
        return

    addPickupFunction( ()-> (begin
        ItemEffect.triggerUnit.wrapper().addStatAbsoluteBonus(whichStat, bonus)
    end))

    addDropFunction( ()-> (begin
        ItemEffect.triggerUnit.wrapper().addStatAbsoluteBonus(whichStat, -bonus)
    end))

function addEffectStatBonusRelative(Stat whichStat, int bonus)
    if compiletime
        return

    addPickupFunction( ()-> (begin
        ItemEffect.triggerUnit.wrapper().addStatRelativeBonus(whichStat, bonus)
    end))

    addDropFunction( ()-> (begin
        ItemEffect.triggerUnit.wrapper().addStatRelativeBonus(whichStat, -bonus)
    end))


function setupItem(int itemId, int category, int goldCost)
    if compiletime
        let iDef = getItemDefintion(itemId)
        iDef.setGoldCost(goldCost)
        currentItemDefinition = iDef
    else
        currentItemInShop = ItemInShop.retrieveItemFromId(itemId)
        currentItemInShop.setupItem(category, iconFromItem(itemId), goldCost)
        currentItemEffect = ItemEffect.retrieveItemEffect(itemId)

function setInfo(string name, string desc)
    if compiletime
        currentItemDefinition.setName(name)
        currentItemDefinition.setTooltipBasic(name)
        currentItemDefinition.setDescription(desc)
        currentItemDefinition.setTooltipExtended(desc)
    else
        currentItemInShop.setupStrings(name, desc)

function setAbilities(vararg int ids)
    if compiletime
        let list = new LinkedList<int>
        for id in ids
            list.add(id)
        let result = list.joinBy((int i) -> i.toRawCode(), ",")
        currentItemDefinition.setAbilities(result)
        currentItemDefinition.setCooldownGroup(result.substring(0, 3))

function addRequirement(int itemId)
    if not compiletime
        let child = ItemInShop.retrieveItemFromId(itemId)
        currentItemInShop.addRequirement(child)


function circletOfNobility(int itemId)
    setupItem(itemId, 1, 750)
    setInfo("Circlet of Nobility", "+4 all stats")
    addRequirement(ITEM_ID_AGI3)
    addRequirement(ITEM_ID_STR3)
    addRequirement(ITEM_ID_INT3)
    addEffectStatBonusAbsolute(Stat.STR, 4)
    addEffectStatBonusAbsolute(Stat.AGI, 4)
    addEffectStatBonusAbsolute(Stat.INT, 4)


function crownOfKings(int itemId)
    setupItem(itemId, 2, 2000)
    setInfo("Crown of Kings", "+10 all stats")
    addRequirement(ITEM_ID_CIRCLET)
    addRequirement(ITEM_ID_AGI3)
    addEffectStatBonusAbsolute(Stat.STR, 10)
    addEffectStatBonusAbsolute(Stat.AGI, 10)
    addEffectStatBonusAbsolute(Stat.INT, 10)

function agi3(int itemId)
    setupItem(itemId, 0, 250)
    setInfo("Slippers of Agility", "+3 agi")
    addEffectStatBonusAbsolute(Stat.AGI, 3)

function str3(int itemId)
    setupItem(itemId, 0, 200)
    setInfo("Gauntlets of Ogre Strength", "+3 str")
    addEffectStatBonusAbsolute(Stat.STR, 3)

function int3(int itemId)
    setupItem(itemId, 0, 175)
    setInfo("Mantle of Intelligence", "+3 int")
    addEffectStatBonusAbsolute(Stat.INT, 3)


@compiletime
function initItems()
    circletOfNobility(ITEM_ID_CIRCLET)
    crownOfKings(ITEM_ID_CROWN)
    agi3(ITEM_ID_AGI3)
    str3(ITEM_ID_STR3)
    int3(ITEM_ID_INT3)


init
    doAfter(0.1) ->
        ItemEffect.classInit()
        initItems()
        ItemInShop.finalize()
