package ShopPhysical1

import initlater ItemShopSystem
import ItemShopInitialize
import UnitWrapper
import Stats
import ObjectIdGenerator


public constant SHOP_ID_PHYSICAL_1 = UNIT_ID_GEN.next()
public constant SHOP_PHYSICAL_1 = compiletime(new Shop(SHOP_ID_PHYSICAL_1, "SHOP 1", 1.2,  "units\\human\\HeroPaladin\\HeroPaladin") castTo int)

constant THIS_SHOP = SHOP_PHYSICAL_1


public constant ITEM_ID_PLATED_GAUNTLETS = compiletime(newItem("Plated Gauntlets", THIS_SHOP, false, "BTNPlatedGauntlet2"))
public constant ITEM_ID_HAMMER_OF_STRENGTH = compiletime(newItem("Hammer of Strength", THIS_SHOP, false, "BTNINV_Hammer_15"))
public constant ITEM_ID_GLOVES_OF_HASTE = compiletime(newItem("Gloves of Haste", THIS_SHOP, false, "BTNLeatherGloves"))
public constant ITEM_ID_WAR_AXE = compiletime(newItem("War Axe", THIS_SHOP, false, "BTNINV_Axe_18"))
public constant ITEM_ID_LIGHT_BOOTS = compiletime(newItem("Light Boots", THIS_SHOP, false, "BTNNatureSlippers"))
public constant ITEM_ID_LEATHER_ARMOR = compiletime(newItem("Leather Armor", THIS_SHOP, false, "BTNLeatherArmor"))
public constant ITEM_ID_GEM_OF_HEALTH = compiletime(newItem("Gem of Health", THIS_SHOP, false, "BTNINV_Misc_Gem_Ruby_02"))
public constant ITEM_ID_SPIKES = compiletime(newItem("Spikes", THIS_SHOP, false, "BTNCR_Spiked_Armor"))
public constant ITEM_ID_SHIELD = compiletime(newItem("Shield", THIS_SHOP, false, "BTNRuinedShield"))
public constant ITEM_ID_BOW = compiletime(newItem("War Drum", THIS_SHOP, false, "BTNGoldenWoodBow"))
public constant ITEM_ID_DAGGER = compiletime(newItem("Dagger", THIS_SHOP, false, "BTNBoneDagger"))
public constant ITEM_ID_RING_OF_REGEN = compiletime(newItem("Ring of Regeneration", THIS_SHOP, false, "DISBTNINV_Jewelry_Ring_09"))

function itemPlatedGauntlets(int itemId)
    int armor = 10
    if compiletime
        itemId.getTypeDef()
            ..setDescription("+ {0} armor".format(armor.toString()))
            ..setGoldCost(150)
    else
        itemId.getItem()
            ..addStatBonusAbsolute(Stat.AR, armor)


function itemHammerOfStrength(int itemId)
    int str = 8
    if compiletime
        itemId.getTypeDef()
            ..setDescription("+ {0} strength".format(str.toString()))
            ..setGoldCost(150)
    else
        itemId.getItem()
            ..addStatBonusAbsolute(Stat.STR, str)


function itemGlovesOfHaste(int itemId)
    int as = 10
    if compiletime
        itemId.getTypeDef()
            ..setDescription("+ {0}% attack speed".format(as.toString()))
            ..setGoldCost(150)
    else
        itemId.getItem()
            ..addStatBonusAbsolute(Stat.AS, as)


function itemWarAxe(int itemId)
    int str = 10
    if compiletime
        itemId.getTypeDef()
            ..setDescription("+ {0} strength".format(str.toString()))
            ..setGoldCost(150)
    else
        itemId.getItem()
            ..addStatBonusAbsolute(Stat.STR, str)

function itemLightBoots(int itemId)
    int ms = 40
    if compiletime
        itemId.getTypeDef()
            ..setDescription("needed")
            ..setGoldCost(400)
    else
        itemId.getItem()
            ..addStatBonusAbsolute(Stat.MS, 40)
            ..addStatBonusAbsolute(Stat.AR, 5)
            ..addPickupFunction(()->(begin
                if isUnique() and hasNot(itemId)
            end))

            ..addDropFunction(()->(begin
                if isUnique()
            end))

function itemLeatherArmor(int itemId)
    if compiletime
        itemId.getTypeDef()
            ..setDescription("needed")
            ..setGoldCost(150)
    else
        itemId.getItem()
            ..addStatBonusAbsolute(Stat.AR, 10)



function itemGemOfHealth(int itemId)
    if compiletime
        itemId.getTypeDef()
            ..setDescription("needed")
            ..setGoldCost(150)
    else
        itemId.getItem()
            ..addStatBonusAbsolute(Stat.AR, 10)

function itemDagger(int itemId)
    if compiletime
        itemId.getTypeDef()
            ..setDescription("needed")
            ..setGoldCost(150)
    else
        itemId.getItem()
            ..addStatBonusAbsolute(Stat.AR, 10)

function itemBow(int itemId)
    if compiletime
        itemId.getTypeDef()
            ..setDescription("needed")
            ..setGoldCost(150)
    else
        itemId.getItem()
            ..addStatBonusAbsolute(Stat.AR, 10)

function itemShield(int itemId)
    if compiletime
        itemId.getTypeDef()
            ..setDescription("needed")
            ..setGoldCost(150)
    else
        itemId.getItem()
            ..addStatBonusAbsolute(Stat.AR, 10)

function itemRingOfRegen(int itemId)
    if compiletime
        itemId.getTypeDef()
            ..setDescription("needed")
            ..setGoldCost(150)
    else
        itemId.getItem()
            ..addStatBonusAbsolute(Stat.AR, 10)

function itemSpikes(int itemId)
    if compiletime
        itemId.getTypeDef()
            ..setDescription("needed")
            ..setGoldCost(150)
    else
        itemId.getItem()
            ..addStatBonusAbsolute(Stat.AR, 10)

@compiletime
public function shopPhysical1Init()
    itemGlovesOfHaste(ITEM_ID_GLOVES_OF_HASTE)
    itemPlatedGauntlets(ITEM_ID_PLATED_GAUNTLETS)
    itemLightBoots(ITEM_ID_LIGHT_BOOTS)
    itemWarAxe(ITEM_ID_WAR_AXE)
    itemHammerOfStrength(ITEM_ID_HAMMER_OF_STRENGTH)
    itemLeatherArmor(ITEM_ID_LEATHER_ARMOR)
    itemGemOfHealth(ITEM_ID_GEM_OF_HEALTH)
    itemDagger(ITEM_ID_DAGGER)
    itemBow(ITEM_ID_BOW)
    itemShield(ITEM_ID_SHIELD)
    itemRingOfRegen(ITEM_ID_RING_OF_REGEN)
    itemSpikes(ITEM_ID_SPIKES)

