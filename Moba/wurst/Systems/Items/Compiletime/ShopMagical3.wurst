package ShopMagical3

import initlater ItemShopSystem
import ItemShopInitialize
import Stats
import ItemIdGeneration
import Assets
import General
import OnAttack


function itemEnchantedArmor(int itemId)
    int mp = 200
    int hp = 450
    int ar = 18
    int intel = 12
    if compiletime
        itemId.getTypeDef()
            ..setDescription("+ {0} mana points|n+ {1} intelligence|n+ {2} hit points|n+ {3} armor".format(
                mp.toString(), intel.toString(), hp.toString(), ar.toString()
            ))
            ..setGoldCost(3950)
            ..addRequirement(ITEM_ID_BATTLEMAGE_ARMOR)
            ..addRequirement(ITEM_ID_WIZARDS_HAT)
            ..addRequirement(ITEM_ID_GEM_OF_HEALTH)
    else
        itemId.getItem()
            ..addStatBonusAbsolute(Stat.MP, mp)
            ..addStatBonusAbsolute(Stat.HP, hp)
            ..addStatBonusAbsolute(Stat.AR, ar)

function itemEmeraldPendant(int itemId)
    int hp = 350
    int mp = 300
    int killMana = 15 //trigger
    if compiletime
        itemId.getTypeDef()
            ..setDescription("+ {0} mana points|n +{1} hit points|nRestores {2} mana points per kill.".format(
                mp.toString(), hp.toString(), killMana.toString()
            ))
            ..setGoldCost(3500)
            ..addRequirement(ITEM_ID_SKULL_PENDANT)
            ..addRequirement(ITEM_ID_GEM_OF_HEALTH)
            ..addRequirement(ITEM_ID_GEM_OF_MANA)
    else
        itemId.getItem()
            ..addStatBonusAbsolute(Stat.HP, hp)
            ..addStatBonusAbsolute(Stat.MP, mp)

        CreateTrigger()
            ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)
            ..addAction(() -> (begin
                let killer = GetKillingUnit()
                if not GetTriggerUnit().isType(UNIT_TYPE_STRUCTURE) and killer.hasItemById(convertItemId(ITEM_ID_SKULL_PENDANT))
                    killer.addMana(15. * killer.countItemsOfType(convertItemId(ITEM_ID_SKULL_PENDANT)))
                    killer.addEffect(Abilities.spiritTouchTarget, "origin").destr()
            end))
            
    

function itemRingOfDarkness(int itemId)
    int intel = 30
    int mr = 25
    int voidDmg = 20 //trigger
    if compiletime
        itemId.getTypeDef()
            ..setDescription("+ {0} intelligence|n+ {1} mana point regeneration per 10 seconds|nKilling a unit creates a void explosion, dealing {2} damage to neaby enemies.".format(
                intel.toString(), mr.toString(), voidDmg.toString()
            ))
            ..setGoldCost(3400)
            ..addRequirement(ITEM_ID_GEM_OF_DARKNESS)
            ..addRequirement(ITEM_ID_MANA_RING)
            ..addRequirement(ITEM_ID_VOODOO_MASK)
    else
        itemId.getItem()
            ..addStatBonusAbsolute(Stat.INT, intel)
            ..addStatBonusAbsolute(Stat.MR, mr)

        CreateTrigger()
            ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)
            ..addAction(() -> (begin
                let killer = GetKillingUnit()
                let dyingUnit = GetTriggerUnit()
                if not dyingUnit.isType(UNIT_TYPE_STRUCTURE) and killer.hasItemById(convertItemId(ITEM_ID_RING_OF_DARKNESS))
                    addEffect(Abilities.annihilationMissile, dyingUnit.getPos()).destr()
                    let g = CreateGroup()
                    g.enumUnitsInRange(dyingUnit.getPos(), 200)
                    for unit u in g
                        if not u.isType(UNIT_TYPE_STRUCTURE) and u.isTargetable(killer.getOwner(), false, true)
                            killer.dealDamage(u, 20, ReductionType.NONE)
                    g.destr()
            end))
            

function itemBlessedGoblet(int itemId)
    int hr = 65
    int mr = 35
    int hp = 300
    int wp = 20
    if compiletime
        itemId.getTypeDef()
            ..setDescription("+ {0} hit points|n+ {1} willpower|n+ {2} hit point regeneration per 10 seconds|n+ {3} mana point regeneration per 10 seconds".format(
                hp.toString(), wp.toString(), hr.toString(), mr.toString()
            ))
            ..setGoldCost(4150)
            ..addRequirement(ITEM_ID_RING_OF_REGEN)
            ..addRequirement(ITEM_ID_ANCIENT_STONE_TABLET)
    else
        itemId.getItem()
            ..addStatBonusAbsolute(Stat.HR, hr)
            ..addStatBonusAbsolute(Stat.MR, mr)
            ..addStatBonusAbsolute(Stat.HP, hp)
            ..addStatBonusAbsolute(Stat.AGI, wp)
            

function itemWandOfDeath(int itemId)
    int intel = 16
    int voidDmg = 30
    int manaDrain = 15
    if compiletime
        itemId.getTypeDef()
            ..setDescription("+ {0} intelligence|nDrains {1} mana and deals {2} void damage per attack.".format(
                intel.toString(), manaDrain.toString(), voidDmg.toString()
            ))
            ..setGoldCost(3900)
            ..addRequirement(ITEM_ID_SCEPTER_OF_THE_TIDES)
            ..addRequirement(ITEM_ID_MAGIC_STAFF)
            ..addRequirement(ITEM_ID_GEM_OF_DARKNESS)
    else
        itemId.getItem()
            ..addStatBonusAbsolute(Stat.INT, intel)


        OnAttack.addOnAttackFunc((unit attacker, unit target, boolean isActive) -> (begin
            if attacker.hasItemById(convertItemId(itemId)) and not target.isType(UNIT_TYPE_STRUCTURE)
                let manaDrained = min(manaDrain.toReal() * target.countItemsOfType(convertItemId(itemId)) , target.getMana())
                attacker.dealDamage(target, voidDmg.toReal() * attacker.countItemsOfType(convertItemId(itemId)) , ReductionType.NONE)
                attacker.addMana(manaDrained)
                target.addMana(-manaDrained)
                target.addEffect(Abilities.avengerMissile, "chest").destr()
                target.addEffect(Abilities.arcaneTowerAttack, "chest").destr()
        end))
            

function itemWandOfBlood(int itemId)
    int intel = 12
    int hpDrain = 16
    int manaDrain = 10
    int hp = 200
    if compiletime
        itemId.getTypeDef()
            ..setDescription("needed")
            ..setGoldCost(3650)
            ..addRequirement(ITEM_ID_MAGIC_STAFF)
            ..addRequirement(ITEM_ID_RING_OF_HEALTH)
            ..addRequirement(ITEM_ID_GEM_OF_HEALTH)
    else
        itemId.getItem()
            ..addStatBonusAbsolute(Stat.HP, hp)
            ..addStatBonusAbsolute(Stat.INT, intel)

        OnAttack.addOnAttackFunc((unit attacker, unit target, boolean isActive) -> (begin
            if attacker.hasItemById(convertItemId(itemId)) and not target.isType(UNIT_TYPE_STRUCTURE)
                let manaDrained = min(manaDrain.toReal() * target.countItemsOfType(convertItemId(itemId)) , target.getMana())
                attacker.dealDamage(target, hpDrain.toReal() * attacker.countItemsOfType(convertItemId(itemId)) , ReductionType.MAGIC)
                attacker.addHP(hpDrain.toReal())
                attacker.addMana(manaDrained)
                target.addMana(-manaDrained)
                target.addEffect(Abilities.spellBreakerAttack, "chest").destr()
                target.addEffect(Abilities.arcaneTowerAttack, "chest").destr()
        end))
            
function itemArcaneBlade(int itemId)
    int as = 20
    int mp = 250
    int manaFactor = 6
    if compiletime
        itemId.getTypeDef()
            ..setDescription("+ {0} mana points|n+ {1}% attack speed|nDeals {2}% of your current mana as magic damage.".format(
                mp.toString(), as.toString(), manaFactor.toString()
            ))
            ..setGoldCost(3800)
            ..addRequirement(ITEM_ID_RAVEN_SWORD)
            ..addRequirement(ITEM_ID_GEM_OF_MANA)
    else
        itemId.getItem()
            ..addStatBonusAbsolute(Stat.AS, as)
            ..addStatBonusAbsolute(Stat.MP, mp)

        OnAttack.addOnAttackFunc((unit attacker, unit target, boolean isActive) -> (begin

                attacker.dealDamage(target, attacker.getMana() * manaFactor * attacker.countItemsOfType(convertItemId(itemId)) , ReductionType.MAGIC)

                target.addEffect(Abilities.farseerMissile, "chest").destr()

        end))

function itemVampiricGoblet(int itemId)
    int intel = 20
    int hp = 150
    int mp = 150
    int hpFactor = 10 // -> onAttack
    int manaFactor = 5 // -> onAttack
    if compiletime
        itemId.getTypeDef()
            ..setDescription("+ {0} mana points|n +{1} hit point|n+ {2} intelligence|nDealing spell damage restores {3}% of the damage dealt as hitpoints and {4}% as mana points. This effect does not stack.".format(
                mp.toString(), hp.toString(), intel.toString(), hpFactor.toString(), manaFactor.toString()
            ))
            ..setGoldCost(4750)
            ..addRequirement(ITEM_ID_SKULL_PENDANT)
            ..addRequirement(ITEM_ID_CURSED_MASK)
    else
        itemId.getItem()
            ..addStatBonusAbsolute(Stat.INT, intel)
            ..addStatBonusAbsolute(Stat.HP, hp)
            ..addStatBonusAbsolute(Stat.MP, mp)



function itemVoidArmor(int itemId)
    int mp = 150
    int hp = 350
    int ar = 18
    int wp = 14

    int dmgReduction = 5 // -> onAttack
    if compiletime
        itemId.getTypeDef()
            ..setDescription("+ {0} mana points|n+ {1} hit points|n+ {2} armor|n+ {3} willpower|nReduces incoming damage by {4}% and converts it into mana for the hero. This effect does not stack.".format(
                mp.toString(), hp.toString(), ar.toString(), dmgReduction.toString()
            ))
            ..setGoldCost(4250)
            ..addRequirement(ITEM_ID_BATTLEMAGE_ARMOR)
            ..addRequirement(ITEM_ID_GHOST_HOOD)
    else
        itemId.getItem()
            ..addStatBonusAbsolute(Stat.MP, mp)
            ..addStatBonusAbsolute(Stat.HP, hp)
            ..addStatBonusAbsolute(Stat.AR, ar)
            ..addStatBonusAbsolute(Stat.AGI, wp)
    
function itemArcaneShield(int itemId)
    int hp = 275
    int wp = 40
    int deBuffReduction = 15 // -> General
    if compiletime
        itemId.getTypeDef()
            ..setDescription("+ {0} hit points|n+ {1} willpower|nMost negative buffs last {2}% shorter.".format(
                hp.toString(), wp.toString(), deBuffReduction.toString()
            ))
            ..setGoldCost(3800)
            ..addRequirement(ITEM_ID_ANCIENT_STONE_TABLET)
    else
        itemId.getItem()
            ..addStatBonusAbsolute(Stat.HP, hp)
            ..addStatBonusAbsolute(Stat.AGI, wp)

function itemScrollOfConjuration(int itemId)
    int intel = 40
    int intelFactor = 25
    if compiletime
        itemId.getTypeDef()
            ..setDescription("+ {0} intelligence|Increases your intelligence by {1}%.".format(
                intel.toString(), intelFactor.toString()
            ))
            ..setGoldCost(4300)
            ..addRequirement(ITEM_ID_APPRENTICES_SCROLL)
            ..addRequirement(ITEM_ID_EVIL_BOOK)
            ..addRequirement(ITEM_ID_SPELL_BOOK)
    else
        itemId.getItem()
            ..addStatBonusAbsolute(Stat.INT, intel)
            ..addStatBonusRelative(Stat.INT, intelFactor*10)

@compiletime
public function shopMagical3Init()
    itemEnchantedArmor(ITEM_ID_ENCHANTED_ARMOR)
    itemEmeraldPendant(ITEM_ID_EMERALD_PENDANT)
    itemRingOfDarkness(ITEM_ID_RING_OF_DARKNESS)
    itemBlessedGoblet(ITEM_ID_BLESSED_GOBLET)
    itemWandOfBlood(ITEM_ID_WAND_OF_BLOOD)
    itemWandOfDeath(ITEM_ID_WAND_OF_DEATH)
    itemArcaneBlade(ITEM_ID_ARCANE_BLADE)
    itemVampiricGoblet(ITEM_ID_VAMPIRIC_GOBLET)
    itemVoidArmor(ITEM_ID_VOID_ARMOR)
    itemArcaneShield(ITEM_ID_ARCANE_SHIELD)
    itemScrollOfConjuration(ITEM_ID_SCROLL_OF_CONJURATION)
