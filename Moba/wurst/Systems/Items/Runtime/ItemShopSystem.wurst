package ItemShopSystem

import ClosureTimers
import ItemShopFinalize
import HashMap
import LinkedList
import ItemShopRequirements
import UnitWrapper
import Constants

//This package is imported ny other item packages, but they use initlater to avoid cyclic requirements. So the initialization of this
//package is manually called by other packages and not by using init, because init is after all other item packages.
//Init only contains functions that can be executed later.


/*  ==========================================================================================================================
**
**  runtime
**
**  ==========================================================================================================================*/

/*  ==========================================================================================================================
**
**  globals
**
**  ==========================================================================================================================*/

Item array itemType 

/*  ==========================================================================================================================
**
**  Creates the runtime item objects based on the compiletime values.
**
**  ==========================================================================================================================*/


public function setupItems()
    for i = 0 to MAX_ITEM_ID
        if itemIsRecipe[i]
            itemType[i] = new Recipe(i, itemIdArray[i], itemGoldCost[i], itemRequiredItems[i], itemType[i-1])
        else
            itemType[i] = new Item(i, itemIdArray[i], itemGoldCost[i])

interface ItemPickUp
    function onItemPickUp()

interface ItemDrop
    function onItemDrop()

item triggerItem
unit triggerHero
        
public function getTriggerItem() returns item
    return triggerItem

public function getTriggerHero() returns unit
    return triggerHero

public function unit.countItemsOfType(int itemTypeId) returns int
    item indexItem
    int count = 0

    for i = 0 to bj_MAX_INVENTORY-1
        indexItem = UnitItemInSlot(this, i)
        if (indexItem != null) and (indexItem.getTypeId() == itemTypeId)
            count++

    return count

//returns if the picked up item is the first of its type and if the dropped item is the last of its type
public function isUnique() returns boolean
    return getTriggerHero().countItemsOfType(getTriggerItem().getTypeId()) == 1

//returns if the the hero has not this item
public function hasNot(int itemTypeId) returns boolean
    return getTriggerHero().countItemsOfType(itemTypeId) == 0

/*combined usage:
pick up boots 1
isUnique() and hasNot(boots 2)
onPickup: the hero has not boots 2 and picked up his first boots 1 => add unique boots bonus
onDrop: the hero has not boots 2 and dropped his last boots 1 => remove unique boots bonus

*/
/**
Returns the object id for an item id.
**/
public function convertItemId(int itemId) returns int
    return itemIdArray[itemId]

/**
Returns the item id for an object id.
**/
public function convertItemTypeId(int itemTypeId) returns int
    return Item.itemMap.get(itemTypeId).getId()

/**
Returns the item for an item id.
**/
public function int.getItem() returns Item
    return Item.itemMap.get(convertItemId(this))

/**
Returns the item for an object id.
**/
public function int.getItemFromObject() returns Item
    return Item.itemMap.get(this)

public class Item
    protected constant int itemTypeId
    protected constant int gold
    protected int id

    protected Recipe recipe = null

    protected static HashMap<int, Item> itemMap
    private static trigger onItemPickUp = CreateTrigger()
    private static trigger onItemDrop = CreateTrigger()
    private constant onPickUp = new LinkedList<ItemPickUp>
    private constant onDrop = new LinkedList<ItemDrop>


    construct(int id, int itemTypeId, int gold)
        objectCount++
        this.itemTypeId = itemTypeId
        this.id = id
        this.gold = gold
        if itemMap == null
            print("still null")
        else
            itemMap.put(itemTypeId, this)

    static function classInit() //class must be initialized, before the package (before items are set up in Finalize)
        itemMap = new HashMap<int, Item>()
        onItemPickUp = CreateTrigger()
            ..addAction(function onItemPickUp)
            ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_PICKUP_ITEM)
        onItemDrop = CreateTrigger()
            ..addAction(function onItemDrop)
            ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DROP_ITEM)

    static function onItemPickUp()
        triggerItem = GetManipulatedItem()
        triggerHero = GetTriggerUnit()
        let itemType = itemMap.get(triggerItem.getTypeId())
        if itemType != null
            for c in itemType.onPickUp
                c.onItemPickUp()

    static function onItemDrop()
        triggerItem = GetManipulatedItem()
        triggerHero = GetTriggerUnit()
        let itemType = itemMap.get(triggerItem.getTypeId())
        if itemType != null
            for c in itemType.onDrop
                c.onItemDrop()

    function addPickupFunction(ItemPickUp onPickUp)
        this.onPickUp.add(onPickUp)

    function addDropFunction(ItemDrop onDrop)
        this.onDrop.add(onDrop)

    function addStatBonusAbsolute(Stat whichStat, int bonus)
        addPickupFunction( ()-> (begin
            getTriggerHero().wrapper().addStatAbsoluteBonus(whichStat, bonus)
        end))

        addDropFunction( ()-> (begin
            getTriggerHero().wrapper().addStatAbsoluteBonus(whichStat, -bonus)
        end))

    function addStatBonusRelative(Stat whichStat, int bonus)
        addPickupFunction( ()-> (begin
            getTriggerHero().wrapper().addStatRelativeBonus(whichStat, bonus)
        end))

        addDropFunction( ()-> (begin
            getTriggerHero().wrapper().addStatRelativeBonus(whichStat, -bonus)
        end))

    function getTypeId() returns int
        return this.itemTypeId

    function getId() returns int
        return this.id

    function getGoldCost() returns int
        return this.gold

    static function getItem(int id) returns Item
        return itemType[id]

    function getRecipe() returns Recipe
        return this.recipe

    


public class Recipe extends Item

    protected LinkedList<int> requiredItems
    
    protected Item resultItem

    construct(int id, int itemTypeId, int gold, string requiredItems, Item resultItem)
        super(id, itemTypeId, gold)
        this.requiredItems = stringToList(requiredItems, ",")
        this.resultItem = resultItem
        this.resultItem.recipe = this

    //this event happens before the gold is added
    //it is needed, because there is upkeep
    static function onItemSell()
        let owner = GetTriggerPlayer()
        let itemTypeId = GetSoldItem().getTypeId()
        let itm = itemMap.get(itemTypeId)
        let currentGold = owner.getGold()
        if itm != null
            let newGold = currentGold + (itm.getGoldCost() div 2)
            doAfter(0) ->
                owner.setGold(newGold)


    static function onItemGet(unit hero, item whichItem)
        let itemTypeId = whichItem.getTypeId()
        let itm = itemMap.get(itemTypeId)
      

        if not (itm instanceof Recipe)
            return


        let recipe = itm castTo Recipe

        let owner = hero.getOwner()
        var missingItems = ""
        var hasAll = true
        var missingGold = 0
        let requiredRequirements = new LinkedList<Item>
        if recipe != null
            for int req in recipe.requiredItems
                let required = Item.getItem(req)
                if not UnitHasItemOfTypeBJ(hero, required.itemTypeId)
                    hasAll = false
                    if(missingItems!="")
                        missingItems += ", "
                    missingItems += GetObjectName(required.itemTypeId)
                    missingGold += required.getGoldCost()

                    //if the required item is an recipe itself, there could already be items from its requirements
                    let requiredRecipe = required.getRecipe()
                    if requiredRecipe != null
                        for int req2 in requiredRecipe.getRequiredItems()
                            let required2 = Item.getItem(req2)
                            //some items require one item several times
                            if hero.hasItemById(required2.getTypeId())

                                if requiredRequirements.has(required2) or recipe.requiredItems.has(required2.getId()) //already in list
                                    if hero.countItemsOfType(required2.getTypeId()) > 1
                                        missingGold -= required2.getGoldCost()
                                        requiredRequirements.add(required2)
                                else
                                    missingGold -= required2.getGoldCost()
                                    requiredRequirements.add(required2)
                  

        hero.removeItem(whichItem)
        whichItem.remove()
        if hasAll
            
            for int req in recipe.requiredItems
                GetItemOfTypeFromUnitBJ(hero, itemType[req].itemTypeId).remove()

            hero.addItemById(recipe.resultItem.itemTypeId)
        else
            //do not use addGoldEx, because this is not considered gaining gold

            if owner.getGold() >= missingGold
                //quick buy
                for int req in recipe.requiredItems
                    GetItemOfTypeFromUnitBJ(hero, itemType[req].itemTypeId).remove()

                for req2 in requiredRequirements
                    GetItemOfTypeFromUnitBJ(hero, req2.getTypeId()).remove()
    
                destroy requiredRequirements

                hero.addItemById(recipe.resultItem.itemTypeId)
                owner.addGold(-missingGold)
                printTimedToPlayer("You have enough gold, so the item was bought directly.", 5, owner)
            else
                //remove
                owner.addGold(recipe.gold)
                printTimedToPlayer("Missing items: "+missingItems +" Missing gold: "+(recipe.gold + missingGold - owner.getGold()).toString(), 5, owner)
                printTimedToPlayer("Item price refunded.", 5, owner)

    
    protected static function onItemGetTrigger()
        let hero = GetTriggerUnit()
        let whichItem = GetManipulatedItem()
        doAfter(0, () -> onItemGet(hero, whichItem))

    function getRequiredItems() returns LinkedList<int>
        return this.requiredItems

    function getResultItem() returns Item
        return this.resultItem


init
    CreateTrigger()
        ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_PICKUP_ITEM)
        ..addAction(function Recipe.onItemGetTrigger)
    CreateTrigger()
        ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_PAWN_ITEM)
        ..addAction(function Recipe.onItemSell)

    /*doAfter(1, () -> print("gold cost = "+itemGoldCost[ITEM_ID_HELMET].toString()))
    doAfter(1, () -> print("id = "+itemId[ITEM_ID_HELMET].toString()))
    doAfter(1, () -> print("recipe = "+itemIsRecipe[ITEM_ID_HELMET].toString()))
    doAfter(1, () -> print("required = "+itemRequiredItems[ITEM_ID_HELMET]))

    doAfter(1, () -> print("gold cost = "+itemGoldCost[ITEM_ID_HELMET+1].toString()))
    doAfter(1, () -> print("id = "+itemId[ITEM_ID_HELMET+1].toString()))
    doAfter(1, () -> print("recipe = "+itemIsRecipe[ITEM_ID_HELMET+1].toString()))
    doAfter(1, () -> print("required = "+itemRequiredItems[ITEM_ID_HELMET+1]))*/
/*
    doAfter(1, () -> print("gold cost = "+itemGoldCost[ITEM_ID_SPIKED_MAIL].toString()))
    doAfter(1, () -> print("id = "+itemIdArray[ITEM_ID_SPIKED_MAIL].toString()))
    doAfter(1, () -> print("recipe = "+itemIsRecipe[ITEM_ID_SPIKED_MAIL].toString()))
    doAfter(1, () -> print("required = "+itemRequiredItems[ITEM_ID_SPIKED_MAIL]))

    doAfter(1, () -> print("gold cost = "+itemGoldCost[ITEM_ID_SPIKED_MAIL+1].toString()))
    doAfter(1, () -> print("id = "+itemIdArray[ITEM_ID_SPIKED_MAIL+1].toString()))
    doAfter(1, () -> print("recipe = "+itemIsRecipe[ITEM_ID_SPIKED_MAIL+1].toString()))
    doAfter(1, () -> print("required = "+itemRequiredItems[ITEM_ID_SPIKED_MAIL+1]))*/