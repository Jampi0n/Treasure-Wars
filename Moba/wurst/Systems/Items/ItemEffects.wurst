package ItemEffects

import ItemShop
import HashMap


interface ItemPickUp
    function onItemPickUp()

interface ItemDrop
    function onItemDrop()

item triggerItem
unit triggerHero

public function getTriggerItem() returns item
    return triggerItem

public function getTriggerHero() returns unit
    return triggerHero


public class ItemType

    private static constant itemMap = new HashMap<int, ItemType>()
    private static trigger onItemPickUp = CreateTrigger()
    private static trigger onItemDrop = CreateTrigger()
    ItemPickUp onPickUp
    ItemDrop onDrop

    construct(int itemId, ItemPickUp onPickUp, ItemDrop onDrop)

        this.onPickUp = onPickUp
        this.onDrop = onDrop
        itemMap.put(itemIdArray[itemId], this)


    static function classInit()
        onItemPickUp
            ..addAction(function onItemPickUp)
            ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_PICKUP_ITEM)
        onItemDrop
            ..addAction(function onItemDrop)
            ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DROP_ITEM)

    static function onItemPickUp()
        triggerItem = GetManipulatedItem()
        triggerHero = GetTriggerUnit()
        let itemType = itemMap.get(triggerItem.getTypeId())
        if itemType != null
            itemType.onPickUp.onItemPickUp()

    static function onItemDrop()
        triggerItem = GetManipulatedItem()
        triggerHero = GetTriggerUnit()
        let itemType = itemMap.get(triggerItem.getTypeId())
        if itemType != null
            itemType.onDrop.onItemDrop()


init
    ItemType.classInit()