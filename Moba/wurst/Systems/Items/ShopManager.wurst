package ShopManager

import Execute
import ShopGUI
import ItemFinalize
import SoundUtils
import StandardTextTags
import PlayerControl
import HeroControl
import General

constant BUY_RANGE = 900

constant SOUND_ITEM_BUY = new SoundDefinition(Sounds.receiveGold, false, false)
constant SOUND_ITEM_BUY_3D = new SoundDefinition(Sounds.receiveGold, false, true)
constant SOUND_RECIPE_TOO_EXPENSIVE = new SoundDefinition(Sounds.error, false, false)

rect visibleArea
rect array shopRect
GUI array gui

public function getGUI(int i) returns GUI
    return gui[i]

function buyFailed(unit hero, int _itemId, int cost, int gold)
    let missing = cost - gold
    printTimedToPlayer(COLOR_GOLD.toColorString()+"You are missing "+missing.toString()+" gold to buy this item!|r", 5, hero.getOwner())
    SOUND_RECIPE_TOO_EXPENSIVE.playForPlayer(hero.getOwner())

function buySuccess(unit hero, item itm, int totalCost)
    if hero.hasItem(itm) // success
        let mainHero = Hero.getOriginal(hero).toUnit()
        mainHero.addItemById(itm.getTypeId())
        SOUND_ITEM_BUY_3D.playOnPoint(mainHero.getPos3Zero())
        SOUND_ITEM_BUY.playForPlayer(hero.getOwner())
        standardTextTag(mainHero.getPos(), itm.getName())
            ..setColor(255, 220, 0, 255)
    else // not enough space
        // refund total cost
        // no item was used as recipe, otherwise there would be space
        SOUND_RECIPE_TOO_EXPENSIVE.playForPlayer(hero.getOwner())
        printTimedToPlayer(COLOR_GOLD.toColorString()+"Your inventory is full!|r", 5, hero.getOwner())
        itm.remove()
        hero.getOwner().addGold(totalCost)


function buyCondition(unit hero, bool firstTeam, bool showMessage) returns bool

    /*if not hero.isAlive()
        if showMessage
            printTimedToPlayer(COLOR_GOLD.toColorString()+"You cannot buy items, while your hero is dead!|r", 5, hero.getOwner())
        return false*/

    let mainHero = Hero.getOriginal(hero).toUnit()

    if mainHero.isAlive()
        let shopCenter = firstTeam ? gg_rct_GreenAltar.getCenter() : gg_rct_BrownAltar.getCenter()
        let dist = mainHero.getPos().distanceTo(shopCenter)
        if dist > BUY_RANGE
            if showMessage
                printTimedToPlayer(COLOR_GOLD.toColorString()+"You are too far away from the shop to buy items!|r", 5, hero.getOwner())
            return false

    return true

init


    visibleArea = GetPlayableMapRect()

    shopRect[0] = gg_rct_Shop0
    shopRect[1] = gg_rct_Shop1
    shopRect[2] = gg_rct_Shop2
    shopRect[3] = gg_rct_Shop3
    shopRect[4] = gg_rct_Shop4
    shopRect[5] = gg_rct_Shop5
    shopRect[6] = gg_rct_Shop6
    shopRect[7] = gg_rct_Shop7
    shopRect[8] = gg_rct_Shop8
    shopRect[9] = gg_rct_Shop9

    itemFinalize()
    execute() ->
        for i = HERO_PLAYER_TEAM_1_FIRST to HERO_PLAYER_TEAM_2_LAST
            gui[i] = new GUI(players[i], null)
            ..setBuyCondition( (unit hero, bool showMessage) -> buyCondition(hero, i <= HERO_PLAYER_TEAM_1_LAST, showMessage))
            ..setBuySuccess( (unit hero, item itm, int totalCost) -> buySuccess(hero, itm, totalCost))
            ..setBuyFailed( (unit hero, int itemId, int cost, int gold) -> buyFailed(hero, itemId, cost, gold))

    for i = HERO_PLAYER_TEAM_1_FIRST to HERO_PLAYER_TEAM_2_LAST
        CreateTrigger()
        ..registerPlayerKeyPress(players[i], OSKEY_ESCAPE, OSKEY_META.NONE, true)
        ..addAction() ->
            let id = GetTriggerPlayer().getId()
            hideSecondaryHeroButtons()
            if gui[id].isEnabled()
                gui[id].closeShop()
                print("close")
                let mainHero = CPlayer.getPlayerHeroes(id).getFirst().toUnit()
                if GetLocalPlayer().getId() == id
                    ClearSelection()
                    SelectUnit(mainHero,true)
                for Hero h in CPlayer.getPlayerHeroes(id)
                    Hero.copyInventory(h.getCopy(), h.toUnit())
                    h.getCopy().hide()
            else
                for Hero h in CPlayer.getPlayerHeroes(id)
                    let copy = h.getCopy()
                    copy.unpause()
                    copy.show()
                    Hero.copyInventory(h.toUnit(), copy)
                    copy.pause()
                gui[id].openShop()
                print("open")
    


/*
    Removed items are dropped
    cannot buy items while dead
    test if desync

*/