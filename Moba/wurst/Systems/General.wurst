package General

import Buff
import Missile
import ClosureTimers
import Constants
import UnitWrapper

public boolean gameOver = false

/*
    Cannot be targeted by negative spells or attacks.
*/
public constant INVULERNABLE = new BuffType(true, DispelLevel.NONE)
/*
    Cannot be targeted by any spells or attacks.
*/
public constant UNTARGETABLE = new BuffType(true, DispelLevel.NONE)

public function enumUnitsInHitBoxRange(vec2 pos, real range) returns group
    let g = CreateGroup()
    g.enumUnitsInRange(pos, range + MAX_HIT_BOX)
    let returnGroup = CreateGroup()
    while(true)
        let u = FirstOfGroup(g)
        if u == null
            break
        g.removeUnit(u)
        if u.hitBoxDistanceTo(pos) <= range
            returnGroup.addUnit(u)
    
    g.destr()
    return returnGroup



init
    setHitBoxFunction( (unit u) -> (begin
        real ret = 32
        if u.isType(UNIT_TYPE_HERO)
            ret = 64
        else
            let unitType = UnitType.getUnitType(u.getTypeId())
            if unitType!=null
                ret = unitType.getHitBox().toReal()
        return ret
    end))

    
    dispelBuffsOnDeath()

    if DEBUG_MODE
        doAfter(1, () -> print("DEBUG_MODE is enabled."))
        CreateTrigger()
        ..registerPlayerChatEvent(players[0], "buff", false)
        ..addAction(() -> (begin
            debugBuff()
        end))

    //prevent teamkill
    let trg = CreateTrigger()
    for i = 0 to MAX_HERO_COUNT-1
        trg.registerPlayerUnitEvent(Player(i), EVENT_PLAYER_UNIT_ISSUED_UNIT_ORDER, null)

    trg.addAction(() ->(begin
        if GetIssuedOrderId() == OrderId("attack")
            let attacker = GetTriggerUnit()
            let target = GetOrderTargetUnit()
            if target != null and attacker.getOwner().isAllyOf(target.getOwner())
                doAfter(0, () -> (begin
                    if not attacker.issuePointOrder("attack", target.getPos())
                        attacker.issueImmediateOrder("stop")
                end))
    end))

    Player(PLAYER_NEUTRAL_AGGRESSIVE).setName("Creeps")

    INVULERNABLE.addFirstFunction() (Buff whichBuff) ->
        let target = whichBuff.getTarget()
        target.dispelNegativeBuffs(DispelLevel.BREAK)
        UnitAddType(target, UNIT_TYPE_ANCIENT)
    INVULERNABLE.addEndFunction() (Buff whichBuff) ->
        UnitRemoveType(whichBuff.getTarget(), UNIT_TYPE_ANCIENT)
        
    UNTARGETABLE.addFirstFunction() (Buff whichBuff) ->
        let target = whichBuff.getTarget()
        target.dispelBuffs(DispelLevel.BREAK)
        UnitAddType(target, UNIT_TYPE_SAPPER)
    UNTARGETABLE.addEndFunction() (Buff whichBuff) ->
        UnitRemoveType(whichBuff.getTarget(), UNIT_TYPE_SAPPER)