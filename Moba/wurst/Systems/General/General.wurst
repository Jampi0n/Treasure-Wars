package General

import Buff
import UnitWrapper
import initlater HeroControl
import ClosureTimers

constant MAGIC_REDUCTION = 0.01

public constant DEBUG_MODE = true

public enum ReductionType
    PHYSICAL
    MAGIC
    NONE

public function printWarning(string warning)
    if warning != ""
        //print(warning)

public function unit.isTargetable(player source, boolean allowFriends, boolean allowEnemies) returns boolean
    if not this.isAlive()
        return false
    if this.isType(UNIT_TYPE_ANCIENT)
        return false
    if not allowEnemies and IsUnitEnemy(this, source) 
        return false
    if not allowFriends and IsUnitAlly(this, source) 
        return false
    
    return true

public function unit.isVisible(player source) returns boolean
    return IsUnitVisible(this, source)


public function unit.getStr() returns int
    return GetHeroStr(this, true)

public function unit.getWp() returns int
    return GetHeroAgi(this, true)

public function unit.getInt() returns int
    return GetHeroInt(this, true)

public function real.factor(int statValue, real atHundred) returns real
    return this * (atHundred*statValue/100 + 1)

public function int.factor(int statValue, real atHundred) returns real
    return this.toReal().factor(statValue, atHundred)

public function real.bonus(int statValue, real atHundred) returns real
    return this + atHundred*statValue/100

public function int.bonus(int statValue, real atHundred) returns real
    return this.toReal().bonus(statValue, atHundred)

public function unit.dealDamage(unit target, real amount, ReductionType reductionType)
    let damageType = reductionType == ReductionType.PHYSICAL ? DAMAGE_TYPE_NORMAL : DAMAGE_TYPE_UNIVERSAL
    real newAmount
    if(reductionType == ReductionType.MAGIC and target.isType(UNIT_TYPE_HERO))
        let wp = GetHeroAgi(target, true)
        newAmount = amount * (1-( wp*MAGIC_REDUCTION )/( 1 + wp*MAGIC_REDUCTION ))
    else
        newAmount = amount
    //print(this.getName()+" damages "+target.getName()+" for "+amount.toString()+" damage.")
    UnitDamageTarget(this, target, newAmount, false, true, ATTACK_TYPE_NORMAL, damageType, WEAPON_TYPE_WHOKNOWS)

public function unit.healHP(real amount)
    this.setHP(this.getHP() + amount)

public function unit.healMana(real amount)
    this.setMana(this.getMana() + amount)

public function unit.dispelMagicalBuffs(boolean positive, boolean negative)
    let buffList = this.getBuffList().getLinkedList()
    for Buff currentBuff in buffList
        let buffType =currentBuff.getBuffType()
        if(buffType.isMagical())
            if(positive and buffType.isPositive()) or (negative and not buffType.isPositive())
                currentBuff.dispel()

public function unit.dispelPhysicallBuffs(boolean positive, boolean negative)
    let buffList = this.getBuffList().getLinkedList()
    for Buff currentBuff in buffList
        let buffType =currentBuff.getBuffType()
        if(not buffType.isMagical())
            if(positive and buffType.isPositive()) or (negative and not buffType.isPositive())
                currentBuff.dispel()


public function unit.dispelBuffs(boolean positive, boolean negative)
    this.dispelMagicalBuffs(positive, negative)
    this.dispelPhysicallBuffs(positive, negative)

public function player.getFullName() returns string
    let hero = Hero.getHero(this)
    if(hero != null)
        return this.getName()+ " ("+hero.toUnit().getName()+")"
    else
        return this.getName()

public function player.getFullColoredName() returns string
    return fromPlayer(this).toColorString()+this.getFullName()+"|r"

init
    if DEBUG_MODE
        doAfter(1, () -> print("DEBUG_MODE is enabled."))