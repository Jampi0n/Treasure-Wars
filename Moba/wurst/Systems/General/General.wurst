package General

import Buff
import BuffTypeConfig
import Missile
import UnitWrapper
import initlater HeroControl
import initlater PlayerControl
import ClosureTimers
import UnitType
import initlater ItemIdGeneration
import initlater ItemShopSystem
import public Constants
import Assets
import DamageDetection
import HashMap
import ErrorHandling
import initlater OnAttack


public boolean gameOver = false



public enum ReductionType
    PHYSICAL
    MAGIC
    NONE

public function printWarning(string warning)
    if warning != ""
        //print(warning)

public function unit.isTargetable(player source, boolean allowFriends, boolean allowEnemies) returns boolean
    boolean ret = true
    if this == null
        ret = false
    else if not this.isAlive()
        ret = false
    else if this.isType(UNIT_TYPE_ANCIENT)
        ret =  false
    else if not allowEnemies and IsUnitEnemy(this, source) 
        ret =  false
    else if not allowFriends and IsUnitAlly(this, source) 
        ret = false
    
    return ret

public function unit.isVisible(player source) returns boolean
    return IsUnitVisible(this, source)

public function unit.isMovable() returns boolean
    if GetUnitPropWindow(this) < 0.00001
        return false
    if BuffList.hasBuffType(this, ENSNARED)
        return false
    if BuffList.hasBuffType(this, ENTANGLED)
        return false
    if this.getDefaultMovespeed() == 0
        return false
    return true

public function unit.getStr() returns int
    int ret
    if this.isType(UNIT_TYPE_HERO)
        ret = GetHeroStr(this, true)
    else
        ret = this.wrapper().getStatTotalBonus(Stat.STR) + this.wrapper().getStatBaseValue(Stat.STR)
    return ret

public function unit.getWp() returns int
    int ret
    if this.isType(UNIT_TYPE_HERO)
        ret = GetHeroAgi(this, true)
    else
        ret = this.wrapper().getStatTotalValue(Stat.AGI)
    return ret

public function unit.getInt() returns int
    int ret
    if this.isType(UNIT_TYPE_HERO)
        ret = GetHeroInt(this, true)
    else
        ret = this.wrapper().getStatTotalBonus(Stat.INT) + this.wrapper().getStatBaseValue(Stat.INT)
    return ret

public function real.factor(int statValue, real atHundred) returns real
    return this * (atHundred*statValue/100 + 1)

public function int.factor(int statValue, real atHundred) returns real
    return this.toReal().factor(statValue, atHundred)

public function real.bonus(int statValue, real atHundred) returns real
    return this + atHundred*statValue/100

public function int.bonus(int statValue, int atHundred) returns real
    return this.toReal().bonus(statValue, atHundred.toReal())

public function real.reduceMagic(int stat) returns real
    return this.reduce(stat, MAGIC_REDUCTION)

public function real.reduceArmor(int stat) returns real
    return this.reduce(stat, ARMOR_REDUCTION)

public function real.reduce(int stat, real reduction) returns real
    return this / ( 1 + max(stat, -20) * reduction )

public function unit.addBuff(unit caster, real duration, BuffType buffType, int level) returns Buff
    Buff ret = null
    if this.isAlive()
        ret = new Buff(this, caster, duration, buffType, level)
    return ret

public function unit.addBuffReduced(unit caster, real duration, BuffType buffType, int level) returns Buff
    //buff reduction only uses 1/4 of the wp, so it reduces duration not as much as it reduces damage
    real realDuration =  duration.reduce( (this.getWp()/4).toInt() , 0.01 )
    if this.hasItemById(convertItemId(ITEM_ID_ARCANE_SHIELD))
        realDuration = realDuration * 0.85
    Buff ret = null
    if this.isAlive()
        ret = new Buff(this, caster, realDuration, buffType, level)
    return ret


public function unit.dealDamageAlways(unit target, real amount, ReductionType reductionType)
    let damageType = reductionType == ReductionType.PHYSICAL ? DAMAGE_TYPE_NORMAL : DAMAGE_TYPE_UNIVERSAL
    real newAmount
    if reductionType == ReductionType.MAGIC
        let wp = target.getWp()
        newAmount = amount.reduceMagic(wp)
        setMagicDamage(true)
    else
        newAmount = amount
        setMagicDamage(false)

    UnitDamageTarget(this, target, newAmount, false, true, ATTACK_TYPE_NORMAL, damageType, WEAPON_TYPE_WHOKNOWS)

public function unit.dealDamage(unit target, real amount, ReductionType reductionType)
    if not target.isType(UNIT_TYPE_ANCIENT)
        this.dealDamageAlways(target, amount, reductionType)
        if not IsUnitEnemy(target, this.getOwner()) and this != target
            print(this.getName()+" damages ally: "+target.getName())

public function unit.damageMana(unit target, real amount, ReductionType reductionType)
    real newAmount
    if reductionType == ReductionType.MAGIC
        let wp = target.getWp()
        newAmount = amount.reduceMagic(wp)
    else if reductionType == ReductionType.PHYSICAL
        let ar = target.getArmor().round()
        newAmount = amount.reduceMagic(ar)
    else
        newAmount = amount
    target.addMana(-newAmount)

public function unit.healHP(unit target, real amount)
    real realAmount = amount
    if this.hasItemById(convertItemId(ITEM_ID_BRACER_OF_POWER))
        realAmount *= 1.15

    realAmount = min(realAmount, target.getMaxHP()-target.getHP())
    target.setHP(target.getHP() + realAmount)

    target.getOwner().getCPlayer().statHealingReceived += realAmount
    this.getOwner().getCPlayer().statHealingDone += realAmount

public function unit.healMana(unit target, real amount)
    real realAmount = amount
    if this.hasItemById(convertItemId(ITEM_ID_BRACER_OF_POWER))
        realAmount *= 1.15

    realAmount = min(realAmount, target.getMaxMana()-target.getMana())
    target.setMana(target.getMana() + realAmount)

    target.getOwner().getCPlayer().statManaHealed += realAmount

public function unit.dispelMagicalBuffs(boolean positive, boolean negative)
    let buffList = this.getBuffList()
    if buffList != null
        for Buff currentBuff in buffList.getLinkedList()
            let buffType =currentBuff.getBuffType()
            if(buffType.isMagical())
                if(positive and buffType.isPositive()) or (negative and not buffType.isPositive())
                    currentBuff.dispel()

public function unit.dispelPhysicallBuffs(boolean positive, boolean negative)
    let buffList = this.getBuffList()
    if buffList != null
        for Buff currentBuff in buffList.getLinkedList()
            let buffType =currentBuff.getBuffType()
            if(not buffType.isMagical())
                if(positive and buffType.isPositive()) or (negative and not buffType.isPositive())
                    currentBuff.dispel()


public function unit.dispelBuffs(boolean positive, boolean negative)
    this.dispelMagicalBuffs(positive, negative)
    this.dispelPhysicallBuffs(positive, negative)

public function player.getFullName() returns string
    let hero = Hero.getHero(this)
    if(hero != null)
        return this.getName()+ " ("+hero.toUnit().getName()+")"
    else
        return this.getName()

public function player.getFullColoredName() returns string
    return this.getColor().toColor().toColorString()+this.getFullName()+"|r"


public function unit.hitBoxDistanceTo(vec2 pos) returns real
    return max(0, this.getPos().distanceTo(pos) - this.getHitBox())

public function enumUnitsInHitBoxRange(vec2 pos, real range) returns group
    let g = CreateGroup()
    g.enumUnitsInRange(pos, range + MAX_HIT_BOX)
    let returnGroup = CreateGroup()
    while(true)
        let u = FirstOfGroup(g)
        if u == null
            break
        g.removeUnit(u)
        if u.hitBoxDistanceTo(pos) <= range
            returnGroup.addUnit(u)
    
    g.destr()
    return returnGroup


public class ChannelTeleport

    private unit caster
    private vec2 targetPos = vec2(0,0)
    private effect channelEffectCaster
    private effect channelEffectTarget
    private static constant unitMap = new HashMap<unit, ChannelTeleport>
    private boolean alive = true
    private real maxDamage
    private real damage = 0


    construct(unit caster, vec2 targetPos, real dur, real maxDamage)
        this.caster = caster
        this.targetPos = targetPos
        this.maxDamage = maxDamage
        create(dur)

    private function create(real dur)
        this.caster.pause()
        this.channelEffectCaster = addEffect(Abilities.massTeleportTo, this.caster.getPos())
        this.channelEffectTarget = addEffect(Abilities.massTeleportTo, this.targetPos)
        addOnDamageFunc(Condition(function onDamage))
        unitMap.put(this.caster, this)
        doAfter(dur, () ->(begin
            if this.alive
                this.onTeleport()
            else
                destroy this
        end))

    private static function onDamage()
        let teleport = unitMap.get(GetTriggerUnit())
        if teleport != null
            teleport.damage += GetEventDamage()
            if teleport.maxDamage > -0.5 and teleport.damage > teleport.maxDamage
                teleport.remove()
            else
                let u = GetTriggerUnit()
                if BuffList.hasBuffType(u, STUNNED) or BuffList.hasBuffType(u, SILENCED) or not u.isMovable()
                    teleport.remove()
        
    private function onTeleport()
        addEffect(Abilities.massTeleportCaster, this.caster.getPos()).destr()
        addEffect(Abilities.massTeleportTarget, this.targetPos).destr()
        this.caster.setPos(targetPos)
        this.remove()
        destroy this

    private function remove()
        this.alive = false
        this.channelEffectCaster.destr()
        this.channelEffectTarget.destr()
        unitMap.remove(this.caster)
        doAfter(0.5) -> 
            this.caster.unpause()



init
    setHitBoxFunction( (unit u) -> (begin
        real ret = 32
        if u.isType(UNIT_TYPE_HERO)
            ret = 64
        else
            let unitType = UnitType.getUnitType(u.getTypeId())
            if unitType!=null
                ret = unitType.getHitBox().toReal()
        return ret
    end))

    setGetBuffListFunction( (unit u) -> (begin
        return u.getBuffList()
    end))

    setCreateBuffListFunction( (unit u) -> (begin
        if u.wrapper() != null
            u.wrapper().createBuffList()
        else
            error("The unit "+u.getName()+" had no wrapper.")
            UnitWrapper.create(u)
            u.wrapper().createBuffList()
    end))
    
    dispelBuffsOnDeath()

    if DEBUG_MODE
        doAfter(1, () -> print("DEBUG_MODE is enabled."))
        CreateTrigger()
            ..registerPlayerChatEvent(players[0], "buff", false)
            ..addAction(() -> (begin
                debugBuff()
            end))

    //prevent teamkill
    let trg = CreateTrigger()
    for i = 0 to MAX_HERO_COUNT-1
        trg.registerPlayerUnitEvent(Player(i), EVENT_PLAYER_UNIT_ISSUED_UNIT_ORDER, null)

    trg.addAction(() ->(begin
        if GetIssuedOrderId() == OrderId("attack")
            let attacker = GetTriggerUnit()
            let target = GetOrderTargetUnit()
            if target != null and attacker.getOwner().isAllyOf(target.getOwner())
                doAfter(0, () -> (begin
                    if not attacker.issuePointOrder("attack", target.getPos())
                        attacker.issueImmediateOrder("stop")
                end))
    end))

    Player(PLAYER_NEUTRAL_AGGRESSIVE).setName("Creeps")