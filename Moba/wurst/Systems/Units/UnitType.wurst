package UnitType

import HashMap
import StandardTextTags
import initlater HeroControl
import PlayerControl
import Constants
import Assets

public function createUnitType(int baseHp, int unitId, int bounty, int baseAttack, int upgradeAttack, int attackUpgradeId, int baseArmor, int upgradeArmor, int armorUpgradeId, int hitBox, string modelPath, int powerLevel) returns int
    new UnitType(baseHp, unitId, bounty, baseAttack, upgradeAttack, attackUpgradeId, baseArmor, upgradeArmor, armorUpgradeId, hitBox, modelPath, powerLevel)
    return unitId

public function createUnitType(int baseHp, int unitId, int bounty, int baseAttack, int baseArmor, int hitBox, string modelPath, int powerLevel) returns int
    new UnitType(baseHp, unitId, bounty, baseAttack, 0, 0, baseArmor, 0, 0, hitBox, modelPath, powerLevel)
    return unitId

public function createUnitType(int unitId) returns int
    new UnitType(100, unitId, 0, 0, 0, 0, 0, 0, 0, 32, "", 0)
    return unitId

public class UnitType

    private static constant unitIdToUnitType = new HashMap<int, UnitType>

    private int unitId
    private int bounty

    private int baseAttack
    private int baseArmor
    private int baseHp

    private int upgradeAttack
    private int upgradeArmor

    private int attackUpgradeId
    private int armorUpgradeId

    private int hitBox

    private int powerLevel // used instead of the actual unit level, so creeps can have level 0 and have green camp icons.

    private string modelPath

    construct(int baseHp, int unitId, int bounty, int baseAttack, int upgradeAttack, int attackUpgradeId, int baseArmor, int upgradeArmor, int armorUpgradeId, int hitBox, string modelPath, int powerLevel)
        this.setup(baseHp, unitId, bounty, baseAttack, upgradeAttack, attackUpgradeId, baseArmor, upgradeArmor, armorUpgradeId, hitBox, modelPath, powerLevel)

    private function setup(int baseHp, int unitId, int bounty, int baseAttack, int upgradeAttack, int attackUpgradeId, int baseArmor, int upgradeArmor, int armorUpgradeId, int hitBox, string modelPath, int powerLevel)
        objectCount++
        this.unitId = unitId
        this.bounty = bounty
        this.baseAttack = baseAttack
        this.upgradeAttack = upgradeAttack
        this.attackUpgradeId = attackUpgradeId
        this.upgradeArmor = upgradeArmor
        this.armorUpgradeId = armorUpgradeId
        this.baseArmor = baseArmor
        this.baseHp = baseHp
        this.hitBox = hitBox
        this.modelPath = modelPath
        this.powerLevel = powerLevel
        unitIdToUnitType.put(unitId, this)

    static function getUnitType(int unitId) returns UnitType
        return unitIdToUnitType.get(unitId)

    function getUnitId() returns int
        return this.unitId

    function getBounty() returns int
        return this.bounty

    function getBaseAttack() returns int
        return this.baseAttack

    function getBaseArmor() returns int
        return this.baseArmor

    function getBaseHp() returns int
        return this.baseHp

    function getPowerLevel() returns int
        return this.powerLevel


    function getUpgradeAttack(player owner) returns int
        if this.upgradeAttack != 0
            return this.upgradeAttack * GetPlayerTechCount(owner, this.attackUpgradeId, true)
        else
            return 0

    function getUpgradeArmorCount(player owner) returns int
        return GetPlayerTechCount(owner, this.armorUpgradeId, true)

    function getUpgradeArmor(player owner) returns int
        if this.upgradeArmor != 0
            return this.upgradeArmor * GetPlayerTechCount(owner, this.armorUpgradeId, true)
        else
            return 0

    function getHitBox() returns int
        return this.hitBox

    function getModel() returns string
        return this.modelPath

function onUnitDeath()
    let dyingUnit = GetTriggerUnit()
    let killingUnit = GetKillingUnit()
    let dyingType = UnitType.getUnitType(dyingUnit.getTypeId())
    let killingPlayer = killingUnit.getOwner()
    let dyingCPlayer = dyingUnit.getOwner().getCPlayer()

    if dyingType != null

        // army unit dies
        if dyingCPlayer.getTeam() == Team.TEAM1 or dyingCPlayer.getTeam() == Team.TEAM2
            let bounty = dyingType.getBounty()
            let xp = dyingType.getPowerLevel()*10
            let xpAllyFactor = 0.5
            let bountyAllyFactor = 0.25
            /*
                The killer (if exists) gets full gold / xp.
                The killing team gets bountyAllyFactor/xpAllyFactor of the full gold / xp evenly shared amongst all players except the killer.
            */


            boolean killerIsEnemy = killingUnit != null and killingPlayer.getCPlayer().getTeam() == CPlayer.invertTeam(dyingCPlayer.getTeam()) 
            int killerIsHero = 0
            //the killing player belongs to the enemy team
            if killerIsEnemy and killingPlayer.getId() < MAX_HERO_COUNT 
                killerIsHero = 1

            // killer reward
            if killerIsEnemy and killerIsHero == 1
                killingPlayer.getCPlayer()
                    ..addGoldEx(bounty)
                    ..addUnitKill()
                let pos = dyingUnit.getPos()
                addEffect(UI.goldCredit ,pos).destr()

                createGoldBountyTextTag(dyingUnit, bounty, killingPlayer)
                //xp

                let killingHero = CPlayer.getPlayerHero(killingPlayer.getId(), 0)
                if killingHero != null
                    killingHero.toUnit().addXp(xp, true)

            // killer team reward

            // enemy team of dying unit
            let killingAllies = CPlayer.getEnemyHeroPlayers(dyingUnit.getOwner())
            // size of enemy team without killing player and without the army player
            let killingAlliesSize = CPlayer.getTeamHeroCount(CPlayer.invertTeam(dyingCPlayer.getTeam()) ) - killerIsHero
            
            let teamBounty = bounty * bountyAllyFactor / killingAlliesSize
            let teamXp = xp * xpAllyFactor / killingAlliesSize

            if killingAllies != null
            for CPlayer cPlayer in killingAllies
                player p = cPlayer.getPlayer()
                if p != killingPlayer
                    let hero = CPlayer.getPlayerHero(p.getId(), 0)
                    if hero != null
                        hero.addXp( teamXp)
                        cPlayer.addGoldEx(teamBounty)
        
    
    

init
    CreateTrigger()
        ..addAction(function onUnitDeath)
        ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)

