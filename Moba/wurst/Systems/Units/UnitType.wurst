package UnitType

import HashMap
import StandardTextTags

public function createUnitType(int unitId, int bounty, int baseAttack, int baseArmor, int hitBox) returns int
    new UnitType(unitId, bounty, baseAttack, baseArmor, hitBox)
    return unitId

public function createUnitType(int unitId) returns int
    new UnitType(unitId, 0, 0, 0, 32)
    return unitId

public class UnitType

    private static constant unitIdToUnitType = new HashMap<int, UnitType>

    private int unitId
    private int bounty

    private int baseAttack
    private int baseArmor

    private int hitBox

    construct(int unitId, int bounty, int baseAttack, int baseArmor, int hitBox)
        this.unitId = unitId
        this.bounty = bounty
        this.baseAttack = baseAttack
        this.baseArmor = baseArmor
        this.hitBox = hitBox
        unitIdToUnitType.put(unitId, this)

    static function getUnitType(int unitId) returns UnitType
        return unitIdToUnitType.get(unitId)

    function getUnitId() returns int
        return this.unitId

    function getBounty() returns int
        return this.bounty

    function getBaseAttack() returns int
        return this.baseAttack

    function getBaseArmor() returns int
        return this.baseArmor

    function getHitBox() returns int
        return this.hitBox

function onUnitDeath()
    let dyingUnit = GetTriggerUnit()
    let killingUnit = GetKillingUnit()
    let dyingType = UnitType.getUnitType(dyingUnit.getTypeId())
    let killingPlayer = killingUnit.getOwner()

    if dyingType == null or not killingPlayer.isEnemyOf(dyingUnit.getOwner())
        return
    
    let bounty = dyingType.getBounty()
    
    killingPlayer.addGold(bounty)
    
    createGoldBountyTextTag(dyingUnit, bounty, killingPlayer)

init
    CreateTrigger()
        ..addAction(function onUnitDeath)
        ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)

