package UnitType

import HashMap
import StandardTextTags

public function createUnitType(int unitId, int bounty, int baseAttack, int baseArmor) returns int
    new UnitType(unitId, bounty, baseAttack, baseArmor)
    return unitId

public function createUnitType(int unitId) returns int
    new UnitType(unitId, 0, 0, 0)
    return unitId

public class UnitType

    private static constant unitIdToUnitType = new HashMap<int, UnitType>

    private int unitId
    private int bounty

    private int baseAttack
    private int baseArmor

    construct(int unitId, int bounty, int baseAttack, int baseArmor)
        this.unitId = unitId
        this.bounty = bounty
        this.baseAttack = baseAttack
        this.baseArmor = baseArmor
        unitIdToUnitType.put(unitId, this)

    static function getUnitType(int unitId) returns UnitType
        return unitIdToUnitType.get(unitId)

    function getUnitId() returns integer
        return this.unitId

    function getBounty() returns integer
        return this.bounty

    function getBaseAttack() returns integer
        return this.baseAttack

    function getBaseArmor() returns integer
        return this.baseArmor

function onUnitDeath()
    let dyingUnit = GetTriggerUnit()
    let killingUnit = GetKillingUnit()
    let dyingType = UnitType.getUnitType(dyingUnit.getTypeId())
    let killingPlayer = killingUnit.getOwner()

    if dyingType == null or not killingPlayer.isEnemyOf(dyingUnit.getOwner())
        return
    
    let bounty = dyingType.getBounty()
    
    killingPlayer.addGold(bounty)
    
    createGoldBountyTextTag(dyingUnit, bounty, killingPlayer)

init
    CreateTrigger()
        ..addAction(function onUnitDeath)
        ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)

