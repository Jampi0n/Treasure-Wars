package UnitType

import HashMap
import StandardTextTags
import initlater HeroControl
import PlayerControl
import Constants

public function createUnitType(int unitId, int bounty, int baseAttack, int baseArmor, int hitBox, string modelPath) returns int
    new UnitType(unitId, bounty, baseAttack, baseArmor, hitBox, modelPath)
    return unitId

public function createUnitType(int unitId) returns int
    new UnitType(unitId, 0, 0, 0, 32, "")
    return unitId

public class UnitType

    private static constant unitIdToUnitType = new HashMap<int, UnitType>

    private int unitId
    private int bounty

    private int baseAttack
    private int baseArmor

    private int hitBox

    private string modelPath

    construct(int unitId, int bounty, int baseAttack, int baseArmor, int hitBox, string modelPath)
        objectCount++
        this.unitId = unitId
        this.bounty = bounty
        this.baseAttack = baseAttack
        this.baseArmor = baseArmor
        this.hitBox = hitBox
        this.modelPath = modelPath
        unitIdToUnitType.put(unitId, this)

    static function getUnitType(int unitId) returns UnitType
        return unitIdToUnitType.get(unitId)

    function getUnitId() returns int
        return this.unitId

    function getBounty() returns int
        return this.bounty

    function getBaseAttack() returns int
        return this.baseAttack

    function getBaseArmor() returns int
        return this.baseArmor

    function getHitBox() returns int
        return this.hitBox

    function getModel() returns string
        return this.modelPath

function onUnitDeath()
    let dyingUnit = GetTriggerUnit()
    let killingUnit = GetKillingUnit()
    let dyingType = UnitType.getUnitType(dyingUnit.getTypeId())
    let killingPlayer = killingUnit.getOwner()
    let dyingCPlayer = dyingUnit.getOwner().getCPlayer()

    if dyingType == null
        return
    
    // army unit dies
    if dyingCPlayer.getTeam() == Team.TEAM1 or dyingCPlayer.getTeam() == Team.TEAM2
        let bounty = dyingType.getBounty()
        let xp = dyingUnit.getLevel()*10
        let xpAllyFactor = 0.5
        let bountyAllyFactor = 0.25
        /*
            The killer (if exists) gets full gold / xp.
            The killing team gets bountyAllyFactor/xpAllyFactor of the full gold / xp evenly shared amongst all players except the killer.
        */

        int killerExists = 0
        //the killing player belongs to the enemy team
        if killingPlayer.getCPlayer().getTeam() == CPlayer.invertTeam(dyingCPlayer.getTeam()) and killingPlayer.getId() < 10
            killerExists = 1

        // killer reward
        if killerExists == 1
            killingPlayer.getCPlayer().addGoldEx(bounty)
            if killingPlayer.getId() < MAX_HERO_COUNT
                killingPlayer.getCPlayer().addUnitKill()
            createGoldBountyTextTag(dyingUnit, bounty, killingPlayer)
            //xp

            let killingHero = Hero.getHero(killingPlayer)
            if killingHero != null
                killingHero.toUnit().addXp(xp, true)

        // killer team reward

        // enemy team of dying unit
        let killingAllies = CPlayer.getEnemyHeroPlayers(dyingUnit.getOwner())
        // size of enemy team without killing player and without the army player
        let killingAlliesSize = CPlayer.getTeamHeroCount(CPlayer.invertTeam(dyingCPlayer.getTeam()) ) - killerExists
        
        let teamBounty = bounty * bountyAllyFactor / killingAlliesSize
        let teamXp = xp * xpAllyFactor / killingAlliesSize

        if killingAllies != null
        for CPlayer cPlayer in killingAllies
            player p = cPlayer.getPlayer()
            if p != killingPlayer
                let hero = Hero.getHero(p)
                if hero != null
                    hero.addXp( teamXp)
                    cPlayer.addGoldEx(teamBounty)
        
    
    

init
    CreateTrigger()
        ..addAction(function onUnitDeath)
        ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)

