package Creeps

import LinkedList
import UnitTypeConfig
import HashMap
import ClosureTimers
import Assets
import AbilityObjEditing
import ObjectEditingPreset
import DamageDetection
import General
import HeroControl
import UnitWrapper
import PlayerControl
import UnitType
import StandardTextTags
import Buff

constant int DUMMY_CASTER = compiletime(UNIT_ID_GEN.next())
constant int HEAL_BUFF_ID = compiletime(createDummyBuff())

constant int MAX_CAMP_LEVEL = 20


/*  Normal creeps are owned by neutral hostile and will show their green creep icon.
    Boss creeps are owned by a different player to not show creep icons.
    Instead an icon dummy owned by neutral passive shows the creep camp.*/
constant BUFF_MAP = new HashMap<int, BuffConfiguration>

constant BuffType TURTLE_BUFF = new BuffType(true, false) //return dmg
constant BuffType JUNGLE_STALKER_BUFF = new BuffType(true, false) //hp reg bonus
constant BuffType MURGUL_BUFF = new BuffType(true, false) //attack speed bonus
constant BuffType SEA_GIANT_BUFF = new BuffType(true, false) //str bonus
constant BuffType MAKRURA_BUFF = new BuffType(true, false) //armor bonus
constant BuffType SEA_ELEMENTAL_BUFF = new BuffType(true, false) //mana reg bonus
constant BuffType REVENANT_BUFF = new BuffType(true, true) //dealing damage slows
public constant BuffType REVENANT_SLOW_BUFF = new BuffType(false, true) //dealing damage slows

constant TURTLE_RETURN_RATIO = 15
public constant TURTLE_BUFF_ID = compiletime(createAuraBuff("Turtle Shell", "Returns "+TURTLE_RETURN_RATIO.toString()+"% of the damage the unit takes from attacks to the attacker.", Icons.bTNSeaTurtleGreen))
constant TURTLE_ABILITY_ID = compiletime(createPositiveBuffAbility(1, TURTLE_BUFF_ID, "", ""))

constant JUNGLE_STALKER_HP_REG = 10
constant JUNGLE_STALKER_BUFF_ID = compiletime(createAuraBuff("Jungle Blood", "Heals "+JUNGLE_STALKER_HP_REG.toString()+" hit points per second.", Icons.bTNJungleBeast))
constant JUNGLE_STALKER_ABILITY_ID = compiletime(createPositiveBuffAbility(1, JUNGLE_STALKER_BUFF_ID, "", ""))

constant MURGUL_AS = 20
constant MURGUL_BUFF_ID = compiletime(createAuraBuff("Mur'gul Frenzy", "Increases attack speed by "+MURGUL_AS.toString()+"%.", Icons.bTNMurgulShadowCaster))
constant MURGUL_ABILITY_ID = compiletime(createPositiveBuffAbility(1, MURGUL_BUFF_ID, "", ""))

constant SEA_GIANT_STR = 10
constant SEA_GIANT_BUFF_ID = compiletime(createAuraBuff("Giant Strength", "Increases strength by "+SEA_GIANT_STR.toString()+"%.", Icons.bTNSeaGiantGreen))
constant SEA_GIANT_ABILITY_ID = compiletime(createPositiveBuffAbility(1, SEA_GIANT_BUFF_ID, "", ""))

constant MAKRURA_AR = 25
constant MAKRURA_BUFF_ID = compiletime(createAuraBuff("Makrura Carapace", "Increases armor by "+MAKRURA_AR.toString()+".", Icons.bTNLobstrokkGreen))
constant MAKRURA_ABILITY_ID = compiletime(createPositiveBuffAbility(1, MAKRURA_BUFF_ID, "", ""))

constant SEA_ELEMENTAL_MP_REG = 2
constant SEA_ELEMENTAL_BUFF_ID = compiletime(createAuraBuff("Liquid Energy", "Restores "+SEA_ELEMENTAL_MP_REG.toString()+" mana points per second.", Icons.bTNSeaElemental))
constant SEA_ELEMENTAL_ABILITY_ID = compiletime(createPositiveBuffAbility(1, SEA_ELEMENTAL_BUFF_ID, "", ""))

constant REVENANT_SLOW = 25
public constant REVENANT_BUFF_ID = compiletime(createAuraBuff("Death Curse", "Slows movement speed of all targets damaged by this unit by "+REVENANT_SLOW.toString()+"%.", Icons.bTNDeepLordRevenant))
constant REVENANT_ABILITY_ID = compiletime(createPositiveBuffAbility(1, REVENANT_BUFF_ID, Abilities.unholyAura, "origin"))

public constant REVENANT_SLOW_BUFF_ID = compiletime(createAuraBuff("Death Curse", "This unit is slowed by "+REVENANT_SLOW.toString()+"%.", Icons.bTNCripple))
constant REVENANT_SLOW_ABILITY_ID = compiletime(createPositiveBuffAbility(1, REVENANT_SLOW_BUFF_ID, Abilities.crippleTarget, ""))


function initCreepBuffs()
    var abilityList = new LinkedList<int>
    abilityList.add(TURTLE_ABILITY_ID)
    TURTLE_BUFF.setup(abilityList, TURTLE_BUFF_ID)

    abilityList = new LinkedList<int>
    abilityList.add(JUNGLE_STALKER_ABILITY_ID)
    JUNGLE_STALKER_BUFF.setup(abilityList, JUNGLE_STALKER_BUFF_ID)

    abilityList = new LinkedList<int>
    abilityList.add(MURGUL_ABILITY_ID)
    MURGUL_BUFF.setup(abilityList, MURGUL_BUFF_ID)

    abilityList = new LinkedList<int>
    abilityList.add(SEA_GIANT_ABILITY_ID)
    SEA_GIANT_BUFF.setup(abilityList, SEA_GIANT_BUFF_ID)

    abilityList = new LinkedList<int>
    abilityList.add(MAKRURA_ABILITY_ID)
    MAKRURA_BUFF.setup(abilityList, MAKRURA_BUFF_ID)

    abilityList = new LinkedList<int>
    abilityList.add(SEA_ELEMENTAL_ABILITY_ID)
    SEA_ELEMENTAL_BUFF.setup(abilityList, SEA_ELEMENTAL_BUFF_ID)

    abilityList = new LinkedList<int>
    abilityList.add(REVENANT_ABILITY_ID)
    REVENANT_BUFF.setup(abilityList, REVENANT_BUFF_ID)

    abilityList = new LinkedList<int>
    abilityList.add(REVENANT_SLOW_ABILITY_ID)
    REVENANT_SLOW_BUFF.setup(abilityList, REVENANT_SLOW_BUFF_ID)

    JUNGLE_STALKER_BUFF.setPeriodicTime(0.25)
    JUNGLE_STALKER_BUFF.addPeriodicFunction((Buff whichBuff) -> begin
        let target = whichBuff.getTarget()
        target.healHP(target, 0.25 * JUNGLE_STALKER_HP_REG)
    end)

    SEA_ELEMENTAL_BUFF.setPeriodicTime(0.25)
    SEA_ELEMENTAL_BUFF.addPeriodicFunction((Buff whichBuff) -> begin
        let target = whichBuff.getTarget()
        target.healMana(target, 0.25 * SEA_ELEMENTAL_MP_REG)
    end)

    MURGUL_BUFF.addFirstFunction((Buff whichBuff) -> begin
        whichBuff.getTarget().wrapper().addStatAbsoluteBonus(Stat.AS, MURGUL_AS)
    end)
    MURGUL_BUFF.addEndFunction((Buff whichBuff) -> begin
        whichBuff.getTarget().wrapper().addStatAbsoluteBonus(Stat.AS, -MURGUL_AS)
    end)

    SEA_GIANT_BUFF.addFirstFunction((Buff whichBuff) -> begin
        whichBuff.getTarget().wrapper().addStatRelativeBonus(Stat.STR, SEA_GIANT_STR * 10)
    end)
    SEA_GIANT_BUFF.addEndFunction((Buff whichBuff) -> begin
        whichBuff.getTarget().wrapper().addStatRelativeBonus(Stat.STR, -SEA_GIANT_STR * 10)
    end)

    MAKRURA_BUFF.addFirstFunction((Buff whichBuff) -> begin
        whichBuff.getTarget().wrapper().addStatAbsoluteBonus(Stat.AR, MAKRURA_AR)
    end)
    MAKRURA_BUFF.addEndFunction((Buff whichBuff) -> begin
        whichBuff.getTarget().wrapper().addStatAbsoluteBonus(Stat.AR, -MAKRURA_AR)
    end)

    REVENANT_SLOW_BUFF.addFirstFunction((Buff whichBuff) -> begin
        whichBuff.getTarget().wrapper().addStatRelativeBonus(Stat.MS, -REVENANT_SLOW * 10)
    end)
    REVENANT_SLOW_BUFF.addEndFunction((Buff whichBuff) -> begin
        whichBuff.getTarget().wrapper().addStatRelativeBonus(Stat.MS, REVENANT_SLOW * 10)
    end)


    new BuffConfiguration(MURGUL_BUFF, 40)
    ..addToUnitType(MURGUL_MAGE)
    new BuffConfiguration(MURGUL_BUFF, -1)
    ..addToUnitType(MURGUL_MELEE)

    new BuffConfiguration(MAKRURA_BUFF, 40)
    ..addToUnitType(MAKRURA_LORD)
    new BuffConfiguration(MAKRURA_BUFF, -1)
    ..addToUnitType(MAKRURA_SNAPPER)

    new BuffConfiguration(SEA_GIANT_BUFF, 40)
    ..addToUnitType(SEA_GIANT)

    new BuffConfiguration(SEA_ELEMENTAL_BUFF, 40)
    ..addToUnitType(SEA_ELEMENTAL)

    new BuffConfiguration(JUNGLE_STALKER_BUFF, 40)
    ..addToUnitType(JUNGLE_BEAST_ELDER)
    new BuffConfiguration(JUNGLE_STALKER_BUFF, -1)
    ..addToUnitType(JUNGLE_BEAST)

    new BuffConfiguration(REVENANT_BUFF, 70)
    ..addToUnitType(REVENANT_BOSS)
    new BuffConfiguration(REVENANT_BUFF, -1)
    ..addToUnitType(REVENANT)

    new BuffConfiguration(TURTLE_BUFF, 40)
    ..addToUnitType(TURTLE_GARGANTUAN)
    new BuffConfiguration(TURTLE_BUFF, -1)
    ..addToUnitType(TURTLE_GIANT)



class BuffConfiguration
    BuffType customBuff
    BuffType bountyBuff
    real bountyDuration
    static constant unitTypeToBuffConfig = new HashMap<int, BuffConfiguration>

    construct(BuffType whichBuff, real bountyDuration)
        this.customBuff = whichBuff
        this.bountyBuff = bountyDuration > 0 ? whichBuff : null
        this.bountyDuration = bountyDuration

    function addToUnitType(int unitTypeId)
        unitTypeToBuffConfig.put(unitTypeId, this)
        

unit DUMMY_HEALER

class Creep
    int unitTypeId
    vec2 spawnPos
    angle facing

    construct(unit baseUnit)
        this.unitTypeId = baseUnit.getTypeId()
        this.spawnPos = baseUnit.getPos()
        this.facing = baseUnit.getFacingAngle()

    construct(int unitTypeId, vec2 spawnPos, angle facing)
        this.unitTypeId = unitTypeId
        this.spawnPos = spawnPos
        this.facing = facing




public class CreepCamp



    private static constant unitToCamp = new HashMap<unit, CreepCamp>
    private static constant allCreeps = CreateGroup()
    private static constant creepCamps = new LinkedList<CreepCamp>
    //private LinkedList<unit> creepUnits
    private LinkedList<Creep> creepTypes

    private int alive
    private int totalLevel
    private real respawnDuration = 10
    private int campLevel = 0
    private boolean usesIcon = false
    private unit iconUnit = null
    private vec2 campPosition //this is the center of the creep camp

    construct()
        alive = 0
        totalLevel = 0
        creepCamps.add(this)
        creepTypes = new LinkedList<Creep>

    private function initCampPosition()
        var pos = vec2(0,0)
        for c in creepTypes
            if c.unitTypeId == REVENANT_BOSS
                usesIcon = true
        for c in creepTypes
            pos+=c.spawnPos


        campPosition = pos * (1.0/creepTypes.size())

        if usesIcon
            iconUnit = CreateUnit(players[CREEP_ICON_OWNER], REVENANT_ICON, campPosition.x, campPosition.y, 0)
            
    function getCampPosition() returns vec2
        return this.campPosition

    
    private function addUnitInit(unit creepUnit)
        SetUnitAcquireRange(creepUnit, 200)
        allCreeps.addUnit(creepUnit)
        alive++
        unitToCamp.put(creepUnit, this)
        creepTypes.add(new Creep(creepUnit))
        totalLevel += UnitType.getUnitType(creepUnit.getTypeId()).getPowerLevel()

        let customBuff = BuffConfiguration.unitTypeToBuffConfig.get(creepUnit.getTypeId()).customBuff
        if customBuff != null
            doAfter(0.01) ->
                creepUnit.addBuff(creepUnit, -1, customBuff, 1)
    
    private function addUnitRespawn(unit creepUnit)
        SetUnitAcquireRange(creepUnit, 200)
        allCreeps.addUnit(creepUnit)
        alive++
        unitToCamp.put(creepUnit, this)
        creepUnit.wrapper().addStatRelativeBonus(Stat.STR, campLevel*200)
        creepUnit.wrapper().addStatRelativeBonus(Stat.HP, campLevel*200)

    private function respawn()
        if campLevel < MAX_CAMP_LEVEL
            campLevel++

        let owner = usesIcon ? players[CREEP_SPECIAL_OWNER] : players[CREEP_NORMAL_OWNER]

        for c in creepTypes
            let creepUnit = createUnit(owner, c.unitTypeId, c.spawnPos, c.facing)
            addUnitRespawn(creepUnit)

            let buffConfig = BuffConfiguration.unitTypeToBuffConfig.get(c.unitTypeId)
            if buffConfig != null and buffConfig.customBuff != null
                creepUnit.addBuff(creepUnit, -1, buffConfig.customBuff, 1)

        if usesIcon
            iconUnit.show()


    private static function onKill(unit u, unit killer)
        DUMMY_HEALER
            ..setPos(u.getPos())
        //for i = 1 to count
        DUMMY_HEALER.issueTargetOrder("acidbomb", killer)

        let buffConfig = BuffConfiguration.unitTypeToBuffConfig.get(u.getTypeId())
        if buffConfig != null and buffConfig.bountyBuff != null
            killer.addBuff(killer, buffConfig.bountyDuration, buffConfig.bountyBuff, 1)

        let bounty = UnitType.getUnitType(u.getTypeId()).getBounty()
        createGoldBountyTextTag(u, bounty, killer.getOwner())
        killer.getOwner().getCPlayer()
            ..addUnitKill()
            ..addGoldEx(bounty)

        killer.healHP(killer, killer.getMaxHP()*0.05)
        killer.healMana(killer, killer.getMaxMana()*0.05)

        Hero.getHero(killer).addXp(u.getLevel()*4.)
    

    private static function onDeath()
        let u = GetTriggerUnit()
        if u.getTypeId() != HYDRA and u.getTypeId() != DRAGON_TURTLE
            let camp = unitToCamp.get(u)
            if camp != null
                unitToCamp.remove(u)
                allCreeps.removeUnit(u)
                camp.alive--
                if camp.alive == 0
                    if camp.usesIcon
                        camp.iconUnit.hide()
                    doAfter(camp.respawnDuration, -> camp.respawn())

            let killer = GetKillingUnit()
            if killer != null
                let pId = killer.getOwner().getId()
                if pId <= HERO_PLAYER_TEAM_2_LAST
                    onKill(u, Hero.getHero(pId).toUnit())




    private static function onDamage()
        let target = GetTriggerUnit()
        if(target.hasAbility(HEAL_BUFF_ID))
            target.removeAbility(HEAL_BUFF_ID)

    private static function initCreep(unit creepUnit, CreepCamp camp) returns CreepCamp
        CreepCamp ret = null
        if not allCreeps.contains(creepUnit)

            CreepCamp newCamp = camp == null ? new CreepCamp : camp
            newCamp.addUnitInit(creepUnit)

            group g = CreateGroup()
            g.enumUnitsInRange(creepUnit.getPos(), 500)
            unit u
            
            while true
                u = FirstOfGroup(g)
                if u == null
                    break
                g.removeUnit(u)
                initCreep(u, newCamp)

            
            g.destr()
            ret = newCamp
        return ret


    protected static function initialize()

        unit u
        GroupEnumUnitsOfPlayer(ENUM_GROUP, players[CREEP_NORMAL_OWNER], null)
        while true
            u = FirstOfGroup(ENUM_GROUP)
            if u == null
                break
            ENUM_GROUP.removeUnit(u)
            let initializedCamp = initCreep(u, null)
            if initializedCamp != null
                initializedCamp.initCampPosition()

        GroupEnumUnitsOfPlayer(ENUM_GROUP, players[CREEP_SPECIAL_OWNER], null)
        while true
            u = FirstOfGroup(ENUM_GROUP)
            if u == null
                break
            ENUM_GROUP.removeUnit(u)
            if u.getTypeId() != HYDRA and u.getTypeId() != DRAGON_TURTLE
                let initializedCamp = initCreep(u, null)
                if initializedCamp != null
                    initializedCamp.initCampPosition()

        CreateTrigger()
        ..registerPlayerUnitEvent(players[CREEP_NORMAL_OWNER], EVENT_PLAYER_UNIT_DEATH, null)
        ..registerPlayerUnitEvent(players[CREEP_SPECIAL_OWNER], EVENT_PLAYER_UNIT_DEATH, null)
        ..addAction(function onDeath)

        addOnDamageFunc(Condition(function onDamage))

        DUMMY_HEALER = createUnit(DUMMY_PLAYER, DUMMY_CASTER, gg_rct_CenterMid.getCenter(), angle(0))

        for c in creepCamps
            c.respawnDuration = c.totalLevel * 4.

init
    initCreepBuffs()
    CreepCamp.initialize()


@compiletime
function objectData()
    let dummy = new UnitDefinition(DUMMY_CASTER, 'hfoo')
    let rootId = ABIL_ID_GEN.next()
    let root = new AbilityDefinitionRootAncientProtector(rootId)
    let missileId = ABIL_ID_GEN.next()
    let healMissile = createTargetMissile(missileId, HEAL_BUFF_ID)

    dummy
        ..setNormalAbilities(commaList('Aloc', rootId, missileId))
        ..setAnimationCastBackswing(0)
        ..setAnimationCastPoint(0)
        ..setAttacksEnabled(0)
        ..setCollisionSize(0)
        ..setFoodCost(0)
        ..setUnitSoundSet("")
        ..setShadowImageUnit("")
        ..setModelFile("")

    root
        ..setRootedWeapons(1, "0")
        ..setUprootedWeapons(1, "0")

    healMissile
        ..setMissileArc(0)
        ..setMissileArt(Abilities.targetArtLumber)
        ..setLevels(1)
        ..setManaCost(1, 0)
        ..setCooldown(1, 0)
        ..setCastRange(1, 92083)
        ..setHeroAbility(false)
        ..setTargetsAllowed(1, "air,enemies,friend,ground,invulnerable,neutral,structure,vulnerable")
