package UnitWrapper

import UnitIndexer
import HashMap
import initlater Buff
import initlater General
import UnitType
import Upgrades
import initlater HeroControl
import ErrorHandling
import LinkedList

import public BonusMod

public interface CalculateTotalBonus
    function calculate(UnitWrapper whichWrapper, Stat whichStat)

/**
    Every unit gets a unit wrapper

    Contains functionality every unit needs in one place, so only one HashMap is needed.
**/
public class UnitWrapper

    constant static CalculateTotalBonus defaultCalcualtion = (UnitWrapper whichWrapper, Stat whichStat) -> (begin
        int stat = whichStat.toInt()
        whichWrapper.statsTotalBonus[stat] = ((whichWrapper.getStatAbsoluteBonus(whichStat)) * (1. + whichWrapper.getStatRelativeBonus(whichStat)/1000 ) + (whichWrapper.getStatBaseValue(whichStat) * whichWrapper.getStatRelativeBonus(whichStat)/1000) ).round()
    end)

    private CalculateTotalBonus bonusCalculation = defaultCalcualtion

    protected static unit array allUnits
    protected static int unitWrapperCount = 0

    protected int index

    private static constant unitMap = new HashMap<unit, UnitWrapper>()
    private unit assocUnit

    protected real currentMovementSpeed
    protected real defaultMovementSpeed

    private int array[STAT_COUNT] statBaseValue
    //has no effect, is just needed to determine the actual bonus for relative bonus

    private int array[STAT_COUNT] statsAbsoluteBonus //default = 0
    private int array[STAT_COUNT] statsRelativeBonus //default = 0.00

    private int array[STAT_COUNT] statsAbsoluteBonusReal //default = 0
    /*
        Use integer to avoid rounding errors. 1000 means 100% or 1
    */
    int array[STAT_COUNT] statsTotalBonus //default = 0

    private static constant unnkownUnitTypes = new LinkedList<int>()

    protected BuffList buffList

    private int blueCount = 0

    static function create(unit assocUnit)
        if not unitMap.has(assocUnit)
            new UnitWrapper(assocUnit)

    construct(unit assocUnit)
        objectCount++

        this.assocUnit = assocUnit

        allUnits[unitWrapperCount] = this.assocUnit
        this.index = unitWrapperCount
        unitWrapperCount++


        unitMap.put(assocUnit, this)

        this.currentMovementSpeed = assocUnit.getMoveSpeed()
        this.defaultMovementSpeed = GetUnitDefaultMoveSpeed(this.assocUnit)

        this.buffList = null // new BuffList  create BuffList only when needed

        for int i = 0 to STAT_COUNT-1
            statsAbsoluteBonus[i] = 0
            statsAbsoluteBonusReal[i] = 0
            statsRelativeBonus[i] = 0
            statsTotalBonus[i] = 0

        //Base values should never change for units and only change for heroes on level up.

        statBaseValue[Stat.STR.toInt()] = this.assocUnit.getStr(false)
        statBaseValue[Stat.AGI.toInt()] = this.assocUnit.getAgi(false)
        statBaseValue[Stat.INT.toInt()] = this.assocUnit.getInt(false)

        let uType = UnitType.getUnitType(this.assocUnit.getTypeId())

        if uType != null
            updateBaseStatsUnits()
        else if this.assocUnit.isType(UNIT_TYPE_HERO)
            statBaseValue[Stat.AD.toInt()] = statBaseValue[Stat.STR.toInt()]
            statBaseValue[Stat.AR.toInt()] = 0
        else
            if not this.assocUnit.isType(UNIT_TYPE_STRUCTURE)
                if this.assocUnit.getAbilityLevel('Aloc') == 0
                    if not unnkownUnitTypes.contains(this.assocUnit.getTypeId())
                        unnkownUnitTypes.add(this.assocUnit.getTypeId())
                        print("Warning unnkown unit type: "+GetUnitName(this.assocUnit))
            statBaseValue[Stat.AD.toInt()] = 0
            statBaseValue[Stat.AR.toInt()] = 0

        statBaseValue[Stat.AS.toInt()] = 0 //not needed as this is always a relative bonus
        
        statBaseValue[Stat.HP.toInt()] = this.assocUnit.getMaxHP().toInt()
        statBaseValue[Stat.HR.toInt()] = 0
        
        statBaseValue[Stat.MP.toInt()] = this.assocUnit.getMaxMana().toInt()
        statBaseValue[Stat.MR.toInt()] = 0
        statBaseValue[Stat.MS.toInt()] = this.defaultMovementSpeed.toInt()
    
    ondestroy
        objectCount--
        for int i = 0 to STAT_COUNT-1
            statsAbsoluteBonus[i] = 0
            statsRelativeBonus[i] = 0
            statsTotalBonus[i] = 0

    function updateBaseStatsUnits()
        let uType = UnitType.getUnitType(this.assocUnit.getTypeId())
        if uType != null
            statBaseValue[Stat.AD.toInt()] = uType.getBaseAttack() + uType.getUpgradeAttack(this.assocUnit.getOwner())
            statBaseValue[Stat.AR.toInt()] = uType.getBaseArmor() + uType.getUpgradeArmor(this.assocUnit.getOwner())
            //willpower is same as armor
            statBaseValue[Stat.AGI.toInt()] = uType.getBaseArmor() + uType.getUpgradeArmor(this.assocUnit.getOwner())

    function updateBaseStatsHero()
        if not this.assocUnit.isType(UNIT_TYPE_HERO)
            print("Base stats for non-hero units are constant and must not be updated.")
        statBaseValue[Stat.STR.toInt()] = this.assocUnit.getStr(false)
        statBaseValue[Stat.AGI.toInt()] = this.assocUnit.getAgi(false)
        statBaseValue[Stat.INT.toInt()] = this.assocUnit.getInt(false)

        statBaseValue[Stat.AD.toInt()] = statBaseValue[Stat.STR.toInt()] + GetPlayerTechCount(this.assocUnit.getOwner(), UPG_AD, true)
        statBaseValue[Stat.AR.toInt()] = GetPlayerTechCount(this.assocUnit.getOwner(), UPG_AR, true)
        statBaseValue[Stat.AS.toInt()] = 0
        
        statBaseValue[Stat.HP.toInt()] = 400 + GetPlayerTechCount(this.assocUnit.getOwner(), UPG_HP, true) * 15
        statBaseValue[Stat.HR.toInt()] = 0
        
        statBaseValue[Stat.MP.toInt()] = 100 + GetPlayerTechCount(this.assocUnit.getOwner(), UPG_MP, true) * 10
        statBaseValue[Stat.MR.toInt()] = 0
        statBaseValue[Stat.MS.toInt()] = this.defaultMovementSpeed.toInt()

    protected static function getWrapper(unit whichUnit) returns UnitWrapper
        return unitMap.get(whichUnit)

    //custom destroy function, so unit wrapper is destroyed last and can be used in the clean up routines
    protected function destr()

        

        //the dispel function must be executed before the unit wrapper is destroyed
        if this.buffList != null
            for Buff b in this.buffList.getLinkedList()
                b.dispel()

            destroy this.buffList

        //remove unit wrapper
        unitWrapperCount--
        allUnits[this.index] = allUnits[unitWrapperCount]
        unitMap.remove(this.assocUnit)
        destroy this


    function createBuffList()
        if this.buffList == null
            this.buffList = new BuffList()
        else
            error("This unit wrapper already has a buffList")


    function setBonusCalculation(CalculateTotalBonus bonusCalculation)
        this.bonusCalculation = bonusCalculation

    /**
    Updates the total stat bonus based on base stat, absolute stat bonus and relative stat bonus
    **/
    function updateTotalStatBonus(Stat whichStat)
        this.bonusCalculation.calculate(this, whichStat)
        this.applyTotalStatBonus(whichStat)
        

    function applyTotalStatBonus(Stat whichStat)
        if whichStat != Stat.MS and whichStat != Stat.HR and whichStat!= Stat.MR and whichStat!= Stat.HP and whichStat!= Stat.MP
            this.toUnit().setBonus(whichStat, this.statsTotalBonus[whichStat.toInt()])
            //update ability tooltips
            if this.toUnit().isType(UNIT_TYPE_HERO) and (whichStat == Stat.STR or whichStat == Stat.INT)
                let hero = Hero.getHero(this.toUnit())
                if hero != null
                    let hType = hero.getHeroType()
                    if whichStat == Stat.STR
                        hType.updateTooltipsStr(this.toUnit())
                    else
                        hType.updateTooltipsInt(this.toUnit())
                    
        else
            if whichStat == Stat.MS
                this.toUnit().setMovementSpeed( this.getStatBaseValue(whichStat) + this.statsTotalBonus[whichStat.toInt()].toReal() )
            else if whichStat == Stat.HP
                this.toUnit().setMaxHPKeepRatio(this.getStatTotalValue(Stat.HP))
            else if whichStat == Stat.MP
                this.toUnit().setMaxManaKeepRatio(this.getStatTotalValue(Stat.MP))

    /**
    Sets the absolute stat bonus and updates the total bonus.
    **/
    function setStatAbsoluteBonus(Stat whichStat, int newValue)
        int stat = whichStat.toInt()
        this.statsAbsoluteBonus[stat] = newValue
        updateTotalStatBonus(whichStat)


    /**
    If real values are needed, the variable statsAbsoluteBonusReal keeps track of the bonus and increases the standard int value,
    as soon as it is over 1.
    **/  
    function addStatAbsoluteBonusReal(Stat whichStat, int plusValue)
        int stat = whichStat.toInt()
        this.statsAbsoluteBonusReal[stat] += plusValue
        if this.statsAbsoluteBonusReal[stat].abs() >= 1000
            addStatAbsoluteBonus(whichStat, (this.statsAbsoluteBonusReal[stat]/1000).toInt() )
            this.statsAbsoluteBonusReal[stat] -= (this.statsAbsoluteBonusReal[stat]/1000).toInt()*1000
            

    /**
    Sets the relative stat bonus and updates the total bonus.
    **/
    function setStatRelativeBonus(Stat whichStat, int newValue)
        int stat = whichStat.toInt()
        this.statsRelativeBonus[stat] = newValue
        updateTotalStatBonus(whichStat)

    function addStatAbsoluteBonus(Stat whichStat, int plusValue)
        this.setStatAbsoluteBonus(whichStat, this.statsAbsoluteBonus[whichStat.toInt()] + plusValue)

    function addStatRelativeBonus(Stat whichStat, int plusValue)
        this.setStatRelativeBonus(whichStat, this.statsRelativeBonus[whichStat.toInt()] + plusValue)

    function printStats()
        for i = 0 to STAT_COUNT-1
            printStat(i castTo Stat)

    function printStat(Stat whichStat)
        int stat = whichStat.toInt()
        print(whichStat.toString()+" ( "+statBaseValue[stat].toString()+" + "+statsAbsoluteBonus[stat].toString()+" ) * "+statsRelativeBonus[stat].toString() + "->" +statsTotalBonus[stat].toString() )

    function toUnit() returns unit
        return this.assocUnit

    function getStatAbsoluteBonus(Stat whichStat) returns int
        return this.statsAbsoluteBonus[whichStat.toInt()]

    function getStatRelativeBonus(Stat whichStat) returns int
        return this.statsRelativeBonus[whichStat.toInt()]
    
    function getStatBaseValue(Stat whichStat) returns int
        return this.statBaseValue[whichStat.toInt()]

    function getStatTotalBonus(Stat whichStat) returns int
        return this.statsTotalBonus[whichStat.toInt()]

    function getStatTotalValue(Stat whichStat) returns int
        return this.getStatTotalBonus(whichStat) + this.getStatBaseValue(whichStat)

    function incBlue()
        blueCount++
        if blueCount == 1
            this.assocUnit.setVertexColor(140, 220, 255, 255)

    function decBlue()
        blueCount--
        if blueCount == 0
            this.assocUnit.setVertexColor(255, 255, 255, 255)

public function unit.wrapper() returns UnitWrapper
    return UnitWrapper.getWrapper(this)

public function unit.getCurrentMovementSpeed() returns real
    return this.wrapper().currentMovementSpeed

public function unit.getDefaultMovementSpeed() returns real
    return this.wrapper().defaultMovementSpeed

public function unit.updateDefaultMovementSpeed()
    if this.isType(UNIT_TYPE_HERO)
        this.wrapper().defaultMovementSpeed = GetUnitDefaultMoveSpeed(this) + GetPlayerTechCount(this.getOwner(), UPG_MS, true) 
        //print(GetUnitDefaultMoveSpeed(this) + GetPlayerTechCount(this.getOwner(), UPG_MS, true))

public function unit.setMovementSpeed(real newSpeed)
    this.wrapper().currentMovementSpeed = newSpeed
    //print("set ms to "+newSpeed.toString())
    this.setMoveSpeed(newSpeed)



public function unit.getBuffList() returns BuffList
    return this.wrapper().buffList

function regenerate()
    for i = 0 to MAX_HERO_COUNT-1
        let hero = Hero.getHero(i)
        if hero != null
            let heroUnit = hero.toUnit()
            if heroUnit.isAlive()
                heroUnit.healHP(heroUnit, heroUnit.wrapper().statsTotalBonus[Stat.HR.toInt()]/100)
                heroUnit.healMana(heroUnit, heroUnit.wrapper().statsTotalBonus[Stat.MR.toInt()]/100)


    /*for i = 0 to UnitWrapper.unitWrapperCount-1
        unit u = UnitWrapper.allUnits[i]
        
        if u.isAlive()
            u.healHP(u.wrapper().statsTotalBonus[Stat.HR.toInt()]/100)
            
            u.healMana(u.wrapper().statsTotalBonus[Stat.MR.toInt()]/100)

            if(u.isType(UNIT_TYPE_HERO)) and false
                print(u.wrapper().statsTotalBonus[Stat.HR.toInt()]/100)
                print(u.wrapper().statsTotalBonus[Stat.MR.toInt()]/100)*/

init
    onUnitIndex(() -> UnitWrapper.create(getIndexedUnit()))
    onUnitDeindex(() -> getDeindexedUnit().wrapper().destr() )

    CreateTrigger()
        ..addAction(function regenerate)
        ..registerTimerEvent(0.1, true)

    CreateTrigger()
        ..registerPlayerChatEvent(players[0], "-s", true)
        ..addAction(() -> (begin
            Hero.getHero(players[0]).toUnit().wrapper().printStats()
        end))