package Buff

import TimerUtils
import LinkedList
import UnitIndexer
import HashMap
import InstantDummyCaster

/*
Idea: each unit can have every buff only once

The buff object contains dynamic information and its type
The type contains static information

Dynamic:
caster, target, duration
Static:
aura based ability and corresponding buff

Reapplying the same buff type does not create a new buff object, but rather increases duration of the previous one
and updates caster and other dynamic duration.

Buff types can have closures that will be executed in certain situations:
onFirst -> buff is used on a unit that does not have the buff
onStack -> buff is used on a unit that does have the buff
onApply -> is used on a unit
onExpire -> duration runs out
onDispel -> buff removed before duration runs out: dispel, death, invulnerability, ...
To detect this: use native buff management of wc3
The buff abilities must not work on dead or invulnerable units for example.
onEnd -> buff gone in any way

Different levels of the same buff:
This should only happen when a hero levels up and has now a stronger spell.
Therefore one can safely overwrite the old buff.
Realization:
1. stats of buffs as dynamic information -> can easily be overwritten
2. multiple buff types for same buff with different levels -> how is the same buff with a different level removed?

Ability List for a buff. Each ability inside this list should only be used for this buff.

Duration is fixed when the buff is applied -> use one shot timer


*/

public class BuffType

    /*

    onFirst -> buff is used on a unit that does not have the buff
    onStack -> buff is used on a unit that does have the buff
    onApply -> is used on a unit
    onExpire -> duration runs out
    onDispel -> buff removed before duration runs out: dispel, death, invulnerability, ...
    To detect this: use native buff management of wc3
    The buff abilities must not work on dead or invulnerable units for example.
    onEnd -> buff gone in any way

    */
    protected trigger onFirst
    protected trigger onStack
    protected trigger onApply
    protected trigger onExpire
    protected trigger onDispel
    protected trigger onEnd
    protected trigger onPeriodicTrigger

    private real periodicTime = 1

    private constant int dummyAbilityId
    private constant int dummyOrderId

    private boolean magical
    private boolean positive
    private int buffId
    private LinkedList<int> abilities

    /** This buff is applied by using a dummy caster to cast the ability on the target. */
    construct(int abilityId, string orderString, int buffId, boolean positive, boolean magical)
        //onFirst -> cast the spell
        //onEnd -> dispel the buff
        this.positive = positive
        this.magical = magical

        this.dummyAbilityId = abilityId
        this.buffId = buffId
        this.dummyOrderId = OrderId(orderString)
        this.onFirst = CreateTrigger()
            ..addAction(function castDummySpell)
        this.onEnd = CreateTrigger()
            ..addAction(function removeDummyBuff)



    /** This buff is applied by placing a hidden aura ability on the target. */
    construct(LinkedList<int> abilities, int buffId, boolean positive, boolean magical)
        //onFirst -> add the aura
        //onEnd -> remove aura and buff
        this.positive = positive
        this.magical = magical

        this.buffId = buffId
        this.abilities = abilities
        this.onFirst = CreateTrigger()
            ..addAction(function addAuraAbility)
        this.onEnd = CreateTrigger()
            ..addAction(function removeAuraAbility)

    /* empty constructor, to be able to use constants */
    construct(boolean positive, boolean magical)
        this.positive = positive
        this.magical = magical

    function setup(LinkedList<int> abilities, int buffId)
        //onFirst -> add the aura
        //onEnd -> remove aura and buff
        this.buffId = buffId
        this.abilities = abilities
        this.onFirst = CreateTrigger()
        this.addFirstFunction(function addAuraAbility)
        this.addEndFunction(function removeAuraAbility)

    static function printStatus()
        let currentBuff = Buff.getTriggerBuff()
        let target = currentBuff.getTarget()
        print(target.getName()+" has buff "+ currentBuff.getRemaining().toString())

    static function castDummySpell()
        let currentBuff = Buff.getTriggerBuff()
        let buffType = currentBuff.getBuffType()
        let caster = currentBuff.getCaster()
        let target = currentBuff.getTarget()
        InstantDummyCaster.castTarget(caster.getOwner(), buffType.dummyAbilityId, 1, buffType.dummyOrderId, target, target.getPos())


    static function removeDummyBuff()
        let currentBuff = Buff.getTriggerBuff()
        let buffType = currentBuff.getBuffType()
        let target = currentBuff.getTarget()
        target.removeAbility(buffType.buffId)


    static function addAuraAbility()
        let currentBuff = Buff.getTriggerBuff()
        let buffType = currentBuff.getBuffType()
        let target = currentBuff.getTarget()
        buffType.abilities.forEach( (int abilityId ) -> (begin
            target.addAbility(abilityId)
            target.setAbilityLevel(abilityId, currentBuff.getLevel())
        end) )

    static function removeAuraAbility()
        let currentBuff = Buff.getTriggerBuff()
        let buffType = currentBuff.getBuffType()
        let target = currentBuff.getTarget()
        buffType.abilities.forEach( (int abilityId ) -> target.removeAbility(abilityId))
        target.removeAbility(buffType.buffId)

    function setPeriodicTime(real newTime)
        this.periodicTime = newTime

    function getPeriodicTime() returns real
        return this.periodicTime

    function isMagical() returns boolean
        return this.magical

    function isPositive() returns boolean
        return this.positive

    function addFirstFunction(code cb)
        if(this.onFirst==null)
            this.onFirst = CreateTrigger()
        this.onFirst.addAction(cb)

    function addStackFunction(code cb)
        if(this.onStack==null)
            this.onStack = CreateTrigger()
        this.onStack.addAction(cb)

    function addApplyFunction(code cb)
        if(this.onApply==null)
            this.onApply = CreateTrigger()
        this.onApply.addAction(cb)

    function addExpireFunction(code cb)
        if(this.onExpire==null)
            this.onExpire = CreateTrigger()
        this.onExpire.addAction(cb)

    function addDispelFunction(code cb)
        if(this.onDispel==null)
            this.onDispel = CreateTrigger()
        this.onDispel.addAction(cb)

    function addEndFunction(code cb)
        if(this.onEnd==null)
            this.onEnd = CreateTrigger()
        this.onEnd.addAction(cb)

    function addPeriodicFunction(code cb)
        if(this.onPeriodicTrigger==null)
            this.onPeriodicTrigger = CreateTrigger()
        this.onPeriodicTrigger.addAction(cb)

/** Keeps track of the buffs a certain unit has.
*/
public class BuffList 

    private static constant unitBuffList = new HashMap<unit, BuffList>
    private LinkedList<Buff> linkedList

    construct()
        linkedList = new LinkedList<Buff>

    static function onIndex()
        BuffList newList = new BuffList()
        unitBuffList.put(getIndexedUnit(), newList)

    function add(Buff newBuff)
        this.linkedList.add(newBuff)

    function remove(Buff removeBuff)
        this.linkedList.remove(removeBuff)

    static function onDeindex()
        let removeList = unitBuffList.get(getDeindexedUnit())
        unitBuffList.remove(getDeindexedUnit())
        if(removeList!=null)
            destroy removeList

    static function getBuffOfType(unit target, BuffType buffType) returns Buff
        let buffList = unitBuffList.get(target)
        let iter = buffList.linkedList.iterator()
        while(iter.hasNext())
            let next = iter.next()
            if(next.getBuffType() == buffType)
                return next
        destroy iter
        return null

    static function hasBuffType(unit target, BuffType buffType) returns boolean
        return getBuffOfType(target, buffType) != null

    static function hasBuff(unit target, Buff whichBuff) returns boolean
        let buffList = unitBuffList.get(target)
        let iter = buffList.linkedList.iterator()
        while(iter.hasNext())
            let next = iter.next()
            if(next == whichBuff)
                return true
        destroy iter
        return false
    
    static function getBuffList(unit target) returns BuffList
        return unitBuffList.get(target)

    function getLinkedList() returns LinkedList<Buff>
        return this.linkedList

    ondestroy
        for Buff b in this.linkedList
            b.dispel()

        destroy linkedList



public class Buff

    private unit caster
    private unit target
    private int level
    private BuffType buffType
    private timer expireTimer
    private trigger onFirst
    private trigger onStack
    private trigger onApply
    private trigger onExpire
    private trigger onDispel
    private trigger onEnd
    private trigger onPeriodicTrigger
    private timer periodicTimer = null

    private static Buff currentBuff 

    construct(unit target, unit caster, real duration, BuffType buffType, int level)
        this.caster = caster
        this.target = target
        this.level = level
        this.expireTimer = getTimer()
            ..setData(this castTo int)
            ..start(duration, function expireStatic)
        this.buffType = buffType
        this.onFirst = buffType.onFirst
        this.onStack = buffType.onStack
        this.onApply = buffType.onApply
        this.onExpire = buffType.onExpire
        this.onDispel = buffType.onDispel
        this.onEnd = buffType.onEnd
        this.onPeriodicTrigger = buffType.onPeriodicTrigger
        if(this.onPeriodicTrigger!=null)
            this.periodicTimer = getTimer()
                ..setData(this castTo int)
                ..startPeriodic(buffType.getPeriodicTime(), function onPeriodicStatic)
        else
            this.periodicTimer = null

        currentBuff = this
        let oldBuff = BuffList.getBuffOfType(this.target, this.buffType)

        if(this.onApply!=null)
            this.onApply.execute()

        if(oldBuff!=null)
            //print("stack")
            if(this.onStack!=null)
                this.onStack.execute()
            oldBuff.update(this.caster, duration)
            destroy this
        else
            //print("first")
            BuffList.getBuffList(target).add(this)
            if(this.onFirst!=null)
                this.onFirst.execute()

        //print(this.expireTimer.getRemaining())
        

    private function onPeriodic()
        currentBuff = this
        if(this.onPeriodicTrigger!=null)
            this.onPeriodicTrigger.execute()

    private static function onPeriodicStatic()
        let t = GetExpiredTimer()
        Buff thisBuff = t.getData() castTo Buff
        thisBuff.onPeriodic()
    
    private function expire()
        currentBuff = this
        if(this.onExpire!=null)
            this.onExpire.execute()
        if(this.onEnd!=null)
            this.onEnd.execute()
        destroy this

    function dispel()
        currentBuff = this
        if(this.onDispel!=null)
            this.onDispel.execute()
        if(this.onEnd!=null)
            this.onEnd.execute()
        destroy this

    private static function expireStatic()
        let t = GetExpiredTimer()
        Buff thisBuff = t.getData() castTo Buff
        thisBuff.expire()
        
    function update(unit newCaster, real newDuration)
        this.caster = newCaster
        if(newDuration > this.expireTimer.getRemaining())
            this.expireTimer.release()
            this.expireTimer = getTimer()
                ..setData(this castTo int)
                ..start(newDuration, function expireStatic)


    function getCaster() returns unit
        return this.caster

    function getTarget() returns unit
        return this.target

    function getBuffType() returns BuffType
        return this.buffType

    function getRemaining() returns real
        return this.expireTimer.getRemaining()

    function getLevel() returns integer
        return this.level

    static function getTriggerBuff() returns Buff
        return currentBuff

    ondestroy
        BuffList.getBuffList(this.target).remove(this)
        if(this.periodicTimer==this.expireTimer)
            print("WTF!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!11")
        this.expireTimer.release()
        if this.periodicTimer != null
            this.periodicTimer.release()
        //do not modify triggers. They belong to the BuffType


init
    onUnitIndex(function BuffList.onIndex )
    onUnitDeindex(function BuffList.onDeindex )