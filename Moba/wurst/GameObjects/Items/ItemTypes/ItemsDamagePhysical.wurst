package ItemsDamagePhysical

import ItemConfiguration
import GameTimer

constant CATEGORY = 3


function itemHammerOfStrength()
    let str = 8
    setupItem(ITEM_ID_HAMMER_OF_STRENGTH, CATEGORY, 500)
    setInfo("Hammer of Strength", "+ {0} strength".format(str.toString()))
    onEither() (int factor) ->
        modStrength(str)


function itemGlovesOfHaste()
    let as = 12
    
    setupItem(ITEM_ID_GLOVES_OF_HASTE, CATEGORY, 500)
    setInfo("Gloves of Haste", "+ {0}% attack speed".format(as.toString()))
    onEither() (int factor) ->
        modAttackSpeed(as)



            
constant ARMOR_BREAKER_BUFF_ID = compiletime(createAuraBuff("Armor Breaker", "This unit's armor is broken; it has reduced armor.", "BTNHammer1"))
constant ARMOR_BREAKER_ABILITY_ID = compiletime(createNegativeBuffAbility(1, ARMOR_BREAKER_BUFF_ID, "", ""))
            
constant ABILITY_ARMOR_BREAKER_SLAM = compiletime(ABIL_ID_GEN.next())

function itemArmorBreaker()
    let str = 20
    let armorDmg = 35
    let armorDuration = 6
    let activeDmg = 150
    let activeArmor = 50
    let activeDuration = 6
    let cooldown = 45

    if compiletime
        new AbilityDefinitionPitLordHowlofTerror(ABILITY_ARMOR_BREAKER_SLAM)
        ..setCooldown(1, cooldown.toReal())
        ..targetNone()
        ..targetNone()
        ..setArtCaster("")
        ..setManaCost(1, 0)

    setupItem(ITEM_ID_ARMOR_BREAKER, CATEGORY, 3325)
    setAbilities(ABILITY_ARMOR_BREAKER_SLAM)
    setInfo("Armor Breaker", "+ {0} strength|n|cffffcc00Passive:|r|nAttacks reduce the target's armor by {1}% for {2} seconds.".format(
            str.toString(), armorDmg.toString(), armorDuration.toString()
        )+ "|n|cffffcc00Active:|r|nSlams the ground, dealing {0} damage and reducing the armor of affected units by {1}% for {2} seconds.".format(
            activeDmg.toString(), activeArmor.toString(), activeDuration.toString()
        ) )

    if not compiletime
        let hammerBuff = new BuffType(false, DispelLevel.DISPEL)
        hammerBuff.setupBuffWithIcon(ARMOR_BREAKER_BUFF_ID, ARMOR_BREAKER_ABILITY_ID)
        hammerBuff.addSetupFunction() (Buff thisBuff, int factor) ->
            thisBuff.getTarget().wrapper().modArmorRelative(-factor * armorDmg*10)
        onEither() (int factor) ->
            modStrength(str)
            attackDamageFunction() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, bool attack, bool arrow, bool alternate) ->
                target.addBuffReduced( source, armorDuration.toReal(), hammerBuff, 1)
                target.addEffect(Abilities.bloodElfSpellThiefMISSILE, "chest").destr()

            let trg = itemTrigger()
            if trg != null
                trg.registerUnitEvent(getItemUnit(), EVENT_UNIT_SPELL_EFFECT)
                trg.addAction() ->
                    if GetSpellAbilityId() == ABILITY_ARMOR_BREAKER_SLAM
                        let caster = GetTriggerUnit()
                        let pos = caster.getPos()
                        addEffect(Abilities.thunderclapCaster, pos).destr()


constant CHILLING_BLADE_BUFF_ID = compiletime(createAuraBuff("Chilling Blade", "This unit was hit by Chilling Blade; it has reduced movement speed.", "BTNMysticDagger"))
constant CHILLING_BLADE_ABILITY_ID = compiletime(createNegativeBuffAbility(1, CHILLING_BLADE_BUFF_ID, Abilities.frostDamage, "chest"))

real lastAttack = 0.0

function itemChillingBlade()
    let str = 20
    let slowAmount = 30
    let slowDuration = 2
    setupItem(ITEM_ID_CHILLING_DAGGER, CATEGORY, 3950)
    setInfo("Chilling Blade", "+ {0} strength|n|cffffcc00Passive:|r|nAttacks reduce the target's movement speed by {1}% for {2} seconds".format(
            str.toString(), slowAmount.toString(), slowDuration.toString()
        )+ "|n|cffffcc00Active:|r|nasd" )

    if not compiletime
        let slowBuff = new BuffType(false, DispelLevel.DISPEL)
        slowBuff.setupBuffWithIcon(CHILLING_BLADE_BUFF_ID, CHILLING_BLADE_ABILITY_ID)
        slowBuff.addSetupFunction() (Buff thisBuff, int factor) ->
            let wrapper = thisBuff.getTarget().wrapper()
            wrapper.modMoveSpeedRelative(-factor * slowAmount*10)
            wrapper.modBlue(factor)
        onEither() (int factor) ->
            modStrength(str)
            attackDamageFunction() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, bool attack, bool arrow, bool alternate) ->
                //target.addBuffReduced( source, slowDuration.toReal(), slowBuff, 1)
                let diff = getElapsedGameTime() - lastAttack
                lastAttack = getElapsedGameTime()
                print(diff)


@compiletime
function initItems1()
    itemGlovesOfHaste()
    itemHammerOfStrength()

@compiletime
function initItems2()


@compiletime
function initItems3()
    itemArmorBreaker()
    itemChillingBlade()


init
    execute() ->
        initItems1()
    execute() ->
        initItems2()
    execute() ->
        initItems3()