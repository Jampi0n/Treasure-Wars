package ItemsUtility

import ItemConfiguration

constant CATEGORY = 2

function generateTeleportAbility(real cooldown) returns int
    let id = ABIL_ID_GEN.next()
    new AbilityDefinitionStaffoTeleportation(id)
    ..setCastRange(1, 999999)
    ..setCooldown(1, cooldown)
    ..setLevels(1)
    ..setTargetsAllowed(1, "friend,invulnerable,structure,vulnerable,item")
    return id

constant TELEPORT_CD_1 = 180
constant TELEPORT_ABILITY_1 = compiletime(generateTeleportAbility(TELEPORT_CD_1.toReal()))
constant TELEPORT_CD_2 = 120
constant TELEPORT_ABILITY_2 = compiletime(generateTeleportAbility(TELEPORT_CD_2.toReal()))


function itemStaffOfTeleportation()
    setupItem(ITEM_ID_STAFF_OF_TELEPORTATION, CATEGORY, 500)
    addActive("Teleport", "Teleports to an allied building after 3 seconds of channeling. {0} seconds cooldown.".format(TELEPORT_CD_1.toString()))
    setInfo("Staff of Teleportation")
    setAbilities(TELEPORT_ABILITY_1)


function itemLightBoots()
    let ms = 40
    setupItem(ITEM_ID_BOOTS_BASE, CATEGORY, 500)
    addPassive("Boots of Speed", "Increases movement speed by {0}".format(ms.toString()))
    setInfo("Boots of Speed")
    onEither() (int factor) ->
        if isFirstBoots()
            modMoveSpeed(ms)


constant BUFF_GUARDIAN = compiletime(setupBuff("Guardian Boots", "This unit moves faster after teleporting to a building.", "BTNHeavyBoots", true, 1, Abilities.speedTarget, "origin", DispelLevel.DISPEL))
constant int GUARDIAN_DURATION = 15

function itemBootsGuardian()
    let ms = 40
    let extraMs = 30
    let dur = GUARDIAN_DURATION
    setupItem(ITEM_ID_BOOTS_GUARDIAN, CATEGORY, 3000)
    addPassive("Boots of Speed", "Increases movement speed by {0}".format(ms.toString()))
    addActive("Teleport", "Teleports to an allied building after 3 seconds of channeling and increases movement speed by {0} for {1} seconds. {2} seconds cooldown.".format(extraMs.toString(), dur.toString(), TELEPORT_CD_2.toString()))
    setInfo("Guardian Boots")
    addRequirement(ITEM_ID_BOOTS_BASE)
    addRequirement(ITEM_ID_STAFF_OF_TELEPORTATION)
    setAbilities(TELEPORT_ABILITY_2)
    setCooldownGroup(TELEPORT_ABILITY_1)

    if not compiletime
        BUFF_GUARDIAN.addLevelFunction() (Buff thisBuff, int factor) ->
            thisBuff.getTarget().wrapper().modMoveSpeed(factor * extraMs)

    onEither() (int factor) ->
        if isFirstBoots()
            modMoveSpeed(ms)
        let trg = itemTrigger()
        if trg != null
            trg.registerUnitEvent(getItemUnit(), EVENT_UNIT_SPELL_FINISH)
            trg.addAction() ->
                if GetSpellAbilityId() == TELEPORT_ABILITY_2
                    GetTriggerUnit().addBuff(GetTriggerUnit(), GUARDIAN_DURATION.toReal(), BUFF_GUARDIAN, 1)



constant BUFF_RUNNER_ACTIVE = compiletime(setupBuff("Runner Boots", "This unit moves faster until it is damaged by an enemy hero.", "BTNSandalZ3", true, 1, Abilities.speedTarget, "origin", DispelLevel.DISPEL))

function itemBootsRunner()
    let ms = 40
    let extraMs = 30
    let dur = 10
    setupItem(ITEM_ID_BOOTS_RUNNER, CATEGORY, 3000)
    addPassive("Boots of Speed", "Increases movement speed by {0}".format(ms.toString()))
    addUnique("Increases movement speed by {0}, if the hero was not damaged by an enemy hero for {1} seconds.".format(extraMs.toString(), dur.toString()))
    setInfo("Runner Boots")
    addRequirement(ITEM_ID_BOOTS_BASE)
    let runnerInactive = new BuffType(false, DispelLevel.NONE)
    if not compiletime
        BUFF_RUNNER_ACTIVE.addLevelFunction() (Buff thisBuff, int factor) ->
            thisBuff.getTarget().wrapper().modMoveSpeed(factor * extraMs)
            BUFF_RUNNER_ACTIVE.addDispelFunction() (Buff thisBuff) ->
            // if active is dispelled externally, add inactive
            if thisBuff.getData() == 0
                let target = thisBuff.getTarget()
                target.addBuff(target, dur.toReal(), runnerInactive, 1)
        runnerInactive.addSetupFunction() (Buff thisBuff, int factor) ->
            if factor == 1
                // remove active when inactive starts
                let active = BuffList.getBuffOfType(thisBuff.getTarget(), BUFF_RUNNER_ACTIVE)
                if active != null
                    active.setData(1) // removes active without reapplying inactive
                    active.dispel()
            else
                // add active when inactive ends
                let target = thisBuff.getTarget()
                if target.countItemsOfType(ITEM_ID_BOOTS_RUNNER) > 0
                    let active = target.addBuff(target, -1, BUFF_RUNNER_ACTIVE, 1) 
                    if active != null
                        active.setData(0)

    onEither() (int factor) ->
        if isFirstBoots()
            modMoveSpeed(ms)
        if isUnique()
            if factor == 1
                getItemUnit().addBuff(getItemUnit(), dur.toReal(), runnerInactive, 1)
            else
                let u = getItemUnit()
                let inactive = BuffList.getBuffOfType(u, runnerInactive)
                if inactive != null
                    inactive.dispel()
                let active = BuffList.getBuffOfType(u, BUFF_RUNNER_ACTIVE)
                if active != null
                    active.setData(1) // removes active without reapplying inactive
                    active.dispel()
        anyHitFunction() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, boolean attack, boolean _active, boolean advanced) ->
            if source.isType(UNIT_TYPE_HERO)
                target.addBuff(target, dur.toReal(), runnerInactive, 1)
            
constant BUFF_HUNTER = compiletime(setupBuff("Hunter Boots", "This unit moves faster after attacking an enemy hero.", "BTNFireBoot", true, 1, Abilities.speedTarget, "origin", DispelLevel.DISPEL))

function itemBootsHunter()
    let ms = 40
    let extraMs = 30
    let dur = 4
    setupItem(ITEM_ID_BOOTS_HUNTER, CATEGORY, 3000)
    addPassive("Boots of Speed", "Increases movement speed by {0}".format(ms.toString()))
    addUnique("Increases movement speed by {0} for {1} seconds after attacking an enemy hero.".format(extraMs.toString(), dur.toString()))
    setInfo("Hunter Boots")
    addRequirement(ITEM_ID_BOOTS_BASE)

    if not compiletime
        BUFF_HUNTER.addLevelFunction() (Buff thisBuff, int factor) ->
            thisBuff.getTarget().wrapper().modMoveSpeed(factor * extraMs)

    onEither() (int factor) ->
        if isFirstBoots()
            modMoveSpeed(ms)
        attackDamageFunction() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, boolean attack, boolean _active, boolean advanced) ->
            if target.isType(UNIT_TYPE_HERO)
                source.addBuff(target, dur.toReal(), BUFF_HUNTER, 1)


constant BUFF_WIZARD = compiletime(setupBuff("Wizard Boots", "This unit moves faster after casting spells.", "BTNWalkersOfDarkness", true, 1, Abilities.speedTarget, "origin", DispelLevel.DISPEL))
constant int WIZARD_DURATION = 5
function itemBootsWizard()
    let ms = 40
    let extraMs = 30
    let dur = WIZARD_DURATION
    setupItem(ITEM_ID_BOOTS_WIZARD, CATEGORY, 3000)
    addPassive("Boots of Speed", "Increases movement speed by {0}".format(ms.toString()))
    addUnique("Increases movement speed by {0} for {1} seconds after casting a spell.".format(extraMs.toString(), dur.toString()))
    setInfo("Wizard Boots")
    addRequirement(ITEM_ID_BOOTS_BASE)

    if not compiletime
        BUFF_WIZARD.addLevelFunction() (Buff thisBuff, int factor) ->
            thisBuff.getTarget().wrapper().modMoveSpeed(factor * extraMs)

    onEither() (int factor) ->
        if isFirstBoots()
            modMoveSpeed(ms)

        let trg = itemTrigger()
        if trg != null
            trg.registerUnitEvent(getItemUnit(), EVENT_UNIT_SPELL_EFFECT)
            trg.addAction() ->
                GetTriggerUnit().addBuff(GetTriggerUnit(), WIZARD_DURATION.toReal(), BUFF_WIZARD, 1)



@compiletime
function initItems1()
    itemStaffOfTeleportation()
    itemLightBoots()
    itemBootsGuardian()
    itemBootsRunner()
    itemBootsHunter()
    itemBootsWizard()
init
    execute() ->
        initItems1()