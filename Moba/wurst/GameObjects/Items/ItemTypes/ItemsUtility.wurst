package ItemsUtility

import ItemConfiguration

constant CATEGORY = 2

function generateTeleportAbility(real cooldown) returns int
    let id = ABIL_ID_GEN.next()
    new AbilityDefinitionStaffoTeleportation(id)
    ..setCastRange(1, 999999)
    ..setCooldown(1, cooldown)
    ..setLevels(1)
    ..setTargetsAllowed(1, "friend,invulnerable,structure,vulnerable,item")
    return id

constant TELEPORT_ABILITY_1 = compiletime(generateTeleportAbility(180))
constant TELEPORT_ABILITY_2 = compiletime(generateTeleportAbility(120))


function itemStaffOfTeleportation()
    setupItem(ITEM_ID_STAFF_OF_TELEPORTATION, CATEGORY, 500)
    setInfo("Staff of Teleportation", "Teleport:|nTeleports to an allied building after 3 seconds of channeling. 180 seconds cooldown.")
    setAbilities(TELEPORT_ABILITY_1)


function itemLightBoots()
    let ms = 40
    setupItem(ITEM_ID_BOOTS_BASE, CATEGORY, 500)
    setInfo("Boots of Speed", "Boots of Speed:|nIncreases movement speed by {0}.".format(ms.toString()))
    onEither() (int factor) ->
        if isFirstBoots()
            modMoveSpeed(ms)

function itemBootsGuardian()
    let ms = 40
    setupItem(ITEM_ID_BOOTS_GUARDIAN, CATEGORY, 3000)
    setInfo("Guardian Boots", "Boots of Speed:|nIncreases movement speed by {0}.|nTeleport:|nTeleports to an allied building after 3 seconds of channeling. 120 seconds cooldown.".format(ms.toString()))
    addRequirement(ITEM_ID_BOOTS_BASE)
    addRequirement(ITEM_ID_STAFF_OF_TELEPORTATION)
    setAbilities(TELEPORT_ABILITY_2)
    setCooldownGroup(TELEPORT_ABILITY_1)
    onEither() (int factor) ->
        if isFirstBoots()
            modMoveSpeed(ms)

constant int BUFF_RUNNER = compiletime(createAuraBuff("Runner", "This unit moves faster until it is damaged by an enemy hero.", "BTNSandalZ3"))
constant int ABILITY_RUNNER = compiletime(createPositiveBuffAbility(1, BUFF_RUNNER, Abilities.speedTarget, "origin"))
function itemBootsRunner()
    let ms = 40
    let extraMs = 50
    let dur = 10
    setupItem(ITEM_ID_BOOTS_RUNNER, CATEGORY, 3000)
    setInfo("Runner Boots", "Boots of Speed:|nIncreases movement speed by {0}.|nUnique:|nIncreases movement speed by {1}, if the hero was not damaged by an enemy hero for {2} seconds.".format(ms.toString(), extraMs.toString(), dur.toString()))
    addRequirement(ITEM_ID_BOOTS_BASE)
    let runnerInactive = new BuffType(false, DispelLevel.NONE)
    let runnerActive = new BuffType(true, DispelLevel.NONE)
    if not compiletime
        runnerActive.setupBuffWithIcon(BUFF_RUNNER, ABILITY_RUNNER)
        runnerActive.addLevelFunction() (Buff thisBuff, int factor) ->
            thisBuff.getTarget().wrapper().modMoveSpeed(factor * extraMs)
        runnerInactive.addSetupFunction() (Buff thisBuff, int factor) ->
            if factor == 1
                let active = BuffList.getBuffOfType(thisBuff.getTarget(), runnerActive)
                if active != null
                    active.dispel()
            else
                let target = thisBuff.getTarget()
                if target.countItemsOfType(ITEM_ID_BOOTS_RUNNER) > 0
                    target.addBuff(target, -1, runnerActive, 1)

    onEither() (int factor) ->
        if isFirstBoots()
            modMoveSpeed(ms)
        if isUnique()
            if factor == 1
                getItemUnit().addBuff(getItemUnit(), dur.toReal(), runnerInactive, 1)
            else
                let u = getItemUnit()
                let inactive = BuffList.getBuffOfType(u, runnerInactive)
                if inactive != null
                    inactive.dispel()
                let active = BuffList.getBuffOfType(u, runnerActive)
                if active != null
                    active.dispel()
        anyHitFunction() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, boolean attack, boolean _active, boolean advanced) ->
            if source.isType(UNIT_TYPE_HERO)
                target.addBuff(target, dur.toReal(), runnerInactive, 1)
            
function itemBootsHunter()
    let ms = 40
    let extraMs = 30
    let dur = 4
    setupItem(ITEM_ID_BOOTS_HUNTER, CATEGORY, 3000)
    setInfo("Hunter Boots", "Boots of Speed:|nIncreases movement speed by {0}.|nUnique:|nIncreases movement speed by {1} for {2} seconds after attacking an enemy hero.".format(ms.toString(), extraMs.toString(), dur.toString()))
    addRequirement(ITEM_ID_BOOTS_BASE)
    onEither() (int factor) ->
        if isFirstBoots()
            modMoveSpeed(ms)
function itemBootsWizard()
    let ms = 40
    let extraMs = 30
    let dur = 5
    setupItem(ITEM_ID_BOOTS_WIZARD, CATEGORY, 3000)
    setInfo("Wizard Boots", "Boots of Speed:|nIncreases movement speed by {0}.|nUnique:|nIncreases movement speed by {1} for {2} seconds after casting a spell.".format(ms.toString(), extraMs.toString(), dur.toString()))
    addRequirement(ITEM_ID_BOOTS_BASE)
    onEither() (int factor) ->
        if isFirstBoots()
            modMoveSpeed(ms)



@compiletime
function initItems1()
    itemStaffOfTeleportation()
    itemLightBoots()
    itemBootsGuardian()
    itemBootsRunner()
    itemBootsHunter()
    itemBootsWizard()
init
    execute() ->
        initItems1()