package WarBeetle

//10

import HeroInclude

int HERO_ORDER = 10

class VenoumosBeetle
    private unit owner
    private int ownerIntelligence
    private int level
    private timer checkTimer
    private unit dummy
    private unit target
    private trigger onBite
    private static constant unitToBeetle = new HashMap<unit, VenoumosBeetle>

    construct(unit caster, unit target)

        this.owner = caster
        this.ownerIntelligence = owner.getHeroInt()
        this.target = target
        this.level = caster.getAbilityLevel(HeroWarBeetle.instance.ABILITY_ID_Q)
        this.dummy = createUnit(DUMMY_PLAYER, HeroWarBeetle.VENOMOUS_BEETLE, owner.getPos(), owner.getPos().angleTo(target.getPos()))
        this.dummy.setXY(owner.getPos())
        this.dummy.setPathing(false)
        this.dummy.issueTargetOrder("chainlightning", target)
        this.dummy.setColor(PLAYER_COLOR_TURQUOISE)
        unitToBeetle.put(this.dummy, this)

        this.checkTimer = getTimer()
            ..setData(this castTo int)
            ..startPeriodic(0.1, function updateStatic)

        this.onBite = CreateTrigger()
            ..registerUnitEvent(this.dummy, EVENT_UNIT_SPELL_EFFECT)
            ..addAction(function onBiteStatic)

    function update()
        if this.dummy.getCurrentOrder()!= OrderId("chainlightning")
            destroy this
            return
    
    static function updateStatic()
        (GetExpiredTimer().getData() castTo VenoumosBeetle).update()

    function onBite(unit biteTarget)
        if biteTarget == this.target
            owner.dealDamage(target, HeroWarBeetle.BITE_DAMAGE[level-1].bonus(ownerIntelligence, HeroWarBeetle.BITE_DAMAGEL_BONUS), ReductionType.MAGIC)
            target.addBuffReduced(this.owner, HeroWarBeetle.BITE_SLOW_DURATION[level-1].bonus(ownerIntelligence, HeroWarBeetle.BITE_SLOW_DURATION_BONUS), HeroWarBeetle.buffBite, level)
        else
            error("Bitten target is wrong!")

    static function onBiteStatic()
        let beetle = unitToBeetle.get(GetTriggerUnit())
        if beetle != null
            beetle.onBite(GetSpellTargetUnit())
        else
            Log.warn("Beetle object could not be resolved")

    ondestroy
        unitToBeetle.remove(this.dummy)
        this.dummy.kill()
        this.checkTimer.release()
        this.onBite.destr()


class HeroWarBeetle extends HeroTemplate
    use HeroTemplateModule

    override function objectDefinition()
        this.castBackswing = 0.51
        this.castPoint = 0.75
        this.icon = "BTNWarBeetle"
        this.model = "Models\\GeneralVezax.mdl"
        this.scalingValue = 0.9
        this.selectionScale = 2.4
        this.shadowX = 100
        this.shadowY = 100
        this.shadowH = 250
        this.shadowW = 250
        this.armorSoundType = ArmorSoundType.Flesh
        this.backswingPoint = 0.3
        this.damagePoint = 0.3
        this.range = 100
        this.weaponSound = weaponSound.WoodHeavyBash
        this.unitSoundSet = "HeroCryptLord"
        this.name = "War Beetle"
        this.properName = "Anubiros"

    static constant int array HARD_SHELL_ARMOR = [12, 18, 24, 30, 36]

    override function setupPassive(int abilityId, IHeroType heroType)

        if compiletime
            createNoEffectAbiltiy(abilityId)
                ..setupWithHotKey("Hard Shell", "D")
                ..setupIcon("PASNagaArmorUp1")


        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceIntelligence(0)
        tooltip.setLearnString("Increases the War Beetle's armor.", (int lvl) -> (begin
            return "{0} extra armor".format(
                HARD_SHELL_ARMOR[lvl-1].str())
        end) )
        for lvl = 1 to 5
            tooltip.setNormalString(false, lvl, "Increases the War Beetle's armor by {0}.".format(
                HARD_SHELL_ARMOR[lvl-1].str())
            )
        addDynamicTooltipIntelligence(heroType, tooltip)

    static constant int BEETLE_BITE = 'A00N'
    static constant int VENOMOUS_BEETLE = 'u002'

    static constant real array BITE_DAMAGE = [110, 150, 190, 230, 270]
    static constant real BITE_DAMAGEL_BONUS = 150

    static constant int BITE_SLOW = 200
    static constant real array BITE_SLOW_DURATION = [1.4, 1.8, 2.2, 2.6, 3.0]
    static constant real BITE_SLOW_DURATION_BONUS = 0.9

    static BuffType buffBite
    static constant BITE_BUFF_ID = compiletime(createAuraBuff("Venomous Beetle", "This unit was bitten by a Venomous Beetle; it is slowed.", Icons.bTNCarrionScarabs))
    static constant BITE_ABILITY_ID = compiletime(createNegativeBuffAbility(5, BITE_BUFF_ID, Abilities.poisonStingTarget, "chest"))


    override function setupQ(int abilityId, IHeroType heroType)

        if compiletime
            let MANA = skillData(100, 105, 110, 115, 120)
            let COOLDOWN = skillData(9, 9, 9, 9, 9)
            let RANGE = 600.0
            let aDef = new AbilityDefinitionFarseerChainLightning(abilityId)
                ..setupIcon(Icons.bTNCarrionScarabs)
                ..setAnimationNames("spell,slam")
                ..setupWithHotKey("Venomous Beetle", "Q")
                ..setLightningEffects("")
                ..setArtTarget("")
                ..setMissileArt("")
                ..setArtSpecial("")
                ..setLightningEffects("")
                ..targetEnemies()
                ..setSkillData(COOLDOWN, MANA, RANGE)

            for lvl = 1 to 5
                aDef
                    ..setNumberofTargetsHit(lvl, 1)
                    ..setDamageperTarget(lvl, 0)
                    ..setDurationNormal(lvl, 0.1)

        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceIntelligence(BITE_DAMAGEL_BONUS, BITE_SLOW_DURATION_BONUS)
        tooltip.setLearnString("Sends out a venomous beetle to bite the target enemy unit, dealing damage and slowing it.", (int lvl) -> (begin
            return "{0}{I0} damage, lasts {1}{I1} seconds.".format(
                BITE_DAMAGE[lvl-1].str(),
                BITE_SLOW_DURATION[lvl-1].toExactString())
        end) )
        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, "Sends out a venomous beetle to bite the target enemy unit, dealing {0}{I0} damage and slowing it for {1}{I1} seconds.".format(
                BITE_DAMAGE[lvl-1].str(),
                BITE_SLOW_DURATION[lvl-1].toExactString()
            ))
        addDynamicTooltipIntelligence(heroType, tooltip)

    static constant real array WAR_STOMP_DURATION = [1.4, 1.6, 1.8, 2, 2.2]
    static constant real WAR_STOMP_DURATION_BONUS = 0.7
    static constant real array WAR_STOMP_DAMAGE = [60, 100, 140, 180, 220]
    static constant real WAR_STOMP_DAMAGE_BONUS = 120
    static constant real WAR_STOMP_AOE = 350


    override function setupW(int abilityId, IHeroType heroType)

        if compiletime
            let MANA = skillData(120, 130, 140, 150, 160)
            let COOLDOWN = skillData(8, 8, 8, 8, 8)

            new AbilityDefinitionPitLordHowlofTerror(abilityId)
                ..setupIcon(Icons.bTNSeaGiantWarStomp)
                ..setAnimationNames("spell,slam")
                ..setupWithHotKey("War Stomp", "W")
                ..setArtCaster(Abilities.warStompCaster)
                ..targetNone()
                ..setSkillData(COOLDOWN, MANA, 0)

        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceStrength(WAR_STOMP_DAMAGE_BONUS, WAR_STOMP_DURATION_BONUS)
        tooltip.setLearnString("Slams the ground, stunning and damaging nearby enemy land units.", (int lvl) -> (begin
            return "{0}{S0} damage, {1}{S1} second.".format( WAR_STOMP_DAMAGE[lvl-1].str(), WAR_STOMP_DURATION[lvl-1].toExactString() )
        end) )

        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, "Slams the ground, dealing {0}{S0} damage to nearby enemy land units and stunning them for {1}{S1} seconds.".format(
                WAR_STOMP_DAMAGE[lvl-1].str(), WAR_STOMP_DURATION[lvl-1].toExactString()
            ))
        addDynamicTooltipStrength(heroType, tooltip)


    static constant real array JUMP_RANGE = [800, 1000, 1200, 1400, 1600]
    static constant real array JUMP_COOLDOWN = [17, 16, 15, 14, 13]
    static constant int array JUMP_MANA = [120, 110, 100, 90, 80]


    override function setupE(int abilityId, IHeroType heroType)

        if compiletime
            let aDef = new AbilityDefinitionIllidanChannel(abilityId)
                ..setupIcon(Icons.bTNReplenishMana)
                ..setupChannel(TargetType.POINT, "channel", 0.51)
                ..setupWithHotKey("Dash", "E")
                ..setArtCaster("")
                ..setArtEffect("")
                ..setArtSpecial("")
                ..setArtTarget("")

            for lvl = 1 to 5
                aDef
                    ..setCooldown(lvl, JUMP_COOLDOWN[lvl-1])
                    ..setManaCost(lvl, JUMP_MANA[lvl-1])
                    ..setCastRange(lvl, JUMP_RANGE[lvl-1])

        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceIntelligence(0)
        tooltip.setLearnString("Dashes towards the target point.", (int lvl) -> (begin
            return "{0} range, {1} mana, {2} seconds cooldown".format( 
                JUMP_RANGE[lvl-1].str(), JUMP_MANA[lvl-1].str(), JUMP_COOLDOWN[lvl-1].toExactString()
            )
        end) )
        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, "Dashes towards the target point.")
        addDynamicTooltipIntelligence(heroType, tooltip)

    static constant int array UNBREAKABLE_HP =[400, 550, 700, 850, 1000]
    static constant int array UNBREAKABLE_DEF =[15, 20, 25, 30, 35]
    static constant int array UNBREAKABLE_STR =[30, 35, 40, 45, 50]

    static constant real UNBREAKABLE_DURATION = 20


    static constant int UNBREAKABLE_BUFF_ID = compiletime(createAuraBuff("Unbreakable", "This unit's maximum hit points; armor; willpower and strength are increased.", Icons.bTNAdvancedCreatureCarapace))
    static constant int UNBREAKABLE_ABILITY_ID = compiletime(createPositiveBuffAbility(5, UNBREAKABLE_BUFF_ID, "", "chest"))

    static constant real UNBREAKABLE_SCALE = 1.25

    static constant int UNBREAKABLE_DUMMY_BUFF = compiletime(createDummyBuff())

    static BuffType buffUnbreakable


    override function setupR(int abilityId, IHeroType heroType)

        if compiletime
            let MANA = skillData(175, 175, 175, 175, 175)
            let COOLDOWN = skillData(100, 100, 100, 100, 100)

            let aDef = new AbilityDefinitionBeserk(abilityId)
                ..setupIcon(Icons.bTNAdvancedCreatureCarapace)
                ..setAnimationNames("")
                ..setupWithHotKey("Unbreakable", "R")
                ..setLightningEffects("")
                ..setArtTarget("")
                ..setMissileArt("")
                ..setArtSpecial("")
                ..setLightningEffects("")
                ..setCheckDependencies(true)
                ..targetNone()
                ..setSkillData(COOLDOWN, MANA, 0)


            for lvl = 1 to 5
                aDef
                    ..setAttackSpeedIncrease(lvl, 0)
                    ..setDamageTakenIncrease(lvl, 0)
                    ..setMovementSpeedIncrease(lvl, 0)
                    ..setDurationHero(lvl, 0.01)
                    ..setBuffs(lvl, UNBREAKABLE_DUMMY_BUFF.toRawCode())

        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceIntelligence(0)
        tooltip.setLearnString("Increases the War Beetle's strength, armor, willpower and hit points for {0} seconds.".format(UNBREAKABLE_DURATION.str()), (int lvl) -> (begin
            return "{0} strength, {1} armor and willpower, {2} hit points".format( 
                UNBREAKABLE_STR[lvl-1].str(), UNBREAKABLE_DEF[lvl-1].str(), UNBREAKABLE_HP[lvl-1].str()
            )
        end) )
        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, "Increases the War Beetle's strength by {0}, armor and willpower by {1} and hit points by {2} for {3} seconds.".format(
                UNBREAKABLE_STR[lvl-1].str(), UNBREAKABLE_DEF[lvl-1].str(), UNBREAKABLE_HP[lvl-1].str(), UNBREAKABLE_DURATION.str()
            ))
        addDynamicTooltipIntelligence(heroType, tooltip)


    override static function castQ()
        let caster = GetTriggerUnit()
        new VenoumosBeetle(caster, GetSpellTargetUnit())

    override static function castW()
        let spellId = GetSpellAbilityId()
        let caster = GetTriggerUnit()
        let level = caster.getAbilityLevel(spellId)
        let nearby = CreateGroup()
        nearby.enumUnitsInRange(caster.getPos(), WAR_STOMP_AOE)

        let dur = WAR_STOMP_DURATION[level-1].bonus(caster.getHeroStr(), WAR_STOMP_DURATION_BONUS)
        let dmg = WAR_STOMP_DAMAGE[level-1].bonus(caster.getHeroStr(), WAR_STOMP_DAMAGE_BONUS)

        while(not nearby.isEmpty())
            let target = FirstOfGroup(nearby)
            nearby.removeUnit(target)
            if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(caster.getOwner(), false, true)
                caster.dealDamage(target, dmg, ReductionType.PHYSICAL)
                target.addBuffReduced( caster, dur, STUNNED, 1).setDispelLevel(DispelLevel.DISPEL)

        nearby.destr()

    override static function castE()
        let caster = GetTriggerUnit()
        if caster.isMovable()
            Knockback2d.knockback(caster, vec2(GetSpellTargetX(),GetSpellTargetY()), 1200)

    override static function castR()
        let spellId = GetSpellAbilityId()
        let caster = GetTriggerUnit()
        let level = caster.getAbilityLevel(spellId)
        caster.removeAbility(UNBREAKABLE_DUMMY_BUFF)
        caster.addBuff(caster, UNBREAKABLE_DURATION, buffUnbreakable, level)
        caster.addEffect(Units.wispExplode, "chest").destr()

    override function stats(IHeroType heroType)
        heroType
            ..setStat(Stat.AR, 37, 51)
            ..setStat(Stat.AS, 11, 42)
            ..setStat(Stat.HP, 14, 59)
            ..setStat(Stat.HR, 12, 31)
            ..setStat(Stat.MP, 14, 38)
            ..setStat(Stat.MR, 12, 35)
            ..setStat(Stat.MS, 4, 32)
            ..setStat(Stat.STR, 21, 64)
            ..setStat(Stat.AGI, 34, 56)
            ..setStat(Stat.INT, 11, 37)

    override function retreatAI(IHeroAI ai)
        let heroPos = ai.getHeroUnit().getPos()
        ai.issue("channel", heroPos.polarOffset(heroPos.angleTo(ai.getHomeLoc()), JUMP_RANGE[ai.getHeroUnit().getAbilityLevel(ABILITY_ID_E)-1]) )

    override function attackAI(IHeroAI ai)
        let hero = ai.getHeroUnit()


        unit target
        if hero.getMana()/hero.getMaxMana() > 0.5
            target = hero.findTarget(600, AbilityTargetFocus.ENEMY_HERO, AbilityTargetPriority.LOW_HEALTH, null)
            if target.isTargetable(hero.getOwner(), false, true)
                ai.issue("chainlightning", target)

            let g = CreateGroup()
            unit u
            int count = 0
            g.enumUnitsInRange(hero.getPos(), WAR_STOMP_AOE)
            while(true)
                u = FirstOfGroup(g)
                if u == null
                    break
                g.removeUnit(u)
                if u.isTargetable(hero.getOwner(), false, true) and not u.isType(UNIT_TYPE_STRUCTURE)
                    if u.isType(UNIT_TYPE_HERO)
                        count += 3
                    else
                        count ++
            g.destr()

            if count >= 4
                if ai.issue("howlofterror")
                    return

        target = hero.findTarget(250, AbilityTargetFocus.ENEMY, AbilityTargetPriority.LOW_HEALTH, null)
        if target.isTargetable(hero.getOwner(), false, true)
            ai.attack(target)

        target = hero.findTarget(500, AbilityTargetFocus.ENEMY, AbilityTargetPriority.LOW_DISTANCE, null)
        if target.isTargetable(hero.getOwner(), false, true)
            ai.attack(target)



    override function teamFightAI(IHeroAI ai)
        let hero = ai.getHeroUnit()

        ai.issue("berserk")

        let g = CreateGroup()
        unit u
        int count = 0
        g.enumUnitsInRange(hero.getPos(), WAR_STOMP_AOE)
        while(true)
            u = FirstOfGroup(g)
            if u == null
                break
            g.removeUnit(u)
            if u.isTargetable(hero.getOwner(), false, true)
                if u.isType(UNIT_TYPE_HERO)
                    count++
        g.destr()

        if count != 0
            if ai.issue("howlofterror")
                return

        

        let target = ai.getTeamFightTarget()
        if target.isTargetable(hero.getOwner(), false, true)
            ai.issue("chainlightning", target)
            if not ai.getAttacking()
                ai.attack(target)

    override function skillBuild() returns string
        return "QWEQWQWQWQWEEEE"

    override function recommendedItems(LinkedList<int> list)
        list.add(ITEM_ID_BOOTS_BASE)

    override function onInit(IHeroType heroType)
        heroType
        ..useHeroGlow()
    override function onInitDelayed(IHeroType heroType)
        buffBite = new BuffType(false, DispelLevel.DISPEL)

        buffBite.setupBuffWithIcon(BITE_BUFF_ID, BITE_ABILITY_ID)

        buffBite.addLevelFunction() (Buff thisBuff, int factor) ->
            thisBuff.getTarget().wrapper().modMoveSpeedRelative( -factor * BITE_SLOW * 10)

        buffUnbreakable = new BuffType(true, DispelLevel.NONE)

        buffUnbreakable.setupBuffWithIcon(UNBREAKABLE_BUFF_ID, UNBREAKABLE_ABILITY_ID)
        buffUnbreakable.addLevelFunction() (Buff thisBuff, int factor) ->
            let level = thisBuff.getLevel()
            let target = thisBuff.getTarget()
            target.wrapper()
                ..modHealth( factor * UNBREAKABLE_HP[level-1])
                ..modStrength( factor * UNBREAKABLE_STR[level-1])
                ..modArmor( factor * UNBREAKABLE_DEF[level-1])
                ..modWillpower( factor * UNBREAKABLE_DEF[level-1])
            if factor == 1
                target.setScale(UNBREAKABLE_SCALE)
            else
                target.setScale(0.9)

    function createHeroType(IHero hero)
        let heroUnit = hero.toUnit()
        CreateTrigger()
        ..registerUnitEvent(heroUnit, EVENT_UNIT_HERO_SKILL)
        ..addAction(() -> (begin
            let u = GetTriggerUnit()
            if GetLearnedSkill() == HeroWarBeetle.instance.ABILITY_ID_PASSIVE
                let newLevel = u.getAbilityLevel(HeroWarBeetle.instance.ABILITY_ID_PASSIVE)
                if newLevel!= 1
                    u.wrapper().modArmor( -HARD_SHELL_ARMOR[newLevel-2])

                u.wrapper().modArmor( HARD_SHELL_ARMOR[newLevel-1])
        end))



init
    initialize()
    
@compiletime
function initialize()
    HeroType.create(new HeroWarBeetle(), HERO_ORDER)

   


