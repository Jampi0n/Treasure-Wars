package Paladin

//2

import HeroInclude


public constant HERO_PALADIN = 'H000'
constant THIS_HERO = HERO_PALADIN
constant THIS_ID = 2
constant THIS_BUTTON_POS = 2 //button pos from 0 to 11
constant THIS_ICON = Icons.bTNHeroPaladin
IHeroType heroType = null

public constant ABILITY_HEAVY_ARMORED = 'AZ2P'
constant ABILITY_SHIELD_BASH = 'AZ2Q'
constant ABILITY_BATTLE_ROAR = 'AZ2W'
constant ABILITY_HOLY_SHIELD = 'AZ2E'
constant ABILITY_DIVINE_PUNISHMENT = 'AZ2R'

constant BUFF_HOLY_SHIELD = new BuffType(true, DispelLevel.NONE)

constant SOUND_SHIELD_BASH = new SoundDefinition(Sounds.metalHeavyBashMetal2, false, true)

constant SOUND_DIVINE_PUNISHMENT = new SoundDefinition(Sounds.holyBolt, false, true)

//Balancing and Object Editing

public constant real array HEAVY_ARMOED_REDUCTION = [10, 15, 20, 25, 30] // onAttack


function heavyArmored(int abilityId)
    if compiletime
        createNoEffectAbiltiy(abilityId)
            ..setupIcon("PASHolyArmor")
            ..setupWithHotKey("Heavy Armored", "D")

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceStrength(0)
    tooltip.setLearnString("Reduces damage from incoming attacks.", (int lvl) -> (begin
        return "{0} damage reduction.".format(
        HEAVY_ARMOED_REDUCTION[lvl-1].str())
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(false, lvl, "Reduces damage from incoming attacks by {0}.".format(
            HEAVY_ARMOED_REDUCTION[lvl-1].str())
            )
    addDynamicTooltipStrength(heroType, tooltip)

constant real array SHIELD_BASH_DMG = [60, 100, 140, 180, 220]
constant real SHIELD_BASH_DMG_BONUS = 100

constant real array SHIELD_BASH_DURATION = [1, 1.25, 1.5, 1.75, 2]


function shieldBash(int abilityId)

    if compiletime
        let MANA = skillData(50, 50, 50, 50, 50)
        let COOLDOWN = skillData(6, 6, 6, 6, 6)

        new AbilityDefinitionIllidanChannel(abilityId)
            ..setAnimationNames("spell,throw")
            ..setupIcon("BTNAbility_Warrior_ShieldBash")
            ..setupWithHotKey("Shield Bash", "Q")
            ..setArtCaster("")
            ..setupChannel(TargetType.POINT, "thunderbolt", 0.5)
            ..targetNone()
            ..setSkillData(COOLDOWN, MANA, 99999)


    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceStrength(SHIELD_BASH_DMG_BONUS)
    tooltip.setLearnString("Bashes enemies in front of him with his shield, dealing physical damage and stunning them.", (int lvl) -> (begin
        return "{0}{S0} damage, {1} seconds stun.".format(
        SHIELD_BASH_DMG[lvl-1].str(),
        SHIELD_BASH_DURATION[lvl-1].toExactString()
        )
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Bashes enemies in front of him with his shield, dealing {0}{S0} physical damage and stunning them for {1} seconds.".format(
            SHIELD_BASH_DMG[lvl-1].str(),
            SHIELD_BASH_DURATION[lvl-1].toExactString()))
    addDynamicTooltipStrength(heroType, tooltip)

constant real array BATTLE_ROAR_AOE = [600, 700, 800, 900, 1000]
constant int array BATTLE_ROAR_AS = [30, 35, 40, 45, 50]
constant int array BATTLE_ROAR_MS = [30, 30, 30, 30, 30]
constant real array BATTLE_ROAR_DURATION = [5, 6, 7, 8, 9]
constant real BATTLE_ROAR_DURATION_BONUS = 2

constant integer BUFF_ID_BATTLE_ROAR = compiletime(createAuraBuff("Battle Roar", "This unit is under the effect of Battle Roar; it attacks and moves faster.", "BTNBattleRoar"))
constant integer ABILITY_BATTLE_ROAR_BUFF = compiletime(createPositiveBuffAbility(5, BUFF_ID_BATTLE_ROAR, Abilities.roarTarget, "overhead"))

constant BATTLE_ROAR = new BuffType(true, DispelLevel.DISPEL)



function battleRoar(int abilityId)

    if compiletime
        let MANA = skillData(80, 90, 100, 110, 120)
        let COOLDOWN = skillData(22, 22, 22, 22, 22)

        new AbilityDefinitionRoar(abilityId)
            ..setAnimationNames("spell")
            ..setupIcon("BTNBattleRoar")
            ..setupWithHotKey("Battle Roar", "W")
            ..targetNone()
            ..setSkillData(COOLDOWN, MANA, 0)


    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(BATTLE_ROAR_DURATION_BONUS)
    tooltip.setLearnString("Increases nearby units' attack and movement speed.", (int lvl) -> (begin
        return "{0} attack speed, {1} movement speed, {2}{I0} seconds".format(
        BATTLE_ROAR_AS[lvl-1].str()+"%",
        BATTLE_ROAR_MS[lvl-1].str()+"%",
        BATTLE_ROAR_DURATION[lvl-1].toExactString())
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Increases nearby units' attack speed by {0} and movement speed by {1} for {2}{I0} seconds.".format(
            BATTLE_ROAR_AS[lvl-1].str()+"%",
            BATTLE_ROAR_MS[lvl-1].str()+"%",
            BATTLE_ROAR_DURATION[lvl-1].toExactString()))
    addDynamicTooltipIntelligence(heroType, tooltip)

constant real array HOLY_SHIELD_DURATION = [2, 2.25, 2.5, 2.75, 3]
constant real HOLY_SHIELD_DURATION_BONUS = 2

constant int BUFF_ID_HOLY_SHIELD = compiletime(createAuraBuff("Holy Shield", "This unit is protected by Holy Shield; it is untargetable.", "BTNAngelicShield"))
constant int ABILITY_HOLY_SHIELD_BUFF = compiletime(createPositiveBuffAbility(5, BUFF_ID_HOLY_SHIELD, "Abilities\\Spells\\Human\\DivineShield\\DivineShieldTarget.mdl", "origin"))



function holyShield(int abilityId)
    let COOLDOWN = skillData(17, 15, 13, 11, 9)
    if compiletime
        let MANA = skillData(80, 80, 80, 80, 80)
        let RANGE = skillData(600, 600, 600, 600, 600)
        let aDef = new AbilityDefinitionIllidanChannel(abilityId)
            ..setAnimationNames("spell")
            ..setArtCaster("")
            ..setArtTarget("")
            ..setArtEffect("")
            ..setupIcon("BTNAngelicShield")
            ..setupWithHotKey("Holy Shield", "E")
            ..targetAlliedHeroes()
            ..setSkillData(COOLDOWN, MANA, RANGE)

        for lvl = 1 to 5
            aDef
                ..setArtDuration(lvl, 0)
                ..setBaseOrderID(lvl, "channel")
                ..setDisableOtherAbilities(lvl, false)
                ..setFollowThroughTime(lvl, 0)
                ..setOptions(lvl, 1)
                ..setTargetType(lvl, 1)

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(HOLY_SHIELD_DURATION_BONUS)
    tooltip.setLearnString("Turns the target frendly hero untargetable.", (int lvl) -> (begin
        return "{0}{I0} seconds, {1} seconds cooldown.".format(
        HOLY_SHIELD_DURATION[lvl-1].toExactString(), COOLDOWN.data(lvl).toExactString())
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Turns the target frendly hero untargetable for {0}{I0} seconds.".format(
            HOLY_SHIELD_DURATION[lvl-1].toExactString()
            ))
    addDynamicTooltipIntelligence(heroType, tooltip)


constant real DIVINE_PUNISHMENT_AOE = 600
constant real array DIVINE_PUNISHMENT_DMG = [250, 375, 500, 625, 750]
constant real DIVINE_PUNISHMENT_DMG_BONUS = 250


function divinePunishment(int abilityId)

    if compiletime
        let MANA = skillData(150, 150, 150, 150, 150)
        let COOLDOWN = skillData(90, 90, 90, 90, 90)
        
        let aDef = new AbilityDefinitionKeeperoftheGroveTranquility(abilityId)
            ..setAnimationNames("spell,channel")
            ..setupIcon("BTNHolyBan")
            ..setupWithHotKey("Divine Punishment", "R")
            ..targetNone()
            ..setSkillData(COOLDOWN, MANA, 0)

        for lvl = 1 to 5
            aDef
                ..setDurationHero(lvl, 2.1)
                ..setDurationNormal(lvl, 2.1)
                ..setEffects(lvl, "X000")

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(DIVINE_PUNISHMENT_DMG_BONUS)
    tooltip.setLearnString(CHANNELING_SPELL + "Calls upon the power of the gods. After two seconds of channeling nearby enemies will be struck by divine magic.", (int lvl) -> (begin
        return "{0}{I0} damage.".format(
        DIVINE_PUNISHMENT_DMG[lvl-1].str())
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, CHANNELING_SPELL + "Calls upon the power of the gods. After two seconds of channeling nearby enemies will be struck by divine magic and take {0}{I0} damage.".format(
            DIVINE_PUNISHMENT_DMG[lvl-1].str()
        ))
    addDynamicTooltipIntelligence(heroType, tooltip)
        

class DivinePunishment

    private unit caster
    private int level
    private effect model
    private timer checkTimer
    private int count
    private boolean succesful

    private unit dummy

    construct(unit caster)
        this.count = 0
        this.succesful = false
        this.caster = caster
        SOUND_DIVINE_PUNISHMENT.playOnPoint(caster.getPos3Zero()).snd.setVolume(120)
        this.level = caster.getAbilityLevel(ABILITY_DIVINE_PUNISHMENT)
        this.dummy = DummyRecycler.get(caster.getPos(), caster.getFacingAngle())
        this.dummy.setFacing(caster.getFacingAngle())
        this.model = this.dummy.addEffect("Abilities\\Spells\\Human\\Resurrect\\ResurrectCaster.mdl", "origin")
        this.checkTimer = getTimer()
            ..setData(this castTo int)
            ..startPeriodic(0.1, function updateStatic)

    function update()
        this.count++
        if this.count == 20
            this.succesful = true
            let nearby = CreateGroup()
            nearby.enumUnitsInRange(this.caster.getPos(), DIVINE_PUNISHMENT_AOE)

            let dmg = DIVINE_PUNISHMENT_DMG[level-1].bonus(this.caster.getInt(), DIVINE_PUNISHMENT_DMG_BONUS)

            while(not nearby.isEmpty())
                let target = FirstOfGroup(nearby)
                nearby.removeUnit(target)
                if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(this.caster.getOwner(), false, true) and target.isVisible(this.caster.getOwner())
                    
                    target.addEffect("Abilities\\Spells\\Human\\Resurrect\\ResurrectTarget.mdl", "origin").destr()
                    doAfter(0.4, () -> (begin
                        this.caster.dealDamage(target, dmg, ReductionType.MAGIC)
                    end) )

            nearby.destr()
            return

        if this.count>=45
            destroy this
            return

        if this.caster.getCurrentOrder()!= OrderId("tranquility") and not succesful
            destroy this
            return
    
    static function updateStatic()
        (GetExpiredTimer().getData() castTo DivinePunishment).update()

    ondestroy
        this.model.destr()
        DummyRecycler.recycle(this.dummy)
        this.checkTimer.release()

function setupStats()
    heroType
        
        ..setStat(Stat.AR, 31, 59)
        ..setStat(Stat.AS, 16, 43)
        ..setStat(Stat.HP, 17, 62)
        ..setStat(Stat.HR, 14, 37)
        ..setStat(Stat.MP, 9, 31)
        ..setStat(Stat.MR, 7, 23)
        ..setStat(Stat.MS, 0, 22)
        ..setStat(Stat.STR, 24, 71)
        ..setStat(Stat.AGI, 33, 62)
        ..setStat(Stat.INT, 4, 19)

function castShieldBash()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)
    let casterPos = caster.getPos()
    let casterAngle = casterPos.angleTo(vec2(GetSpellTargetX(), GetSpellTargetY()))
    SOUND_SHIELD_BASH.playOnPoint(casterPos.toVec3()).snd.setVolume(150)
    let nearby = CreateGroup()
    nearby.enumUnitsInRange(casterPos.polarOffset(casterAngle, 120), 220)

    let dmg = SHIELD_BASH_DMG[level-1].bonus(caster.getStr(), SHIELD_BASH_DMG_BONUS)
    let dur = SHIELD_BASH_DURATION[level-1]

    while(not nearby.isEmpty())
        let target = FirstOfGroup(nearby)
        nearby.removeUnit(target)
        if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(caster.getOwner(), false, true)
            caster.dealDamage(target, dmg, ReductionType.PHYSICAL)
            target.addBuffReduced( caster, dur, STUNNED, 1).setDispelLevel(DispelLevel.DISPEL)

    nearby.destr()

function castRoar()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)
    let nearby = CreateGroup()
    nearby.enumUnitsInRange(caster.getPos(), BATTLE_ROAR_AOE[level-1])

    let dur = BATTLE_ROAR_DURATION[level-1].bonus(caster.getInt(), BATTLE_ROAR_DURATION_BONUS)

    while(not nearby.isEmpty())
        let target = FirstOfGroup(nearby)
        nearby.removeUnit(target)
        if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(caster.getOwner(), true, false)
            target.addBuff( caster, dur, BATTLE_ROAR, level)

    nearby.destr()

function castHolyShield()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)
    let target = GetSpellTargetUnit()
    let dur = HOLY_SHIELD_DURATION[level-1].bonus(caster.getInt(), HOLY_SHIELD_DURATION_BONUS)
    target.addBuff( caster, dur, BUFF_HOLY_SHIELD, level)
    target.addBuff( caster, dur, INVULERNABLE, level)

function castDivinePunishment()
    let caster = GetTriggerUnit()
    new DivinePunishment(caster)


function retreatAI(HeroAI ai)
    ai.issue("roar")


function attackAI(HeroAI ai)
    let hero = ai.getHeroUnit()

    if hero.getMana()/hero.getMaxMana() > 0.5
        let g = CreateGroup()
        unit u
        int count = 0
        let targetPos = hero.getPos().polarOffset(hero.getFacingAngle(), 120)
        g.enumUnitsInRange(targetPos, 220)
        while(true)
            u = FirstOfGroup(g)
            if u == null
                break
            g.removeUnit(u)
            if u.isTargetable(hero.getOwner(), false, true) and not u.isType(UNIT_TYPE_STRUCTURE)
                if u.isType(UNIT_TYPE_HERO)
                    count += 5
                else
                    count ++

        if count >= 5
            if ai.issue("thunderbolt", targetPos)
                return
        
        g.destr()

    unit target = hero.findTarget(250, AbilityTargetFocus.ENEMY, AbilityTargetPriority.LOW_HEALTH, null)
    if target.isTargetable(hero.getOwner(), false, true)
        ai.attack(target)

    target = hero.findTarget(500, AbilityTargetFocus.ENEMY, AbilityTargetPriority.LOW_DISTANCE, null)
    if target.isTargetable(hero.getOwner(), false, true)
        ai.attack(target)

function teamFightAI(HeroAI ai)

    let hero = ai.getHeroUnit()

    ai.issue("roar")

    unit target = hero.findTarget(800, AbilityTargetFocus.ALLY_HERO, AbilityTargetPriority.LOW_HEALTH, (unit u) -> (begin
        return not BuffList.hasBuffType(u, BUFF_HOLY_SHIELD)
    end))
    if target.isTargetable(hero.getOwner(), true, false)
        ai.issue("channel", target)

    
    let g = CreateGroup()
    unit u
    int count = 0
    g.enumUnitsInRange(hero.getPos().polarOffset(hero.getFacingAngle(), 140), 180)
    while(true)
        u = FirstOfGroup(g)
        if u == null
            break
        g.removeUnit(u)
        if u.isTargetable(hero.getOwner(), false, true)
            if u.isType(UNIT_TYPE_HERO)
                count++

    if count != 0
        if ai.issue("tranquility")
            return


    count = 0
    g.enumUnitsInRange(hero.getPos(), DIVINE_PUNISHMENT_AOE)
    while(true)
        u = FirstOfGroup(g)
        if u == null
            break
        g.removeUnit(u)
        if u.isTargetable(hero.getOwner(), false, true)
            if u.isType(UNIT_TYPE_HERO)
                count++

    g.destr()
    if count > 1
        if ai.issue("tranquility")
            return

        
    target = ai.getTeamFightTarget()
    if target.isTargetable(hero.getOwner(), false, true)
        if not ai.getAttacking()
            ai.attack(target)

@compiletime
function setupTooltips()

    heavyArmored(ABILITY_HEAVY_ARMORED)
    shieldBash(ABILITY_SHIELD_BASH)
    battleRoar(ABILITY_BATTLE_ROAR)
    holyShield(ABILITY_HOLY_SHIELD)
    divinePunishment(ABILITY_DIVINE_PUNISHMENT)
    createHeroButton(THIS_ID, THIS_BUTTON_POS, THIS_ICON)

function initHeroType()
    setupStats()
    onCast(ABILITY_SHIELD_BASH, () -> castShieldBash())
    onCast(ABILITY_BATTLE_ROAR, () -> castRoar())
    onCast(ABILITY_HOLY_SHIELD, () -> castHolyShield())
    onCast(ABILITY_DIVINE_PUNISHMENT, () -> castDivinePunishment())
    heroType
    ..setSkillBuild("QWEQQWEQQWEWEWE")
    ..addItem(ITEM_ID_HEAVY_BOOTS)
    ..addItem(ITEM_ID_RUNIC_ARMOR)
    ..addItem(ITEM_ID_WAR_HORN)
    ..addItem(ITEM_ID_ARMOR_OF_COURAGE)
    ..addItem(ITEM_ID_ARCANE_SHIELD)
    ..addItem(ITEM_ID_WAR_DRUM)
    delayInit(5) ->
        heroType
            ..setRetreatAI((HeroAI ai) -> (retreatAI(ai)))
            ..setAttackAI((HeroAI ai) -> (attackAI(ai)))
            ..setTeamFightAI((HeroAI ai) -> (teamFightAI(ai)))


        BUFF_HOLY_SHIELD.setupBuffWithIcon(BUFF_ID_HOLY_SHIELD, ABILITY_HOLY_SHIELD_BUFF)
        
        BATTLE_ROAR.setupBuffWithIcon(BUFF_ID_BATTLE_ROAR, ABILITY_BATTLE_ROAR_BUFF)
        BATTLE_ROAR.addFirstFunction( (Buff thisBuff) -> (begin
            thisBuff.getTarget().wrapper()
                ..addStatRelativeBonus( Stat.MS, BATTLE_ROAR_MS[thisBuff.getLevel()-1]*10 )
                ..addStatAbsoluteBonus( Stat.AS, BATTLE_ROAR_AS[thisBuff.getLevel()-1] )
        end) )
        BATTLE_ROAR.addEndFunction( (Buff thisBuff) -> (begin
            thisBuff.getTarget().wrapper()
                ..addStatRelativeBonus( Stat.MS, -BATTLE_ROAR_MS[thisBuff.getLevel()-1]*10 )
                ..addStatAbsoluteBonus( Stat.AS, -BATTLE_ROAR_AS[thisBuff.getLevel()-1] )
        end) )



init
    heroType = Hero.createType(THIS_HERO, THIS_ICON, THIS_ID, true)
    ..setOnInitFunction(() -> initHeroType())

    setupTooltips()
    addButtonToTavern(THIS_ID, THIS_BUTTON_POS, heroType, 0)
  
