package Paladin

import HeroInclude

int HERO_ORDER = 2

class DivinePunishment

    private unit caster
    private int level
    private effect model
    private timer checkTimer
    private int count
    private boolean succesful

    private unit dummy

    construct(unit caster)
        this.count = 0
        this.succesful = false
        this.caster = caster
        HeroPaladin.SOUND_DIVINE_PUNISHMENT.playOnPoint(caster.getPos3Zero()).snd.setVolume(120)
        this.level = caster.getAbilityLevel(HeroPaladin.instance.ABILITY_ID_R)
        this.dummy = DummyRecycler.get(caster.getPos(), caster.getFacingAngle())
        this.dummy.setFacing(caster.getFacingAngle())
        this.model = this.dummy.addEffect("Abilities\\Spells\\Human\\Resurrect\\ResurrectCaster.mdl", "origin")
        this.checkTimer = getTimer()
            ..setData(this castTo int)
            ..startPeriodic(0.1, function updateStatic)

    function update()
        this.count++
        if this.count == 20
            this.succesful = true
            let nearby = CreateGroup()
            nearby.enumUnitsInRange(this.caster.getPos(), HeroPaladin.DIVINE_PUNISHMENT_AOE)

            let dmg = HeroPaladin.DIVINE_PUNISHMENT_DMG[level-1].bonus(this.caster.getHeroInt(), HeroPaladin.DIVINE_PUNISHMENT_DMG_BONUS)

            while(not nearby.isEmpty())
                let target = FirstOfGroup(nearby)
                nearby.removeUnit(target)
                if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(this.caster.getOwner(), false, true) and target.isVisible(this.caster.getOwner())
                    
                    target.addEffect("Abilities\\Spells\\Human\\Resurrect\\ResurrectTarget.mdl", "origin").destr()
                    doAfter(0.4, () -> (begin
                        this.caster.dealDamage(target, dmg, ReductionType.MAGIC)
                    end) )

            nearby.destr()
            return

        if this.count>=45
            destroy this
            return

        if this.caster.getCurrentOrder()!= OrderId("tranquility") and not succesful
            destroy this
            return
    
    static function updateStatic()
        (GetExpiredTimer().getData() castTo DivinePunishment).update()

    ondestroy
        this.model.destr()
        DummyRecycler.recycle(this.dummy)
        this.checkTimer.release()


class HeroPaladin extends HeroTemplate
    use HeroTemplateModule

    override function objectDefinition()
        this.castBackswing = 0.5
        this.castPoint = 0.4
        this.icon = "BTNHeroPaladin"
        this.model = "Models\\AnduinLothar.mdl"
        this.selectionScale = 2.2
        this.scalingValue = 1.3
        this.shadowX = 80
        this.shadowY = 80
        this.shadowH = 200
        this.shadowW = 200
        this.armorSoundType = ArmorSoundType.Metal
        this.backswingPoint = 0.4
        this.damagePoint = 0.6
        this.cooldownTime = 1.8
        this.range = 100
        this.weaponSound = weaponSound.MetalHeavySlice
        this.unitSoundSet = "HeroPaladin"
        this.name = "Paladin"
        this.properName = "Agamand the True"

    static constant BUFF_HOLY_SHIELD = new BuffType(true, DispelLevel.NONE)

    static constant SOUND_SHIELD_BASH = new SoundDefinition(Sounds.metalHeavyBashMetal2, false, true)

    static constant SOUND_DIVINE_PUNISHMENT = new SoundDefinition(Sounds.holyBolt, false, true)

    //Balancing and Object Editing

    static constant real array HEAVY_ARMOED_REDUCTION = [10, 15, 20, 25, 30] // onAttack


    override function setupPassive(int abilityId, IHeroType heroType)
        if compiletime
            createNoEffectAbiltiy(abilityId)
                ..setupIcon("PASHolyArmor")
                ..setupWithHotKey("Heavy Armored", "D")

        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceStrength(0)
        tooltip.setLearnString("Reduces damage from incoming attacks.", (int lvl) -> (begin
            return "{0} damage reduction.".format(
            HEAVY_ARMOED_REDUCTION[lvl-1].str())
        end) )
        for lvl = 1 to 5
            tooltip.setNormalString(false, lvl, "Reduces damage from incoming attacks by {0}.".format(
                HEAVY_ARMOED_REDUCTION[lvl-1].str())
                )
        addDynamicTooltipStrength(heroType, tooltip)

    static constant real array SHIELD_BASH_DMG = [60, 100, 140, 180, 220]
    static constant real SHIELD_BASH_DMG_BONUS = 100

    static constant real array SHIELD_BASH_DURATION = [1, 1.25, 1.5, 1.75, 2]


    override function setupQ(int abilityId, IHeroType heroType)

        if compiletime
            let MANA = skillData(50, 50, 50, 50, 50)
            let COOLDOWN = skillData(6, 6, 6, 6, 6)

            new AbilityDefinitionIllidanChannel(abilityId)
                ..setAnimationNames("spell,throw")
                ..setupIcon("BTNAbility_Warrior_ShieldBash")
                ..setupWithHotKey("Shield Bash", "Q")
                ..setArtCaster("")
                ..setupChannel(TargetType.POINT, "thunderbolt", 0.5)
                ..targetNone()
                ..setSkillData(COOLDOWN, MANA, 99999)


        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceStrength(SHIELD_BASH_DMG_BONUS)
        tooltip.setLearnString("Bashes enemies in front of him with his shield, dealing physical damage and stunning them.", (int lvl) -> (begin
            return "{0}{S0} damage, {1} seconds stun.".format(
            SHIELD_BASH_DMG[lvl-1].str(),
            SHIELD_BASH_DURATION[lvl-1].toExactString()
            )
        end) )
        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, "Bashes enemies in front of him with his shield, dealing {0}{S0} physical damage and stunning them for {1} seconds.".format(
                SHIELD_BASH_DMG[lvl-1].str(),
                SHIELD_BASH_DURATION[lvl-1].toExactString()))
        addDynamicTooltipStrength(heroType, tooltip)

    static constant real array BATTLE_ROAR_AOE = [600, 700, 800, 900, 1000]
    static constant int array BATTLE_ROAR_AS = [30, 35, 40, 45, 50]
    static constant int array BATTLE_ROAR_MS = [30, 30, 30, 30, 30]
    static constant real array BATTLE_ROAR_DURATION = [5, 6, 7, 8, 9]
    static constant real BATTLE_ROAR_DURATION_BONUS = 2

    static constant integer BUFF_ID_BATTLE_ROAR = compiletime(createAuraBuff("Battle Roar", "This unit is under the effect of Battle Roar; it attacks and moves faster.", "BTNBattleRoar"))
    static constant integer ABILITY_BATTLE_ROAR_BUFF = compiletime(createPositiveBuffAbility(5, BUFF_ID_BATTLE_ROAR, Abilities.roarTarget, "overhead"))

    static constant BATTLE_ROAR = new BuffType(true, DispelLevel.DISPEL)



    override function setupW(int abilityId, IHeroType heroType)

        if compiletime
            let MANA = skillData(80, 90, 100, 110, 120)
            let COOLDOWN = skillData(22, 22, 22, 22, 22)

            new AbilityDefinitionRoar(abilityId)
                ..setAnimationNames("spell")
                ..setupIcon("BTNBattleRoar")
                ..setupWithHotKey("Battle Roar", "W")
                ..targetNone()
                ..setSkillData(COOLDOWN, MANA, 0)


        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceIntelligence(BATTLE_ROAR_DURATION_BONUS)
        tooltip.setLearnString("Increases nearby units' attack and movement speed.", (int lvl) -> (begin
            return "{0} attack speed, {1} movement speed, {2}{I0} seconds".format(
            BATTLE_ROAR_AS[lvl-1].str()+"%",
            BATTLE_ROAR_MS[lvl-1].str()+"%",
            BATTLE_ROAR_DURATION[lvl-1].toExactString())
        end) )
        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, "Increases nearby units' attack speed by {0} and movement speed by {1} for {2}{I0} seconds.".format(
                BATTLE_ROAR_AS[lvl-1].str()+"%",
                BATTLE_ROAR_MS[lvl-1].str()+"%",
                BATTLE_ROAR_DURATION[lvl-1].toExactString()))
        addDynamicTooltipIntelligence(heroType, tooltip)

    static constant real array HOLY_SHIELD_DURATION = [2, 2.25, 2.5, 2.75, 3]
    static constant real HOLY_SHIELD_DURATION_BONUS = 2

    static constant int BUFF_ID_HOLY_SHIELD = compiletime(createAuraBuff("Holy Shield", "This unit is protected by Holy Shield; it is untargetable.", "BTNAngelicShield"))
    static constant int ABILITY_HOLY_SHIELD_BUFF = compiletime(createPositiveBuffAbility(5, BUFF_ID_HOLY_SHIELD, "Abilities\\Spells\\Human\\DivineShield\\DivineShieldTarget.mdl", "origin"))



    override function setupE(int abilityId, IHeroType heroType)
        let COOLDOWN = skillData(17, 15, 13, 11, 9)
        if compiletime
            let MANA = skillData(80, 80, 80, 80, 80)
            let RANGE = skillData(600, 600, 600, 600, 600)
            let aDef = new AbilityDefinitionIllidanChannel(abilityId)
                ..setAnimationNames("spell")
                ..setArtCaster("")
                ..setArtTarget("")
                ..setArtEffect("")
                ..setupIcon("BTNAngelicShield")
                ..setupWithHotKey("Holy Shield", "E")
                ..targetAlliedHeroes()
                ..setSkillData(COOLDOWN, MANA, RANGE)

            for lvl = 1 to 5
                aDef
                    ..setArtDuration(lvl, 0)
                    ..setBaseOrderID(lvl, "channel")
                    ..setDisableOtherAbilities(lvl, false)
                    ..setFollowThroughTime(lvl, 0)
                    ..setOptions(lvl, 1)
                    ..setTargetType(lvl, 1)

        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceIntelligence(HOLY_SHIELD_DURATION_BONUS)
        tooltip.setLearnString("Turns the target frendly hero untargetable.", (int lvl) -> (begin
            return "{0}{I0} seconds, {1} seconds cooldown.".format(
            HOLY_SHIELD_DURATION[lvl-1].toExactString(), COOLDOWN.data(lvl).toExactString())
        end) )
        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, "Turns the target frendly hero untargetable for {0}{I0} seconds.".format(
                HOLY_SHIELD_DURATION[lvl-1].toExactString()
                ))
        addDynamicTooltipIntelligence(heroType, tooltip)


    static constant real DIVINE_PUNISHMENT_AOE = 600
    static constant real array DIVINE_PUNISHMENT_DMG = [250, 375, 500, 625, 750]
    static constant real DIVINE_PUNISHMENT_DMG_BONUS = 250


    override function setupR(int abilityId, IHeroType heroType)

        if compiletime
            let MANA = skillData(150, 150, 150, 150, 150)
            let COOLDOWN = skillData(90, 90, 90, 90, 90)
            
            let aDef = new AbilityDefinitionKeeperoftheGroveTranquility(abilityId)
                ..setAnimationNames("spell,channel")
                ..setupIcon("BTNHolyBan")
                ..setupWithHotKey("Divine Punishment", "R")
                ..targetNone()
                ..setSkillData(COOLDOWN, MANA, 0)

            for lvl = 1 to 5
                aDef
                    ..setDurationHero(lvl, 2.1)
                    ..setDurationNormal(lvl, 2.1)
                    ..setEffects(lvl, "X000")

        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceIntelligence(DIVINE_PUNISHMENT_DMG_BONUS)
        tooltip.setLearnString(CHANNELING_SPELL + "Calls upon the power of the gods. After two seconds of channeling nearby enemies will be struck by divine magic.", (int lvl) -> (begin
            return "{0}{I0} damage.".format(
            DIVINE_PUNISHMENT_DMG[lvl-1].str())
        end) )
        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, CHANNELING_SPELL + "Calls upon the power of the gods. After two seconds of channeling nearby enemies will be struck by divine magic and take {0}{I0} damage.".format(
                DIVINE_PUNISHMENT_DMG[lvl-1].str()
            ))
        addDynamicTooltipIntelligence(heroType, tooltip)
            

    override function stats(IHeroType heroType)
        heroType
            ..setStat(Stat.AR, 31, 59)
            ..setStat(Stat.AS, 16, 43)
            ..setStat(Stat.HP, 17, 62)
            ..setStat(Stat.HR, 14, 37)
            ..setStat(Stat.MP, 9, 31)
            ..setStat(Stat.MR, 7, 23)
            ..setStat(Stat.MS, 0, 22)
            ..setStat(Stat.STR, 24, 71)
            ..setStat(Stat.AGI, 33, 62)
            ..setStat(Stat.INT, 4, 19)

    override function castQ()
        let spellId = GetSpellAbilityId()
        let caster = GetTriggerUnit()
        let level = caster.getAbilityLevel(spellId)
        let casterPos = caster.getPos()
        let casterAngle = casterPos.angleTo(vec2(GetSpellTargetX(), GetSpellTargetY()))
        SOUND_SHIELD_BASH.playOnPoint(casterPos.toVec3()).snd.setVolume(150)
        let nearby = CreateGroup()
        nearby.enumUnitsInRange(casterPos.polarOffset(casterAngle, 120), 220)

        let dmg = SHIELD_BASH_DMG[level-1].bonus(caster.getHeroStr(), SHIELD_BASH_DMG_BONUS)
        let dur = SHIELD_BASH_DURATION[level-1]

        while(not nearby.isEmpty())
            let target = FirstOfGroup(nearby)
            nearby.removeUnit(target)
            if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(caster.getOwner(), false, true)
                caster.dealDamage(target, dmg, ReductionType.PHYSICAL)
                target.addBuffReduced( caster, dur, STUNNED, 1).setDispelLevel(DispelLevel.DISPEL)

        nearby.destr()

    override function castW()
        let spellId = GetSpellAbilityId()
        let caster = GetTriggerUnit()
        let level = caster.getAbilityLevel(spellId)
        let nearby = CreateGroup()
        nearby.enumUnitsInRange(caster.getPos(), BATTLE_ROAR_AOE[level-1])

        let dur = BATTLE_ROAR_DURATION[level-1].bonus(caster.getHeroInt(), BATTLE_ROAR_DURATION_BONUS)

        while(not nearby.isEmpty())
            let target = FirstOfGroup(nearby)
            nearby.removeUnit(target)
            if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(caster.getOwner(), true, false)
                target.addBuff( caster, dur, BATTLE_ROAR, level)

        nearby.destr()

    override function castE()
        let spellId = GetSpellAbilityId()
        let caster = GetTriggerUnit()
        let level = caster.getAbilityLevel(spellId)
        let target = GetSpellTargetUnit()
        let dur = HOLY_SHIELD_DURATION[level-1].bonus(caster.getHeroInt(), HOLY_SHIELD_DURATION_BONUS)
        target.addBuff( caster, dur, BUFF_HOLY_SHIELD, level)
        target.addBuff( caster, dur, INVULERNABLE, level)

    override function castR()
        let caster = GetTriggerUnit()
        new DivinePunishment(caster)


    override function retreatAI(IHeroAI ai)
        ai.issue("roar")


    override function attackAI(IHeroAI ai)
        let hero = ai.getHeroUnit()

        if hero.getMana()/hero.getMaxMana() > 0.5
            let g = CreateGroup()
            unit u
            int count = 0
            let targetPos = hero.getPos().polarOffset(hero.getFacingAngle(), 120)
            g.enumUnitsInRange(targetPos, 220)
            while(true)
                u = FirstOfGroup(g)
                if u == null
                    break
                g.removeUnit(u)
                if u.isTargetable(hero.getOwner(), false, true) and not u.isType(UNIT_TYPE_STRUCTURE)
                    if u.isType(UNIT_TYPE_HERO)
                        count += 5
                    else
                        count ++

            if count >= 5
                if ai.issue("thunderbolt", targetPos)
                    return
            
            g.destr()

        unit target = hero.findTarget(250, AbilityTargetFocus.ENEMY, AbilityTargetPriority.LOW_HEALTH, null)
        if target.isTargetable(hero.getOwner(), false, true)
            ai.attack(target)

        target = hero.findTarget(500, AbilityTargetFocus.ENEMY, AbilityTargetPriority.LOW_DISTANCE, null)
        if target.isTargetable(hero.getOwner(), false, true)
            ai.attack(target)

    override function teamFightAI(IHeroAI ai)

        let hero = ai.getHeroUnit()

        ai.issue("roar")

        unit target = hero.findTarget(800, AbilityTargetFocus.ALLY_HERO, AbilityTargetPriority.LOW_HEALTH, (unit u) -> (begin
            return not BuffList.hasBuffType(u, BUFF_HOLY_SHIELD)
        end))
        if target.isTargetable(hero.getOwner(), true, false)
            ai.issue("channel", target)

        
        let g = CreateGroup()
        unit u
        int count = 0
        g.enumUnitsInRange(hero.getPos().polarOffset(hero.getFacingAngle(), 140), 180)
        while(true)
            u = FirstOfGroup(g)
            if u == null
                break
            g.removeUnit(u)
            if u.isTargetable(hero.getOwner(), false, true)
                if u.isType(UNIT_TYPE_HERO)
                    count++

        if count != 0
            if ai.issue("tranquility")
                return


        count = 0
        g.enumUnitsInRange(hero.getPos(), DIVINE_PUNISHMENT_AOE)
        while(true)
            u = FirstOfGroup(g)
            if u == null
                break
            g.removeUnit(u)
            if u.isTargetable(hero.getOwner(), false, true)
                if u.isType(UNIT_TYPE_HERO)
                    count++

        g.destr()
        if count > 1
            if ai.issue("tranquility")
                return

            
        target = ai.getTeamFightTarget()
        if target.isTargetable(hero.getOwner(), false, true)
            if not ai.getAttacking()
                ai.attack(target)

    override function skillBuild() returns string
        return "QWEQQWEQQWEWEWE"

    override function recommendedItems(LinkedList<int> list)
        list.add(ITEM_ID_BOOTS_BASE)


    override function onInitDelayed(IHeroType heroType)
        BUFF_HOLY_SHIELD.setupBuffWithIcon(BUFF_ID_HOLY_SHIELD, ABILITY_HOLY_SHIELD_BUFF)
        
        BATTLE_ROAR.setupBuffWithIcon(BUFF_ID_BATTLE_ROAR, ABILITY_BATTLE_ROAR_BUFF)
        BATTLE_ROAR.addLevelFunction() (Buff thisBuff, int factor) ->
            thisBuff.getTarget().wrapper()
            ..modMoveSpeedRelative( factor * BATTLE_ROAR_MS[thisBuff.getLevel()-1]*10 )
            ..modAttackSpeed( factor * BATTLE_ROAR_AS[thisBuff.getLevel()-1] )


init
    initialize()
    
@compiletime
function initialize()
    HeroType.create(new HeroPaladin(), HERO_ORDER)

