package TrollManhunter

import HeroInclude

constant int HERO_ORDER = 14


class TrollManHunterInstance
    use HeroInstance
    unit notSpinning
    unit mirrorImage

    construct()
        notSpinning = createUnit(this.owner, HeroTrollManHunter.NOT_SPINNING, u.getPos(), angle(0))
        mirrorImage = null

class HeroTrollManHunter extends HeroTemplate
    static constant SOUND_SHADOW_STRIKE = new SoundDefinition(Sounds.metalHeavySliceFlesh2, false, true)
    static constant SOUND_CRIPPLING_PAIN = new SoundDefinition(Sounds.howlOfTerror, false, true)
    
    static constant NOT_SPINNING = compiletime(UNIT_ID_GEN.next())

    static constant real array BLEEDING_WOUND_DMG = [4, 6, 8, 10, 12]
    static constant real BLEEDING_WOUND_DURATION = 6.0
    static BuffType buffBleedingWound
    static constant int BLEEDING_WOUND_BUFF_ID = compiletime(createAuraBuff("Bleeding Wound", "This is under the effect of Bleeding Wound; it takes damage over time.", "BTNBloodSpike"))
    static constant int BLEEDING_WOUND_ABILITY_ID = compiletime(createNegativeBuffAbility(5, BLEEDING_WOUND_BUFF_ID, "FatalWoundV2.mdx", "chest"))

    static constant int SHADOW_STRIKE_SHADOW_UNIT = 'h01L'
    static constant real array SHADOW_STRIKE_DAMAGE = [75, 125, 175, 225, 275]
    static constant real SHADOW_STRIKE_DAMAGE_BONUS = 80
    static constant real array SHADOW_STRIKE_SLOW_DURATION = [1, 1.25, 1.5, 1.75, 2]
    static constant int SHADOW_STRIKE_SLOW = 200
    static BuffType buffShadowStrike
    static constant SHADOW_STRIKE_BUFF_ID = compiletime(createAuraBuff("Shadow Strike", "This unit was hit by Shadow Strike; it is slowed.", Icons.bTNBerserkForTrolls))
    static constant SHADOW_STRIKE_ABILITY_ID = compiletime(createNegativeBuffAbility(5, SHADOW_STRIKE_BUFF_ID, Abilities.shadowstrike, "overhead"))

    static constant real array DEATH_SPIN_DAMAGE = [50, 75, 100, 125, 150]
    static constant real DEATH_SPIN_DAMAGE_BONUS = 50
    static constant int array DEATH_SPIN_DEFENSE = [20, 25, 30, 35, 40]
    static constant real DEATH_SPIN_DURATION = 3.0
    static constant real DEATH_SPIN_AOE = 250
    static BuffType buffDeathSpin
    static constant int DEATH_SPIN_BUFF_ID = compiletime(createAuraBuff("Death Spin", "This unit is under the effect of Death Spin; it cannot attack.", Icons.bTNWhirlwind))
    static constant int DEATH_SPIN_ABILITY_ID = compiletime(createNegativeBuffAbility(5, DEATH_SPIN_BUFF_ID, Abilities.lordofFlameMissile, "chest"))
    static constant int DEATH_SPIN_DISABLE_ATTACK = compiletime(ABIL_ID_GEN.next())

    static constant real array CRIPPLING_PAIN_DAMAGE = [20, 30, 40, 50, 60]
    static constant real CRIPPLING_PAIN_DAMAGE_BONUS = 30
    static constant int array CRIPPLING_PAIN_SLOW = [8, 10, 12, 14, 16]
    static constant real array CRIPPLING_PAIN_DURATION= [3, 3.5, 4, 4.5, 5]
    static BuffType buffCripplingPain
    static constant int CRIPPLING_PAIN_BUFF_ID = compiletime(createAuraBuff("Crippling Pain", "This unit is under the effect of Crippling Pain; it has reduced movement speed.", "BTNTorment"))
    static constant int CRIPPLING_PAIN_ABILITY_ID = compiletime(createNegativeBuffAbility(5, CRIPPLING_PAIN_BUFF_ID, Abilities.crippleTarget, "chest"))
    static constant real CRIPPLING_PAIN_AOE = 1500

    static constant real array MIRROR_IMAGE_DURATION = [18, 21, 24, 27, 30]
    static BuffType buffMirrorImage // the actual effect is in OnAttack

    static constant int MIRROR_IMAGE_BUFF_ID = compiletime(createAuraBuff("Mirror Image", "This unit is under the effect of Mirror Image; it deals reduced damage.", "BTNSpell_Shadow_ShadowWard"))
    static constant int MIRROR_IMAGE_ABILITY_ID = compiletime(createPositiveBuffAbility(5, MIRROR_IMAGE_BUFF_ID, "", ""))
    static constant int MIRROR_IMAGE_ILLUSIONS = 1
    static constant MIRROR_IMAGE_UNIT_ID = createUnitTypeAndReturnId(400, compiletime(UNIT_ID_GEN.next()), 100, 40, 10, 64, "Models\\TrollManhunter.mdx", 10)


    override function customDefintions(HeroDefinition aDef)
        new UnitDefinition(NOT_SPINNING, 'hfoo')
        ..setNormalAbilities("Aloc")
        ..setModelFile("")
        ..setShadowImageUnit("")
        ..setAttacksEnabled(0)
        ..setMovementType(MovementType.Fly)
        ..setCollisionSize(0)
        ..setFoodCost(0)
        ..setSightRadiusDay(0)
        ..setSightRadiusNight(0)
        ..setUpgradesUsed("")
        ..setUnitSoundSet("")
        ..setName("Cannot be cast during Death Spin")
        let def = defaultUnit(MIRROR_IMAGE_UNIT_ID)
        applyObjectDefinition(def)
        def
        ..setLevel(10)

    override function objectDefinition()
        this.model = "Models\\HeroTrollManhunter.mdl"
        this.icon = "BTNHeroTrollManhunter"
        this.castPoint = 0.5
        this.armorSoundType = ArmorSoundType.Flesh
        this.backswingPoint = 0.15
        this.damagePoint = 0.45
        this.weaponSound = weaponSound.MetalHeavySlice
        this.unitSoundSet = "HeadHunter"
        this.name = "Troll Headhunter"
        this.properName = "Zul'maran"
        this.selectionScale = 1.6
        this.shadowX = 70
        this.shadowY = 70
        this.shadowH = 180
        this.shadowW = 180
        this.cooldownTime = 1.8


    override function stats(IHeroType heroType)
        heroType
        ..setStat(Stat.AR, 26, 41)
        ..setStat(Stat.AS, 63, 97)
        ..setStat(Stat.HP, 12, 33)
        ..setStat(Stat.HR, 16, 32)
        ..setStat(Stat.MP, 17, 32)
        ..setStat(Stat.MR, 18, 30)
        ..setStat(Stat.MS, 34, 64)
        ..setStat(Stat.STR, 12, 35)
        ..setStat(Stat.AGI, 28, 46)
        ..setStat(Stat.INT, 12, 25)

    override function setupPassive(int abilityId, IHeroType heroType)
        if compiletime
            createNoEffectAbiltiy(abilityId)
                ..setupIcon("PASBloodSpike")
                ..setupWithHotKey("Bleeding Wound", "D")


        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceStrength(0)
        tooltip.setSummary("Damaging an enemy with an attack or a spell causes the target to bleed and take damage over time.")
        tooltip.setLearnString( ("Attacking an enemy unit or damaging it with a spell applies one stack of Bleeding Wound. If the target was not attacked for {0} seconds, "+
                                "all stacks are lost. Each stack deals physical damage over time:").format(BLEEDING_WOUND_DURATION.toSmartString()), (int lvl) -> (begin
            return "{0} damage per second.".format(
                BLEEDING_WOUND_DMG[lvl-1].toSmartString())
        end) )
        
        for lvl = 1 to 5
            tooltip.setNormalString(false, lvl, ("Attacking an enemy unit or damaging it with a spell applies one stack of Bleeding Wound. If the target was not attacked for {0} seconds, "+
            "all stacks are lost. Each stack deals {1} physical damage per second.").format(
                BLEEDING_WOUND_DURATION.toSmartString(),
                BLEEDING_WOUND_DMG[lvl-1].toSmartString())
            )
        addDynamicTooltipStrength(heroType, tooltip)

    override function setupQ(int abilityId, IHeroType heroType)
        if compiletime
            let MANA = skillData(80, 80, 80, 80, 80)
            let COOLDOWN = skillData(8, 8, 8, 8, 8)
            let RANGE = skillData(600, 650, 700, 750, 800)
            let aDef = new AbilityDefinitionFarseerChainLightning(abilityId)
                ..setupIcon(Icons.bTNBerserkForTrolls)
                ..setupWithHotKey("Shadow Strike", "Q")
                ..setAnimationNames("spell")
                ..setLightningEffects("")
                ..setRequirements(NOT_SPINNING.toRawCode())
                ..setArtTarget("")
                ..setCheckDependencies(true)
                ..targetEnemies()
                ..setSkillData(COOLDOWN, MANA, RANGE)

            for lvl = 1 to 5
                aDef
                    ..setDamageperTarget(lvl, 0)
                    ..setNumberofTargetsHit(lvl, 1)

        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceStrength(SHADOW_STRIKE_DAMAGE_BONUS)
        tooltip.setLearnString("Summons an illusion of the Troll Headhunter to attack the target from behind, dealing physical damage and slowing it for a short time.", (int lvl) -> (begin
            return "{0}{S0} damage, {1} seconds slow.".format(
                SHADOW_STRIKE_DAMAGE[lvl-1].str(),
                SHADOW_STRIKE_SLOW_DURATION[lvl-1].toSmartString())
        end) )
        
        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, "Summons an illusion of the Troll Headhunter to attack the target from behind, dealing {0}{S0} damage and slowing it for {1} seconds.".format(
                SHADOW_STRIKE_DAMAGE[lvl-1].str(),
                SHADOW_STRIKE_SLOW_DURATION[lvl-1].toSmartString()
                ))
        addDynamicTooltipStrength(heroType, tooltip)

    override function setupW(int abilityId, IHeroType heroType)
        if compiletime
            new AbilityDefinitionCargoHoldBurrow(DEATH_SPIN_DISABLE_ATTACK)
                ..setCargoCapacity(1, 0)

            let MANA = skillData(75, 75, 75, 75, 75)
            let COOLDOWN = skillData(12, 11, 10, 9, 8)
            let aDef = new AbilityDefinitionBeserk(abilityId)
                ..setupIcon(Icons.bTNWhirlwind)
                ..setupWithHotKey("Death Spin", "W")
                ..targetNone()
                ..setSkillData(COOLDOWN, MANA, 0)

            for lvl = 1 to 5
                aDef
                    ..setAttackSpeedIncrease(lvl, 0)
                    ..setDamageTakenIncrease(lvl, 0)
                    ..setMovementSpeedIncrease(lvl, 0)
                    ..setDurationHero(lvl, 0.01)

        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceStrength(DEATH_SPIN_DAMAGE_BONUS)
        tooltip.setLearnString("Causes a bladestorm of destructive force around the Troll Headhunter, increasing armor and willpower and dealing damage per second to nearby enemy units.\nLasts {0} seconds.".format(DEATH_SPIN_DURATION.toSmartString()), (int lvl) -> (begin
            return "{0}{S0} damage per second, {1} armor and willpower.".format(
                DEATH_SPIN_DAMAGE[lvl-1].toSmartString(),
                DEATH_SPIN_DEFENSE[lvl-1].toString())
        end) )
        for lvl = 1 to 5
            tooltip.setNormalString(false, lvl, "Causes a bladestorm of destructive force around the Troll Headhunter, increasing armor and willpower by {0} and dealing {1}{S0} damage per second to nearby enemy units.\nLasts {2} seconds.".format(
                DEATH_SPIN_DEFENSE[lvl-1].toString(),
                DEATH_SPIN_DAMAGE[lvl-1].toSmartString(),
                DEATH_SPIN_DURATION.toSmartString()))
        addDynamicTooltipStrength(heroType, tooltip)

    override function setupE(int abilityId, IHeroType heroType)
        if compiletime
            let MANA = skillData(80, 85, 90, 95, 100)
            let COOLDOWN = skillData(5, 5, 5, 5, 5)
            new AbilityDefinitionPitLordHowlofTerror(abilityId)
                ..setAnimationNames("spell,slam")
                ..setupIcon("BTNTorment")
                ..setupWithHotKey("Crippling Pain", "E")
                ..setRequirements(NOT_SPINNING.toRawCode())
                ..setCheckDependencies(true)
                ..setArtCaster("")
                ..targetNone()
                ..setSkillData(COOLDOWN, MANA, 0)

        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceIntelligence(CRIPPLING_PAIN_DAMAGE_BONUS)
        tooltip.setLearnString(("Damages and slows enemies affected by Bleeding Wound."+
        " Deals damage and slows for every stack of Bleeding Wound, but consumes all stacks."), (int lvl) -> (begin
            return "{0}{I0} damage, {1}% slow, {2} seconds.".format(
                CRIPPLING_PAIN_DAMAGE[lvl-1].toSmartString(),
                CRIPPLING_PAIN_SLOW[lvl-1].toString(),
                CRIPPLING_PAIN_DURATION[lvl-1].toSmartString())
        end) )
        
        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, ("Damages and slows enemies affected by Bleeding Wound."+
            " Deals {0}{I0} damage and slows by {1}% for every stack of Bleeding Wound for {2} seconds, but consumes all stacks.").format(
                CRIPPLING_PAIN_DAMAGE[lvl-1].toSmartString(),
                CRIPPLING_PAIN_SLOW[lvl-1].toString(),
                CRIPPLING_PAIN_DURATION[lvl-1].toSmartString()))
        addDynamicTooltipIntelligence(heroType, tooltip)

    override function setupR(int abilityId, IHeroType heroType)
        if compiletime
            let MANA = skillData(125, 125, 125, 125, 125)
            let COOLDOWN = skillData(80, 75, 70, 65, 60)
            new AbilityDefinitionRoar(abilityId)
                ..setAnimationNames("spell")
                ..setArtCaster("")
                ..setupIcon("BTNSpell_Shadow_ShadowWard")
                ..setupWithHotKey("Mirror Image", "R")
                ..setCheckDependencies(true)
                ..setRequirements(NOT_SPINNING.toRawCode())
                ..targetNone()
                ..setSkillData(COOLDOWN, MANA, 0)

        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceIntelligence(0)
        tooltip.setSummary("Summons a mirror image of the Troll Headhunter, that can attack, but cannot cast spells or use items.")
        tooltip.setLearnString(("Summons a mirror image of the Troll Headhunter."+
        " The mirror image's health, armor, willpower, attack speed and attack damage scale with the Troll Headhunter's respective stats."+
        " The mirror image applies Bleeding Wound, but cannot cast spells or use items.").format(MIRROR_IMAGE_ILLUSIONS.toString()), (int lvl) -> (begin
            return "{0} seconds".format(
                MIRROR_IMAGE_DURATION[lvl-1].str())
        end) )
        
        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, ("Summons a mirror image of the Troll Headhunter."+
            " The mirror image's health, armor, willpower, attack speed and attack damage scale with the Troll Headhunter's respective stats."+
            " The mirror image applies Bleeding Wound, but cannot cast spells or use items.\nLasts {0} seconds.").format(
                MIRROR_IMAGE_DURATION[lvl-1].str())
            )
        addDynamicTooltipIntelligence(heroType, tooltip)

    override function onCreate(IHeroType heroType, IHero hero)
        new TrollManHunterInstance()

    override function castQ()
        let spellId = GetSpellAbilityId()
        let caster = GetTriggerUnit()
        let level = caster.getAbilityLevel(spellId)
        let pos = caster.getPos()
        let target = GetSpellTargetUnit()
        let targetPos = target.getPos()
        let angle = pos.angleTo(targetPos)
        let spawnPos = targetPos.polarOffset(angle, 100)
        let illusion = createUnit(caster.getOwner(), SHADOW_STRIKE_SHADOW_UNIT, spawnPos, angle+angle(bj_PI))
        illusion.setAnimation("attack")
        illusion.setVertexColor(255, 255, 255, 200)
        doAfter(0.3) ->
            if target.isTargetable(caster.getOwner(), false, true)
                SOUND_SHADOW_STRIKE.playOnPoint(caster.getPos().toVec3()).snd.setVolume(150)
                let bleedingWoundLevel = caster.getAbilityLevel(this.ABILITY_ID_PASSIVE)
                if bleedingWoundLevel > 0
                    let b = target.addBuffReduced(caster, BLEEDING_WOUND_DURATION, buffBleedingWound, bleedingWoundLevel)
                    b.setData(b.getData()+3)

                target.addBuffReduced(caster, SHADOW_STRIKE_SLOW_DURATION[level-1], buffShadowStrike, level)
                caster.dealDamage(target, SHADOW_STRIKE_DAMAGE[level-1].bonus(caster.getHeroStr(), SHADOW_STRIKE_DAMAGE_BONUS), ReductionType.PHYSICAL)
        doAfter(0.85) ->
            addEffect(Abilities.mirrorImageDeathCaster, spawnPos).destr()
            illusion.remove()
    override function castW()
        let spellId = GetSpellAbilityId()
        let caster = GetTriggerUnit()
        let level = caster.getAbilityLevel(spellId)
        caster.removeAbility('Bbsk')
        caster.addBuff(caster, DEATH_SPIN_DURATION, buffDeathSpin, level)

    override function castE()
        let spellId = GetSpellAbilityId()
        let caster = GetTriggerUnit()
        let level = caster.getAbilityLevel(spellId)
        let pos = caster.getPos()
        SOUND_CRIPPLING_PAIN.playOnPoint(pos.toVec3()).snd.setVolume(150)
        let g = CreateGroup()
        g.enumUnitsInRange(pos, CRIPPLING_PAIN_AOE)
        unit u
        while true
            u = FirstOfGroup(g)
            if u == null
                break
            g.removeUnit(u)
            if BuffList.hasBuffType(u, buffBleedingWound)
                let bleedingWound = BuffList.getBuffOfType(u, buffBleedingWound)
                let stacks = bleedingWound.getData() div 4
                u.addBuffReduced(caster, CRIPPLING_PAIN_DURATION[level-1], buffCripplingPain, level)

                caster.dealDamage(u, stacks * CRIPPLING_PAIN_DAMAGE[level-1].bonus(caster.getHeroInt(), CRIPPLING_PAIN_DAMAGE_BONUS), ReductionType.MAGIC)
        g.destr()

    override function castR()
        //let spellId = GetSpellAbilityId()
        let caster = GetTriggerUnit()
        let owner = caster.getOwner()
        //let level = caster.getAbilityLevel(spellId)
        //let instance = TrollManHunterInstance.fromTrigger()
        //let hero = caster.toHero().duplicate()
        doAfter(0) -> 
            let facing = caster.getFacingAngle()
            let pos = caster.getPos()
            let left = pos.polarOffset(facing + (90).fromDeg(), 100)
            let right = pos.polarOffset(facing - (90).fromDeg(), 100)
            let front = pos.polarOffset(facing, 100)
            let copy = caster.toHero().duplicate().toUnit()
            unit u1
            unit u2
            if GetRandomInt(0, 1) == 0
                u1 = caster
                u2 = copy
            else
                u1 = copy
                u2 = caster
            u1.setXY(left)
            u2.setXY(right)
            u1.issuePointOrder("attack", front)
            u2.issuePointOrder("attack", front)
            if Players.team(GetLocalPlayer().getId()) == Players.team(owner.getId())
                copy.setVertexColor(color(0,0,255))
            if GetLocalPlayer() == owner
                ClearSelection()
                SelectUnit(u1, true)
                SelectUnit(u2, true)

        /*let mirrorImageUnit = createUnit(caster.getOwner(), MIRROR_IMAGE_UNIT_ID, caster.getPos(), caster.getFacingAngle())
        instance.mirrorImage = mirrorImageUnit
        mirrorImageUnit.setTimedLife(MIRROR_IMAGE_DURATION[level-1])
        mirrorImageUnit.setVertexColor(255, 255, 255, 200)
        let casterWrapper = caster.wrapper()
        mirrorImageUnit.wrapper()
        ..copyBaseStats(caster.wrapper())
        ..modAttackSpeed( casterWrapper.getAttackSpeedBonus())
        ..modHealth( casterWrapper.getHealthBonus())
        ..modStrength( casterWrapper.getStrengthBonus())
        ..modArmor( casterWrapper.getArmorBonus())
        ..modWillpower( casterWrapper.getWillpowerBonus())
        ..modMoveSpeed( casterWrapper.getMoveSpeedBonus())
        ..modMana(casterWrapper.getManaBonus())
        mirrorImageUnit.setMana(caster.getMana())

        //bleeding wound for mirror image
        DamageEventUnit.fromUnit(mirrorImageUnit).attackHitNoBuilding.add() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, bool attack, bool arrow, bool alternate) ->
            if level != 0 and target.isTargetable(instance.owner, false, true) and not target.isType(UNIT_TYPE_STRUCTURE)
                let b = target.addBuffReduced( instance.u, BLEEDING_WOUND_DURATION, buffBleedingWound, level)
                b.setData(b.getData()+3)*/

    override function skillBuild() returns string
        return "QWQWQWQWQWEEEEE"

    override function recommendedItems(LinkedList<int> list)
        list.add(ITEM_ID_BOOTS_BASE)

    override function onInitDelayed(IHeroType heroType)
        UnitType.get(MIRROR_IMAGE_UNIT_ID).setScaleAttackAnimation(true)
        heroType
        ..setOnAttackFunc() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, boolean attack, boolean active, boolean advanced) ->
            let level = source.getAbilityLevel(this.ABILITY_ID_PASSIVE)
            if level != 0 and target.isTargetable(source.getOwner(), false, true) and not target.isType(UNIT_TYPE_STRUCTURE)
                let b = target.addBuffReduced( source, BLEEDING_WOUND_DURATION, buffBleedingWound, level)
                b.setData(b.getData()+3)


        /*  bleeding wound: every attack increases actual stacks by 4, so bladestorm can increase by 1 every 0.25 seconds
            So dmg is 0.25 * 1/4 -> (interval) * (4 stacks)  */
        buffBleedingWound = new BuffType(false, DispelLevel.DISPEL)
        buffBleedingWound.setupBuffWithIcon(BLEEDING_WOUND_BUFF_ID, BLEEDING_WOUND_ABILITY_ID)

        buffBleedingWound.addSetupFunction() (Buff thisBuff, int factor) ->
            if factor == 1
                thisBuff.setData(1)

        buffBleedingWound.addStackFunction( (Buff whichBuff) -> (begin
            whichBuff.setData(whichBuff.getData()+1)
        end))

        buffBleedingWound.setPeriodicTime(0.25)
        buffBleedingWound.addPeriodicFunction( (Buff whichBuff) -> (begin
            let level = whichBuff.getLevel()
            whichBuff.getCaster().dealDamage(whichBuff.getTarget(), 1.0/16.0 * whichBuff.getData() * BLEEDING_WOUND_DMG[level-1], ReductionType.PHYSICAL)
        end))

        buffShadowStrike = new BuffType(false, DispelLevel.DISPEL)

        buffShadowStrike.setupBuffWithIcon(SHADOW_STRIKE_BUFF_ID, SHADOW_STRIKE_ABILITY_ID)

        buffShadowStrike.addLevelFunction() (Buff thisBuff, int factor) ->
            thisBuff.getTarget().wrapper().modMoveSpeedRelative( -factor * SHADOW_STRIKE_SLOW * 10)


        buffDeathSpin = new BuffType(false, DispelLevel.NONE)
        buffDeathSpin.setupBuffWithIcon(DEATH_SPIN_BUFF_ID, DEATH_SPIN_ABILITY_ID)

        buffDeathSpin.addSetupFunction() (Buff thisBuff, int factor) ->
            let target = thisBuff.getTarget()
            let instance = TrollManHunterInstance.fromUnit(target)
            if factor == 1
                instance.notSpinning.setOwner(players[PLAYER_NEUTRAL_PASSIVE], false)
                target.addAbility(DEATH_SPIN_DISABLE_ATTACK)
                AddUnitAnimationProperties(target, "spin", true)
            else
                instance.notSpinning.setOwner(instance.owner, false)
                target.removeAbility(DEATH_SPIN_DISABLE_ATTACK)
                AddUnitAnimationProperties(target, "spin", false)

        buffDeathSpin.addLevelFunction() (Buff thisBuff, int factor) ->
            let level = thisBuff.getLevel()
            thisBuff.getTarget().wrapper()
            ..modArmor( factor * DEATH_SPIN_DEFENSE[level-1])
            ..modWillpower( factor * DEATH_SPIN_DEFENSE[level-1])

        buffDeathSpin.setPeriodicTime(0.25)
        buffDeathSpin.addPeriodicFunction( (Buff whichBuff) -> (begin
            let caster = whichBuff.getCaster()
            let instance = TrollManHunterInstance.fromUnit(caster)
            let g = CreateGroup()
            let level = whichBuff.getLevel()
            g.enumUnitsInRange(caster.getPos(), DEATH_SPIN_AOE)
            unit u
            while true
                u = FirstOfGroup(g)
                if u == null
                    break
                g.removeUnit(u)
                if u.isTargetable(instance.owner, false, true) and not u.isType(UNIT_TYPE_STRUCTURE)
                    let bleedingWoundLevel = caster.getAbilityLevel(this.ABILITY_ID_PASSIVE)
                    if bleedingWoundLevel > 0
                        u.addBuffReduced(caster, BLEEDING_WOUND_DURATION, buffBleedingWound, bleedingWoundLevel)
                    caster.dealDamage(u, 0.25 * DEATH_SPIN_DAMAGE[level-1].bonus(caster.getHeroStr(), DEATH_SPIN_DAMAGE_BONUS), ReductionType.PHYSICAL)
            g.destr()
        end))

        buffCripplingPain = new BuffType(false, DispelLevel.DISPEL)
        buffCripplingPain.setupBuffWithIcon(CRIPPLING_PAIN_BUFF_ID, CRIPPLING_PAIN_ABILITY_ID)

        // store number of stacks of bleeding wound
        buffCripplingPain.addSetupFunction() (Buff thisBuff, int factor) ->
            let bleedingWound = BuffList.getBuffOfType(thisBuff.getTarget(), buffBleedingWound)
            if bleedingWound != null
                thisBuff.setData(bleedingWound.getData() div 4)
                bleedingWound.dispel()
            
        buffCripplingPain.addLevelFunction() (Buff thisBuff, int factor) ->
            let level = thisBuff.getLevel()
            let stacks = thisBuff.getData()
            thisBuff.getTarget().wrapper().modMoveSpeedRelative(-factor * CRIPPLING_PAIN_SLOW[level - 1] * 10 * stacks)


        buffMirrorImage = new BuffType(false, DispelLevel.NONE)
        buffMirrorImage.setupBuffWithIcon(MIRROR_IMAGE_BUFF_ID, MIRROR_IMAGE_ABILITY_ID)

init
    initialize()
    
@compiletime
function initialize()
    HeroType.create(new HeroTrollManHunter(), HERO_ORDER)
