package DeadEye

//1

import HeroInclude

public constant HERO_DEADEYE = 'H00I'
constant THIS_HERO = HERO_DEADEYE
constant THIS_ID = 1
constant THIS_BUTTON_POS = 1 //button pos from 0 to 11
constant THIS_ICON = Icons.bTNSkeletonArcher
IHeroType heroType = null

group skeletons = CreateGroup()
int skeletonCount = 0

constant ABILITY_BLACK_ARROW = 'AZ1P'
constant ABILITY_PIERCING_SHOT = 'AZ1Q'
constant ABILITY_TERROR = 'AZ1W'
constant ABILITY_BONE_BROTHERS = 'AZ1E'
constant ABILITY_DEATH_PACT = 'AZ1R'
constant ABILITY_DEATH_COIL = 'AZ1S'

constant SOUND_BLACK_ARROW = new SoundDefinition(Sounds.raiseSkeleton1, false, true)

//Balancing and Object Editing

constant real array BLACK_ARROW_THRESHOLD = [20, 25, 30, 35, 40]
constant real array BLACK_ARROW_DURATION = [30, 35, 40, 45, 50]

function blackArrow(int abilityId)

    if compiletime
        createNoEffectAbiltiy(abilityId)
            ..setupIcon("PASTheBlackArrow")
            ..setupWithHotKey("Black Arrow", "D")

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceStrength(0)
    tooltip.setLearnString("Increases the damage of killing attacks against enemies and spawns a skeleton.", (int lvl) -> (begin
        return "{0} damage, lasts {1} seconds.".format(
        BLACK_ARROW_THRESHOLD[lvl-1].str(), 
        BLACK_ARROW_DURATION[lvl-1].str())
    end) )
    
    for lvl = 1 to 5
        tooltip.setNormalString(false, lvl, "Increases the damage of killing attacks against enemies by {0} and spawns a skeleton for {1} seconds.".format( 
            BLACK_ARROW_THRESHOLD[lvl-1].str(), 
            BLACK_ARROW_DURATION[lvl-1].str())
            )
    addDynamicTooltipStrength(heroType, tooltip)


constant real array PIERCING_SHOT_DAMAGE = [80, 115, 150, 185, 210]
constant real PIERCING_SHOT_DAMAGE_BONUS = 120

function piercingShot(int abilityId)

    if compiletime
        let MANA = skillData(70, 75, 80, 85, 90)
        let COOLDOWN = skillData(9, 9, 9, 9, 9)
        let RANGE = skillData(800, 800, 800, 800, 800)
        let aDef = new AbilityDefinitionIllidanChannel(abilityId)
            ..setupIcon("BTNBlackArrows")
            ..setupWithHotKey("Piercing Shot", "Q")
            ..setArtCaster("")
            ..setArtEffect("")
            ..setMissileArt("")
            ..setArtTarget("")
            ..setAnimationNames("spell,throw")
            ..setSkillData(COOLDOWN, MANA, RANGE)

        for lvl = 1 to 5
            aDef
                ..setArtDuration(lvl, 0)
                ..setOptions(lvl, 1)
                ..setTargetType(lvl, 2)
                ..setFollowThroughTime(lvl, 0)
                ..setDisableOtherAbilities(lvl, false)
                ..setBaseOrderID(lvl, "channel")

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceStrength(PIERCING_SHOT_DAMAGE_BONUS)
    tooltip.setLearnString("Shoots an arrow towards the target direction, dealing damage to enemies it strikes through.", (int lvl) -> (begin
        return "{0}{S0} damage.".format(
        PIERCING_SHOT_DAMAGE[lvl-1].str())
    end) )
    
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Shoots an arrow towards the target direction, dealing {0}{S0} damage to enemies it strikes through.".format(
            PIERCING_SHOT_DAMAGE[lvl-1].str())
        )
    addDynamicTooltipStrength(heroType, tooltip)

constant real array TERROR_DURATION = [2, 2.6, 3.2, 3.8, 4.4]
constant real TERROR_DURATION_BONUS = 2
real array TERROR_AOE = [700, 750, 800, 850, 900]

constant BUFF_TERROR = new BuffType(false, DispelLevel.DISPEL)

constant TERROR_BUFF_ID = compiletime(createAuraBuff("Terror", "This unit was hit by Terror; its attacks will miss.", Icons.bTNHowlOfTerror))
constant TERROR_ABILITY_ID = compiletime(createNegativeBuffAbility(5, TERROR_BUFF_ID, Abilities.howlTarget, ""))

function terror(int abilityId)

    if compiletime
        let MANA = skillData(70, 70, 70, 70, 70)
        let COOLDOWN = skillData(13, 12, 11, 10, 9)
        new AbilityDefinitionPitLordHowlofTerror(abilityId)
            ..setAnimationNames("spell,slam")
            ..setupIcon("BTNHowlOfTerror")
            ..setupWithHotKey("Terror", "W")
            ..targetNone()
            ..setSkillData(COOLDOWN, MANA, 0)

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(TERROR_DURATION_BONUS)
    tooltip.setLearnString("Terrifies nearby enemies, making them miss on their attacks.", (int lvl) -> (begin
        return "{0}{I0} seconds, {1} area of effect.".format(
        TERROR_DURATION[lvl-1].toExactString(),
        TERROR_AOE[lvl-1].str())
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Terrifies enemies within {0} range, making them miss on their attacks for {1}{I0} seconds.".format(
            TERROR_AOE[lvl-1].str(), TERROR_DURATION[lvl-1].toString()))
    addDynamicTooltipIntelligence(heroType, tooltip)


function boneBrothers(int abilityId)
    let COOLDOWN = skillData(18, 15, 12, 9, 6)
    let RANGE = skillData(600, 750, 900, 1050, 1200)
    if compiletime
        let MANA = skillData(70, 65, 60, 55, 50)
        let aDef = new AbilityDefinitionFarseerChainLightning(abilityId)
            ..setAnimationNames("spell")
            ..setupIcon("BTNSkeletalLongevity")
            ..setupWithHotKey("Bone Brothers", "E")
            ..setMissileArt("")
            ..setArtTarget("")
            ..setLightningEffects("")
            ..setSkillData(COOLDOWN, MANA, RANGE)

        for lvl = 1 to 5
            aDef
                ..setDamageperTarget(lvl, 0)
                ..setDamageReductionperTarget(lvl, 0)
                ..setNumberofTargetsHit(lvl, 1)
                ..setTargetsAllowed(lvl, "nonsapper,player")

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(TERROR_DURATION_BONUS)
    tooltip.setLearnString("Swaps position with one of his skeletons.", (lvl) -> (begin
        return "{0} range, {1} seconds cooldown.".format( RANGE.data(lvl).str(), COOLDOWN.data(lvl).str())
    end))
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Swaps position with one of his skeletons.")
    addDynamicTooltipIntelligence(heroType, tooltip)

        
constant real array DEATH_COIL_DMG_BASE = [200, 250, 300, 350, 400]
constant real array DEATH_COIL_DMG_FACTOR = [15, 20, 25, 30, 35]
constant real DEATH_COIL_DMG_BASE_BONUS = 250
constant real DEATH_COIL_DMG_FACTOR_BONUS = 60
constant real DEATH_COIL_DURATION = 10

constant integer BUFF_ID_ON_DEATH_COIL = compiletime(createDummyBuff())

function deathpact(int abilityId)

    if compiletime
        let MANA = skillData(150, 160, 170, 180, 190)
        let COOLDOWN = skillData(90, 90, 90, 90, 90)
        let RANGE = skillData(800, 900, 1000, 1100, 1200)
        new AbilityDefinitionRoar(abilityId)
            ..setLevels(5)
            ..setAnimationNames("spell")
            ..setupIcon("BTNSkullSpirits")
            ..setupWithHotKey("Death Pact", "R")
            ..setArtCaster("Abilities\\Spells\\Undead\\DeathPact\\DeathPactCaster.mdl")
            ..targetNone()
            ..setSkillData(COOLDOWN, MANA, 0)

        let aDefDeathCoil = createTargetMissile(ABILITY_DEATH_COIL, BUFF_ID_ON_DEATH_COIL)
            ..setLevels(5)
            ..setButtonPositionNormalX(3)
            ..setButtonPositionNormalY(2)
            ..setHotkeyNormal("R")
            ..setupIcon("BTNDeathCoil")
            ..setHeroAbility(false)
            ..setMissileArt("Abilities\\Spells\\Undead\\DeathCoil\\DeathCoilMissile.mdl")
            ..setMissileArc(0)
            ..setMissileSpeed(1100)
            ..setArtSpecial("Abilities\\Spells\\Undead\\DeathCoil\\DeathCoilSpecialArt.mdl")
            ..targetEnemyHeroes()
            ..setSkillData(DEATH_COIL_DURATION, 0, RANGE)


        ABIL_DEF_MAP.put(aDefDeathCoil.getNewId(), aDefDeathCoil)

        for lvl = 1 to 5
            aDefDeathCoil
                ..setTooltipNormal(lvl, "(R) Death Coil - [|cffffcc00Level "+lvl.toString()+"|r]")


    var tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(DEATH_COIL_DMG_BASE_BONUS, DEATH_COIL_DMG_FACTOR_BONUS)
    tooltip.setLearnString("Sacrifices all his skeletons to unlock the power of Death Coil for "+DEATH_COIL_DURATION.str()+" seconds.|nDeath Coil deals massive magic damage at the target enemy hero. Sacrificing more skeletons increases the damage of Death Coil.", (int lvl) -> (begin
        return "{0}{I0} base damage, {1}{I1} damage per sacrificed skeleton.".format(
        DEATH_COIL_DMG_BASE[lvl-1].str(),
        DEATH_COIL_DMG_FACTOR[lvl-1].str())
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Sacrifices all his skeletons to unlock the power of Death Coil for {0} seconds.|nDeath Coil deals {1}{I0} plus {2}{I1} for every sacrificed skeleton magic damage to the target enemy hero.".format(
            DEATH_COIL_DURATION.str(),
            DEATH_COIL_DMG_BASE[lvl-1].str(),
            DEATH_COIL_DMG_FACTOR[lvl-1].str()))

    addDynamicTooltipIntelligence(heroType, tooltip)

    tooltip = new DynamicTooltip(ABILITY_DEATH_COIL)
    tooltip.setReplaceIntelligence(DEATH_COIL_DMG_BASE_BONUS, DEATH_COIL_DMG_FACTOR_BONUS)
    tooltip.setLearnString("", (lvl) -> "" )
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Deals {0}{I0} magic damage and additional {1}{I1} magic damage for every sacrificed skeleton to the target enemy hero.".format(
            DEATH_COIL_DMG_BASE[lvl-1].str(),
            DEATH_COIL_DMG_FACTOR[lvl-1].str()))
    addDynamicTooltipIntelligence(heroType, tooltip)
        

function setupStats()
    heroType
        
        ..setStat(Stat.AR, 24, 36)
        ..setStat(Stat.AS, 34, 88)
        ..setStat(Stat.HP, 7, 32)
        ..setStat(Stat.HR, 4, 19)
        ..setStat(Stat.MP, 12, 29)
        ..setStat(Stat.MR, 7, 22)
        ..setStat(Stat.MS, 6, 21)
        ..setStat(Stat.STR, 16, 91)
        ..setStat(Stat.AGI, 24, 31)
        ..setStat(Stat.INT, 6, 23)

function onDamage()
    let target = GetTriggerUnit()
    if(target.hasAbility(BUFF_ID_ON_DEATH_COIL))
        target.removeAbility(BUFF_ID_ON_DEATH_COIL)

        let caster = GetEventDamageSource()
        if target.isTargetable(caster.getOwner(), false, true)
            let level = caster.getAbilityLevel(ABILITY_DEATH_PACT)
            GetEventDamageSource().dealDamage(target, 
            DEATH_COIL_DMG_BASE[level-1].bonus(caster.getHeroInt(), DEATH_COIL_DMG_BASE_BONUS)+
            skeletonCount*DEATH_COIL_DMG_FACTOR[level-1].bonus(caster.getHeroInt(), DEATH_COIL_DMG_FACTOR_BONUS), ReductionType.MAGIC)
        doAfter(1, () -> (begin
            caster.removeAbility(ABILITY_DEATH_COIL)
            caster.getOwner().setAbilityAvailable(ABILITY_DEATH_PACT, true)
        end))

function onAttack(unit attacker, unit target, boolean _isActive)
    let level = attacker.getAbilityLevel(ABILITY_BLACK_ARROW)
    if level!=0 and target.isTargetable(attacker.getOwner(), false, true) and target.isVisible(attacker.getOwner()) and not target.isType(UNIT_TYPE_STRUCTURE) and not target.isType(UNIT_TYPE_HERO)
        doAfter(0, () -> (begin
            if(target.getHP() <= BLACK_ARROW_THRESHOLD[level-1])
                let pos =  target.getPos()
                attacker.dealDamage(target, BLACK_ARROW_THRESHOLD[level-1]+1, ReductionType.NONE)
                doAfter(0.1, () -> (begin
                    let skeleton = createUnit(attacker.getOwner(), 'n00B'+level, pos, attacker.getPos().angleTo(target.getPos()))
                    ..setTimedLife(BLACK_ARROW_DURATION[level-1])
                    skeletons.addUnit(skeleton)
                    SOUND_BLACK_ARROW.playOnPoint(pos.toVec3()).snd.setVolume(150)
                end))
        end))

function castArrow()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)
    let facing = caster.getPos().angleTo(vec2(GetSpellTargetX(), GetSpellTargetY()))
    new Missile(caster, caster.getPos().withZ(80), 1500, facing, "Abilities\\Weapons\\BallistaMissile\\BallistaMissile.mdl")
        ..hitOnce()
        ..setSize(75)
        ..setScale(1.2)
        ..addModel(Abilities.avengerMissile)
        ..setHitCondition((Missile missile, unit target) -> (begin
        return not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(missile.getOwner().getOwner(), false, true)
    end) )
        ..setHitFunction((Missile missile, unit target) -> (begin
        let missileCaster = missile.getOwner()
        missileCaster.dealDamage(Missile.getMissileTarget(), (PIERCING_SHOT_DAMAGE[level-1]).bonus(missileCaster.getHeroStr(), PIERCING_SHOT_DAMAGE_BONUS), ReductionType.PHYSICAL)

    end) )
        ..setMaxRange(1000)

function castTerror()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)
    let nearby = CreateGroup()
    nearby.enumUnitsInRange(caster.getPos(), TERROR_AOE[level-1])

    let dur = TERROR_DURATION[level-1].bonus(caster.getHeroInt(), TERROR_DURATION_BONUS)

    while(not nearby.isEmpty())
        let target = FirstOfGroup(nearby)
        nearby.removeUnit(target)
        if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(caster.getOwner(), false, true)
            target.addBuffReduced( caster, dur, MISS, 1).setDispelLevel(DispelLevel.DISPEL)
            target.addBuffReduced( caster, dur, BUFF_TERROR, level)

    nearby.destr()

function castBoneBrothers()
    let caster = GetTriggerUnit()
    let target = GetSpellTargetUnit()
    let targetPos = target.getPos()
    let casterPos = caster.getPos()
    doAfter(0, () -> (begin
        target.setPos(casterPos)
        caster.setPos(targetPos)
        //target might nor be at the exact place, because it was still occupied by caster
        target.setPos(casterPos)
    end))

    let lfx = addLightning(LIGHTNING_DRAIN, true, targetPos, casterPos)
    doAfter(0.5, ()->lfx.destr())

function castDeathPact()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)
    var skeleton = FirstOfGroup(skeletons)
    var count = 0
    while(skeleton!=null)
        skeletons.removeUnit(skeleton)
        if(skeleton.isAlive())
            skeleton.addEffect("Abilities\\Spells\\Undead\\DeathPact\\DeathPactTarget.mdl", "origin").destr()
            skeleton.kill()
            count++
        skeleton = FirstOfGroup(skeletons)
    skeletonCount = count
    doAfter(0.25, () -> (begin
        caster.getOwner().setAbilityAvailable(ABILITY_DEATH_PACT, false)
        caster.addAbility(ABILITY_DEATH_COIL)
        caster.setAbilityLevel(ABILITY_DEATH_COIL, level)
        heroType.updateTooltipsInt(caster)
    end))
    doAfter(DEATH_COIL_DURATION+1, () -> (begin
        caster.removeAbility(ABILITY_DEATH_COIL)
        caster.getOwner().setAbilityAvailable(ABILITY_DEATH_PACT, true)
    end))


function retreatAI(IHeroAI _ai)

function attackAI(IHeroAI ai)
    let hero = ai.getHeroUnit()

    unit target
    if hero.getMana()/hero.getMaxMana() > 0.5
        target = hero.findTarget(500, AbilityTargetFocus.ENEMY_HERO, AbilityTargetPriority.LOW_HEALTH, null)
        if target.isTargetable(hero.getOwner(), false, true)
            ai.issue("channel", target.getPos())

    target = hero.findTarget(600, AbilityTargetFocus.ENEMY, AbilityTargetPriority.LOW_HEALTH, null)
    if target.isTargetable(hero.getOwner(), false, true)

        if not ai.getAttacking()
            ai.attack(target)

function teamFightAI(IHeroAI ai)
    let ulti = heroType.getAbilityId(AbilitySlot.R)
    let hero = ai.getHeroUnit()

    if hero.getAbilityLevel(ulti) > 0
        ai.issue("roar")
        ai.issue("acidbomb", ai.getTeamFightTarget())

    if ai.getTeamFightTarget().getPos().distanceTo(hero.getPos()) < 600
        ai.issue("channel", ai.getTeamFightTarget().getPos())

    let g = CreateGroup()
    unit u
    int count = 0
    g.enumUnitsInRange(hero.getPos(), TERROR_AOE[hero.getAbilityLevel(ABILITY_TERROR)] - 150)
    while(true)
        u = FirstOfGroup(g)
        if u == null
            break
        g.removeUnit(u)
        if u.isTargetable(hero.getOwner(), false, true)
            if u.isType(UNIT_TYPE_HERO)
                count++

    g.destr()
    if count != 0
        if ai.issue("howlofterror")
            return

        
    let target = ai.getTeamFightTarget()
    if target.isTargetable(hero.getOwner(), false, true)


        if not ai.getAttacking()
            ai.attack(target)
            
@compiletime
function setupTooltips()

    blackArrow(ABILITY_BLACK_ARROW)
    piercingShot(ABILITY_PIERCING_SHOT)
    terror(ABILITY_TERROR)
    boneBrothers(ABILITY_BONE_BROTHERS)
    deathpact(ABILITY_DEATH_PACT)
    createHeroButton(THIS_ID, THIS_BUTTON_POS, THIS_ICON)


function initHeroType()
    setupStats()
    onCast(ABILITY_PIERCING_SHOT, () -> castArrow())
    onCast(ABILITY_TERROR, () -> castTerror())
    onCast(ABILITY_BONE_BROTHERS, () -> castBoneBrothers())
    onCast(ABILITY_DEATH_PACT, () -> castDeathPact())

    heroType..setSkillBuild("QWQWQWQWQWEEEEE")
    ..addItem(ITEM_ID_BOOTS_BASE)
    //..addItem(ITEM_ID_BLOOD_SWORD)
    //..addItem(ITEM_ID_INFERNAL_BOW)
    //..addItem(ITEM_ID_RUNIC_ARMOR)
    //..addItem(ITEM_ID_SACRIFICIAL_DAGGER)
    //..addItem(ITEM_ID_CURSED_SWORD)
    delayInit(5) ->
        heroType
        ..setRetreatAI((IHeroAI ai) -> (retreatAI(ai)))
        ..setAttackAI((IHeroAI ai) -> (attackAI(ai)))
        ..setTeamFightAI((IHeroAI ai) -> (teamFightAI(ai)))
        ..setOnAttackFunc() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, boolean attack, boolean active, boolean advanced) ->
            onAttack(source, target, active)

        onLeave(() -> (begin
            skeletons.removeUnit(getEnterLeaveUnit())
        end))

        BUFF_TERROR.setupBuffWithIcon(TERROR_BUFF_ID, TERROR_ABILITY_ID)

        addOnDamageFunc( Condition (function onDamage))
    
init
    
    heroType = HeroType.create(THIS_HERO, THIS_ICON, THIS_ID, true)
    ..setOnInitFunction(() -> initHeroType())

    setupTooltips()
    addButtonToTavern(THIS_ID, THIS_BUTTON_POS, heroType, 0)
        
