package ElementalMage

//11

import HeroInclude

public constant HERO_ELEMENTAL_MAGE = 'H00P'
constant THIS_HERO = HERO_ELEMENTAL_MAGE
constant THIS_ID = 11
constant THIS_BUTTON_POS = 11 //button pos from 0 to 11
constant THIS_ICON = "BTNCloakOfResistance"
IHeroType heroType = null


constant ABILITY_FRENZY = 'AY1P'
constant ABILITY_FROST_BOLT = 'AY1Q'
constant ABILITY_FIRE_BLINK = 'AY1W'
constant ABILITY_ELEMENTAL_MARK = 'AY1E'
constant ABILITY_FROST_AND_FLAME = 'AY1R'


BuffType buffFrenzy
constant FRENZY_BUFF_ID = compiletime(createAuraBuff("Frenzy", "This unit is under the effect of Frenzy; it attacks faster.", "PASFrostFireFrenzy"))
constant FRENZY_ABILITY_ID = compiletime(createPositiveBuffAbility(5, FRENZY_BUFF_ID, "", ""))

constant real FRENZY_DURATION = 3.
constant real array FRENZY_BONUS = [2, 2.5, 3, 3.5, 4]


function passive(int abilityId)
    if compiletime
        createNoEffectAbiltiy(abilityId)
            ..setupWithHotKey("Frenzy", "D")
            ..setupIcon("PASFrostFireFrenzy")


    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(0)
    tooltip.setLearnString("Increases the Elemental Mage's attack speed everytime he attacks. If he does not attack for {0} seconds, the bonus is gone.".format(FRENZY_DURATION.toExactString()), (int lvl) -> (begin
        return "{0}% attack speed bonus".format(
            FRENZY_BONUS[lvl-1].toExactString())
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(false, lvl, "Increases the Elemental Mage's attack speed by {1}% everytime he attacks. If he does not attack for {0} seconds, the bonus is gone.".format(
            FRENZY_DURATION.toExactString(), FRENZY_BONUS[lvl-1].toExactString())
        )
    addDynamicTooltipIntelligence(heroType, tooltip)


BuffType buffFrostBolt
constant FROST_BOLT_BUFF_ID = compiletime(createAuraBuff("Frost Attack", "This unit was hit by a Frost Attack; it is slowed.", Icons.bTNOrbOfFrost))
constant FROST_BOLT_ABILITY_ID = compiletime(createNegativeBuffAbility(5, FROST_BOLT_BUFF_ID, Abilities.frostDamage, "chest"))

constant int array FROST_BOLT_SLOW = [40, 45, 50, 55, 60]
constant real array FROST_BOLT_DURATION = [2.5, 3, 3.5, 4, 4.5]


constant real array FROST_BOLT_DAMAGE = [70, 100, 130, 160, 190]
constant real FROST_BOLT_DAMAGE_BONUS = 120


function abilityQ(int abilityId)
    if compiletime
        let MANA = skillData(120, 125, 130, 135, 140)
        let COOLDOWN = skillData(8, 8, 8, 8, 8)
        new AbilityDefinitionIllidanChannel(abilityId)
            ..setupIcon("BTNOrbOfFrost2")
            ..setupChannel(TargetType.POINT, "channel", 1.1)
            ..setAnimationNames("spell")
            ..setupWithHotKey("Frost Bolt", "Q")
            ..setLightningEffects("")
            ..setArtTarget("")
            ..setMissileArt("")
            ..setArtSpecial("")
            ..setLightningEffects("")
            ..setSkillData(COOLDOWN, MANA, 800)

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(FROST_BOLT_DAMAGE_BONUS)
    tooltip.setLearnString("Summons an orb of frost that damages and slows all enemies close to it.", (int lvl) -> (begin
        return "{0}{I0} damage, {1}% slow for {2} seconds.".format(
            FROST_BOLT_DAMAGE[lvl-1].str(), FROST_BOLT_SLOW[lvl-1].str(), FROST_BOLT_DURATION[lvl-1].toExactString())
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Summons an orb of frost that deals {0}{I0} magic damage to all enemies close to it and slows them by {1}% for {2} seconds.".format(
            FROST_BOLT_DAMAGE[lvl-1].str(), FROST_BOLT_SLOW[lvl-1].str(), FROST_BOLT_DURATION[lvl-1].toExactString()
        ))
    addDynamicTooltipIntelligence(heroType, tooltip)


constant real array FIRE_BLINK_MAX_RANGE =[700, 700, 700, 700, 700]
constant real array FIRE_BLINK_COOLDOWN = [13, 13, 13, 13, 13]

constant real array FIRE_BLINK_DAMAGE = [80, 125, 170, 215, 260]
constant real FIRE_BLINK_DAMAGE_BONUS = 150

constant real FIRE_BLINK_AOE = 300


function abilityW(int abilityId)
    if compiletime
        let MANA = skillData(140, 150, 160, 170, 180)
        let COOLDOWN = createSkillData(13)
        let aDef = new AbilityDefinitionWardenBlink(abilityId)
            ..setAnimationNames("")
            ..setupIcon("BTNSupernova")
            ..setupWithHotKey("Aspect of Fire", "W")
            ..setLightningEffects("")
            ..setArtTarget("")
            ..setMissileArt("")
            ..setArtSpecial("")
            ..setLightningEffects("")
            ..setSkillData(COOLDOWN, MANA, 0)

        for lvl = 1 to 5
            aDef
                ..setCastRange(lvl, FIRE_BLINK_MAX_RANGE[lvl-1])
                ..setMinimumRange(lvl, 250)
                ..setMaximumRange(lvl, FIRE_BLINK_MAX_RANGE[lvl-1])

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(FIRE_BLINK_DAMAGE_BONUS)
    tooltip.setLearnString("Teleports the Elemental Mage to the target location, dealing fire damage to nearby enemy units.", (int lvl) -> (begin
        return "{0}{I0} damage.".format(
            FIRE_BLINK_DAMAGE[lvl-1].str())
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Teleports the Elemental Mage to the target location, dealing {0}{I0} fire damage to nearby enemy units.".format(
            FIRE_BLINK_DAMAGE[lvl-1].str()
        ))
    addDynamicTooltipIntelligence(heroType, tooltip)

constant real MARK_DURATION = 8
constant real array MARK_DMG = [15, 25, 35, 45, 55]
constant real MARK_DMG_BONUS = 30

constant int array MARK_WP_REDUCTION = [10, 15, 20, 25, 30]
constant real MARK_STUN = 1.5

constant int MARK_REQUIRED_STACKS = 4

BuffType buffElementalMark
constant MARK_BUFF_ID = compiletime(createAuraBuff("Elemental Mark", "This unit is under the effect of Elemental Mark; it has reduced willpower and it will take additional magic damage when attacked by the Elemental Mage. The unit will be stunned after "+MARK_REQUIRED_STACKS.str()+" attacks.", "BTNElementalMark"))
constant MARK_ABILITY_ID = compiletime(createNegativeBuffAbility(5, MARK_BUFF_ID, "ElementalMark2.mdx", "overhead"))


function abilityE(int abilityId)
    if compiletime
        let MANA = skillData(135, 140, 145, 150, 155)
        let COOLDOWN = skillData(10, 10, 10, 10, 10)
        new AbilityDefinitionIllidanChannel(abilityId)
            ..setupIcon("BTNElementalMark")
            ..setupChannel(TargetType.UNIT, "soulburn", 1.1)
            ..setAnimationNames("spell")
            ..setupWithHotKey("Elemental Mark", "E")
            ..targetEnemies()
            ..setSkillData(COOLDOWN, MANA, 600)

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setSummary("Reduces the target's willpower and attacks against it will deal additional magic damage. After {0} attacks the target is stunned.".format(MARK_REQUIRED_STACKS.str()))
    tooltip.setReplaceIntelligence(MARK_DMG_BONUS)
    tooltip.setLearnString("Reduces the target unit's willpower and makes it take additional magic damage, when the Elemental Mage attacks. After {2} attacks the target is stunned for {0} seconds. Lasts {1} seconds.".format(
        MARK_STUN.toExactString(), MARK_DURATION.toExactString(), MARK_REQUIRED_STACKS.str()
    ), (int lvl) -> (begin
        return "-{0} willpower, {1}{I0} magic damage.".format(
            MARK_WP_REDUCTION[lvl-1].toString(), MARK_DMG[lvl-1].str()
        )
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Reduces the target unit's willpower by {2} and makes it take {3}{I0} additional magic damage, when the Elemental Mage attacks. After {4} attacks the target is stunned for {0} seconds. Lasts {1} seconds.".format(
            MARK_STUN.toExactString(), MARK_DURATION.toExactString(), MARK_WP_REDUCTION[lvl-1].toString(), MARK_DMG[lvl-1].str(), MARK_REQUIRED_STACKS.str()
        ))
    addDynamicTooltipIntelligence(heroType, tooltip)


constant int FF_FROST_ARTILLERY = compiletime(ArtilleryDetection.createArtilleryDummy(0, 0, 600, 2.5, Abilities.frostWyrmMissile, 1600, 0.1))
constant int FF_FLAME_ARTILLERY = compiletime(ArtilleryDetection.createArtilleryDummy(0, 0, 600, 2.5, Abilities.redDragonMissile, 1600, 0.1))

constant real array FF_IMPACT_DAMAGE = [140, 170, 200, 230, 260]
constant real FF_IMPACT_DAMAGE_BONUS = 125

constant real array FF_DOT = [24, 32, 40, 48, 56]
constant real FF_DOT_BONUS = 40

constant int array FF_SLOW = [30, 40, 50, 60, 70]
constant real array FF_BUFF_DURATION = [3, 3.5, 4, 4.5, 5]
constant real FF_BUFF_DURATION_BONUS = 1

constant real FF_AOE = 400

BuffType buffFFBuff
constant FF_BUFF_ID = compiletime(createAuraBuff("Frost and Flame", "This unit was hit by Frost and Flame; it is slowed and takes damage over time.", "BTNMageOrb"))
constant FF_ABILITY_ID = compiletime(ABIL_ID_GEN.next())



function abilityR(int abilityId)
    if compiletime
        let MANA = skillData(225, 250, 275, 300, 325)
        let COOLDOWN = skillData(60, 60, 60, 60, 60)
        let buffADef = new AbilityDefinitionAuraSlow(FF_ABILITY_ID)
            ..setArtTarget(Abilities.frostDamage+","+Abilities.breathOfFireDamage)
            ..setTargetAttachmentPoint("chest")
            ..setTargetAttachmentPoint1("origin")
            ..setTargetAttachments(2)
            ..hideIcon()
        for i = 1 to 5
            buffADef
                ..setTargetsAllowed(i, "invulnerable,self,vulnerable")
                ..setAreaofEffect(i, 1)
                ..setMovementSpeedFactor(i, 0)
                ..setAttackSpeedFactor(i, 0)
                ..setBuffs(i, FF_BUFF_ID.toRawCode())

        let aDef = new AbilityDefinitionIllidanChannel(abilityId)
            ..setupIcon("BTNMageOrb")
            ..setupWithHotKey("Frost and Flame", "R")
            ..setupChannel(TargetType.AREA, "silence", 1.1)
            ..setLightningEffects("")
            ..targetNone()
            ..setSkillData(COOLDOWN, MANA, 3000)

        for lvl = 1 to 5
            aDef
                ..setDurationHero(lvl, 0.01)
                ..setAreaofEffect(lvl, FF_AOE)

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(FF_IMPACT_DAMAGE_BONUS, FF_DOT_BONUS, FF_BUFF_DURATION_BONUS)
    tooltip.setLearnString("Calls the power of Frost and Flame to fall from the sky at the target location to slow down and ignite nearby enemies.", (int lvl) -> (begin
        return "{0}{I0} impact damage, {1}{I1} damage per second, {2}% slow, lasts {3}{I2} seconds.".format(
            FF_IMPACT_DAMAGE[lvl-1].str(), FF_DOT[lvl-1].str(), FF_SLOW[lvl-1].str(), FF_BUFF_DURATION[lvl-1].toExactString()
        )
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Calls the power of Frost and Flame to fall from the sky at the target location to slow down and ignite nearby enemies. "+
        "Deals {0}{I0} impact damage, {1}{I1} damage per second and slows movement speed by {2}%. Lasts {3}{I2} seconds.".format(
            FF_IMPACT_DAMAGE[lvl-1].str(), FF_DOT[lvl-1].str(), FF_SLOW[lvl-1].str(), FF_BUFF_DURATION[lvl-1].toExactString()
        ))
    addDynamicTooltipIntelligence(heroType, tooltip)


function onAttack(unit attacker, unit target, boolean _advanced)
    let level = attacker.getAbilityLevel(ABILITY_FRENZY)
    if level > 0
        attacker.addBuff(attacker, FRENZY_DURATION, buffFrenzy, level)

    if BuffList.hasBuffType(target, buffElementalMark)
        let mark = BuffList.getBuffOfType(target, buffElementalMark)
        let markLevel = mark.getLevel()
        int stacks = mark.getData() + 1
        if stacks >= MARK_REQUIRED_STACKS
            stacks = 0
            target.addBuffReduced(attacker, MARK_STUN, STUNNED, 1).setDispelLevel(DispelLevel.DISPEL)
        mark.setData(stacks)
        attacker.dealDamage(target, MARK_DMG[markLevel-1].bonus(attacker.getHeroInt(), MARK_DMG_BONUS), ReductionType.MAGIC)


function castFrostBolt()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)
    let facing = caster.getPos().angleTo(vec2(GetSpellTargetX(), GetSpellTargetY()))
    new Missile(caster, caster.getPos().withZ(80), 900, facing, Abilities.frostBoltMissile)
    ..hitOnce()
    ..setSize(100)
    ..addModel(Abilities.zigguratFrostMissile)
    ..setScale(2)
    ..setMaxRange(800)
    ..setHitCondition((Missile missile, unit target) -> (begin
        return not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(missile.getOwner().getOwner(), false, true)
    end) )
    ..setHitFunction((Missile missile, unit target) -> (begin
        let missileCaster = missile.getOwner()
        missileCaster.dealDamage(Missile.getMissileTarget(), (FROST_BOLT_DAMAGE[level-1]).bonus(missileCaster.getHeroInt(), FROST_BOLT_DAMAGE_BONUS), ReductionType.MAGIC)
        Missile.getMissileTarget().addBuffReduced(missileCaster, FROST_BOLT_DURATION[level-1], buffFrostBolt, level)
    end) )
        

function castFireBlink()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)
    let nearby = CreateGroup()

    nearby.enumUnitsInRange(vec2(GetSpellTargetX(),GetSpellTargetY()), FIRE_BLINK_AOE)

    let dmg = (FIRE_BLINK_DAMAGE[level-1]).bonus(caster.getHeroInt(), FIRE_BLINK_DAMAGE_BONUS)
    while(not nearby.isEmpty())
        let target = FirstOfGroup(nearby)
        nearby.removeUnit(target)
        if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(caster.getOwner(), false, true)

            caster.dealDamage(target, dmg, ReductionType.MAGIC)
            target.addEffect(Abilities.redDragonMissile, "chest").destr()

    nearby.destr()

function castElementalMark()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)
    let target = GetSpellTargetUnit()
    target.addBuffReduced(caster, MARK_DURATION, buffElementalMark, level)

function castFrostAndFlame()
    let caster = GetTriggerUnit()
    let casterPos = caster.getPos()
    let casterAngle = caster.getFacingAngle()
    let behindCaster = casterPos.polarOffset(casterAngle, -1000)
    let targetPos = vec2(GetSpellTargetX(), GetSpellTargetY())
    ArtilleryDetection.fireArtillery(caster, FF_FROST_ARTILLERY, behindCaster.polarOffset(casterAngle - angle(bj_PI/2), 600), targetPos) (unit impact, unit caster, int data) ->
    
    ArtilleryDetection.fireArtillery(caster, FF_FLAME_ARTILLERY, behindCaster.polarOffset(casterAngle + angle(bj_PI/2), 600), targetPos) (unit impact, unit caster, int data) ->
        let nearby = CreateGroup()
        let level = caster.getAbilityLevel(ABILITY_FROST_AND_FLAME)
        nearby.enumUnitsInRange(impact.getPos(), FF_AOE)

        
        Fx fx

        for i = 0 to 10
            fx = new Fx(impact.getPos().polarOffset(GetRandomDirectionDeg().fromDeg(), GetRandomReal(0, 300)), Abilities.flameStrikeEmbers)
            fx.setScale(2)
            doAfter(0.5, () -> destroy fx)

        for i = 0 to 10
            fx = new Fx(impact.getPos().polarOffset(GetRandomDirectionDeg().fromDeg(), GetRandomReal(0, 300)), Abilities.breathOfFrostTarget)
            fx.setScale(2)
            destroy fx
            

        let dmg = (FF_IMPACT_DAMAGE[level-1]).bonus(caster.getHeroInt(), FF_IMPACT_DAMAGE_BONUS)
        let dur = FF_BUFF_DURATION[level-1].bonus(caster.getHeroInt(), FF_BUFF_DURATION_BONUS)
        while(not nearby.isEmpty())
            let target = FirstOfGroup(nearby)
            nearby.removeUnit(target)
            if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(impact.getOwner(), false, true)
                caster.dealDamage(target, dmg, ReductionType.MAGIC)
                target.addBuffReduced(caster, dur, buffFFBuff, level)

        nearby.destr()


function setupStats()
    heroType
        
        ..setStat(Stat.AR, 27, 41)
        ..setStat(Stat.AS, 31, 86)
        ..setStat(Stat.HP, 8, 39)
        ..setStat(Stat.HR, 7, 21)
        ..setStat(Stat.MP, 21, 51)
        ..setStat(Stat.MR, 23, 56)
        ..setStat(Stat.MS, 11, 42)
        ..setStat(Stat.STR, 22, 74)
        ..setStat(Stat.AGI, 29, 47)
        ..setStat(Stat.INT, 18, 57)

function retreatAI(IHeroAI _ai)

function attackAI(IHeroAI _ai)

function teamFightAI(IHeroAI _ai)



@compiletime
function setupTooltips()

    passive(ABILITY_FRENZY)
    abilityQ(ABILITY_FROST_BOLT)
    abilityW(ABILITY_FIRE_BLINK)
    abilityE(ABILITY_ELEMENTAL_MARK)
    abilityR(ABILITY_FROST_AND_FLAME)
    createHeroButton(THIS_ID, THIS_BUTTON_POS, THIS_ICON)


function initHeroType()
    setupStats()
    onCast(ABILITY_FROST_BOLT, () -> castFrostBolt())
    onCast(ABILITY_FIRE_BLINK, () -> castFireBlink())
    onCast(ABILITY_ELEMENTAL_MARK, () -> castElementalMark())
    onCast(ABILITY_FROST_AND_FLAME, () -> castFrostAndFlame())
    heroType..setSkillBuild("QWEQWQWQWQWEEEE")
    ..addItem(ITEM_ID_BOOTS_BASE)
    //..addItem(ITEM_ID_RUNIC_ARMOR)
    //..addItem(ITEM_ID_AXE_OF_DECAY)
    //..addItem(ITEM_ID_BLESSED_GOBLET)
    //..addItem(ITEM_ID_ARCANE_SHIELD)
    //..addItem(ITEM_ID_WAR_DRUM)
    delayInit(5) ->
        heroType
        ..setRetreatAI((IHeroAI ai) -> (retreatAI(ai)))
        ..setAttackAI((IHeroAI ai) -> (attackAI(ai)))
        ..setTeamFightAI((IHeroAI ai) -> (teamFightAI(ai)))
        ..setOnAttackFunc() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, boolean attack, boolean active, boolean advanced) ->
            onAttack(source, target, active)

        buffFFBuff = new BuffType(false, DispelLevel.DISPEL)
        buffFFBuff.setupBuffWithIcon(FF_BUFF_ID, FF_ABILITY_ID)
        buffFFBuff.addSetupFunction() (Buff thisBuff, int factor) ->
            thisBuff.getTarget().wrapper().modBlue(factor)
        buffFFBuff.addLevelFunction() (Buff thisBuff, int factor) ->
            thisBuff.getTarget().wrapper().modMoveSpeedRelative( -factor * FF_SLOW[thisBuff.getLevel() - 1]*10)

        buffFFBuff.setPeriodicTime(0.25)
        buffFFBuff.addPeriodicFunction((Buff whichBuff) -> (begin
            let caster = whichBuff.getCaster()
            let target = whichBuff.getTarget()
            if target.isTargetable(caster.getOwner(), false, true)
                caster.dealDamage(target, 0.25 * FF_DOT[whichBuff.getLevel()-1].bonus(caster.getHeroInt(), FF_DOT_BONUS), ReductionType.MAGIC)
        end))

        buffFrostBolt = new BuffType(false, DispelLevel.DISPEL)
        buffFrostBolt.setupBuffWithIcon(FROST_BOLT_BUFF_ID, FROST_BOLT_ABILITY_ID)
        buffFrostBolt.addSetupFunction() (Buff thisBuff, int factor) ->
            thisBuff.getTarget().wrapper().modBlue(factor)

        buffFrostBolt.addLevelFunction() (Buff thisBuff, int factor) ->
            let level = thisBuff.getLevel()
            thisBuff.getTarget().wrapper()
                ..modMoveSpeedRelative( -factor * FROST_BOLT_SLOW[level - 1]*10)
                ..modAttackSpeed( -factor * FROST_BOLT_SLOW[level - 1])

        buffFrenzy = new BuffType(true, DispelLevel.NONE)
        buffFrenzy.setupBuffWithIcon(FRENZY_BUFF_ID, FRENZY_ABILITY_ID)
        buffFrenzy.addSetupFunction() (Buff thisBuff, int factor) ->
            if factor == 1
                let level = thisBuff.getLevel() - 1
                let stacks = (FRENZY_BONUS[level]*10).toInt()
                thisBuff.getTarget().wrapper()
                ..modAttackSpeed( stacks div 10 )
                thisBuff.setData(stacks)
            else
                let stacks = thisBuff.getData()
                thisBuff.getTarget().wrapper()
                ..modAttackSpeed( -(stacks div 10))

        buffFrenzy.addStackFunction( (Buff whichBuff) -> (begin
            let level = whichBuff.getLevel() - 1
            let oldStacks = whichBuff.getData()
            let newStacks = min(oldStacks + (FRENZY_BONUS[level]*10).toInt(), 1000)

            whichBuff.setData(newStacks)
            whichBuff.getTarget().wrapper()
                ..modAttackSpeed( (newStacks div 10) - (oldStacks div 10))
        end))


        buffElementalMark = new BuffType(false, DispelLevel.DISPEL)
        buffElementalMark.setupBuffWithIcon(MARK_BUFF_ID, MARK_ABILITY_ID)
        buffElementalMark.addLevelFunction() (Buff thisBuff, int factor) ->
            let level = thisBuff.getLevel()
            thisBuff.getTarget().wrapper().modWillpower( -factor * MARK_WP_REDUCTION[level - 1])


init
    heroType = HeroType.create(THIS_HERO, THIS_ICON, THIS_ID, false)
    ..setOnInitFunction(() -> initHeroType())

    setupTooltips()
    addButtonToTavern(THIS_ID, THIS_BUTTON_POS, heroType, 0)

   


