package Drillmo

//6

import HeroInclude

public constant HERO_DRILLMO = 'H00L'
constant THIS_HERO = HERO_DRILLMO
constant THIS_ID = 6
constant THIS_BUTTON_POS = 6 //button pos from 0 to 11
constant THIS_ICON = Icons.bTNFlyingMachine
IHeroType heroType = null

constant ABILITY_OVERCHARGE = 'AZ6P'
constant ABILITY_PULL = 'AZ6Q'
constant ABILITY_SPIKE_BALL = 'AZ6W'
constant ABILITY_SPEED_BOOST = 'AZ6E'
constant ABILITY_ROCKET = 'AZ6R'

function setupStats()
    heroType
        
        ..setStat(Stat.AR, 33, 57)
        ..setStat(Stat.AS, 11, 24)
        ..setStat(Stat.HP, 13, 62)
        ..setStat(Stat.HR, 7, 36)
        ..setStat(Stat.MP, 17, 44)
        ..setStat(Stat.MR, 14, 31)
        ..setStat(Stat.MS, 12, 34)
        ..setStat(Stat.STR, 20, 58)
        ..setStat(Stat.AGI, 32, 45)
        ..setStat(Stat.INT, 6, 21)

constant int array OVERCHARGE_ATTACK_SPEED = [20, 30, 40, 50, 60]

function passive(int abilityId)
    if compiletime
        createNoEffectAbiltiy(abilityId)
            ..setupWithHotKey("Fast Engine", "D")
            ..setupIcon("PASMechanism")

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceStrength(0)
    tooltip.setLearnString("Increases the hero's attack speed.", (int lvl) -> (begin
        return "{0}% bonus attack speed.".format(
            OVERCHARGE_ATTACK_SPEED[lvl-1].str())
    end) )
        
    for lvl = 1 to 5
        tooltip.setNormalString(false, lvl, "Increases the hero's attack speed by {0}%.".format(
            OVERCHARGE_ATTACK_SPEED[lvl-1].str())
        )
    addDynamicTooltipStrength(heroType, tooltip)

constant real array PULL_DAMAGE = [50, 100, 150, 200, 250]
constant real PULL_DAMAGE_BONUS = 90

constant int PULL_BUFF_ID = compiletime(createAuraBuff("Pull", "This unit is being pulled.", "BTNTitansGrip"))
constant int PULL_ABILITY_ID = compiletime(createPositiveBuffAbility(5, PULL_BUFF_ID, "", ""))

BuffType buffPull

function pull(int abilityId)
    let COOLDOWN = skillData(18, 16, 14, 12, 10)
    if compiletime
        let MANA = skillData(130, 125, 120, 115, 110)
        let RANGE = 700.0
        new AbilityDefinitionIllidanChannel(abilityId)
            ..setupIcon("BTNTitansGrip")
            ..setAnimationNames("spell,two")
            ..setupWithHotKey("Pull", "Q")
            ..setLightningEffects("")
            ..setArtCaster("")
            ..setArtEffect("")
            ..setMissileArt("")
            ..setArtTarget("")
            ..setupChannel(TargetType.POINT, "thunderbolt", 1.5)
            ..targetNone()
            ..setSkillData(COOLDOWN, MANA, RANGE)


    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceStrength(PULL_DAMAGE_BONUS)
    tooltip.setLearnString(CHANNELING_SPELL + "Sends out his hand to damage and pull an enemy to him. While being pulled, the target is stunned, but cannot be targeted.|nThe first target hit once the hand returns will be pulled.", (int lvl) -> (begin
        return "{0}{S0} damage, {1} seconds cooldown.".format(
            PULL_DAMAGE[lvl-1].str(), COOLDOWN.data(lvl).str()
        )
    end) )
    
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, CHANNELING_SPELL + "Sends out his hand to deal {0}{S0} damage to a target and pull it to him. While being pulled, the target is stunned, but cannot be targeted.|nThe first target hit once the hand returns will be pulled.".format(
            PULL_DAMAGE[lvl-1].str()
        ))
    addDynamicTooltipStrength(heroType, tooltip)
    setAnimationSpeed(abilityId, 1.33)

constant real array SPIKE_BALL_DMG = [60, 100, 140, 180, 220]
constant real SPIKE_BALL_DMG_BONUS = 90
constant real array SPIKE_BALL_STUN = [1.4, 1.8, 2.2, 2.6, 3]
constant real array SPIKE_BALL_DOT_DURATION = [4, 4, 4, 4, 4]
constant real array SPIKE_BALL_DOT_DMG = [40, 70, 100, 130, 160]
constant real SPIKE_BALL_DOT_DMG_BONUS = 60

BuffType buffSpikeBall

constant int SPIKE_BALL_BUFF_ID = compiletime(createAuraBuff("Spike Ball", "This unit is taking damage over time.", "BTNSpikeBall"))
constant int SPIKE_BALL_ABILTIY_ID = compiletime(createNegativeBuffAbility(5, SPIKE_BALL_BUFF_ID, "FatalWoundV2.mdx", "chest"))


function spikeBall(int abilityId)

    if compiletime
        let MANA = skillData(110, 120, 130, 140, 150)
        let COOLDOWN = skillData(8, 8, 8, 8, 8)
        new AbilityDefinitionPitLordHowlofTerror(abilityId)
            ..setAnimationNames("spell,slam")
            ..setupIcon("BTNSpikeBall")
            ..setupWithHotKey("Spike Ball", "W")
            ..setArtCaster("")
            ..setArtEffect("")
            ..setMissileArt("")
            ..setArtTarget("")
            ..targetNone()
            ..setSkillData(COOLDOWN, MANA, 0)


    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceStrength(SPIKE_BALL_DMG_BONUS, SPIKE_BALL_DOT_DMG_BONUS)
    tooltip.setLearnString(CHANNELING_SPELL + "Slams the ground with a massive spike ball, dealing damage stunning targets in an area in front of the hero. After that targets will be bleeding and take additional damage.", (int lvl) -> (begin
        return "{0}{S0} instant damage, {1} seconds stun, {2}{S1} damage over {3} seconds.".format(
            SPIKE_BALL_DMG[lvl-1].str(),
            SPIKE_BALL_STUN[lvl-1].toSmartString(),
            SPIKE_BALL_DOT_DMG[lvl-1].str(),
            SPIKE_BALL_DOT_DURATION[lvl-1].toSmartString()
        )
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, CHANNELING_SPELL + "Slams the ground with a massive spike ball, dealing {0}{S0} damage stunning targets in an area in front of the hero for {1} seconds. After that targets will be bleeding and take additional {2}{S1} damage over {3} seconds.".format(
            SPIKE_BALL_DMG[lvl-1].str(),
            SPIKE_BALL_STUN[lvl-1].toSmartString(),
            SPIKE_BALL_DOT_DMG[lvl-1].str(),
            SPIKE_BALL_DOT_DURATION[lvl-1].toSmartString()
        ))
    addDynamicTooltipStrength(heroType, tooltip)
    setAnimationSpeed(abilityId, 2)

constant int array SPEED_BOOST = [20, 25, 30, 35, 40]
constant int SPEED_BOOST_BONUS = 40
constant real array SPEED_BOOST_DURATION = [6, 8, 10, 12, 14]

constant int SPEED_BOOST_BUFF_ID = compiletime(createAuraBuff("Speed Boost", "This unit has increased movement speed.", "BTNGoblinRocketBoots"))
constant int SPEED_BOOST_ABILITY_ID = compiletime(createPositiveBuffAbility(5, SPEED_BOOST_BUFF_ID, "", ""))

BuffType buffSpeedBoost

function speedBoost(int abilityId)

    if compiletime
        let MANA = skillData(50, 55, 60, 65, 70)
        let COOLDOWN = skillData(20, 21, 22, 23, 24)
        let aDef = new AbilityDefinitionBeserk(abilityId)
            ..setAnimationNames("")
            ..setupIcon("BTNGoblinRocketBoots")
            ..setupWithHotKey("Speed Boost", "E")
            ..setArtCaster("")
            ..setArtEffect("")
            ..setMissileArt("")
            ..setArtTarget("")
            ..targetNone()
            ..setSkillData(COOLDOWN, MANA, 0)

        for lvl = 1 to 5
            aDef
                ..setAttackSpeedIncrease(lvl, 0)
                ..setDamageTakenIncrease(lvl, 0)
                ..setMovementSpeedIncrease(lvl, 0)
                ..setDurationHero(lvl, 0.01)


    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(SPEED_BOOST_BONUS.toReal())
    tooltip.setLearnString("Temporarily increases the hero's movement speed.", (int lvl) -> (begin
        return "{0}{I0}% speed bonus, {1} seconds.".format(
            SPEED_BOOST[lvl-1].toString(),
            SPEED_BOOST_DURATION[lvl-1].str()
        )
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Increases the hero's movement speed by {0}{I0}% for {1} seconds.".format(
            SPEED_BOOST[lvl-1].toString(),
            SPEED_BOOST_DURATION[lvl-1].str()
        ))
    addDynamicTooltipIntelligence(heroType, tooltip)

constant int ROCKET_BUFF_ID = compiletime(createDummyBuff())
constant real array ROCKET_DMG = [180, 240, 300, 360, 420]
constant real ROCKET_DMG_BONUS = 110
constant ROCKET_RANGE = [2000., 3000., 4000., 5000., 6000.]

function rocket(int abilityId)
    let COOLDOWN = skillData(44, 40, 36, 32, 28)
    if compiletime
        let MANA = skillData(150, 150, 150, 150, 150)
        let aDef = createTargetMissile(abilityId, ROCKET_BUFF_ID)
            ..setAnimationNames("spell,throw")
            ..setupIcon(Icons.bTNHumanArtilleryUpOne)
            ..setupWithHotKey("Homing Missile", "R")
            ..setArtCaster("")
            ..setArtEffect("")
            ..setMissileArt(Abilities.mortarMissile)
            ..setMissileArc(0.15)
            ..setMissileSpeed(1500)
            ..setArtTarget("")
            ..targetEnemies()
            ..setSkillData(COOLDOWN, MANA, 0)
        
        for lvl = 1 to 5
            aDef.setCastRange(lvl, ROCKET_RANGE[lvl-1])

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceStrength(ROCKET_DMG_BONUS)
    tooltip.setLearnString("Fires a rocket at the target enemy unit, dealing damage in an area around the target.", (int lvl) -> (begin
        return "{0}{S0} damage, {1} range, {2} seconds cooldown.".format(
            ROCKET_DMG[lvl-1].str(),
            ROCKET_RANGE[lvl-1].str(),
            COOLDOWN.data(lvl).str()
        )
    end) )
    
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Fires a rocket at the target enemy unit, dealing {0}{S0} damage in an area around the target.".format(
            ROCKET_DMG[lvl-1].str()
        ))
    addDynamicTooltipStrength(heroType, tooltip)
    setAnimationSpeed(abilityId, 1.33)

class Pull

    private unit caster
    private int level
    private timer checkTimer
    private int count = 0
    private angle direction
    private unit pulledUnit = null
    private boolean hasPulled = false
    private effect fx
    private Buff pullBuff

    construct(unit caster, int level, vec2 target, Buff pullBuff)
        this.pullBuff = pullBuff
        this.caster = caster
        this.level = level
        this.direction = caster.getPos().angleTo(target)
        this.checkTimer = getTimer()
            ..setData(this castTo int)
            ..startPeriodic(0.02, function updateStatic)

        this.fx = addEffect(Units.wisp1, target)
        if not DEBUG_MODE
            fx.setAlpha(0)
        this.caster.setTimeScale(3)

    function update()
        this.count+=3
        if count >= 70-25 or caster.getCurrentOrder() != OrderId("thunderbolt") or (hasPulled and not pulledUnit.isAlive())
            destroy this
        else
            vec2 pos
            real relativePos
            //if count < 15
                //relativePos = count/15
            if count > 25-25
                if count > 35-25
                    relativePos = 2 - (count + 25)/35
                else
                    relativePos = 1

                pos = this.caster.getPos().polarOffset(direction, 700 * relativePos)
                this.fx.setPos(pos)
                if not hasPulled
                    real minDistance = 100
                    unit minUnit = null
                    let nearby = enumUnitsInHitBoxRange(pos, 64)
                
                    while(not nearby.isEmpty())
                        let target = FirstOfGroup(nearby)
                        nearby.removeUnit(target)
                        if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(caster.getOwner(), false, true) and target.isMovable()
                            let distance = target.getPos().distanceTo(pos)
                            if distance < minDistance
                                minDistance = distance
                                minUnit = target

                    nearby.destr()

                    if minUnit != null
                        this.pulledUnit = minUnit
                        hasPulled = true
                        this.caster.dealDamage(this.pulledUnit, PULL_DAMAGE[this.level-1].bonus(this.caster.getStr(), PULL_DAMAGE_BONUS), ReductionType.PHYSICAL)
                        this.pulledUnit.addBuff(caster, 0.15, STUNNED, 1).setDispelLevel(DispelLevel.BREAK)

                else
                    if count < 65 -25
                        this.pulledUnit.addBuff(caster, 0.15, STUNNED, 1).setDispelLevel(DispelLevel.BREAK)
                        this.pulledUnit.setXY(pos)

    static function updateStatic()
        (GetExpiredTimer().getData() castTo Pull).update()

    ondestroy
        this.pullBuff.setData(-1)
        this.pullBuff.dispel()
        this.checkTimer.release()
        this.caster.setTimeScale(1)
        this.fx.destr()
        if this.pulledUnit != null
            this.pulledUnit.setPos(this.pulledUnit.getPos())

function castPull()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)

    let b = caster.addBuff(caster, 10, buffPull, level)
    let pull = new Pull(caster, level, vec2(GetSpellTargetX(), GetSpellTargetY()), b)
    b.setData(pull castTo int)

function castSpikeBall()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)
    doAfter(0.0, () -> (begin
        if caster.getCurrentOrder() == OrderId("thunderclap") or true
            let ballPos = caster.getPos().polarOffset(caster.getFacingAngle(), 140)
            let nearby = CreateGroup()
            nearby.enumUnitsInRange(ballPos, 250)

            let dmg = SPIKE_BALL_DMG[level-1].bonus(caster.getStr(), SPIKE_BALL_DMG_BONUS)

            while(not nearby.isEmpty())
                let target = FirstOfGroup(nearby)
                nearby.removeUnit(target)
                if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(caster.getOwner(), false, true)
                    caster.dealDamage(target, dmg, ReductionType.PHYSICAL)
                    target.addBuffReduced( caster, SPIKE_BALL_STUN[level-1], STUNNED, 1).setDispelLevel(DispelLevel.DISPEL)
                    target.addBuffReduced( caster, SPIKE_BALL_DOT_DURATION[level-1], buffSpikeBall, level)
            nearby.destr()
    end))

function castSpeedBoost()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)
    caster.addBuff(caster, SPEED_BOOST_DURATION[level-1], buffSpeedBoost, level)
    caster.removeAbility('Bbsk')

function onDamage()
    let u = GetTriggerUnit()
    if u.hasAbility(ROCKET_BUFF_ID)
        u.removeAbility(ROCKET_BUFF_ID)
        //addEffect(Abilities.mortarMissile, u.getPos()).destr()
        let caster = GetEventDamageSource()
        let level = caster.getAbilityLevel(ABILITY_ROCKET)
        let nearby = CreateGroup()
        nearby.enumUnitsInRange(u.getPos(), 250)

        let dmg = ROCKET_DMG[level-1].bonus(caster.getStr(), ROCKET_DMG_BONUS)

        while(not nearby.isEmpty())
            let target = FirstOfGroup(nearby)
            nearby.removeUnit(target)
            if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(caster.getOwner(), false, true)
                caster.dealDamage(target, dmg, ReductionType.PHYSICAL)
        nearby.destr()

        
function retreatAI(IHeroAI ai)
    let hero = ai.getHeroUnit()
    let target = hero.findTarget(ROCKET_RANGE[hero.getAbilityLevel(ABILITY_ROCKET)-1], AbilityTargetFocus.ENEMY_HERO, AbilityTargetPriority.LOW_HEALTH, null)
    let rocketLvl = hero.getAbilityLevel(ABILITY_ROCKET)-1
    if target.isTargetable(hero.getOwner(), false, true) and target.getHP()*(1+ARMOR_REDUCTION*target.getArmor()) <= 0.9 * ROCKET_DMG[rocketLvl].bonus(hero.getStr(), ROCKET_DMG_BONUS)
        ai.issue("acidbomb", target)

    ai.issue("berserk")

function attackAI(IHeroAI ai)
    let hero = ai.getHeroUnit()

    unit target
    if hero.getMana()/hero.getMaxMana() > 0.5
        let rocketLvl = hero.getAbilityLevel(ABILITY_ROCKET)-1
        target = hero.findTarget(ROCKET_RANGE[rocketLvl], AbilityTargetFocus.ENEMY_HERO, AbilityTargetPriority.LOW_HEALTH, null)
        if target.isTargetable(hero.getOwner(), false, true) and target.getHP()*(1+ARMOR_REDUCTION*target.getArmor()) <= 0.9 * ROCKET_DMG[rocketLvl].bonus(hero.getStr(), ROCKET_DMG_BONUS)
            ai.issue("acidbomb", target)

    target = hero.findTarget(250, AbilityTargetFocus.ENEMY, AbilityTargetPriority.LOW_HEALTH, null)
    if target.isTargetable(hero.getOwner(), false, true)
        ai.attack(target)

    target = hero.findTarget(500, AbilityTargetFocus.ENEMY, AbilityTargetPriority.LOW_DISTANCE, null)
    if target.isTargetable(hero.getOwner(), false, true)
        ai.attack(target)

function teamFightAI(IHeroAI ai)
    let ulti = heroType.getAbilityId(AbilitySlot.R)
    let hero = ai.getHeroUnit()

    let target = ai.getTeamFightTarget()

    if target.isTargetable(hero.getOwner(), false, true)

        if hero.getAbilityLevel(ulti) > 0
            ai.issue("acidbomb", target)

        if target.getPos().distanceTo(hero.getPos()) < 200
            ai.issue("thunderclap")

        if target.getPos().distanceTo(hero.getPos()) < 600
            ai.issue("thunderbolt", target.getPos())

        if not ai.getAttacking()
            ai.attack(target)


@compiletime
function setupTooltips()

    passive(ABILITY_OVERCHARGE)
    pull(ABILITY_PULL)
    spikeBall(ABILITY_SPIKE_BALL)
    speedBoost(ABILITY_SPEED_BOOST)
    rocket(ABILITY_ROCKET)
    createHeroButton(THIS_ID, THIS_BUTTON_POS, THIS_ICON)

function initHeroType()
    setupStats()
    onCast(ABILITY_PULL, () -> castPull())
    onCast(ABILITY_SPIKE_BALL, () -> castSpikeBall())
    onCast(ABILITY_SPEED_BOOST, () -> castSpeedBoost())
    heroType..setSkillBuild("WQEWQWWQWQQEEEE")
    ..addItem(ITEM_ID_HEAVY_BOOTS)
    ..addItem(ITEM_ID_RUNIC_ARMOR)
    ..addItem(ITEM_ID_FIREHAND_GAUNTLETS)
    ..addItem(ITEM_ID_BLOOD_SWORD)
    ..addItem(ITEM_ID_SPIKED_ARMOR)
    ..addItem(ITEM_ID_CURSED_SWORD)
    delayInit(5) ->
        heroType
            ..setRetreatAI((IHeroAI ai) -> (retreatAI(ai)))
            ..setAttackAI((IHeroAI ai) -> (attackAI(ai)))
            ..setTeamFightAI((IHeroAI ai) -> (teamFightAI(ai)))
    
        buffPull = new BuffType(false, DispelLevel.BREAK)
        buffPull.setupBuffWithIcon(PULL_BUFF_ID, PULL_ABILITY_ID)
        buffPull.addDispelFunction() (Buff whichBuff) ->
            let data = whichBuff.getData()
            if data != -1
                destroy data castTo Pull
            


        buffSpikeBall = new BuffType(false, DispelLevel.DISPEL)
        buffSpikeBall.setupBuffWithIcon(SPIKE_BALL_BUFF_ID, SPIKE_BALL_ABILTIY_ID)
        buffSpikeBall.setPeriodicTime(0.25)
        buffSpikeBall.addPeriodicFunction((Buff whichBuff) -> (begin
            let caster = whichBuff.getCaster()
            let level = whichBuff.getLevel()
            caster.dealDamage(whichBuff.getTarget(), 0.25 * SPIKE_BALL_DOT_DMG[level-1].bonus(caster.getStr(), SPIKE_BALL_DOT_DMG_BONUS) / SPIKE_BALL_DOT_DURATION[level-1] , ReductionType.PHYSICAL)
        end))

        buffSpeedBoost = new BuffType(true, DispelLevel.NONE)
        buffSpeedBoost.setupBuffWithIcon(SPEED_BOOST_BUFF_ID, SPEED_BOOST_ABILITY_ID)
        buffSpeedBoost.addFirstFunction((Buff whichBuff) -> (begin
            let target = whichBuff.getTarget()
            target.wrapper().addStatRelativeBonus(Stat.MS, ((SPEED_BOOST[whichBuff.getLevel()-1].bonus(target.getInt(), SPEED_BOOST_BONUS)) * 10).toInt() )
            AddUnitAnimationProperties(target, "fast", true)
        end))

        buffSpeedBoost.addEndFunction((Buff whichBuff) -> (begin
            let target = whichBuff.getTarget()
            target.wrapper().addStatRelativeBonus(Stat.MS, -((SPEED_BOOST[whichBuff.getLevel()-1].bonus(target.getInt(), SPEED_BOOST_BONUS)) * 10).toInt() )
            AddUnitAnimationProperties(target, "fast", false)
        end))


        addOnDamageFunc( Condition( function onDamage ) )

function createHeroType(IHero hero)
    CreateTrigger()
    ..registerUnitEvent(hero.toUnit(), EVENT_UNIT_HERO_SKILL)
    ..addAction(() -> (begin
        let u = GetTriggerUnit()
        if GetLearnedSkill() == ABILITY_OVERCHARGE
            let newLevel = u.getAbilityLevel(ABILITY_OVERCHARGE)
            if newLevel!= 1
                u.wrapper().addStatAbsoluteBonus(Stat.AS, -OVERCHARGE_ATTACK_SPEED[newLevel-2])

            u.wrapper().addStatAbsoluteBonus(Stat.AS, OVERCHARGE_ATTACK_SPEED[newLevel-1])
    end))

init
    heroType = HeroType.create(THIS_HERO, THIS_ICON, THIS_ID, true)
    ..setOnInitFunction(() -> initHeroType())
    ..setOnCreateFunction((IHero hero) -> createHeroType(hero))

    setupTooltips()
    addButtonToTavern(THIS_ID, THIS_BUTTON_POS, heroType, 0)