package Warlock

import HeroInclude
import Reference

int HERO_ORDER = 5

class HeroWarlock extends HeroTemplate
    use HeroTemplateModule
    
    static constant int array FEL_MAGIC_INTEL = [5, 10, 15, 20, 25]

    static constant real array FIREBOLT_DAMAGE = [100, 150, 200, 250, 300]
    static constant real FIREBOLT_DAMAGE_BONUS = 140

    static constant real array METEOR_DAMAGE = [70, 110, 150, 190, 230]
    static constant real METEOR_DAMAGE_BONUS = 100
    static constant real array METEOR_AOE = [200, 225, 250, 275, 300]
    static constant real array METEOR_STUN_DURATION = [1, 1.25, 1.5, 1.75, 2]

    static constant real array SOUL_BURN_DURATION = [6, 7, 8, 9, 10]
    static constant real array SOUL_BURN_DAMAGE = [20, 26, 32, 38, 44]
    static constant real SOUL_BURN_DAMAGE_BONUS = 20
    static constant real array SOUL_BURN_SILENCE = [2, 2.25, 2.5, 2.75, 3]
    static constant real SOUL_BURN_AOE = 700
    static constant BUFF_ID_SOUL_BURN = compiletime(createAuraBuff("Soul Burn", "This unit is under the effect of Soulburn; it takes damage over time.", "BTNSoulBurn2"))
    static constant ABILITY_ID_SOUL_BURN = compiletime(createNegativeBuffAbility(5, BUFF_ID_SOUL_BURN, Abilities.immolationDamage, "head"))
    static BuffType buffSoulBurn

    static constant BUFF_ID_RAY_OF_DEATH = compiletime(createBasicBuff("Ray of Death", "This unit is under the effect of Ray of Death; it is disabled and takes damage over time.", "BTNNetherBolt", "", ""))
    static constant real array RAY_OF_DEATH_DURATION = [2, 2.25, 2.5, 2.75, 3]
    static constant real array RAY_OF_DEATH_DAMAGE = [60, 80, 100, 120, 140]
    static constant real RAY_OF_DEATH_DAMAGE_BONUS = 90
    static constant real array RAY_OF_DEATH_AFTER_DAMAGE = [150, 175, 200, 225, 250]
    static constant real RAY_OF_DEATH_AFTER_DAMAGE_BONUS = 125
    static constant real RAY_OF_DEATH_AFTER_AOE = 250
    static BuffType buffRayOfDeath

    override function objectDefinition()
        this.castBackswing = 0.5
        this.castPoint = 0.5
        this.icon = "BTNGuldan"
        this.model = "Models\\Guldan.mdl"
        this.launchX = -20
        this.launchY = 76
        this.launchZ = 105
        this.scalingValue = 1.2
        this.selectionScale = 1.9
        this.shadowX = 70
        this.shadowY = 70
        this.shadowH = 180
        this.shadowW = 180
        this.armorSoundType = ArmorSoundType.Flesh
        this.backswingPoint = 0.3
        this.damagePoint = 0.3
        this.projectileArc = 0.0
        this.projectileArt = "Abilities\\Weapons\\NecromancerMissile\\NecromancerMissile.mdl"
        this.projectileHoming = true
        this.projectileSpeed = 900
        this.range = 600
        this.weaponSound = weaponSound.Nothing
        this.weaponType = WeaponType.Missile
        this.unitSoundSet = "DrekThar"
        this.name = "Warlock"
        this.properName = "Nazgrel"

    

    override function stats(IHeroType heroType)
        heroType
            ..setStat(Stat.AR, 26, 37)
            ..setStat(Stat.AS, 8, 18)
            ..setStat(Stat.HP, 9, 29)
            ..setStat(Stat.HR, 11, 21)
            ..setStat(Stat.MP, 21, 68)
            ..setStat(Stat.MR, 17, 59)
            ..setStat(Stat.MS, 8, 17)
            ..setStat(Stat.STR, 9, 43)
            ..setStat(Stat.AGI, 29, 49)
            ..setStat(Stat.INT, 16, 87)


            

    override function setupPassive(int abilityId, IHeroType heroType)

        if compiletime
            createNoEffectAbiltiy(abilityId)
                ..setupWithHotKey("Fel Magic", "D")
                ..setupIcon("PASHeartOfSearinox")

        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceIntelligence(0)    
        tooltip.setLearnString("Increases the Warlock's intelligence.", (int lvl) -> (begin
            return "{0}% bonus intelligence".format(
                FEL_MAGIC_INTEL[lvl-1].str())
        end) )
        for lvl = 1 to 5
            tooltip.setNormalString(false, lvl, "Increases the Warlock's intelligence by {0}%.".format(
                FEL_MAGIC_INTEL[lvl-1].str())
            )        
        addDynamicTooltipIntelligence(heroType, tooltip)

    override function setupQ(int abilityId, IHeroType heroType)

        if compiletime
            let MANA = skillData(70, 75, 80, 85, 90)
            let COOLDOWN = skillData(5, 5, 5, 5, 5)
            let RANGE = skillData(700, 700, 700, 700, 700)

            new AbilityDefinitionIllidanChannel(abilityId)
                ..setupIcon("BTNChaosOrb")
                ..setupWithHotKey("Fire Ball", "Q")
                ..setArtCaster("")
                ..setArtEffect("")
                ..setMissileArt("")
                ..setArtTarget("")
                ..setAnimationNames("spell,throw")
                ..setupChannel(TargetType.POINT, "shockwave", 0.5)
                ..setSkillData(COOLDOWN, MANA, RANGE)

        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceIntelligence(FIREBOLT_DAMAGE_BONUS)   
        tooltip.setLearnString("Summons a ball of fire to fly to the target direction, dealing magic damage to the first unit it hits.", (int lvl) -> (begin
            return "{0}{I0} damage.".format(FIREBOLT_DAMAGE[lvl-1].str())
        end) )
        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, "Summons a ball of fire to fly to the target direction, dealing {0}{I0} magic damage to the first unit it hits.".format(
                FIREBOLT_DAMAGE[lvl-1].str()))         
        addDynamicTooltipIntelligence(heroType, tooltip)

    override function setupW(int abilityId, IHeroType heroType)

        if compiletime
            let MANA = skillData(160, 175, 190, 205, 220)
            let COOLDOWN = skillData(9, 9, 9, 9, 9)
            let RANGE = skillData(600, 675, 750, 825, 900)

            let aDef = new AbilityDefinitionIllidanChannel(abilityId)
                ..setupIcon("BTNMeteor")
                ..setupWithHotKey("Infernal Meteor", "W")
                ..setArtCaster("")
                ..setArtEffect("")
                ..setMissileArt("")
                ..setArtTarget("")
                ..setAnimationNames("spell,slam")
                ..setupChannel(TargetType.AREA, "inferno", 0.5)
                ..setSkillData(COOLDOWN, MANA, RANGE)

            for lvl = 1 to 5
                aDef
                    ..setAreaofEffect(lvl, METEOR_AOE[lvl-1])

        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceIntelligence(METEOR_DAMAGE_BONUS)
        tooltip.setLearnString("Calls down a burning meteor from the sky dealing magic damage and stunning enemies in the target area.", (int lvl) -> (begin
            return "{0}{I0} damage, {1} seconds stun.".format(METEOR_DAMAGE[lvl-1].str(), METEOR_STUN_DURATION[lvl-1].toExactString())
        end))
        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, "Calls down a burning meteor from the sky dealing {0}{I0} magic damage and stunning enemies in the target area for {1} seconds.".format(
                METEOR_DAMAGE[lvl-1].str(), METEOR_STUN_DURATION[lvl-1].toExactString()))
        addDynamicTooltipIntelligence(heroType, tooltip)



    override function setupE(int abilityId, IHeroType heroType)

        if compiletime
            let MANA = skillData(150, 160, 170, 180, 190)
            let COOLDOWN = skillData(12, 12, 12, 12, 12)
            let RANGE = skillData(700, 700, 700, 700, 700)

            new AbilityDefinitionIllidanChannel(abilityId)
                ..setupIcon("BTNSoulBurn2")
                ..setupWithHotKey("Soul Burn", "E")
                ..setArtCaster("")
                ..setArtEffect("")
                ..setMissileArt("")
                ..setArtTarget("")
                ..setAnimationNames("spell,one")
                ..setupChannel(TargetType.UNIT, "soulburn", 0.5)
                ..targetEnemies()
                ..setSkillData(COOLDOWN, MANA, RANGE)

        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceIntelligence(SOUL_BURN_DAMAGE_BONUS)
        tooltip.setLearnString("Deals damage over time to the target enemy unit. If the unit dies, while under the effect of Soul Burn, nearby enemy units will be affected by Soul Burn. The initial target is silenced for a short time.", (int lvl) -> (begin
            return "{0}{I0} damage per second, {1} seconds.".format(
                SOUL_BURN_DAMAGE[lvl-1].str(), SOUL_BURN_DURATION[lvl-1].toExactString(), SOUL_BURN_SILENCE[lvl-1].toExactString())
        end))
        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, "Deals {0}{I0} damage per second to the target enemy unit for {1} seconds. If the unit dies, while under the effect of Soul Burn, nearby enemy units will be affected by Soul Burn. The initial target is silenced for {2} seconds.".format(
                SOUL_BURN_DAMAGE[lvl-1].str(), SOUL_BURN_DURATION[lvl-1].toExactString(), SOUL_BURN_SILENCE[lvl-1].toExactString()))
        addDynamicTooltipIntelligence(heroType, tooltip)


    


    override function setupR(int abilityId, IHeroType heroType)

        if compiletime
            let MANA = skillData(300, 325, 350, 375, 400)
            let COOLDOWN = skillData(120, 120, 120, 120, 120)
            let RANGE = skillData(600, 600, 600, 600, 600)

            let aDef = new AbilityDefinitionAerialShackles(abilityId)
                ..setupIcon("BTNNetherBolt")
                ..setupWithHotKey("Ray of Death", "R")
                ..setArtCaster("")
                ..setArtEffect("")
                ..setMissileArt("")
                ..setArtTarget("")
                ..setLightningEffects("MBUR")
                ..setAnimationNames("spell,channel")
                ..targetEnemyHeroes()
                ..setSkillData(COOLDOWN, MANA, RANGE)

            for lvl = 1 to 5
                aDef
                    ..setDamagePerSecond(lvl, 0)
                    ..setDurationHero(lvl, 60)
                    ..setDurationNormal(lvl, 60)
                    ..setBuffs(lvl, "Bmlc,"+BUFF_ID_RAY_OF_DEATH.toRawCode())

        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceIntelligence(RAY_OF_DEATH_DAMAGE_BONUS, RAY_OF_DEATH_AFTER_DAMAGE_BONUS)
        tooltip.setLearnString(CHANNELING_SPELL + "Channels a powerful ray at the target enemy hero, disabling the target and dealing damage over time. If he channels for the full duration, he summons an explosion at the target's location dealing additional damage.", (int lvl) -> (begin
            return "{0}{I0} damage per second, {1}{I1} explosion damage, {2} seconds".format(
            RAY_OF_DEATH_DAMAGE[lvl-1].str(), RAY_OF_DEATH_AFTER_DAMAGE[lvl-1].str(), RAY_OF_DEATH_DURATION[lvl-1].toExactString())
        end))
        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, CHANNELING_SPELL + "Channels a powerful ray at the target enemy hero, disabling the target and dealing {0}{I0} damage per second. If he channels for the full duration, he summons an explosion at the target's location dealing {1}{I1} additional damage.|nLasts {2} seconds.".format(
                RAY_OF_DEATH_DAMAGE[lvl-1].str(), RAY_OF_DEATH_AFTER_DAMAGE[lvl-1].str(), RAY_OF_DEATH_DURATION[lvl-1].toExactString()
            ))
        addDynamicTooltipIntelligence(heroType, tooltip)

    override static function castQ()
        let spellId = GetSpellAbilityId()
        let caster = GetTriggerUnit()
        let level = caster.getAbilityLevel(spellId)
        new Missile(caster, caster.getPos().withZ(80), 1000, caster.getPos().angleTo(vec2(GetSpellTargetX(), GetSpellTargetY())), Abilities.demonHunterMissile)
        ..hitOnce()
        ..setSize(40)
        ..setHitCondition((Missile missile, unit target) -> (begin
            return not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(missile.getOwner().getOwner(), false, true)
        end) )
        ..setHitFunction((Missile missile, unit target) -> (begin
            let missileCaster = missile.getOwner()
            missileCaster.dealDamage(Missile.getMissileTarget(), (FIREBOLT_DAMAGE[level-1]).bonus(missileCaster.getHeroInt(), FIREBOLT_DAMAGE_BONUS), ReductionType.MAGIC)
            missile.destr()

        end) )
        ..setMaxRange(800)

    override static function castW()
        let spellId = GetSpellAbilityId()
        let caster = GetTriggerUnit()
        let level = caster.getAbilityLevel(spellId)
        let pos = vec2(GetSpellTargetX(), GetSpellTargetY())
        addEffect(Units.infernalBirth, pos).destr()
        doAfter(1, () -> (begin
            let nearby = CreateGroup()
            nearby.enumUnitsInRange(pos, METEOR_AOE[level-1])
        
            let dmg = METEOR_DAMAGE[level - 1].bonus(caster.getHeroInt(), METEOR_DAMAGE_BONUS)

            while(not nearby.isEmpty())
                let target = FirstOfGroup(nearby)
                nearby.removeUnit(target)
                if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(caster.getOwner(), false, true)
                    caster.dealDamage(target, dmg, ReductionType.MAGIC)
                    target.addBuffReduced(caster, METEOR_STUN_DURATION[level-1], STUNNED, 1).setDispelLevel(DispelLevel.DISPEL)
            nearby.destr()
        end))

    override static function castE()
        let spellId = GetSpellAbilityId()
        let caster = GetTriggerUnit()
        let level = caster.getAbilityLevel(spellId)
        let target = GetSpellTargetUnit()
        target.addBuffReduced(caster, SOUL_BURN_DURATION[level-1], buffSoulBurn, level)
        target.addBuffReduced(caster, SOUL_BURN_SILENCE[level-1], SILENCED, 1).setDispelLevel(DispelLevel.DISPEL)

    override static function castR()
        let spellId = GetSpellAbilityId()
        let caster = GetTriggerUnit()
        let level = caster.getAbilityLevel(spellId)
        let target = GetSpellTargetUnit()
        target.addBuffReduced(caster, RAY_OF_DEATH_DURATION[level-1], buffRayOfDeath, level)


    override function retreatAI(IHeroAI _ai)

    override function attackAI(IHeroAI ai)
        let hero = ai.getHeroUnit()

        unit target
        if hero.getMana()/hero.getMaxMana() > 0.5
            let targetPos = hero.findAreaTarget(800, METEOR_AOE[hero.getAbilityLevel(ABILITY_ID_W)-1], 3)
            if targetPos.getValue() >= 6
                ai.issue("inferno", targetPos.getPos())

            target = hero.findTarget(800, AbilityTargetFocus.ENEMY_HERO, AbilityTargetPriority.LOW_HEALTH, null)
            if target.isTargetable(hero.getOwner(), false, true)
                ai.issue("soulburn", target)

            target = hero.findTarget(800, AbilityTargetFocus.ENEMY_UNIT, AbilityTargetPriority.LOW_HEALTH, null)
            if target.isTargetable(hero.getOwner(), false, true)
                ai.issue("soulburn", target)

        target = hero.findTarget(600, AbilityTargetFocus.ENEMY, AbilityTargetPriority.LOW_HEALTH, null)
        if target.isTargetable(hero.getOwner(), false, true)
            ai.attack(target)

    override function teamFightAI(IHeroAI ai)
        let hero = ai.getHeroUnit()

        let target = ai.getTeamFightTarget()

        if target.isTargetable(hero.getOwner(), false, true)

            ai.issue("soulburn", target)
            ai.issue("magicleash", target)
            ai.issue("inferno", target.getPos())
            if target.getPos().distanceTo(hero.getPos()) < 500
                ai.issue("shockwave", target)

            if not ai.getAttacking()
                ai.attack(target)

    override function skillBuild() returns string
        return "WEQEWEWEWEWQQQQ"

    override function recommendedItems(LinkedList<int> list)
        list.add(ITEM_ID_BOOTS_BASE)

    override function onCreate(IHeroType heroType, IHero hero)
        let heroUnit = hero.toUnit()
        CreateTrigger()
        ..registerUnitEvent(heroUnit, EVENT_UNIT_HERO_SKILL)
        ..addAction(() -> (begin
            let u = GetTriggerUnit()
            if GetLearnedSkill() == HeroWarlock.instance.ABILITY_ID_PASSIVE
                let newLevel = u.getAbilityLevel(HeroWarlock.instance.ABILITY_ID_PASSIVE)
                if newLevel!= 1
                    u.wrapper().modIntelligenceRelative( -FEL_MAGIC_INTEL[newLevel-2]*10)

                u.wrapper().modIntelligenceRelative( FEL_MAGIC_INTEL[newLevel-1]*10)
        end))

    override function onInitDelayed(IHeroType heroType)
        buffRayOfDeath = new BuffType(false, DispelLevel.BREAK)
        buffRayOfDeath.addSetupFunction() (Buff thisBuff, int factor) ->
            if factor == -1
                thisBuff.getTarget().removeAbility(BUFF_ID_RAY_OF_DEATH)

        buffRayOfDeath.addExpireFunction((Buff whichBuff) ->(begin
            let caster = whichBuff.getCaster()
            let pos = whichBuff.getTarget().getPos()

            addEffect("NoxCloudExplosion.mdx", pos).destr()

            let nearby = CreateGroup()
            nearby.enumUnitsInRange(pos, RAY_OF_DEATH_AFTER_AOE)

            let dmg = RAY_OF_DEATH_AFTER_DAMAGE[caster.getAbilityLevel(ABILITY_ID_R)-1].bonus(caster.getHeroInt(), RAY_OF_DEATH_AFTER_DAMAGE_BONUS)

            while(not nearby.isEmpty())
                let target = FirstOfGroup(nearby)
                nearby.removeUnit(target)
                if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(caster.getOwner(), false, true)
                    caster.dealDamage(target, dmg, ReductionType.MAGIC)
        
            nearby.destr()

        end))
        buffRayOfDeath.addDispelFunction() (Buff whichBuff) ->
            let caster = whichBuff.getCaster()
            if caster.getCurrentOrder() == OrderId("magicleash")
                caster.issueImmediateOrder("stop")

        buffRayOfDeath.setPeriodicTime(0.1)
        buffRayOfDeath.addPeriodicFunction((Buff whichBuff) ->(begin
            let target = whichBuff.getTarget()
            let caster = whichBuff.getCaster()
            if not caster.getCurrentOrder() == OrderId("magicleash") or not target.isTargetable(caster.getOwner(), false, true)
                whichBuff.dispel()
            else
                caster.dealDamage(target, 0.1 * RAY_OF_DEATH_DAMAGE[caster.getAbilityLevel(ABILITY_ID_R)-1].bonus(caster.getHeroInt(), RAY_OF_DEATH_DAMAGE_BONUS), ReductionType.MAGIC)
                target.addEffect(Abilities.illidanMissile, "chest").destr()
        end))

        buffSoulBurn = new BuffType(false, DispelLevel.DISPEL)
        buffSoulBurn
        ..setupBuffWithIcon(BUFF_ID_SOUL_BURN, ABILITY_ID_SOUL_BURN)
        ..setPeriodicTime(0.5)
        ..addPeriodicFunction((Buff whichBuff) ->(begin
            let target = whichBuff.getTarget()
            let caster = whichBuff.getCaster()
            if target.isTargetable(caster.getOwner(), false, true)
                caster.dealDamage(target, 0.5 * SOUL_BURN_DAMAGE[caster.getAbilityLevel(ABILITY_ID_E)-1].bonus(caster.getHeroInt(), SOUL_BURN_DAMAGE_BONUS), ReductionType.MAGIC)
        end))

        buffSoulBurn.addSetupFunction() (Buff thisBuff, int factor) ->
            if factor == 1
                let trg = CreateTrigger()
                trg.registerUnitEvent(thisBuff.getTarget(), EVENT_UNIT_DEATH)
                trg.addAction() -> 
                    let u = GetTriggerUnit()
                    let pos = u.getPos()
                    let whichBuff = BuffList.getBuffOfType(u, buffSoulBurn)
                    let caster = whichBuff.getCaster()
                    let level = whichBuff.getLevel()

                    let nearby = CreateGroup()
                    nearby.enumUnitsInRange(pos, SOUL_BURN_AOE)

                    let dur = whichBuff.getRemaining()

                    while(not nearby.isEmpty())
                        let target = FirstOfGroup(nearby)
                        nearby.removeUnit(target)
                        if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(caster.getOwner(), false, true) and not BuffList.hasBuffType(target, buffSoulBurn)
                            target.addBuffReduced(caster, dur, buffSoulBurn, level)
                
                    nearby.destr()
                thisBuff.setData(new Reference(trg) castTo int)
            else
                let trg = (thisBuff.getData() castTo Reference<trigger>).into()
                trg.destr()

init
    initialize()
    
@compiletime
function initialize()
    HeroType.create(new HeroWarlock(), HERO_ORDER)