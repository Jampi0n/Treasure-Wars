package PythonWarrioress

//0

import HeroInclude

int HERO_ORDER = 0

class HeroPythonWarrioress extends HeroTemplate
    use HeroTemplateModule
    
    override function objectDefinition()
        this.castBackswing = 0.2
        this.castPoint = 0.65
        this.icon = "BTNGreenViper"
        this.model = "Models\\PythonWarrioress_noCrawl.mdl"
        this.scalingValue = 1.2
        this.selectionScale = 1.9
        this.shadowX = 80
        this.shadowY = 80
        this.shadowH = 200
        this.shadowW = 200
        this.armorSoundType = ArmorSoundType.Flesh
        this.backswingPoint = 0.35
        this.damagePoint = 0.4
        this.range = 100
        this.weaponSound = weaponSound.MetalMediumSlice
        this.unitSoundSet = "Demoness"
        this.name = "Python Warriores"
        this.properName = "Lady Serpentra"

    static constant SOUND_PARALYZING_STRIKE = new SoundDefinition(Sounds.shadowStrikeBirth1, false, true)
    static constant SOUND_POISON_SPIT = new SoundDefinition(Sounds.corrosiveBreathMissileTarget1, false, true)
    static constant SOUND_EMPOWERED_STRIKE = new SoundDefinition(Sounds.metalHeavySliceFlesh3, false, true)

    //Balancing and Object Editing
    static constant real array ENVENOMED_BLADES_DAMAGE = [5, 10, 15, 20, 25]
    static constant real ENVENOMED_BLADES_DAMAGE_BONUS = 20
    static constant real array ENVENOMED_BLADES_DURATION = [5, 5 ,5 ,5 ,5 ]

    static constant BUFF_ENVENOMED_BLADES = new BuffType(false, DispelLevel.DISPEL)
    static constant ENVENOMED_BLADES_BUFF_ID = compiletime(createAuraBuff("Envenomed Blades", "This unit was hit by Envenomed Blades; it is slowed and takes damage over time.", "BTNPoisonBlades"))
    static constant ENVENOMED_BLADES_ABILITY_ID = compiletime(createNegativeBuffAbility(5, ENVENOMED_BLADES_BUFF_ID, Abilities.poisonStingTarget, "chest"))




    override function setupPassive(int abilityId, IHeroType heroType)
        if compiletime
            createNoEffectAbiltiy(abilityId)
                ..setupIcon("PASPoisonBlades")
                ..setupWithHotKey("Envenomed Blades", "D")

        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceIntelligence(ENVENOMED_BLADES_DAMAGE_BONUS)
        tooltip.setLearnString("Attacks deal poison damage every second.", (int lvl) -> (begin
            return "{0}{I0} damage, {1} seconds.".format(
            ENVENOMED_BLADES_DAMAGE[lvl-1].str(), 
            ENVENOMED_BLADES_DURATION[lvl-1].str())
        end) )
        for lvl = 1 to 5
            tooltip.setNormalString(false, lvl, "Attacks deal {0}{I0} poison damage every second for {1} seconds.".format(
                ENVENOMED_BLADES_DAMAGE[lvl-1].str(), 
                ENVENOMED_BLADES_DURATION[lvl-1].str())
                )
        addDynamicTooltipIntelligence(heroType, tooltip)
        
    static constant real array MISTWALK_DURATION = [3, 3.5, 4, 4.5, 5]
    static constant real MISTWALK_DURATION_BONUS = 3


    override function setupQ(int abilityId, IHeroType heroType)

        if compiletime
            let MANA = skillData(100, 90, 80, 70, 60)
            let COOLDOWN = skillData(25, 25, 25, 25, 25)

            new AbilityDefinitionRoar(abilityId)
                ..setupIcon("BTNNoxiousFumes")
                ..setAnimationNames("morph,first")
                ..setupWithHotKey("Mistwalk", "Q")
                ..setLightningEffects("")
                ..setArtCaster("")
                ..setArtEffect("")
                ..setMissileArt("")
                ..setArtTarget("")
                ..targetNone()
                ..setSkillData(COOLDOWN, MANA, 0)


        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceIntelligence(MISTWALK_DURATION_BONUS)
        tooltip.setLearnString("Turns the Python Warrioress invisibile.", (int lvl) -> (begin
            return "{0}{I0} seconds.".format( MISTWALK_DURATION[lvl-1].toExactString())
        end) )
        
        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, "Turns the Python Warrioress invisibile for {0}{I0} seconds.".format(
                MISTWALK_DURATION[lvl-1].toExactString()))
        addDynamicTooltipIntelligence(heroType, tooltip)

    static constant int array POISON_SPIT_SLOW_MS = [30, 35, 40, 45, 50]
    static constant real array POISON_SPIT_DOT = [25, 35, 45, 55, 65]
    static constant real POISON_SPIT_DOT_BONUS = 80.
    static constant int array POISON_SPIT_ARMOR_REDUCTION = [10, 15, 20, 25, 30]
    static constant real array POISON_SPIT_DURATION = [6, 7, 8, 9, 10]
    static constant real array POISON_SPIT_AOE = [200, 225, 250, 275, 300]


    static constant POISON_SPIT_ARTILLERY = compiletime(ArtilleryDetection.createArtilleryDummy(0, 120, 160, 1, "Models\\GreatElderHydraAcidSpewV.153.mdl", 500, 0.3))

    static constant POISON_SPIT_BUFF_ID = compiletime(createAuraBuff("Poison Spit", "This unit stands inside Poison Spit. It has slowed movement speed reduced armor. The poison deals damage over time.", "BTNSlowSpellGreen"))
    static constant POISON_SPIT_ABILITY_ID = compiletime(createNegativeBuffAbility(5, POISON_SPIT_BUFF_ID, "Units\\Undead\\PlagueCloud\\PlagueCloudtarget.mdl", "chest"))

    static constant BUFF_POISON_SPIT = new BuffType(false, DispelLevel.DISPEL)


    override function setupW(int abilityId, IHeroType heroType)

        if compiletime
            let MANA = skillData(110, 120, 130, 140, 160)
            let COOLDOWN = skillData(16, 16, 16, 16, 16)
            let RANGE = 800.0
            let aDef = new AbilityDefinitionDarkRangerSilence(abilityId)
                ..setupIcon("BTNSlowSpellGreen")
                ..setAnimationNames("spell")
                ..setupWithHotKey("Poison Spit", "W")
                ..setLightningEffects("")
                ..setArtCaster("")
                ..setArtEffect("")
                ..setMissileArt("")
                ..setArtTarget("")
                ..targetNone()
                ..setSkillData(COOLDOWN, MANA, RANGE)

            for lvl = 1 to 5
                aDef
                    ..setAreaofEffect(lvl, POISON_SPIT_AOE[lvl-1])

        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceIntelligence(POISON_SPIT_DOT_BONUS)
        tooltip.setLearnString("Spits poison at the target area. Enemies within the area of effect are slowed, have reduced armor and take damage over time.",
        (int lvl) -> (begin
            return "{0}{I0} damage per second, {1} slow, {2} armor, lasts {3} seconds.".format(
            POISON_SPIT_DOT[lvl-1].str(), 
            POISON_SPIT_SLOW_MS[lvl-1].str()+"%",
            POISON_SPIT_ARMOR_REDUCTION[lvl-1].str(),
            POISON_SPIT_DURATION[lvl-1].str())
        end) )
        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, "Spits poison at the target area. Enemies within the area of effect are slowed by {0}, have their armor reduced by {1} and take {2}{I0} damage per second.|nLasts {3} seconds.".format(
                POISON_SPIT_SLOW_MS[lvl-1].str()+"%", POISON_SPIT_ARMOR_REDUCTION[lvl-1].str(), POISON_SPIT_DOT[lvl-1].str(), POISON_SPIT_DURATION[lvl-1].str()))
        addDynamicTooltipIntelligence(heroType, tooltip)

    static constant real array EMPOWERED_STRIKE_DAMAGE = [85, 130, 175, 220, 265]
    static constant real EMPOWERED_STRIKE_DAMAGE_BONUS = 125


    override function setupE(int abilityId, IHeroType heroType)

        if compiletime
            let MANA = skillData(50, 50, 50, 50, 50)
            let COOLDOWN = skillData(5, 5, 5, 5, 5)

            let aDef = new AbilityDefinitionSeaWitchForkedLightning(abilityId)
                ..setupIcon("BTNEnchantWeaponGreen")
                ..setAnimationNames("spell,throw")
                ..setupWithHotKey("Empowered Strike", "E")
                ..setLightningEffects("")
                ..setArtSpecial("")
                ..setLightningEffects("")
                ..targetEnemies()
                ..setSkillData(COOLDOWN, MANA, 160)

            for lvl = 1 to 5
                aDef
                    ..setNumberofTargetsHit(lvl, 1)
                    ..setDamageperTarget(lvl, 0)
                    ..setDurationNormal(lvl, 0.1)

        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceStrength(EMPOWERED_STRIKE_DAMAGE_BONUS)
        tooltip.setLearnString("Strikes the target enemy unit with a powerful melee attack dealing physical damage.", (int lvl) -> (begin
            return "{0}{S0} damage.".format( EMPOWERED_STRIKE_DAMAGE[lvl-1].str())
        end) )
        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, "Strikes the target enemy unit with a powerful melee attack dealing {0}{S0} physical damage.".format( 
                EMPOWERED_STRIKE_DAMAGE[lvl-1].str()))
        addDynamicTooltipStrength(heroType, tooltip)


    static constant real array PARALYZING_STRIKE_DAMAGE = [165, 200, 235, 270, 305]
    static constant real PARALYZING_STRIKE_DAMAGE_BONUS = 130
    static constant real array PARALYZING_STRIKE_DURATION = [1.6, 1.8, 2, 2.2, 2.4]
    static constant real PARALYZING_STRIKE_DURATION_BONUS = 0.25


    override function setupR(int abilityId, IHeroType heroType)

        if compiletime
            let RANGE = skillData(500, 600, 700, 800, 900)
            let MANA = skillData(180, 190, 200, 210, 220)
            let COOLDOWN = skillData(75, 75, 75, 75, 75)

            let aDef = new AbilityDefinitionFarseerChainLightning(abilityId)
                ..setupIcon("BTNINV_ThrowingKnife_04")
                ..setAnimationNames("spell, slam")
                ..setupWithHotKey("Paralyzing Strike", "R")
                ..setLightningEffects("")
                ..setMissileArt("")
                ..setArtTarget("")
                ..targetEnemyHeroes()
                ..setSkillData(COOLDOWN, MANA, RANGE)

            for lvl = 1 to 5
                aDef
                    ..setDamageperTarget(lvl, 0)
                    ..setDamageReductionperTarget(lvl, 0)
                    ..setNumberofTargetsHit(lvl, 0)
                    
        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceIntelligence(PARALYZING_STRIKE_DAMAGE_BONUS, PARALYZING_STRIKE_DURATION_BONUS)
        tooltip.setLearnString("Deals massive magical damage to the target, stunning it and teleports the Python Warrioress behind the target.", (int lvl) -> (begin
            return "{0}{I0} damage, {1}{I1} seconds stun.".format(
            PARALYZING_STRIKE_DAMAGE[lvl-1].str(),
            PARALYZING_STRIKE_DURATION[lvl-1].toExactString())
        end) )
        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, "Deals {0}{I0} magical damage to the target, stunning it for {1}{I1} seconds and teleports the Python Warrioress behind the target.".format(
                PARALYZING_STRIKE_DAMAGE[lvl-1].str(),
                PARALYZING_STRIKE_DURATION[lvl-1].toExactString()))
        addDynamicTooltipIntelligence(heroType, tooltip)


    override function stats(IHeroType heroType)
        heroType
            ..setStat(Stat.AR, 31, 47)
            ..setStat(Stat.AS, 27, 64)
            ..setStat(Stat.HP, 8, 39)
            ..setStat(Stat.HR, 18, 54)
            ..setStat(Stat.MP, 13, 46)
            ..setStat(Stat.MR, 16, 39)
            ..setStat(Stat.MS, 17, 71)
            ..setStat(Stat.STR, 13, 53)
            ..setStat(Stat.AGI, 38, 54)
            ..setStat(Stat.INT, 7, 43)

    override static function castQ()
        let spellId = GetSpellAbilityId()
        let caster = GetTriggerUnit()
        let level = caster.getAbilityLevel(spellId)
        caster.dispelNegativeBuffs(DispelLevel.BREAK)
        caster.addBuff( caster, (MISTWALK_DURATION[level-1]).bonus(caster.getHeroInt(), MISTWALK_DURATION_BONUS), INVIS, 1).setDispelLevel(DispelLevel.DISPEL)

    override static function castW()
        let caster = GetTriggerUnit()
        ArtilleryDetection.fireArtillery(caster, POISON_SPIT_ARTILLERY, caster.getPos(), vec2(GetSpellTargetX(), GetSpellTargetY())) (unit detectionUnit, unit caster, int data) ->
            let level = caster.getAbilityLevel(instance.ABILITY_ID_W)
            let targetPos = detectionUnit.getPos()
            SOUND_POISON_SPIT.playOnPoint(targetPos.toVec3())
            for i = 0 to 9 + level*3
                let angle = i/(10 + level*3)*2*bj_PI
                let fxPos = targetPos.polarOffset(angle(angle), POISON_SPIT_AOE[level-1]-50)
                let e = addEffect("Units\\Undead\\PlagueCloud\\PlagueCloudtarget.mdl", fxPos)
                doAfter(POISON_SPIT_DURATION[level-1], () -> e.destr())

            doPeriodicallyTimed(0.25, POISON_SPIT_DURATION[level-1]) (CallbackCounted cb) ->
                let nearby = CreateGroup()
                nearby.enumUnitsInRange(targetPos, POISON_SPIT_AOE[level-1])
            
                while(not nearby.isEmpty())
                    let target = FirstOfGroup(nearby)
                    nearby.removeUnit(target)
                    if not target.isType(UNIT_TYPE_STRUCTURE) and target.isTargetable(caster.getOwner(), false, true)
                        target.addBuff( caster, 0.5, BUFF_POISON_SPIT, level)
            
                nearby.destr()



    override static function castE()
        let spellId = GetSpellAbilityId()
        let caster = GetTriggerUnit()
        let level = caster.getAbilityLevel(spellId)
        let target = GetSpellTargetUnit()
        caster.dealDamage(target, (EMPOWERED_STRIKE_DAMAGE[level-1]).bonus(caster.getHeroStr(), EMPOWERED_STRIKE_DAMAGE_BONUS) , ReductionType.PHYSICAL)
        target.addEffect("Abilities\\Spells\\Other\\Stampede\\StampedeMissileDeath.mdl", "chest").destr()
        SOUND_EMPOWERED_STRIKE.playOnPoint(target.getPos3Zero()).snd.setVolume(150)

    override static function castR()
        let spellId = GetSpellAbilityId()
        let caster = GetTriggerUnit()
        let level = caster.getAbilityLevel(spellId)
        let target = GetSpellTargetUnit()
        let targetPos = target.getPos()
        let casterPos = caster.getPos()
        let portPos = targetPos.polarOffset(casterPos.angleTo(targetPos), 100)
        SOUND_PARALYZING_STRIKE.playOnPoint(targetPos.toVec3())
        doAfter(0, () -> caster.setPos(portPos))
        target.addBuffReduced( caster, (PARALYZING_STRIKE_DURATION[level-1]).bonus(caster.getHeroInt(), PARALYZING_STRIKE_DURATION_BONUS) , STUNNED, 1).setDispelLevel(DispelLevel.DISPEL)
        caster.dealDamage(target, (PARALYZING_STRIKE_DAMAGE[level-1]).bonus(caster.getHeroInt(), PARALYZING_STRIKE_DAMAGE_BONUS) , ReductionType.MAGIC)


    override function retreatAI(IHeroAI ai)
        ai.issue("roar")

    override function attackAI(IHeroAI ai)
        let hero = ai.getHeroUnit()

        unit target
        if hero.getMana()/hero.getMaxMana() > 0.5
            let targetPos = hero.findAreaTarget(800, POISON_SPIT_AOE[hero.getAbilityLevel(ABILITY_ID_W)-1], 3)
            if targetPos.getValue() >= 6
                ai.issue("silence", targetPos.getPos())

            target = hero.findTarget(300, AbilityTargetFocus.ENEMY_HERO, AbilityTargetPriority.LOW_HEALTH, null)
            if target.isTargetable(hero.getOwner(), false, true)
                ai.issue("forkedlightning", target)

        target = hero.findTarget(250, AbilityTargetFocus.ENEMY, AbilityTargetPriority.LOW_HEALTH, null)
        if target.isTargetable(hero.getOwner(), false, true)
            ai.attack(target)

        target = hero.findTarget(500, AbilityTargetFocus.ENEMY, AbilityTargetPriority.LOW_DISTANCE, null)
        if target.isTargetable(hero.getOwner(), false, true)
            ai.attack(target)

    override function teamFightAI(IHeroAI ai)
        let hero = ai.getHeroUnit()

        let target = ai.getTeamFightTarget()

        if target.isTargetable(hero.getOwner(), false, true)

            ai.issue("silence", target.getPos())
            ai.issue("chainlightning", target)
            if target.getPos().distanceTo(hero.getPos()) < 300
                ai.issue("forkedlightning", target)

            if not ai.getAttacking()
                ai.attack(target)

    override function skillBuild() returns string
        return "WEQEEWEWEWWQQQQ"

    override function recommendedItems(LinkedList<int> list)
        list.add(ITEM_ID_BOOTS_BASE)

    override function onInit(IHeroType heroType)
        heroType.setOnAttackFunc() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, boolean attack, boolean active, boolean advanced) ->
            let level = source.getAbilityLevel(ABILITY_ID_PASSIVE)
            if level != 0 and target.isTargetable(source.getOwner(), false, true) and not target.isType(UNIT_TYPE_STRUCTURE)
                target.addBuffReduced( source, ENVENOMED_BLADES_DURATION[level-1], BUFF_ENVENOMED_BLADES, level)

    override function onInitDelayed(IHeroType heroType)
        BUFF_ENVENOMED_BLADES.setupBuffWithIcon(ENVENOMED_BLADES_BUFF_ID, ENVENOMED_BLADES_ABILITY_ID)
        BUFF_ENVENOMED_BLADES.setPeriodicTime(1)
        BUFF_ENVENOMED_BLADES.addPeriodicFunction((Buff thisBuff)-> (begin
            let target = thisBuff.getTarget()
            let caster = thisBuff.getCaster()
            if target.isTargetable(caster.getOwner(), false, true)
                caster.dealDamage(target, 
                (ENVENOMED_BLADES_DAMAGE[thisBuff.getLevel()-1]).bonus(caster.getHeroInt(), ENVENOMED_BLADES_DAMAGE_BONUS)
                , ReductionType.MAGIC)
        end) )
        

        //Poison Spit
        BUFF_POISON_SPIT.setupBuffWithIcon(POISON_SPIT_BUFF_ID, POISON_SPIT_ABILITY_ID)
        BUFF_POISON_SPIT.addApplyFunction( (Buff thisBuff) -> (begin
            thisBuff.getCaster().dealDamage(thisBuff.getTarget(), 
            (POISON_SPIT_DOT[thisBuff.getLevel()-1]).bonus(thisBuff.getCaster().getHeroInt(), POISON_SPIT_DOT_BONUS)/4
            , ReductionType.MAGIC)
        end) )
        BUFF_POISON_SPIT.addLevelFunction() (Buff thisBuff, int factor) ->
            let wrapper = thisBuff.getTarget().wrapper()
            wrapper.modMoveSpeedRelative( -factor * POISON_SPIT_SLOW_MS[thisBuff.getLevel()-1]*10 )
            wrapper.modArmor( -factor * POISON_SPIT_ARMOR_REDUCTION[thisBuff.getLevel()-1] )


init
    initialize()
    
@compiletime
function initialize()
    HeroType.create(new HeroPythonWarrioress(), HERO_ORDER)



