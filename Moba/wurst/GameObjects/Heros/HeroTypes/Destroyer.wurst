package Destroyer

//13

import HeroInclude

public constant HERO_DESTROYER = 'H00R'
constant THIS_HERO = HERO_DESTROYER
constant THIS_ID = 13
constant THIS_BUTTON_POS = 1 //button pos from 0 to 11
constant THIS_ICON = "BTNEligor"
IHeroType heroType = null

public constant ABILITY_DEATH_FRENZY = 'AY3P'
constant ABILITY_BREATH = 'AY3Q'
constant ABILITY_IMMOLATION = 'AY3W'
constant ABILITY_BONE_WALL = 'AY3E'
constant ABILITY_WILD_RAGE = 'AY3R'

group hitByBreath = CreateGroup()

public constant real array DEATH_FRENZY_BONUS = [25, 35, 45, 55, 65]

function passive(int abilityId)
    if compiletime
        createNoEffectAbiltiy(abilityId)
            ..setupIcon("PASbloodpresence")
            ..setupWithHotKey("Death Frenzy", "D")


    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(0)
    tooltip.setLearnString("The Destroyer deals increased damage from all sources, the more injured he becomes.", (int lvl) -> (begin
        return "up to {0}% increased damage.".format(
            DEATH_FRENZY_BONUS[lvl-1].str())
    end) )
    
    for lvl = 1 to 5
        tooltip.setNormalString(false, lvl, "The Destroyer deals up to {0}% increased damage from all sources, the more injured he becomes".format( 
            DEATH_FRENZY_BONUS[lvl-1].str())
        )
    addDynamicTooltipIntelligence(heroType, tooltip)


constant integer BUFF_ID_ON_BREATH = compiletime(createDummyBuff())

constant real array BREATH_DAMAGE = [70, 100, 130, 160, 190]
constant real BREATH_DAMAGE_BONUS = 80

constant int array BREATH_ARMOR_REDUCTION = [30, 35, 40, 45, 50]
constant real BREATH_DURATION = 4

BuffType buffMeltingBreath

constant int BREATH_BUFF_ID = compiletime(createAuraBuff("Melting Breath", "This unit was hit by Melting Breath; it has reduced armor.", "BTNFlameBurst"))
constant int BREATH_ABILITY_ID = compiletime(createNegativeBuffAbility(5, BREATH_BUFF_ID, Abilities.lordofFlameMissile, "chest"))


function abilityQ(int abilityId)

    if compiletime
        let MANA = skillData(80, 80, 80, 80, 80)
        let COOLDOWN = skillData(8, 8, 8, 8, 8)
        let RANGE = skillData(450, 450, 450, 450, 450)
        let aDef = new AbilityDefinitionBreathofFrostCreep(abilityId)
            ..setupIcon("BTNFlameBurst")
            ..setupWithHotKey("Melting Breath", "Q")
            ..setAnimationNames("spell,channel")
            ..setMissileArt("BreathOfFireMissile3.mdx")
            ..setMissileSpeed(800)
            ..targetEnemies()
            ..setSkillData(COOLDOWN, MANA, RANGE)

        for lvl = 1 to 5
            aDef
                ..setDamage(lvl, 0.01)
                ..setDamagePerSecond(lvl, 0.01)
                ..setBuffs(lvl, BUFF_ID_ON_BREATH.toRawCode())
                ..setDistance(lvl, 325)
                ..setFinalArea(lvl, 175)
                ..setMaxDamage(lvl, 99999)
                ..setAreaofEffect(lvl, 100)

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(BREATH_DAMAGE_BONUS)
    tooltip.setLearnString("Breathes a cone of fire at enemy units, dealing magic damage. The heat melts the target's armor, reducing it for {0} seconds.".format(
        BREATH_DURATION.str()
    ), (int lvl) -> (begin
        return "{0}{I0} damage, {1}% armor reduction.".format(
        BREATH_DAMAGE[lvl-1].str(), BREATH_ARMOR_REDUCTION[lvl-1].str())
    end) )
    
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Breathes a cone of fire at enemy units, dealing {0}{I0} magic damage. The heat melts the target's armor, reducing it by {1}% for {2} seconds.".format(
            BREATH_DAMAGE[lvl-1].str(), BREATH_ARMOR_REDUCTION[lvl-1].str(), BREATH_DURATION.str()
            ))
    addDynamicTooltipIntelligence(heroType, tooltip)


constant real array IMMOLATION_DAMAGE = [32, 44, 56, 68, 80]
constant real IMMOLATION_DAMAGE_BONUS = 30

constant int array IMMOLATION_ATTACK_SPEED = [18, 26, 34, 42, 50]
constant real array IMMOLATION_MANA_DRAIN = [5, 6.2, 7.4, 8.6, 9.8]

BuffType buffImmolation
constant IMMOLATION_BUFF_ID = compiletime(BUFF_ID_GEN.next())


function abilityW(int abilityId)

    if compiletime
        let MANA = skillData(25, 25, 25, 25, 25)
        let AOE = 250.0
        new BuffDefinition(IMMOLATION_BUFF_ID, 'BEim')
            ..setTooltipNormalExtended(1, "This unit has Immolation; it attacks faster and nearby enemy units will take damage over time.")
            ..setArtSpecial(1, Abilities.immolationRedDamage)
            ..setArtTarget(1, Abilities.immolationREDTarget)
            ..setTargetAttachmentPoint0(1, "chest")

        let aDef = new AbilityDefinitionDemonHunterImmolation(abilityId)
            ..setupIcon(Icons.bTNImmolationOn)
            ..setIconTurnOff(Icons.bTNImmolationOff)
            ..setupWithHotKey("Immolation", "W")
            ..setTurnOff("Deactivate Immolation","W")
            ..setAnimationNames("spell")
            ..targetEnemies()
            ..setSkillData(0, MANA, 0)

        for lvl = 1 to 5
            aDef
                ..setAreaofEffect(lvl, AOE)
                ..setManaDrainedperSecond(lvl, IMMOLATION_MANA_DRAIN[lvl-1])
                ..setBuffs(lvl, IMMOLATION_BUFF_ID.toRawCode()+",BEia")

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setSummary("Damages nearby enemy units and increases the Destroyer's attack speed at the cost of mana and health. Can be turned off.")
    tooltip.setReplaceIntelligence(IMMOLATION_DAMAGE_BONUS)
    tooltip.setLearnString("Engulfs the Destroyer in flames, damaging nearby enemies and the Destroyer himself. Heroes take double damage. Also increases the Destroyer's attack speed.|nDrains mana until deactivated.", (int lvl) -> (begin
        return "{0}{I0} damage per second, {1}% attack speed.".format(
        IMMOLATION_DAMAGE[lvl-1].str(),
        IMMOLATION_ATTACK_SPEED[lvl-1].str())
    end) )
    for lvl = 1 to 5
        tooltip.setNormalString(false, lvl, "Engulfs the Destroyer in flames, dealing {0}{I0} damage per second to nearby enemies and the Destroyer himself. Heroes take double damage. Also increases the Destroyer's attack speed by {1}%.|nDrains mana until deactivated.".format(
            IMMOLATION_DAMAGE[lvl-1].str(),
            IMMOLATION_ATTACK_SPEED[lvl-1].str()))
        tooltip.setTurnOffString(false, lvl, "Deactivate to stop draining mana and life.")
    addDynamicTooltipIntelligence(heroType, tooltip)


constant int array WALL_NUMBER = [6, 7, 8, 9, 10]
constant real array WALL_DURATION = [3, 3.5, 4, 4.5, 5]

function abilityE(int abilityId)

    if compiletime
        let MANA = skillData(70, 70, 70, 70, 70)
        let COOLDOWN = skillData(17, 16, 15, 14, 13)
        let RANGE = skillData(800, 850, 900, 950, 1000)
        new AbilityDefinitionIllidanChannel(abilityId)
            ..setAnimationNames("spell")
            ..setupIcon("BTNNecromancy")
            ..setupWithHotKey("Bone Wall", "E")
            ..setupChannel(TargetType.POINT, "ward", 0.5)
            ..setSkillData(COOLDOWN, MANA, RANGE)

    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(0)
    tooltip.setLearnString("Summons a wall of bones at the target location, blocking the way for the Destroyer's victims to flee. The wall gets bigger on higher levels.", (int lvl) -> (begin
        return "Lasts {0} seconds.".format(
            WALL_DURATION[lvl-1].toExactString())
    end) )
    
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Summons a wall of bones at the target location, blocking the way for the Destroyer's victims to flee. Lasts {0} seconds.".format(
            WALL_DURATION[lvl-1].toExactString()
        ))
    addDynamicTooltipIntelligence(heroType, tooltip)


        

constant real array PREY_BONUS_DAMAGE = [25, 35, 45, 55, 65]
constant real PREY_DURATION = 15
constant int array PREY_MOVE_SPEED = [30, 40, 50, 60, 70]

constant int PREY_SLOW = 35
constant real PREY_SLOW_DURATION = 1

BuffType buffPreyTarget
BuffType buffPreyCaster
BuffType buffPreySlow

constant int PREY_TARGET_BUFF_ID = compiletime(createAuraBuff("Prey", "This unit is the Prey; it is revealed and takes increased damage from the Hunter.", Icons.bTNUnholyFrenzy))
constant int PREY_TARGET_ABILITY_ID = compiletime(createNegativeBuffAbility(5, PREY_TARGET_BUFF_ID, Abilities.possessionTarget, "overhead"))

constant int PREY_SLOW_BUFF_ID = compiletime(createAuraBuff("Prey - Slowed", "The Prey was hit by the Hunter; it has reduced movement speed.", Icons.bTNUnholyFrenzy))
constant int PREY_SLOW_ABILITY_ID = compiletime(createNegativeBuffAbility(5, PREY_SLOW_BUFF_ID, "", ""))

constant int PREY_CASTER_BUFF_ID = compiletime(createAuraBuff("Hunter", "This unit is the Hunter; it's movement speed is increased while moving towards the target.", Icons.bTNUnholyFrenzy))
constant int PREY_CASTER_ABILITY_ID = compiletime(createPositiveBuffAbility(5, PREY_CASTER_BUFF_ID, Abilities.unholyFrenzyTarget, "overhead"))


function abilityR(int abilityId)

    if compiletime
        let MANA = skillData(140, 145, 150, 155, 160)
        let COOLDOWN = skillData(75, 75, 75, 75, 75)
        let RANGE = 900.0
        new AbilityDefinitionIllidanChannel(abilityId)
            ..setAnimationNames("spell")
            ..setupChannel(TargetType.UNIT, "channel", 0.5)
            ..setupIcon(Icons.bTNUnholyFrenzy)
            ..setupWithHotKey("Hunter and Prey", "R")
            ..setLightningEffects("")
            ..setArtTarget("")
            ..setMissileArt("")
            ..setArtSpecial("")
            ..setLightningEffects("")
            ..setCheckDependencies(true)
            ..targetEnemies()
            ..setSkillData(COOLDOWN, MANA, RANGE)




    let tooltip = new DynamicTooltip(abilityId)
    tooltip.setReplaceIntelligence(0)
    tooltip.setSummary("Increases the Destroyer's movement speed when chasing the targeted unit and causes his attacks against the target to deal more damage and slow.")
    tooltip.setLearnString("Marks the target enemy unit as his prey. The Destroyer will have increased movmement speed when moving towards the prey. Every attack against the prey deals bonus damage and slows the prey. Lasts {0} seconds.".format(PREY_DURATION.toExactString()), (int lvl) -> (begin
        return "{0} damage, {1}% movement speed".format(
            PREY_BONUS_DAMAGE[lvl-1].str(),
            PREY_MOVE_SPEED[lvl-1].str())
    end) )
    
    for lvl = 1 to 5
        tooltip.setNormalString(true, lvl, "Marks the target enemy unit as his prey. The Destroyer will have move {2}% faster when moving towards the prey. Every attack against the prey deals {1} bonus damage and slows the prey. Lasts {0} seconds.".format(
            PREY_DURATION.str(),
            PREY_BONUS_DAMAGE[lvl-1].str(),
            PREY_MOVE_SPEED[lvl-1].str())
        )
    addDynamicTooltipIntelligence(heroType, tooltip)



function setupStats()
    heroType
        
        ..setStat(Stat.AR, 32, 53)
        ..setStat(Stat.AS, 13, 36)
        ..setStat(Stat.HP, 11, 41)
        ..setStat(Stat.HR, 32, 69)
        ..setStat(Stat.MP, 21, 39)
        ..setStat(Stat.MR, 19, 45)
        ..setStat(Stat.MS, 10, 32)
        ..setStat(Stat.STR, 14, 42)
        ..setStat(Stat.AGI, 33, 49)
        ..setStat(Stat.INT, 13, 34)

function onDamage()
    let target = GetTriggerUnit()
    if target.hasAbility(BUFF_ID_ON_BREATH)
        target.removeAbility(BUFF_ID_ON_BREATH)

        let caster = GetEventDamageSource()
        if target.isTargetable(caster.getOwner(), false, true) and not hitByBreath.contains(target)
            let level = caster.getAbilityLevel(ABILITY_BREATH)
            hitByBreath.addUnit(target)
            caster.dealDamage(target, BREATH_DAMAGE[level-1].bonus(caster.getInt(), BREATH_DAMAGE_BONUS), ReductionType.MAGIC)
            target.addBuffReduced(caster, BREATH_DURATION, buffMeltingBreath, level)



function onAttack(unit attacker, unit target, boolean _isActive)

    let prey = BuffList.getBuffOfType(target, buffPreyTarget)
    if prey != null
        let level = prey.getLevel()
        attacker.dealDamage(target, PREY_BONUS_DAMAGE[level-1], ReductionType.PHYSICAL)
        target.addBuffReduced(attacker, PREY_SLOW_DURATION, buffPreySlow, 1)
        target.addEffect(Abilities.stampedeMissileDeath, "origin")


function castBreath()
    hitByBreath.clear()

function castImmolation()
    let caster = GetTriggerUnit()
    caster.addBuff(caster, -1, buffImmolation, 1)

function castBoneWall()
    let spellId = GetSpellAbilityId()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)
    let pos = vec2(GetSpellTargetX(), GetSpellTargetY())
    let angle1 = caster.getPos().angleTo(pos)
    let angle2 = angle1.op_minus(angle(bj_PI/2))
    let facing = angle1
    let modelPath = "Doodads\\LordaeronSummer\\Props\\SkullPile\\SkullPile0.mdl"

    var wall = createUnit(caster.getOwner(), WALL, pos, angle(0))
    wall.setXY(pos)
    var model = addEffect(modelPath, pos)
    model.setRoll(facing)
    doAfter(WALL_DURATION[level-1]) ->
        doPeriodicallyCounted(0.05, 20, (CallbackCounted cb) -> begin
            model.setAlpha((12.75 * cb.getCount()).round() )
        end)
        addEffect(Abilities.mirrorImageDeathCaster, pos).destr()
        model.destr()
        wall.kill()

    for i = 1 to WALL_NUMBER[level-1]
        var newPos = pos.polarOffset(angle2, 64. * i)
        wall = createUnit(caster.getOwner(), WALL, newPos, angle(0))
        wall.setXY(newPos)
        model = addEffect(modelPath, newPos)
        model.setRoll(facing)
        doAfter(WALL_DURATION[level-1]) ->
            doPeriodicallyCounted(0.05, 20, (CallbackCounted cb) -> begin
                model.setAlpha((12.75 * cb.getCount()).round() )
            end)
            addEffect(Abilities.mirrorImageDeathCaster, newPos).destr()
            model.destr()
            wall.kill()

        newPos = pos.polarOffset(angle2, -64. * i)
        wall = createUnit(caster.getOwner(), WALL, newPos, angle(0))
        wall.setXY(newPos)
        model = addEffect(modelPath, newPos)
        model.setRoll(facing)
        doAfter(WALL_DURATION[level-1]) ->
            doPeriodicallyCounted(0.05, 20, (CallbackCounted cb) -> begin
                model.setAlpha((12.75 * cb.getCount()).round() )
            end)
            addEffect(Abilities.mirrorImageDeathCaster, newPos).destr()
            model.destr()
            wall.kill()

function castWildRage()
    let spellId = GetSpellAbilityId()
    let target = GetSpellTargetUnit()
    let caster = GetTriggerUnit()
    let level = caster.getAbilityLevel(spellId)
    target.addBuffReduced(caster, PREY_DURATION, buffPreyTarget, level)
    caster.addBuff(caster, -1, buffPreyCaster, level)


function retreatAI(IHeroAI _ai)

function attackAI(IHeroAI _ai)

function teamFightAI(IHeroAI _ai)
            
@compiletime
function setupTooltips()

    passive(ABILITY_DEATH_FRENZY)
    abilityQ(ABILITY_BREATH)
    abilityW(ABILITY_IMMOLATION)
    abilityE(ABILITY_BONE_WALL)
    abilityR(ABILITY_WILD_RAGE)
    createHeroButton(THIS_ID, THIS_BUTTON_POS, THIS_ICON)


function initHeroType()
    setupStats()
    onCast(ABILITY_BREATH, () -> castBreath())
    onCast(ABILITY_IMMOLATION, () -> castImmolation())
    onCast(ABILITY_BONE_WALL, () -> castBoneWall())
    onCast(ABILITY_WILD_RAGE, () -> castWildRage())
    heroType..setSkillBuild("QWQWQWQWQWEEEEE")
    ..addItem(ITEM_ID_HEAVY_BOOTS)
    ..addItem(ITEM_ID_BLOOD_SWORD)
    ..addItem(ITEM_ID_INFERNAL_BOW)
    ..addItem(ITEM_ID_RUNIC_ARMOR)
    ..addItem(ITEM_ID_SACRIFICIAL_DAGGER)
    ..addItem(ITEM_ID_CURSED_SWORD)
    delayInit(5) ->
        heroType
        ..setRetreatAI((IHeroAI ai) -> (retreatAI(ai)))
        ..setAttackAI((IHeroAI ai) -> (attackAI(ai)))
        ..setTeamFightAI((IHeroAI ai) -> (teamFightAI(ai)))
        ..setOnAttackFunc() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, boolean attack, boolean active, boolean advanced) ->
            onAttack(source, target, active)

        buffMeltingBreath = new BuffType(false, DispelLevel.DISPEL)
        buffMeltingBreath.setupBuffWithIcon(BREATH_BUFF_ID, BREATH_ABILITY_ID)

        buffMeltingBreath.addFirstFunction( (Buff whichBuff) -> (begin
            whichBuff.getTarget().wrapper().modArmorRelative( -BREATH_ARMOR_REDUCTION[whichBuff.getLevel()-1] * 10)
        end))

        buffMeltingBreath.addEndFunction( (Buff whichBuff) -> (begin
            whichBuff.getTarget().wrapper().modArmorRelative( BREATH_ARMOR_REDUCTION[whichBuff.getLevel()-1] * 10)
        end))

        buffPreyTarget = new BuffType(false, DispelLevel.DISPEL)
        buffPreyTarget.setupBuffWithIcon(PREY_TARGET_BUFF_ID, PREY_TARGET_ABILITY_ID)
        buffPreyTarget.setPeriodicTime(0.2)

        buffPreyTarget.addPeriodicFunction( (Buff whichBuff) -> (begin
            let caster = whichBuff.getCaster()
            let target = whichBuff.getTarget()
            let direction = caster.getPos().angleTo(target.getPos())
            let facing = caster.getFacingAngle()
            var diffDegrees = (direction - facing).degrees() %360

            if diffDegrees < 0
                diffDegrees += 360
            if diffDegrees > 180
                diffDegrees = 360 - diffDegrees

            if diffDegrees < 90
                if whichBuff.getData() == 0
                    whichBuff.setData(1)
                    caster.wrapper().modMoveSpeedRelative( PREY_MOVE_SPEED[whichBuff.getLevel()-1]*10)
            else
                if whichBuff.getData() == 1
                    whichBuff.setData(0)
                    caster.wrapper().modMoveSpeedRelative( -PREY_MOVE_SPEED[whichBuff.getLevel()-1]*10)
                
        end))

        buffPreyTarget.addFirstFunction( (Buff whichBuff) -> (begin
            let caster = whichBuff.getCaster()
            let target = whichBuff.getTarget()
            let level = whichBuff.getLevel()
            whichBuff.setData(0)
            let direction = caster.getPos().angleTo(target.getPos())
            let facing = caster.getFacingAngle()
            var diffDegrees = (direction - facing).degrees() %360

            if diffDegrees < 0
                diffDegrees += 360
            if diffDegrees > 180
                diffDegrees = 360 - diffDegrees

            if diffDegrees < 90
                whichBuff.setData(1)
                caster.wrapper().modMoveSpeedRelative( PREY_MOVE_SPEED[level-1]*10)

        end))

        buffPreyTarget.addEndFunction( (Buff whichBuff) -> (begin
            let caster = whichBuff.getCaster()
            let level = whichBuff.getLevel()
            if whichBuff.getData()==1
                caster.wrapper().modMoveSpeedRelative( -PREY_MOVE_SPEED[level-1]*10)

            let casterBuff = BuffList.getBuffOfType(caster, buffPreyCaster)
            if casterBuff!= null
                casterBuff.dispel()
        end))

        buffPreyCaster = new BuffType(true, DispelLevel.NONE)
        buffPreyCaster.setupBuffWithIcon(PREY_CASTER_BUFF_ID, PREY_CASTER_ABILITY_ID)

        buffPreySlow = new BuffType(true, DispelLevel.DISPEL)
        buffPreySlow.setupBuffWithIcon(PREY_SLOW_BUFF_ID, PREY_SLOW_ABILITY_ID)

        buffPreySlow.addFirstFunction( (Buff whichBuff) -> (begin
            whichBuff.getTarget().wrapper().modMoveSpeedRelative( -PREY_SLOW * 10)
        end))

        buffPreySlow.addEndFunction( (Buff whichBuff) -> (begin
            whichBuff.getTarget().wrapper().modMoveSpeedRelative( PREY_SLOW * 10)
        end))

        buffImmolation = new BuffType(true, DispelLevel.NONE)
        buffImmolation.setPeriodicTime(0.2)

        buffImmolation.addFirstFunction( (Buff whichBuff) -> (begin
            let level = whichBuff.getLevel()
            whichBuff.setData(level)
            whichBuff.getCaster().wrapper().modAttackSpeed( IMMOLATION_ATTACK_SPEED[level-1])
        end))

        buffImmolation.addEndFunction( (Buff whichBuff) -> (begin
            let level = whichBuff.getData()
            whichBuff.getCaster().wrapper().modAttackSpeed( -IMMOLATION_ATTACK_SPEED[level-1])
        end))

        buffImmolation.addPeriodicFunction((Buff whichBuff) -> (begin
            let caster = whichBuff.getCaster()
            let owner = caster.getOwner()
            let level = whichBuff.getData()
            if caster.hasAbility(IMMOLATION_BUFF_ID)
                let dmg = IMMOLATION_DAMAGE[level-1].bonus(caster.getInt(), IMMOLATION_DAMAGE_BONUS) * 0.2
                //use hp to not trigger damage event
                caster.addHP(-(0.5 * dmg.reduceMagic(caster.getWp())))
                let g = CreateGroup()
                g.enumUnitsInRange(caster.getPos(), 250)
                while true
                    let u = FirstOfGroup(g)
                    if u == null
                        break
                    g.removeUnit(u)
                    if not u.isType(UNIT_TYPE_STRUCTURE) and u.isTargetable(owner, false, true)
                        if u.isType(UNIT_TYPE_HERO)
                            caster.dealDamage(u, 2 * dmg, ReductionType.MAGIC)
                        else
                            caster.dealDamage(u, dmg, ReductionType.MAGIC)
            else
                whichBuff.dispel()
        end))


        addOnDamageFunc( Condition (function onDamage))
    
init
    
    heroType = HeroType.create(THIS_HERO, THIS_ICON, THIS_ID, false)
    ..setOnInitFunction(() -> initHeroType())

    setupTooltips()
    addButtonToTavern(THIS_ID, THIS_BUTTON_POS, heroType, 1)
        
