package HeroTypeImpl

import HashMap
import FastDamageEvent
import Constants

import AbilityObjEditing
import LinkedList
import RecommendedItems
import Preloader
import Stats
import DynamicTooltips
import IHero
import IUnit
import ErrorHandling
import ClosureTimers

int array SLOT_ID
string array BUTTON_ORDER_STRING

int array tavernButtons
HashMap<int, IHeroType> buttonToHeroType

public function getTavernButton(int index) returns int
    return tavernButtons[index]

public function getHeroFromButton(int index) returns IHeroType
    return buttonToHeroType.get(index)


public class HeroTypeImpl implements IHeroType

    int array[STAT_COUNT] statsBase
    int array[STAT_COUNT] statsMax

    private static constant unitIdToHeroType = new HashMap<integer, HeroTypeImpl>
    private static constant heroIdToHeroType = new HashMap<integer, HeroTypeImpl>
    private int unitId
    private int heroId
    private CalculateTotalBonus bonusCalculation = null
    private LinkedList<int> alternateUnitTypeIds = new LinkedList<int>

    private OnCreateFunction onCreateFunction = null
    private OnInitFunction onInitFunction = null

    private boolean hasAI = false

    private AIBehaviour attackAI = null
    private AIBehaviour retreatAI = null
    private AIBehaviour teamFightAI = null

    private boolean useHeroGlow = false

    private static HeroTypeImpl array heroTypes 
    private static int heroTypeCount = 0

    private LinkedList<int> itemBuild = new LinkedList<int>
    private RecommendedItems recommendedItems
    private string skillBuild = ""

    private string icon = "ReplaceableTextures\\CommandButtons\\BTNSelectHeroOn.blp"

    protected constant dynamicIntelligence = new LinkedList<DynamicTooltip>
    protected constant dynamicStrength = new LinkedList<DynamicTooltip>

    construct(int unitId, string icon, int heroId, boolean hasAI)
        objectCount++
        unitIdToHeroType.put(unitId, this)
        heroIdToHeroType.put(heroId, this)
        this.unitId = unitId
        this.heroId = heroId
        for i = 0 to STAT_COUNT-1
            statsBase[i]=0
            statsMax[i]=0

        string realIcon = icon
        if icon.length() < 20 or not icon.startsWith("ReplaceableTextures")
            realIcon = "ReplaceableTextures\\CommandButtons\\" + realIcon
        if not icon.endsWith(".blp")
            realIcon += ".blp"

        this.icon = realIcon
        this.hasAI = hasAI


        preloadAbility(this.getAbilityId(AbilitySlot.Q))
        preloadAbility(this.getAbilityId(AbilitySlot.W))
        preloadAbility(this.getAbilityId(AbilitySlot.E))
        preloadAbility(this.getAbilityId(AbilitySlot.R))
        preloadAbility(this.getAbilityId(AbilitySlot.PASSIVE))
        preloadUnit(this.getUnitId())

        this.recommendedItems = new RecommendedItems(unitId)

        heroTypes[heroTypeCount] = this
        heroTypeCount++

    //only initialize every herotype once
    override function initialize()
        if getOnInitFunction() != null
            getOnInitFunction().onInit()
            destroy getOnInitFunction()
            setOnInitFunction(null)

    override function addMorph(int id)
        unitIdToHeroType.put(id, this)
        this.alternateUnitTypeIds.add(id)

    override function setBase(Stat stat, integer value)
        this.statsBase[stat.toInt()] = value

    override function getBase(Stat stat) returns integer
        return this.statsBase[stat.toInt()]

    override function setMax(Stat stat, integer value)
        this.statsMax[stat.toInt()] = value

    override function getMax(Stat stat) returns integer
        return this.statsMax[stat.toInt()]

    override function setStat(Stat stat, integer min, integer max)
        this.statsBase[stat.toInt()] = min
        this.statsMax[stat.toInt()] = max

    override function getUnitId() returns integer
        return this.unitId


    override function setOnAttackFunc(DamageFunction onAttack)
        DamageEventUnitType.fromUnitTypeId(this.unitId).attackDamageNoBuilding.add(onAttack)
        for unitTypeId in alternateUnitTypeIds
            DamageEventUnitType.fromUnitTypeId(unitTypeId).attackDamageNoBuilding.add(onAttack)

    /** Calulates the stat of the hero type for a given level */
    override function calculateStat(Stat stat, integer level) returns integer
        int result = 0
        if level != 0
            result = getBase(stat) + ( ( this.getMax(stat) - getBase(stat) ) *( (level - 1 )/(HERO_MAX_LEVEL - 1) ) ).toInt()

        return result
    
    override function setBonusCalculation(CalculateTotalBonus bonusCalculation)
        this.bonusCalculation = bonusCalculation

    override function getBonusCalculation() returns CalculateTotalBonus
        return this.bonusCalculation

    static function getHeroType(integer unitId) returns HeroTypeImpl
        return unitIdToHeroType.get(unitId)

    static function getHeroTypeFromHeroId(integer heroId) returns HeroTypeImpl
        return heroIdToHeroType.get(heroId)

    override function useHeroGlow()
        this.useHeroGlow = true

    override function getUsesHeroGlow() returns boolean
        return this.useHeroGlow

    /**
        HeroType and Hero are created. Now certain hero specific code can be run.
    **/
    override function setOnCreateFunction(OnCreateFunction onCreate)
        this.onCreateFunction = onCreate

    override function getOnCreateFunction() returns OnCreateFunction
        return this.onCreateFunction

    /**
        Initializes the HeroType object. Used to setup all triggers and the stats. If the herotype is unused this is not run and saves a lot of memory.
    **/
    override function setOnInitFunction(OnInitFunction onInit)
        this.onInitFunction = onInit

    override function getOnInitFunction() returns OnInitFunction
        return this.onInitFunction

    override function getIcon() returns string
        return this.icon

    override function getHeroId() returns int
        return this.heroId

    override function hasAI() returns boolean
        return this.hasAI

    override function setRetreatAI(AIBehaviour ai)
        this.retreatAI = ai

    override function setAttackAI(AIBehaviour ai)
        this.attackAI = ai

    override function setTeamFightAI(AIBehaviour ai)
        this.teamFightAI = ai

    override function retreatAI(IHeroAI ai)
        if this.retreatAI != null
            this.retreatAI.run(ai)

    override function attackAI(IHeroAI ai)
        if this.attackAI != null
            this.attackAI.run(ai)

    override function teamFightAI(IHeroAI ai)
        if this.teamFightAI != null
            this.teamFightAI.run(ai)

    override function getItemBuild() returns LinkedList<int>
        return this.itemBuild

    override function getSkillBuild() returns string
        return this.skillBuild

    override function addItem(int itemId)
        this.recommendedItems.addItem(itemId)
        //this.itemBuild.add(itemId)

    override function setSkillBuild(string skillBuild)
        if skillBuild.length() != 25
            if skillBuild.length() == 15
                //only QWE are set, R and P have priority, P starting at 4
                // XXXPP RXXRP XRXPR XXRPX XXXXX
                this.skillBuild = skillBuild.substring(0, 3) + "PPR" + skillBuild.substring(3, 5) + "RP" + skillBuild.substring(5, 6) + "R" + skillBuild.substring(6, 7) + "PR" + skillBuild.substring(7, 9) + "RP" +skillBuild.substring(9)
            else
                Log.error("SkillBuild must contain 25 or 15 skills: "+this.getHeroId().toString())
        else
            this.skillBuild = skillBuild
            

    override function updateTooltipsStr(unit whichUnit)
        if DYNAMIC_TOOLTIPS
            for dynamicTooltip in dynamicStrength
                let abilityTypeId = dynamicTooltip.getAbilityTypeId()
                let lvl = whichUnit.getAbilityLevel(abilityTypeId)-1
                BlzSetAbilityExtendedTooltip(abilityTypeId, dynamicTooltip.evaluateNormalString(whichUnit), lvl)
                BlzSetAbilityResearchExtendedTooltip(abilityTypeId, dynamicTooltip.evaluateLearnString(whichUnit), 0)
                if dynamicTooltip.getUseTurnOff()
                    BlzSetAbilityActivatedExtendedTooltip(abilityTypeId, dynamicTooltip.evaluateTurnOffString(whichUnit), lvl)

    override function updateTooltipsInt(unit whichUnit)
        if DYNAMIC_TOOLTIPS
            for dynamicTooltip in dynamicIntelligence
                let abilityTypeId = dynamicTooltip.getAbilityTypeId()
                let lvl = whichUnit.getAbilityLevel(abilityTypeId)-1
                BlzSetAbilityExtendedTooltip(abilityTypeId, dynamicTooltip.evaluateNormalString(whichUnit), lvl)
                BlzSetAbilityResearchExtendedTooltip(abilityTypeId, dynamicTooltip.evaluateLearnString(whichUnit), 0)
                if dynamicTooltip.getUseTurnOff()
                    BlzSetAbilityActivatedExtendedTooltip(abilityTypeId, dynamicTooltip.evaluateTurnOffString(whichUnit), lvl)

    override function getAbilityId(AbilitySlot slot) returns int
        return getAbilityOffset(this.heroId) + SLOT_ID[slot castTo int]


    static function addDynamicTooltipStrength(IHeroType herotype, DynamicTooltip tooltip)
        if herotype!=null
            (herotype castTo HeroTypeImpl).dynamicStrength.add(tooltip)
        if compiletime
            tooltip.writeData()
            
    static function addDynamicTooltipIntelligence(IHeroType herotype, DynamicTooltip tooltip)
        if(herotype!=null)
            (herotype castTo HeroTypeImpl).dynamicIntelligence.add(tooltip)
        if compiletime
            tooltip.writeData()

    static function addDynamicTooltipBoth(IHeroType herotype, DynamicTooltip tooltip)
        if(herotype!=null)
            (herotype castTo HeroTypeImpl).dynamicIntelligence.add(tooltip)
            (herotype castTo HeroTypeImpl).dynamicStrength.add(tooltip)
        if compiletime
            tooltip.writeData()

    static function getAbilityOffset(int heroId) returns int
        var id = 1090519040 //A
        let second = (heroId div 10)
        id += 65536 * (90-second) //Z,Y

        id += 256 * (48 + heroId - 10*second)

        return id


    static function createHeroButton(int heroId, int buttonPos, string icon)
        if compiletime
            let buttonId = getAbilityOffset(heroId) + 66 //B
            new AbilityDefinitionNeutralSpell(buttonId)
            ..setBaseOrderID(1, BUTTON_ORDER_STRING[buttonPos])
            ..presetIcon(icon)
            ..setChargeOwningPlayer(1, false)
            ..setGoldCost(1, HERO_GOLD_COST)
            ..setLumberCost(1, 0)
            ..setArtEffect("")
            ..setArtCaster("")
            ..setArtTarget("")
            ..setLevels(1)
            ..setHeroAbility(false)
            ..setButtonPositionNormalX(buttonPos mod 4)
            ..setButtonPositionNormalY(buttonPos div 4)

    static function getHeroTypeCount() returns int
        return heroTypeCount
    
    static function getNthHeroType(int index) returns IHeroType
        return heroTypes[index]

@compiletime
function initOrderStrings()
    BUTTON_ORDER_STRING[0] = "acidbomb"
    BUTTON_ORDER_STRING[1] = "animatedead"
    BUTTON_ORDER_STRING[2] = "blink"
    BUTTON_ORDER_STRING[3] = "blizzard"
    BUTTON_ORDER_STRING[4] = "bloodlust"
    BUTTON_ORDER_STRING[5] = "breathoffire"
    BUTTON_ORDER_STRING[6] = "breathoffrost"
    BUTTON_ORDER_STRING[7] = "cannibalize"
    BUTTON_ORDER_STRING[8] = "carrionswarm"
    BUTTON_ORDER_STRING[9] = "chainlightning"
    BUTTON_ORDER_STRING[10] = "charm"
    BUTTON_ORDER_STRING[11] = "clusterrockets"

public class HeroType
    static function get(int unitTypeId) returns IHeroType
        return HeroTypeImpl.getHeroType(unitTypeId)
    static function create(int unitTypeId, string icon, int heroId, bool hasAI) returns IHeroType
        return new HeroTypeImpl(unitTypeId, icon, heroId, hasAI)
    static function getNumberOfTypes() returns int
        return HeroTypeImpl.getHeroTypeCount()
    static function getNthType(int i) returns IHeroType
        return HeroTypeImpl.getNthHeroType(i)
    static function getAbilityOffset(int heroId) returns int
        return HeroTypeImpl.getAbilityOffset(heroId)

public function addButtonToTavern(int heroId, int buttonPos, IHeroType heroType, int tavernId)
    let buttonId = HeroType.getAbilityOffset(heroId) + 66 //B
    let q = heroType.getAbilityId(AbilitySlot.Q)
    let w = heroType.getAbilityId(AbilitySlot.W)
    let e = heroType.getAbilityId(AbilitySlot.E)
    let r = heroType.getAbilityId(AbilitySlot.R)
    let passive = heroType.getAbilityId(AbilitySlot.PASSIVE)
    let nameQ = "(Q) |cffffcc00" + GetObjectName(q) + "|r"
    let nameW = "(W) |cffffcc00" + GetObjectName(w) + "|r"
    let nameE = "(E) |cffffcc00" + GetObjectName(e) + "|r"
    let nameR = "(R) |cffffcc00" + GetObjectName(r) + "|r"
    let namePassive = "(Passive) |cffffcc00" + GetObjectName(passive) + "|r"
    let tooltipQ = DynamicTooltip.getDynamicTooltip(q).getSummary()
    let tooltipW = DynamicTooltip.getDynamicTooltip(w).getSummary()
    let tooltipE = DynamicTooltip.getDynamicTooltip(e).getSummary()
    let tooltipR = DynamicTooltip.getDynamicTooltip(r).getSummary()
    let tooltipPassive = DynamicTooltip.getDynamicTooltip(passive).getSummary()
    if tavernButtons[12 * tavernId + buttonPos] != -1
        error("tavernButtons["+(12 * tavernId + buttonPos).toString()+"] = " + tavernButtons[12 * tavernId + buttonPos].toString())
    else
        tavernButtons[12 * tavernId + buttonPos] = buttonId
        buttonToHeroType.put(HeroType.getAbilityOffset(heroId) + 66, heroType)
        BlzSetAbilityTooltip(buttonId, GetObjectName(heroType.getUnitId()), 0)
        let tooltip = namePassive + "|n" + tooltipPassive + "|n|n" + 
        nameQ + "|n" + tooltipQ + "|n|n" + 
        nameW + "|n" + tooltipW + "|n|n" + 
        nameE + "|n" + tooltipE + "|n|n" + 
        nameR + "|n" + tooltipR

        BlzSetAbilityExtendedTooltip(buttonId, tooltip, 0)
        //BlzSetAbilityExtendedTooltip(buttonId, tooltip, 1)
        let compareTooltip = BlzGetAbilityExtendedTooltip(buttonId, 0)
        doAfter(0) () ->   
            //print("T=" + tooltip)
            //print("C=" + compareTooltip)
            if compareTooltip != tooltip
                print("error")
                error("Tooltip for hero " + GetObjectName(heroType.getUnitId()) + " was not correctly generated.")

init
    buttonToHeroType = new HashMap<int, IHeroType>()
    for i = 0 to 47
        tavernButtons[i] = -1

    SLOT_ID[AbilitySlot.Q castTo int] = 81
    SLOT_ID[AbilitySlot.W castTo int] = 87
    SLOT_ID[AbilitySlot.E castTo int] = 69
    SLOT_ID[AbilitySlot.R castTo int] = 82
    SLOT_ID[AbilitySlot.PASSIVE castTo int] = 80