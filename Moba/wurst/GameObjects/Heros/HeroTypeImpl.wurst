package HeroTypeImpl

import HashMap
import FastDamageEvent
import Constants

import AbilityObjEditing
import LinkedList
import RecommendedItems
import Preloader
import Stats
import DynamicTooltips
import IHero
import IUnit
import ErrorHandling
import ClosureTimers
import ObjectIdGenerator
import ObjectIds
import UpgradeObjEditing

int currentHeroUnitTypeId = -1

int array SLOT_ID
string array BUTTON_ORDER_STRING

public constant ATTACK_ANIMATION_OFFSET = compiletime(generateAttackAnimationOffset())
function generateAttackAnimationOffset() returns int
    let id = UPGD_ID_GEN.next()
    new UpgradeDefinition(id)
    ..addEffectAttackSpeedBonus(ATTACK_ANIMATION_FACTOR - 1.0, 0)
    return id

function smartIcon(string icon) returns string
    string realIcon = icon
    if icon.length() < 20 or not icon.startsWith("ReplaceableTextures")
        realIcon = "ReplaceableTextures\\CommandButtons\\" + realIcon
    if not icon.endsWith(".blp")
        realIcon += ".blp"
    return realIcon

int array tavernButtons
HashMap<int, IHeroType> buttonToHeroType

public function getTavernButton(int index) returns int
    return tavernButtons[index]

public function getHeroFromButton(int index) returns IHeroType
    return buttonToHeroType.get(index)


public class HeroTypeImpl implements IHeroType

    int array[STAT_COUNT] statsBase
    int array[STAT_COUNT] statsMax

    private static constant unitIdToHeroType = new HashMap<integer, HeroTypeImpl>
    private static constant heroIdToHeroType = new HashMap<integer, HeroTypeImpl>
    private int unitId
    private int heroId
    private CalculateTotalBonus bonusCalculation = null
    private LinkedList<int> alternateUnitTypeIds = new LinkedList<int>
    private bool initialized = false

    private boolean hasAI = false

    private boolean useHeroGlow = false

    private static HeroTypeImpl array heroTypes 
    private static int heroTypeCount = 0

    private LinkedList<int> itemBuild = new LinkedList<int>
    private RecommendedItems recommendedItems
    private string skillBuild = ""

    private string icon = "ReplaceableTextures\\CommandButtons\\BTNSelectHeroOn.blp"

    private bool array [4] allowCooldownChange

    protected constant dynamicIntelligence = new LinkedList<DynamicTooltip>
    protected constant dynamicStrength = new LinkedList<DynamicTooltip>

    constant HeroTemplate TEMPLATE

    construct(HeroTemplate template, int heroOrder)
        template.setup(this, heroOrder)
        this.TEMPLATE = template
        heroTypes[heroTypeCount] = this
        heroTypeCount++
        this.unitId = template.UNIT_ID_HERO
        this.heroId = template.HERO_INDEX
        unitIdToHeroType.put(unitId, this)
        heroIdToHeroType.put(heroId, this)
        for i = 0 to STAT_COUNT-1
            statsBase[i]=0
            statsMax[i]=0
        
        this.icon = smartIcon(template.icon)
        this.hasAI = template.skillBuild() != ""

        if not compiletime
            preloadAbility(this.getAbilityId(AbilitySlot.Q))
            preloadAbility(this.getAbilityId(AbilitySlot.W))
            preloadAbility(this.getAbilityId(AbilitySlot.E))
            preloadAbility(this.getAbilityId(AbilitySlot.R))
            preloadAbility(this.getAbilityId(AbilitySlot.PASSIVE))
            preloadUnit(this.getUnitId())

            this.recommendedItems = new RecommendedItems(unitId)

            for i = 0 to 3
                allowCooldownChange[i] = true
            addButtonToTavern(this.heroId, template.HERO_ORDER mod 12, this, template.HERO_ORDER div 12)

    //only initialize every herotype once
    override function initialize()
        if not this.initialized
            this.initialized = true
            TEMPLATE.stats(this)
            TEMPLATE.onInit(this)
            delayInit(5) -> 
                TEMPLATE.onInitDelayed(this)

    override function addMorph(int id)
        unitIdToHeroType.put(id, this)
        this.alternateUnitTypeIds.add(id)

    override function setBase(Stat stat, integer value)
        this.statsBase[stat.toInt()] = value

    override function getBase(Stat stat) returns integer
        return this.statsBase[stat.toInt()]

    override function setMax(Stat stat, integer value)
        this.statsMax[stat.toInt()] = value

    override function getMax(Stat stat) returns integer
        return this.statsMax[stat.toInt()]

    override function setStat(Stat stat, integer min, integer max)
        this.statsBase[stat.toInt()] = min
        this.statsMax[stat.toInt()] = max

    override function getUnitId() returns integer
        return this.unitId


    override function setOnAttackFunc(DamageFunction onAttack)
        DamageEventUnitType.fromUnitTypeId(this.unitId).attackDamageNoBuilding.add(onAttack)
        for unitTypeId in alternateUnitTypeIds
            DamageEventUnitType.fromUnitTypeId(unitTypeId).attackDamageNoBuilding.add(onAttack)

    /** Calulates the stat of the hero type for a given level */
    override function calculateStat(Stat stat, integer level) returns integer
        int result = 0
        if level != 0
            result = getBase(stat) + ( ( this.getMax(stat) - getBase(stat) ) *( (level - 1 )/(HERO_MAX_LEVEL - 1) ) ).toInt()

        return result
    
    override function setBonusCalculation(CalculateTotalBonus bonusCalculation)
        this.bonusCalculation = bonusCalculation

    override function getBonusCalculation() returns CalculateTotalBonus
        return this.bonusCalculation

    static function getHeroType(integer unitId) returns HeroTypeImpl
        return unitIdToHeroType.get(unitId)

    static function getHeroTypeFromHeroId(integer heroId) returns HeroTypeImpl
        return heroIdToHeroType.get(heroId)

    override function useHeroGlow()
        this.useHeroGlow = true

    override function getUsesHeroGlow() returns boolean
        return this.useHeroGlow



    override function getIcon() returns string
        return this.icon

    override function getHeroId() returns int
        return this.heroId

    override function hasAI() returns boolean
        return this.hasAI

    override function retreatAI(IHeroAI ai)
        TEMPLATE.retreatAI(ai)

    override function attackAI(IHeroAI ai)
        TEMPLATE.attackAI(ai)

    override function teamFightAI(IHeroAI ai)
        TEMPLATE.teamFightAI(ai)

    override function getItemBuild() returns LinkedList<int>
        return this.itemBuild

    override function getSkillBuild() returns string
        return this.skillBuild

    override function addItem(int itemId)
        this.recommendedItems.addItem(itemId)
        //this.itemBuild.add(itemId)

    override function setSkillBuild(string skillBuild)
        if skillBuild.length() != 25
            if skillBuild.length() == 15
                //only QWE are set, R and P have priority, P starting at 4
                // XXXPP RXXRP XRXPR XXRPX XXXXX
                this.skillBuild = skillBuild.substring(0, 3) + "PPR" + skillBuild.substring(3, 5) + "RP" + skillBuild.substring(5, 6) + "R" + skillBuild.substring(6, 7) + "PR" + skillBuild.substring(7, 9) + "RP" +skillBuild.substring(9)
            else
                Log.error("SkillBuild must contain 25 or 15 skills: "+this.getHeroId().toString())
        else
            this.skillBuild = skillBuild
            

    override function updateTooltipsStr(unit whichUnit)
        if whichUnit == null or whichUnit.getTypeId() == 0
            error("no unit")
        if DYNAMIC_TOOLTIPS
            for dynamicTooltip in dynamicStrength
                let abilityTypeId = dynamicTooltip.getAbilityTypeId()
                let lvl = whichUnit.getAbilityLevel(abilityTypeId)-1
                BlzSetAbilityExtendedTooltip(abilityTypeId, dynamicTooltip.evaluateNormalString(whichUnit), lvl)
                BlzSetAbilityResearchExtendedTooltip(abilityTypeId, dynamicTooltip.evaluateLearnString(whichUnit), 0)
                if dynamicTooltip.getUseTurnOff()
                    BlzSetAbilityActivatedExtendedTooltip(abilityTypeId, dynamicTooltip.evaluateTurnOffString(whichUnit), lvl)

    override function updateTooltipsInt(unit whichUnit)
        if whichUnit == null or whichUnit.getTypeId() == 0
            error("no unit")
        if DYNAMIC_TOOLTIPS
            for dynamicTooltip in dynamicIntelligence
                let abilityTypeId = dynamicTooltip.getAbilityTypeId()
                let lvl = whichUnit.getAbilityLevel(abilityTypeId)-1
                BlzSetAbilityExtendedTooltip(abilityTypeId, dynamicTooltip.evaluateNormalString(whichUnit), lvl)
                BlzSetAbilityResearchExtendedTooltip(abilityTypeId, dynamicTooltip.evaluateLearnString(whichUnit), 0)
                if dynamicTooltip.getUseTurnOff()
                    BlzSetAbilityActivatedExtendedTooltip(abilityTypeId, dynamicTooltip.evaluateTurnOffString(whichUnit), lvl)

    override function getAbilityId(AbilitySlot slot) returns int
        return getAbilityOffset(this.heroId) + SLOT_ID[slot castTo int]

    override function disableCooldownChange(int skillIndex)
        allowCooldownChange[skillIndex] = false

    override function getAllowCooldownChange(int skillIndex) returns bool
        return allowCooldownChange[skillIndex]

    static function addDynamicTooltipStrength(IHeroType herotype, DynamicTooltip tooltip)
        if herotype!=null
            (herotype castTo HeroTypeImpl).dynamicStrength.add(tooltip)
        if compiletime
            tooltip.writeData()
            
    static function addDynamicTooltipIntelligence(IHeroType herotype, DynamicTooltip tooltip)
        if(herotype!=null)
            (herotype castTo HeroTypeImpl).dynamicIntelligence.add(tooltip)
        if compiletime
            tooltip.writeData()

    static function addDynamicTooltipBoth(IHeroType herotype, DynamicTooltip tooltip)
        if(herotype!=null)
            (herotype castTo HeroTypeImpl).dynamicIntelligence.add(tooltip)
            (herotype castTo HeroTypeImpl).dynamicStrength.add(tooltip)
        if compiletime
            tooltip.writeData()

    static function getAbilityOffset(int heroId) returns int
        var id = 1090519040 //A
        let second = (heroId div 10)
        id += 65536 * (90-second) //Z,Y

        id += 256 * (48 + heroId - 10*second)

        return id


    static function createHeroButton(int heroId, int buttonPos, string icon)
        if compiletime
            let buttonId = getAbilityOffset(heroId) + 66 //B
            new AbilityDefinitionNeutralSpell(buttonId)
            ..setBaseOrderID(1, BUTTON_ORDER_STRING[buttonPos])
            ..presetIcon(icon)
            ..setChargeOwningPlayer(1, false)
            ..setGoldCost(1, HERO_GOLD_COST)
            ..setLumberCost(1, 0)
            ..setArtEffect("")
            ..setArtCaster("")
            ..setArtTarget("")
            ..setLevels(1)
            ..setHeroAbility(false)
            ..setButtonPositionNormalX(buttonPos mod 4)
            ..setButtonPositionNormalY(buttonPos div 4)

    static function getHeroTypeCount() returns int
        return heroTypeCount
    
    static function getNthHeroType(int index) returns IHeroType
        return heroTypes[index]

@compiletime
function initOrderStrings()
    BUTTON_ORDER_STRING[0] = "acidbomb"
    BUTTON_ORDER_STRING[1] = "animatedead"
    BUTTON_ORDER_STRING[2] = "blink"
    BUTTON_ORDER_STRING[3] = "blizzard"
    BUTTON_ORDER_STRING[4] = "bloodlust"
    BUTTON_ORDER_STRING[5] = "breathoffire"
    BUTTON_ORDER_STRING[6] = "breathoffrost"
    BUTTON_ORDER_STRING[7] = "cannibalize"
    BUTTON_ORDER_STRING[8] = "carrionswarm"
    BUTTON_ORDER_STRING[9] = "chainlightning"
    BUTTON_ORDER_STRING[10] = "charm"
    BUTTON_ORDER_STRING[11] = "clusterrockets"

public class HeroType
    static function get(int unitTypeId) returns IHeroType
        return HeroTypeImpl.getHeroType(unitTypeId)
    static function create(HeroTemplate template, int heroOrder) returns IHeroType
        return new HeroTypeImpl(template, heroOrder)
    static function getNumberOfTypes() returns int
        return HeroTypeImpl.getHeroTypeCount()
    static function getNthType(int i) returns IHeroType
        return HeroTypeImpl.getNthHeroType(i)
    static function getAbilityOffset(int heroId) returns int
        return HeroTypeImpl.getAbilityOffset(heroId)

public function addButtonToTavern(int heroId, int buttonPos, IHeroType heroType, int tavernId)
    let buttonId = HeroType.getAbilityOffset(heroId) + 66 //B
    let q = heroType.getAbilityId(AbilitySlot.Q)
    let w = heroType.getAbilityId(AbilitySlot.W)
    let e = heroType.getAbilityId(AbilitySlot.E)
    let r = heroType.getAbilityId(AbilitySlot.R)
    let passive = heroType.getAbilityId(AbilitySlot.PASSIVE)
    let nameQ = "(Q) |cffffcc00" + GetObjectName(q) + "|r"
    let nameW = "(W) |cffffcc00" + GetObjectName(w) + "|r"
    let nameE = "(E) |cffffcc00" + GetObjectName(e) + "|r"
    let nameR = "(R) |cffffcc00" + GetObjectName(r) + "|r"
    let namePassive = "(Passive) |cffffcc00" + GetObjectName(passive) + "|r"
    let tooltipQ = DynamicTooltip.getDynamicTooltip(q).getSummary()
    let tooltipW = DynamicTooltip.getDynamicTooltip(w).getSummary()
    let tooltipE = DynamicTooltip.getDynamicTooltip(e).getSummary()
    let tooltipR = DynamicTooltip.getDynamicTooltip(r).getSummary()
    let tooltipPassive = DynamicTooltip.getDynamicTooltip(passive).getSummary()
    if tavernButtons[12 * tavernId + buttonPos] != -1
        error("tavernButtons["+(12 * tavernId + buttonPos).toString()+"] = " + tavernButtons[12 * tavernId + buttonPos].toString())
    else
        tavernButtons[12 * tavernId + buttonPos] = buttonId
        buttonToHeroType.put(HeroType.getAbilityOffset(heroId) + 66, heroType)
        BlzSetAbilityTooltip(buttonId, GetObjectName(heroType.getUnitId()), 0)
        let tooltip = namePassive + "|n" + tooltipPassive + "|n|n" + 
        nameQ + "|n" + tooltipQ + "|n|n" + 
        nameW + "|n" + tooltipW + "|n|n" + 
        nameE + "|n" + tooltipE + "|n|n" + 
        nameR + "|n" + tooltipR

        BlzSetAbilityExtendedTooltip(buttonId, tooltip, 0)
        //BlzSetAbilityExtendedTooltip(buttonId, tooltip, 1)
        let compareTooltip = BlzGetAbilityExtendedTooltip(buttonId, 0)
        doAfter(0) () ->   
            //print("T=" + tooltip)
            //print("C=" + compareTooltip)
            if compareTooltip != tooltip
                print("error")
                error("Tooltip for hero " + GetObjectName(heroType.getUnitId()) + " was not correctly generated: " + buttonId.toRawCode())

public function addDynamicTooltipStrength(IHeroType herotype, DynamicTooltip tooltip)
    HeroTypeImpl.addDynamicTooltipStrength(herotype, tooltip)
                    
public function addDynamicTooltipIntelligence(IHeroType herotype, DynamicTooltip tooltip)
    HeroTypeImpl.addDynamicTooltipIntelligence(herotype, tooltip)

public function addDynamicTooltipBoth(IHeroType herotype, DynamicTooltip tooltip)
    HeroTypeImpl.addDynamicTooltipBoth(herotype, tooltip)

public function createHeroButton(int heroId, int buttonPos, string icon)
    HeroTypeImpl.createHeroButton(heroId, buttonPos, icon)

function charToAbilitySlot(string char) returns AbilitySlot
    AbilitySlot ret = AbilitySlot.PASSIVE
    let s = char.toUpperCase()
    if s == "Q"
        ret = AbilitySlot.Q
    else if s == "W"
        ret = AbilitySlot.W
    else if s == "E"
        ret = AbilitySlot.E
    else if s == "R"
        ret = AbilitySlot.R
    else if s == "D"
        ret = AbilitySlot.PASSIVE
    else
        error("unknown skill slot: "+char)

    return ret

public function delayInit(real maxDelay, CallbackSingle cb)
    doAfter(GetRandomReal(1, maxDelay), cb)
        
/*
This module must be used for every child class of HeroTemplate.
By using this module, every child class gets its own unique UNIT_TYPE_ID.
This must be done with modules rather than parent classes in order to execute the compiletime function for every child class.
The unit type id is stored in a global to avoid additional parameters.

The module also offers an instance variable, which can be used as a singleton to access instance data from static context:

class MyHero extends HeroTemplate
    use HeroTemplateModule

    int instanceVar = 0

init
    print(MyHero.instance.instanceVar)

This is especially useful for triggers, because they cannot capture the instance.
*/
public module HeroTemplateModule
    static thistype instance
    static int UNIT_TYPE_ID = compiletime(HERO_ID_GEN.next())
    construct()
        currentHeroUnitTypeId = UNIT_TYPE_ID
        if currentHeroUnitTypeId == -1
            error("")
        instance = this


/**
Must be used together with HeroTemplateModule:
class MyHero extends HeroTemplate
    use HeroTemplateModule
    ...
**/
public abstract class HeroTemplate
    static IHero lastCreatedHero
    static constant SPELL_TO_TEMPLATE = new HashMap<int, HeroTemplate>()
    static constant SPELL_TO_SLOT = new HashMap<int, AbilitySlot>() 
    static int numInstances = 0
    constant int HERO_INDEX
    constant int ABILITY_ID_Q 
    constant int ABILITY_ID_W
    constant int ABILITY_ID_E
    constant int ABILITY_ID_R
    constant int ABILITY_ID_PASSIVE
    int UNIT_ID_HERO
    int HERO_ORDER
    string model = "units\\human\\HeroMountainKing\\HeroMountainKing.mdl"
    string icon = "ReplaceableTextures\\CommandButtons\\BTNHeroMountainKing.blp"
    real castPoint = 0.4
    real castBackswing = 0.5
    real blendTime = 0.15
    real maxPitchAngle = 10.0
    real maxRollAngle = 10.0
    real selectionScale = 1.25
    real shadowX = 60
    real shadowY = 60
    real shadowH = 150
    real shadowW = 150
    real runSpeed = 250
    real walkSpeed = 250
    real impactZ = 60
    real launchX = 0
    real launchY = 0
    real launchZ = 60
    string requiredAnimationNames = ""
    real scalingValue = 1.0
    string artSpecial = "Objects\\Spawnmodels\\Human\\HumanLargeDeathExplode\\HumanLargeDeathExplode.mdl"
    ArmorSoundType armorSoundType = ArmorSoundType.Metal
    real backswingPoint = 0.65
    real damagePoint = 0.35
    real cooldownTime = 2.22
    WeaponSound weaponSound = WeaponSound.MetalHeavyBash
    WeaponType weaponType = WeaponType.Normal
    string projectileArt = ""
    int projectileSpeed = 1000
    bool projectileHoming = true
    real projectileArc = 0.15
    int range = 100
    real turnRate = 0.6
    MovementType movementType = MovementType.Foot
    real movementHeight = 0
    string unitSoundSet = "HeroMountainKing"
    string name = "Mountain King"
    string description = "Warrior Hero"
    string properName = "Muradin"

    construct()
        this.HERO_INDEX = numInstances
        numInstances++
        let heroOffset = HeroType.getAbilityOffset(this.HERO_INDEX) 
        this.ABILITY_ID_Q = heroOffset + SLOT_ID[AbilitySlot.Q castTo int]
        this.ABILITY_ID_W = heroOffset + SLOT_ID[AbilitySlot.W castTo int]
        this.ABILITY_ID_E = heroOffset+ SLOT_ID[AbilitySlot.E castTo int]
        this.ABILITY_ID_R = heroOffset + SLOT_ID[AbilitySlot.R castTo int]
        this.ABILITY_ID_PASSIVE = heroOffset + SLOT_ID[AbilitySlot.PASSIVE castTo int]
        SPELL_TO_TEMPLATE.put(this.ABILITY_ID_Q, this)
        SPELL_TO_TEMPLATE.put(this.ABILITY_ID_W, this)
        SPELL_TO_TEMPLATE.put(this.ABILITY_ID_E, this)
        SPELL_TO_TEMPLATE.put(this.ABILITY_ID_R, this)
        SPELL_TO_SLOT.put(this.ABILITY_ID_Q, AbilitySlot.Q)
        SPELL_TO_SLOT.put(this.ABILITY_ID_W, AbilitySlot.W)
        SPELL_TO_SLOT.put(this.ABILITY_ID_E, AbilitySlot.E)
        SPELL_TO_SLOT.put(this.ABILITY_ID_R, AbilitySlot.R)

    /*
    Called after the constructor. This needs to be outside of the constructor, because subclasses need to be initialized.
    */
    function setup(IHeroType heroType, int heroOrder)
        this.HERO_ORDER = heroOrder
        if currentHeroUnitTypeId == -1
            error("")
        this.UNIT_ID_HERO = currentHeroUnitTypeId
        currentHeroUnitTypeId = -1
        this.setupPassive(this.ABILITY_ID_PASSIVE, heroType)
        this.setupQ(this.ABILITY_ID_Q, heroType)
        this.setupW(this.ABILITY_ID_W, heroType)
        this.setupE(this.ABILITY_ID_E, heroType)
        this.setupR(this.ABILITY_ID_R, heroType)
        this.objectDefinition()
        if compiletime
            let def = this.defaultHero(this.UNIT_ID_HERO)
            this.applyObjectDefinition(def)
            this.customDefintions(def)
            createHeroButton(this.HERO_INDEX, heroOrder mod 12, this.icon)
        
    /**
    Creates a unit copy of the hero.
    Important changes:
    - no hero, gets resistant skin instead
    - no mana
    - no upgrades
    **/
    function defaultUnit(int id) returns UnitDefinition
        let def = new UnitDefinition(id, 'hfoo')
        ..setNormalAbilities("A008,ACrk")
        ..setAcquisitionRange(600.0)
        ..setAttack1DamageBase(-1)
        ..setAttack1DamageNumberofDice(1)
        ..setAttack1DamageSidesperDie(1)
        ..setAttack1TargetsAllowed("air,ground,nonancient,nonsapper,structure,ward")
        ..setDefenseBase(0)
        ..setDefenseUpgradeBonus(1)
        ..setFoodCost(0)
        ..setGoldCost(0)
        ..setLumberCost(0)
        ..setHitPointsMaximumBase(400)
        ..setHitPointsRegenerationRate(0.01)
        ..setAttack1AttackType(AttackType.Hero)
        ..setArmorType(ArmorType.Hero)
        ..setUpgradesUsed("")
        ..setStockMaximum(1)
        ..setStockReplenishInterval(0)
        ..setSightRadiusDay(1800)
        ..setDeathType(0)
        ..setUpgradesUsed(ATTACK_ANIMATION_OFFSET.toRawCode())
        return def
    function defaultHero(int id) returns HeroDefinition
        let def = new HeroDefinition(id, 'Hmkg')
        ..setHeroAbilities(commaList(ABILITY_ID_PASSIVE, ABILITY_ID_Q, ABILITY_ID_W, ABILITY_ID_E, ABILITY_ID_R))
        ..setNormalAbilities("A008,AInv")
        ..setAcquisitionRange(600.0)
        ..setAttack1DamageBase(-1)
        ..setAttack1DamageNumberofDice(1)
        ..setAttack1DamageSidesperDie(1)
        ..setAttack1TargetsAllowed("air,ground,nonancient,nonsapper,structure,ward")
        ..setDefenseBase(0)
        ..setDefenseUpgradeBonus(1)
        ..setAgilityPerLevel(0)
        ..setStrengthPerLevel(0)
        ..setIntelligencePerLevel(0)
        ..setFoodCost(0)
        ..setGoldCost(0)
        ..setLumberCost(0)
        ..setHitPointsMaximumBase(400)
        ..setHitPointsRegenerationRate(0.01)
        ..setManaInitialAmount(100)
        ..setManaMaximum(100)
        ..setManaRegeneration(0)
        ..setStartingAgility(1)
        ..setStartingStrength(1)
        ..setStartingIntelligence(1)
        ..setStockMaximum(1)
        ..setStockReplenishInterval(0)
        ..setRequierementsForTier(2, "n006")
        ..setUpgradesUsed(ATTACK_ANIMATION_OFFSET.toRawCode())
        //..setUpgradesUsed(commaList(UPG_AS, UPG_AR, UPG_AD, UPG_HP, UPG_MP))
        ..setProperNamesUsed(1)
        return def
    
    function applyObjectDefinition(UnitOrHeroDefinition def)
        def
        ..setModelFile(model)
        ..setIconGameInterface(smartIcon(icon))
        ..setAnimationCastBackswing(castBackswing)
        ..setAnimationCastPoint(castPoint)
        ..setAnimationBlendTimeseconds(blendTime)
        ..setAnimationRunSpeed(runSpeed)
        ..setAnimationWalkSpeed(walkSpeed)
        ..setMaximumPitchAngledegrees(maxPitchAngle)
        ..setMaximumRollAngledegrees(maxRollAngle)
        ..setProjectileImpactZ(impactZ)
        ..setProjectileLaunchX(launchX)
        ..setProjectileLaunchY(launchY)
        ..setProjectileLaunchZ(launchZ)
        ..setShadowImageCenterX(shadowX)
        ..setShadowImageCenterY(shadowY)
        ..setShadowImageHeight(shadowH)
        ..setShadowImageWidth(shadowW)
        ..setRequiredAnimationNames(requiredAnimationNames)
        ..setScalingValue(scalingValue)
        ..setSelectionScale(selectionScale)
        ..setArtSpecial(artSpecial)
        ..setArmorSoundType(armorSoundType)
        ..setAttack1AnimationBackswingPoint(backswingPoint)
        ..setAttack1AnimationDamagePoint(damagePoint)
        ..setAttack1CooldownTime(cooldownTime)
        ..setAttack1WeaponSound(weaponSound)
        ..setAttack1WeaponType(weaponType)
        ..setAttack1Range(range)
        ..setAttack1ProjectileArt(projectileArt)
        ..setAttack1ProjectileHomingEnabled(projectileHoming)
        ..setAttack1ProjectileSpeed(projectileSpeed)
        ..setAttack1ProjectileArc(projectileArc)
        ..setTurnRate(turnRate)
        ..setMovementType(movementType)
        ..setMovementHeight(movementHeight)
        ..setUnitSoundSet(unitSoundSet)
        ..setTooltipBasic(name)
        ..setTooltipExtended(description)
        ..setName(name)
        if def instanceof HeroDefinition
            (def castTo HeroDefinition).setProperNames(properName)



    function customDefintions(HeroDefinition _def)
    abstract function objectDefinition()
    abstract function setupPassive(int abilityId, IHeroType heroType)
    abstract function setupQ(int abilityId, IHeroType heroType)
    abstract function setupW(int abilityId, IHeroType heroType)
    abstract function setupE(int abilityId, IHeroType heroType)
    abstract function setupR(int abilityId, IHeroType heroType)
    abstract function castQ()
    abstract function castW()
    abstract function castE()
    abstract function castR()
    abstract function stats(IHeroType _heroType)
    function skillBuild() returns string
        return ""
    function retreatAI(IHeroAI _ai)
    function attackAI(IHeroAI _ai)
    function teamFightAI(IHeroAI _ai)
    abstract function recommendedItems(LinkedList<int> _list)
    function onInit(IHeroType _heroType)
    function onInitDelayed(IHeroType _heroType)
    function onCreate(IHeroType _heroType, IHero _hero)


public module HeroInstance
    static constant instanceMap = new HashMap<unit,thistype>()
    IHero hero
    unit u
    player owner
    int ownerId

    static function fromTrigger() returns thistype
        return fromUnit(GetTriggerUnit())

    static function fromUnit(unit u) returns thistype
        if instanceMap.has(u)
            return instanceMap.get(u)
        else
            return null

    construct()
        hero = HeroTemplate.lastCreatedHero
        u = hero.toUnit()
        owner = u.getOwner()
        ownerId = owner.getId()
        instanceMap.put(u, this)


@compiletime
function initialize()
    if not compiletime
        buttonToHeroType = new HashMap<int, IHeroType>()
        for i = 0 to 47
            tavernButtons[i] = -1

    SLOT_ID[AbilitySlot.Q castTo int] = 81
    SLOT_ID[AbilitySlot.W castTo int] = 87
    SLOT_ID[AbilitySlot.E castTo int] = 69
    SLOT_ID[AbilitySlot.R castTo int] = 82
    SLOT_ID[AbilitySlot.PASSIVE castTo int] = 80

init
    initialize()
