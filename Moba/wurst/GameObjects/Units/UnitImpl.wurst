package UnitImpl


import HashMap
import LinkedList
import Constants
import Buff
import Upgrades
import BonusMod
import ErrorHandling
import ObjectIds
import UnitIndexer
import Missile
import IHero
import TeamUtil
import IUnit
import UnitTypeImpl
import HeroTypeImpl
import initlater HeroImpl


/*
This file is huge. The end is mostly optimized convenience functions.
*/
function initAtTop()
    onUnitIndex(() -> UnitImpl.create(getIndexingUnit()))
    onUnitDeindex(() -> UnitImpl.getWrapper(getIndexingUnit()).destr() )

    BuffConfiguration.setGetBuffListFunction( (unit u) -> UnitImpl.getBuffList(u))

    BuffConfiguration.setCreateBuffListFunction( (unit u) -> (begin
        let w = UnitImpl.getWrapper(u)
        if w != null
            w.createBuffList()
        else
            error("The unit "+u.getName()+" had no wrapper.")
            UnitImpl.create(u)
            w.createBuffList()
    end))

    setHitBoxFunction( (unit u) -> (begin
        real ret = 32
        if u.isType(UNIT_TYPE_HERO)
            ret = 64
        else
            let unitType = UnitType.get(u.getTypeId())
            if unitType!=null
                ret = unitType.getHitBox().toReal()
        return ret
    end))


public class UnitImpl implements IUnit

    private CalculateTotalBonus bonusCalculation = null

    protected static unit array allUnits
    protected static int unitWrapperCount = 0

    protected int index

    private static constant unitMap = new HashMap<unit, UnitImpl>()
    private unit assocUnit
    private int ownerId
    private IHeroType heroType = null
    private IUnitType unitType = null

    //protected real currentMovementSpeed
    //protected real defaultMovementSpeed

    private static int array statBaseValue_static
    private static int array statsAbsoluteBonus_static //default = 0
    private static int array statsAbsoluteBonusReal_static //default = 0
    private static int array statsRelativeBonus_static //default = 0.00

    int arrayOffset

    /*
        Use integer to avoid rounding errors. 1000 means 100% or 1
    */
    static int array statsTotalBonus_static //default = 0
    // total = (base + absolute) * (1 + relative/1000)

    private static constant unknownUnitTypes = new LinkedList<int>()

    protected BuffList buffList

    private int blueCount = 0
    private int revealCount = 0

    private int team

    /*
        In the getWrapper() function, a new wrapper will be created, if it does not exist already.
        To prevent cyclic function calls this is done with a trigger function.
    */
    private static constant CREATE_TRIGGER = CreateTrigger()..addAction(function createWrapper)
    private static unit createForUnit = null

    static function create(unit assocUnit)
        if not unitMap.has(assocUnit)
            new UnitImpl(assocUnit)

    construct(unit assocUnit)
        objectCount++
        if assocUnit == null or assocUnit.getTypeId() == 0
            destroy this
        else
            this.ownerId = assocUnit.getOwner().getId()
            this.assocUnit = assocUnit
            this.team = Players.team(this.ownerId)
            this.arrayOffset = (this castTo int) * STAT_COUNT

            if this.assocUnit.isType(UNIT_TYPE_HERO)
                this.heroType = HeroType.get(this.assocUnit.getTypeId())
                if this.heroType == null
                    error("HeroType could not be resolved: " + this.assocUnit.getName())
            else
                this.unitType = UnitType.get(this.assocUnit.getTypeId())

            allUnits[unitWrapperCount] = this.assocUnit
            this.index = unitWrapperCount
            unitWrapperCount++


            unitMap.put(assocUnit, this)

            this.buffList = null // new BuffList  create BuffList only when needed

            for int i = 0 to STAT_COUNT-1
                statsAbsoluteBonus_static[this.arrayOffset + i] = 0
                statsAbsoluteBonusReal_static[this.arrayOffset + i] = 0
                statsRelativeBonus_static[this.arrayOffset + i] = 0
                statsTotalBonus_static[this.arrayOffset + i] = 0

            // Init base values
            statBaseValue_static[this.arrayOffset + Stat.MS.toInt()] = GetUnitDefaultMoveSpeed(this.assocUnit).toInt()
            statBaseValue_static[this.arrayOffset + Stat.STR.toInt()] = this.assocUnit.getStr(false)
            statBaseValue_static[this.arrayOffset + Stat.AGI.toInt()] = this.assocUnit.getAgi(false)
            statBaseValue_static[this.arrayOffset + Stat.INT.toInt()] = this.assocUnit.getInt(false)
            statBaseValue_static[this.arrayOffset + Stat.AR.toInt()] = this.assocUnit.getArmor().toInt()
            statBaseValue_static[this.arrayOffset + Stat.AD.toInt()] = 0 // strength
            statBaseValue_static[this.arrayOffset + Stat.AS.toInt()] = 0 //not needed as only absolute bonus will be used
            statBaseValue_static[this.arrayOffset + Stat.HR.toInt()] = 0
            statBaseValue_static[this.arrayOffset + Stat.MR.toInt()] = 0
            statBaseValue_static[this.arrayOffset + Stat.HP.toInt()] = this.assocUnit.getMaxHP().toInt()
            statBaseValue_static[this.arrayOffset + Stat.MP.toInt()] = this.assocUnit.getMaxMana().toInt()
            statBaseValue_static[this.arrayOffset + Stat.CD.toInt()] = 0

            if this.unitType != null
                updateBaseStatsUnits()
            else if this.assocUnit.isType(UNIT_TYPE_HERO)
                statBaseValue_static[this.arrayOffset + Stat.AD.toInt()] = statBaseValue_static[this.arrayOffset + Stat.STR.toInt()]
                statBaseValue_static[this.arrayOffset + Stat.AR.toInt()] = 0
            else
                if not this.assocUnit.isType(UNIT_TYPE_STRUCTURE)
                    if this.assocUnit.getAbilityLevel('Aloc') == 0
                        if not unknownUnitTypes.has(this.assocUnit.getTypeId())
                            unknownUnitTypes.add(this.assocUnit.getTypeId())
                            Log.warn("Warning unknown unit type: ("+GetUnitName(this.assocUnit) + ")_" + this.assocUnit.getTypeId().toRawCode() + "_" + this.assocUnit.getTypeId().toString())

    override function updateBaseStatsUnits()
        if unitType != null
            statBaseValue_static[this.arrayOffset + Stat.STR.toInt()] = unitType.getBaseAttack() + unitType.getUpgradeAttack(this.assocUnit.getOwner())
            statBaseValue_static[this.arrayOffset + Stat.AR.toInt()] = unitType.getBaseArmor() + unitType.getUpgradeArmor(this.assocUnit.getOwner())
            statBaseValue_static[this.arrayOffset + Stat.HP.toInt()] = unitType.getBaseHp() //(unitType.getBaseHp() * ( 1 + 0.1 * unitType.getUpgradeArmorCount(this.assocUnit.getOwner()))).round()
            //willpower is same as armor
            statBaseValue_static[this.arrayOffset + Stat.AGI.toInt()] = unitType.getBaseArmor() + unitType.getUpgradeArmor(this.assocUnit.getOwner())
            modHealth(0)

    override function updateBaseStatsHero()
        if not this.assocUnit.isType(UNIT_TYPE_HERO)
            Log.warn("Base stats for non-hero units are constant and must not be updated.")
        statBaseValue_static[this.arrayOffset + Stat.STR.toInt()] = this.assocUnit.getStr(false)
        statBaseValue_static[this.arrayOffset + Stat.AGI.toInt()] = this.assocUnit.getAgi(false)
        statBaseValue_static[this.arrayOffset + Stat.INT.toInt()] = this.assocUnit.getInt(false)

        statBaseValue_static[this.arrayOffset + Stat.AD.toInt()] = 0
        statBaseValue_static[this.arrayOffset + Stat.AR.toInt()] = GetPlayerTechCount(this.assocUnit.getOwner(), UPG_AR, true)
        statBaseValue_static[this.arrayOffset + Stat.AS.toInt()] = 0
        
        statBaseValue_static[this.arrayOffset + Stat.HP.toInt()] = 400 + GetPlayerTechCount(this.assocUnit.getOwner(), UPG_HP, true) * 15
        statBaseValue_static[this.arrayOffset + Stat.HR.toInt()] = 0
        
        statBaseValue_static[this.arrayOffset + Stat.MP.toInt()] = 100 + GetPlayerTechCount(this.assocUnit.getOwner(), UPG_MP, true) * 10
        statBaseValue_static[this.arrayOffset + Stat.MR.toInt()] = 0
        //statBaseValue[Stat.MS.toInt()] = this.defaultMovementSpeed.toInt()
        statBaseValue_static[this.arrayOffset + Stat.CD.toInt()] = 0
    
    ondestroy
        objectCount--
        for int i = 0 to STAT_COUNT-1
            statsAbsoluteBonus_static[this.arrayOffset + i] = 0
            statsRelativeBonus_static[this.arrayOffset + i] = 0
            statsTotalBonus_static[this.arrayOffset + i] = 0

    private static function createWrapper()
        create(createForUnit)

    static function getWrapper(unit whichUnit) returns UnitImpl
        let w = unitMap.get(whichUnit)
        if w == null
            createForUnit = whichUnit
            CREATE_TRIGGER.execute()
            return unitMap.get(whichUnit)
        return w

    static function getBuffList(unit whichUnit) returns BuffList
        return getWrapper(whichUnit).buffList

    //custom destroy function, so unit wrapper is destroyed last and can be used in the clean up routines
    protected function destr()
        //the dispel function must be executed before the unit wrapper is destroyed
        if this.buffList != null
            for Buff b in this.buffList.getLinkedList()
                b.dispel()

            destroy this.buffList

        //remove unit wrapper
        unitWrapperCount--
        allUnits[this.index] = allUnits[unitWrapperCount]
        unitMap.remove(this.assocUnit)
        destroy this


    override function createBuffList()
        if this.buffList == null
            this.buffList = new BuffList()
        else
            error("This unit wrapper already has a buffList")


    override function setBonusCalculation(CalculateTotalBonus bonusCalculation)
        this.bonusCalculation = bonusCalculation

    override function getBonusCalculation() returns CalculateTotalBonus
        return this.bonusCalculation

    override function defaultBonusCalcualtion(Stat whichStat)
        let factor = this.getStatRelativeBonus(whichStat) / 1000
        UnitImpl.setStatBonusInternal(whichStat, (this.getStatAbsoluteBonus(whichStat) * (1+factor) + this.getStatBase(whichStat) * factor).round() )

    override function printStats()
        for i = 0 to STAT_COUNT-1
            printStat(i castTo Stat)

    override function printStat(Stat whichStat)
        let stat = whichStat.toInt()
        Log.debug(whichStat.toString()+" ( "+statBaseValue_static[this.arrayOffset + stat].toString()+" + "+statsAbsoluteBonus_static[this.arrayOffset + stat].toString()+" ) * "+statsRelativeBonus_static[this.arrayOffset + stat].toString() + "->" +statsTotalBonus_static[this.arrayOffset + stat].toString() )

    override function toUnit() returns unit
        return this.assocUnit

    override function copyBaseStatsFrom(IUnit wrapper)
        for i = 0 to STAT_COUNT - 1
            statBaseValue_static[this.arrayOffset + i] = statBaseValue_static[(wrapper castTo UnitImpl).arrayOffset + i]
            this.updateStat(i castTo Stat)

    override function incBlue()
        blueCount++
        if blueCount == 1
            this.assocUnit.setVertexColor(140, 220, 255, 255)

    override function decBlue()
        blueCount--
        if blueCount == 0
            this.assocUnit.setVertexColor(255, 255, 255, 255)

    override function modBlue(int value)
        blueCount += value
        if blueCount > 0
            this.assocUnit.setVertexColor(140, 220, 255, 255)
        else
            this.assocUnit.setVertexColor(255, 255, 255, 255)

    override function incReveal()
        revealCount++
        if revealCount == 1
            if this.team == TEAM_1
                UnitShareVision(this.toUnit(), players[Teams.army2()], true)
            else if this.team == TEAM_2
                UnitShareVision(this.toUnit(), players[Teams.army1()], true)

    override function decReveal()
        revealCount--
        if revealCount == 0
            if this.team == TEAM_1
                UnitShareVision(this.toUnit(), players[Teams.army2()], false)
            else if this.team == TEAM_2
                UnitShareVision(this.toUnit(), players[Teams.army1()], false)

    override function modReveal(int value)
        revealCount += value
        if revealCount > 0
            if this.team == TEAM_1
                UnitShareVision(this.toUnit(), players[Teams.army2()], true)
            else if this.team == TEAM_2
                UnitShareVision(this.toUnit(), players[Teams.army1()], true)
        else
            if this.team == TEAM_1
                UnitShareVision(this.toUnit(), players[Teams.army2()], false)
            else if this.team == TEAM_2
                UnitShareVision(this.toUnit(), players[Teams.army1()], false)

    override function applyAll()
        this
        ..applyHealth()
        ..applyMana()
        ..applyHealthRegen()
        ..applyManaRegen()
        ..applyStrength()
        ..applyWillpower()
        ..applyIntelligence()
        ..applyAttackSpeed()
        ..applyArmor()
        ..applyMoveSpeed()
        ..applyCooldown()

    override function applyStatDispatch(Stat whichStat)
        switch whichStat
            case AR | AS | AGI
                this.assocUnit.setBonusDispatchStat(whichStat, this.getStatBonus(whichStat))
            case STR
                this.applyStrength()
            case INT
                this.applyIntelligence()
            case MS
                this.applyMoveSpeed()
            case HP
                this.applyHealth()
            case MP
                this.applyMana()
            case CD
                this.applyCooldown()
            default

    @inline override function applyArmor()
        this.assocUnit.setBonusArmor(this.getArmorBonus())
    @inline override function applyAttackSpeed()
        this.assocUnit.setBonusAttackSpeed(this.getAttackSpeedBonus())
    @inline override function applyStrength()
        if this.heroType != null
            this.assocUnit.setBonusStrength(this.getStrengthBonus())
            this.heroType.updateTooltipsInt(this.assocUnit)
        else
            this.assocUnit.setBonusDamage(this.getStrengthBonus())
    @inline override function applyWillpower()
        this.assocUnit.setBonusAgility(this.getWillpowerBonus())
    @inline override function applyIntelligence()
        if this.heroType != null
            this.assocUnit.setBonusIntelligence(this.getIntelligenceBonus())
            this.heroType.updateTooltipsInt(this.assocUnit)
    @inline override function applyMoveSpeed()
        this.assocUnit.setMoveSpeed(this.getMoveSpeed().toReal())
    @inline override function applyHealth()
        this.assocUnit.setMaxHP(this.getHealth(), true)
    @inline override function applyMana()
        this.assocUnit.setMaxMana(this.getMana(), true)
    @inline override function applyHealthRegen()
    @inline override function applyManaRegen()
    @inline override function applyCooldown()
        if this.heroType != null
            this.assocUnit.toHero().updateCooldowns()

    override function updateAll()
        this
        ..updateHealth()
        ..updateMana()
        ..updateHealthRegen()
        ..updateManaRegen()
        ..updateStrength()
        ..updateWillpower()
        ..updateIntelligence()
        ..updateAttackSpeed()
        ..updateArmor()
        ..updateMoveSpeed()
        ..updateCooldown()

    override function updateStat(Stat whichStat)
        if this.bonusCalculation != null
            this.bonusCalculation.calculate(this, whichStat)
        else
            this.defaultBonusCalcualtion(whichStat)

    @inline override function updateArmor()
        updateStat(Stat.AR)
    @inline override function updateAttackSpeed()
        updateStat(Stat.AS)
    @inline override function updateStrength()
        updateStat(Stat.STR)
    @inline override function updateWillpower()
        updateStat(Stat.AGI)
    @inline override function updateIntelligence()
        updateStat(Stat.INT)
    @inline override function updateMoveSpeed()
        updateStat(Stat.MS)
    @inline override function updateHealth()
        updateStat(Stat.HP)
    @inline override function updateMana()
        updateStat(Stat.MP)
    @inline override function updateHealthRegen()
        updateStat(Stat.HR)
    @inline override function updateManaRegen()
        updateStat(Stat.MR)
    @inline override function updateCooldown()
        updateStat(Stat.CD)

    @inline private function modStatHelper(Stat whichStat, int modifier)
        setStatAbsoluteBonusInternal(whichStat, getStatAbsoluteBonus(whichStat) + modifier)
    @inline override function modStatDispatch(Stat whichStat, int modifier)
        modStatHelper(whichStat, modifier)
        updateStat(whichStat)
        applyStatDispatch(whichStat)
    @inline override function modArmor(int modifier)
        modStatHelper(Stat.AR, modifier)
        updateArmor()
        applyArmor()
    @inline override function modAttackSpeed(int modifier)
        modStatHelper(Stat.AS, modifier)
        updateAttackSpeed()
        applyAttackSpeed()
    @inline override function modStrength(int modifier)
        modStatHelper(Stat.STR, modifier)
        updateStrength()
        applyStrength()
    @inline override function modWillpower(int modifier)
        modStatHelper(Stat.AGI, modifier)
        updateWillpower()
        applyWillpower()
    @inline override function modIntelligence(int modifier)
        modStatHelper(Stat.INT, modifier)
        updateIntelligence()
        applyIntelligence()
    @inline override function modMoveSpeed(int modifier)
        modStatHelper(Stat.MS, modifier)
        updateMoveSpeed()
        applyMoveSpeed()
    @inline override function modHealth(int modifier)
        modStatHelper(Stat.HP, modifier)
        updateHealth()
        applyHealth()
    @inline override function modMana(int modifier)
        modStatHelper(Stat.MP, modifier)
        updateMana()
        applyMana()
    @inline override function modHealthRegen(int modifier)
        modStatHelper(Stat.HR, modifier)
        updateHealthRegen()
        applyHealthRegen()
    @inline override function modManaRegen(int modifier)
        modStatHelper(Stat.MR, modifier)
        updateManaRegen()
        applyManaRegen()
    @inline override function modCooldown(int modifier)
        modStatHelper(Stat.CD, modifier)
        updateCooldown()
        applyCooldown()

    @inline private function modStatRelativeHelper(Stat whichStat, int modifier)
        setStatRelativeBonusInternal(whichStat, getStatRelativeBonus(whichStat) + modifier)
    @inline override function modStatRelativeDispatch(Stat whichStat, int modifier)        
        modStatRelativeHelper(whichStat, modifier)
        updateStat(whichStat)
        applyStatDispatch(whichStat)
    @inline override function modArmorRelative(int modifier)
        modStatRelativeHelper(Stat.AR, modifier)
        updateArmor()
        applyArmor()
    @inline override function modAttackSpeedRelative(int modifier)
        modStatRelativeHelper(Stat.AS, modifier)
        updateAttackSpeed()
        applyAttackSpeed()
    @inline override function modStrengthRelative(int modifier)
        modStatRelativeHelper(Stat.STR, modifier)
        updateStrength()
        applyStrength()
    @inline override function modWillpowerRelative(int modifier)
        modStatRelativeHelper(Stat.AGI, modifier)
        updateWillpower()
        applyWillpower()
    @inline override function modIntelligenceRelative(int modifier)
        modStatRelativeHelper(Stat.INT, modifier)
        updateIntelligence()
        applyIntelligence()
    @inline override function modMoveSpeedRelative(int modifier)
        modStatRelativeHelper(Stat.MS, modifier)
        updateMoveSpeed()
        applyMoveSpeed()
    @inline override function modHealthRelative(int modifier)
        modStatRelativeHelper(Stat.HP, modifier)
        updateHealth()
        applyHealth()
    @inline override function modManaRelative(int modifier)
        modStatRelativeHelper(Stat.MP, modifier)
        updateMoveSpeed()
        applyMoveSpeed()
    @inline override function modHealthRegenRelative(int modifier)
        modStatRelativeHelper(Stat.HR, modifier)
        updateHealthRegen()
        applyHealthRegen()
    @inline override function modManaRegenRelative(int modifier)
        modStatRelativeHelper(Stat.MR, modifier)
        updateManaRegen()
        applyManaRegen()
    @inline override function modCooldownRelative(int modifier)
        modStatRelativeHelper(Stat.CD, modifier)
        updateCooldown()
        applyCooldown()

    private function modStatFractionHelper(Stat whichStat, int modifier)
        let arrayIndex = this.arrayOffset + whichStat.toInt()
        statsAbsoluteBonusReal_static[arrayIndex] += modifier
        if statsAbsoluteBonusReal_static[arrayIndex].abs() >= 1000
            modStatHelper(whichStat, (statsAbsoluteBonusReal_static[arrayIndex]/1000).toInt() )
            statsAbsoluteBonusReal_static[arrayIndex] -= (statsAbsoluteBonusReal_static[arrayIndex]/1000).toInt()*1000
    @inline override function modStatFractionDispatch(Stat whichStat, int modifier)
        modStatFractionHelper(whichStat, modifier)
        updateStat(whichStat)
        applyStatDispatch(whichStat)
    @inline override function modArmorFraction(int modifier)
        modStatFractionHelper(Stat.AR, modifier)
        updateArmor()
        applyArmor()
    @inline override function modAttackSpeedFraction(int modifier)
        modStatFractionHelper(Stat.AS, modifier)
        updateAttackSpeed()
        applyAttackSpeed()
    @inline override function modStrengthFraction(int modifier)
        modStatFractionHelper(Stat.STR, modifier)
        updateStrength()
        applyStrength()
    @inline override function modWillpowerFraction(int modifier)
        modStatFractionHelper(Stat.AGI, modifier)
        updateWillpower()
        applyWillpower()
    @inline override function modIntelligenceFraction(int modifier)
        modStatFractionHelper(Stat.INT, modifier)
        updateIntelligence()
        applyIntelligence()
    @inline override function modMoveSpeedFraction(int modifier)
        modStatFractionHelper(Stat.MS, modifier)
        updateMoveSpeed()
        applyMoveSpeed()
    @inline override function modHealthFraction(int modifier)
        modStatFractionHelper(Stat.HP, modifier)
        updateHealth()
        applyHealth()
    @inline override function modManaFraction(int modifier)
        modStatFractionHelper(Stat.MP, modifier)
        updateMana()
        applyMana()
    @inline override function modHealthRegenFraction(int modifier)
        modStatFractionHelper(Stat.HR, modifier)
        updateHealthRegen()
        applyHealthRegen()
    @inline override function modManaRegenFraction(int modifier)
        modStatFractionHelper(Stat.MR, modifier)
        updateManaRegen()
        applyManaRegen()
    @inline override function modCooldownFraction(int modifier)
        modStatFractionHelper(Stat.CD, modifier)
        updateCooldown()
        applyCooldown()

    @inline override function getStat(Stat whichStat) returns int
        return this.getStatBase(whichStat) + this.getStatBonus(whichStat)
    @inline override function getArmor() returns int
        return this.getArmorBase() + this.getArmorBonus()
    @inline override function getAttackSpeed() returns int
        return this.getAttackSpeedBase() + this.getAttackSpeedBonus()
    @inline override function getStrength() returns int
        return this.getStrengthBase() + this.getStrengthBonus()
    @inline override function getWillpower() returns int
        return this.getWillpowerBase() + this.getWillpowerBonus()
    @inline override function getIntelligence() returns int
        return this.getIntelligenceBase() + this.getIntelligenceBonus()
    @inline override function getMoveSpeed() returns int
        return this.getMoveSpeedBase() + this.getMoveSpeedBonus()
    @inline override function getHealth() returns int
        return this.getHealthBase() + this.getHealthBonus()
    @inline override function getMana() returns int
        return this.getManaBase() + this.getManaBonus()
    @inline override function getHealthRegen() returns int
        return this.getHealthRegenBase() + this.getHealthRegenBonus()
    @inline override function getManaRegen() returns int
        return this.getManaRegenBase() + this.getManaRegenBonus()
    @inline override function getCooldown() returns int
        return this.getCooldownBase() + this.getCooldownBonus()

    @inline override function getStatBonus(Stat whichStat) returns int
        return statsTotalBonus_static[this.arrayOffset + whichStat.toInt()]
    @inline override function getArmorBonus() returns int
        return getStatBonus(Stat.AR)
    @inline override function getAttackSpeedBonus() returns int
        return getStatBonus(Stat.AS)
    @inline override function getStrengthBonus() returns int
        return getStatBonus(Stat.STR)
    @inline override function getWillpowerBonus() returns int
        return getStatBonus(Stat.AGI)
    @inline override function getIntelligenceBonus() returns int
        return getStatBonus(Stat.INT)
    @inline override function getMoveSpeedBonus() returns int
        return getStatBonus(Stat.MS)
    @inline override function getHealthBonus() returns int
        return getStatBonus(Stat.HP)
    @inline override function getManaBonus() returns int
        return getStatBonus(Stat.MP)
    @inline override function getHealthRegenBonus() returns int
        return getStatBonus(Stat.HR)
    @inline override function getManaRegenBonus() returns int
        return getStatBonus(Stat.MR)
    @inline override function getCooldownBonus() returns int
        return getStatBonus(Stat.CD)

    @inline override function getStatBase(Stat whichStat) returns int
        return statBaseValue_static[this.arrayOffset + whichStat.toInt()]
    @inline override function getArmorBase() returns int
        return getStatBase(Stat.AR)
    @inline override function getAttackSpeedBase() returns int
        return getStatBase(Stat.AS)
    @inline override function getStrengthBase() returns int
        return getStatBase(Stat.STR)
    @inline override function getWillpowerBase() returns int
        return getStatBase(Stat.AGI)
    @inline override function getIntelligenceBase() returns int
        return getStatBase(Stat.INT)
    @inline override function getMoveSpeedBase() returns int
        return getStatBase(Stat.MS)
    @inline override function getHealthBase() returns int
        return getStatBase(Stat.HP)
    @inline override function getManaBase() returns int
        return getStatBase(Stat.MP)
    @inline override function getHealthRegenBase() returns int
        return getStatBase(Stat.HR)
    @inline override function getManaRegenBase() returns int
        return getStatBase(Stat.MR)
    @inline override function getCooldownBase() returns int
        return getStatBase(Stat.CD)

    @inline override function getStatAbsoluteBonus(Stat whichStat) returns int
        return statsAbsoluteBonus_static[this.arrayOffset + whichStat.toInt()]
    @inline override function getArmorAbsoluteBonus() returns int
        return getStatAbsoluteBonus(Stat.AR)
    @inline override function getAttackSpeedAbsoluteBonus() returns int
        return getStatAbsoluteBonus(Stat.AS)
    @inline override function getStrengthAbsoluteBonus() returns int
        return getStatAbsoluteBonus(Stat.STR)
    @inline override function getWillpowerAbsoluteBonus() returns int
        return getStatAbsoluteBonus(Stat.AGI)
    @inline override function getIntelligenceAbsoluteBonus() returns int
        return getStatAbsoluteBonus(Stat.INT)
    @inline override function getMoveSpeedAbsoluteBonus() returns int
        return getStatAbsoluteBonus(Stat.MS)
    @inline override function getHealthAbsoluteBonus() returns int
        return getStatAbsoluteBonus(Stat.HP)
    @inline override function getManaAbsoluteBonus() returns int
        return getStatAbsoluteBonus(Stat.MP)
    @inline override function getHealthRegenAbsoluteBonus() returns int
        return getStatAbsoluteBonus(Stat.HR)
    @inline override function getManaRegenAbsoluteBonus() returns int
        return getStatAbsoluteBonus(Stat.MR)
    @inline override function getCooldownAbsoluteBonus() returns int
        return getStatAbsoluteBonus(Stat.CD)

    @inline override function getStatRelativeBonus(Stat whichStat) returns int
        return statsRelativeBonus_static[this.arrayOffset + whichStat.toInt()]
    @inline override function getArmorRelativeBonus() returns int
        return getStatRelativeBonus(Stat.AR)
    @inline override function getAttackSpeedRelativeBonus() returns int
        return getStatRelativeBonus(Stat.AS)
    @inline override function getStrengthRelativeBonus() returns int
        return getStatRelativeBonus(Stat.STR)
    @inline override function getWillpowerRelativeBonus() returns int
        return getStatRelativeBonus(Stat.AGI)
    @inline override function getIntelligenceRelativeBonus() returns int
        return getStatRelativeBonus(Stat.INT)
    @inline override function getMoveSpeedRelativeBonus() returns int
        return getStatRelativeBonus(Stat.MS)
    @inline override function getHealthRelativeBonus() returns int
        return getStatRelativeBonus(Stat.HP)
    @inline override function getManaRelativeBonus() returns int
        return getStatRelativeBonus(Stat.MP)
    @inline override function getHealthRegenRelativeBonus() returns int
        return getStatRelativeBonus(Stat.HR)
    @inline override function getManaRegenRelativeBonus() returns int
        return getStatRelativeBonus(Stat.MR)
    @inline override function getCooldownRelativeBonus() returns int
        return getStatRelativeBonus(Stat.CD)

    @inline override function setStatBonusInternal(Stat whichStat, int value)
        statsTotalBonus_static[this.arrayOffset + whichStat.toInt()] = value
    @inline override function setStatBaseInternal(Stat whichStat, int value)
        statBaseValue_static[this.arrayOffset + whichStat.toInt()] = value
    @inline override function setStatAbsoluteBonusInternal(Stat whichStat, int value)
        statsAbsoluteBonus_static[this.arrayOffset + whichStat.toInt()] = value
    @inline override function setStatAbsoluteBonusRealInternal(Stat whichStat, int value)
        statsAbsoluteBonusReal_static[this.arrayOffset + whichStat.toInt()] = value
    @inline override function setStatRelativeBonusInternal(Stat whichStat, int value)
        statsRelativeBonus_static[this.arrayOffset + whichStat.toInt()] = value

init
    initAtTop()

public function unit.wrapper() returns IUnit
    return UnitImpl.getWrapper(this)
public function unit.getBuffList() returns BuffList
    return UnitImpl.getBuffList(this)
