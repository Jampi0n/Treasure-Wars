package Hydra

import ClosureTimers
import Assets
import SoundUtils
import ObjectEditingPreset
import PlayerControl
import Constants
import UnitTypeConfig
import UnitLib
import TeamUtil
import Buff
import OnAttack
import Stats

constant REVIVE_TIME = 300.
constant MAX_LEVEL = 5
constant DEATH_SOUND = new SoundDefinition(Sounds.hydraDeath1, false)

vec2 spawnPos
angle facing

int creepLevel
unit hydraIcon

constant int array HP = [0, 2000, 4000, 6000, 8000, 10000]
constant int array DMG = [0, 50, 100, 150, 200, 250]

constant int array ARMOR = [0, 20, 40, 60, 80, 100]
constant int array WILLPOWER = [0, 20, 40, 60, 80, 100]

constant int array ATTACK_SPEED = [0, 10, 20, 30, 40, 50]

constant int ACID_BREATH_ARMOR = 20
constant int ACID_BREATH_SLOW = 40
constant real ACID_BREATH_DUR = 5

BuffType buffAcidBreath

constant int ACID_BREATH_BUFF_ID = compiletime(createAuraBuff("Acid Breath", "This unit was hit by a Hydra; it moves and attacks slower and has reduced armor.", Icons.bTNCorrosiveBreath))
constant int ACID_BREATH_ABILTIY_ID = compiletime(createNegativeBuffAbility(1, ACID_BREATH_BUFF_ID, Abilities.bottleImpact, "chest"))

function onHydraDeath()
    let target = GetTriggerUnit()
    if target == udg_Hydra
        hydraIcon.hide()
        DEATH_SOUND.play().snd.setVolume(150)

        let killerId = GetKillingUnit().getOwner().getId()
        let killingTeam = Players.team(killerId)
        
        let teamName = Players.coloredName(killingTeam)

        if not Players.isTeamNeutral(killerId)
            printTimed("Team "+teamName+" has killed a Hydra. Their heroes gain 3 stat upgrades for every stat. The Hydra will respawn in "+REVIVE_TIME.toInt().toString()+" seconds.", 10)
            PingMinimap(target.getX(), target.getY(), 3)

            for p in Teams.HERO_PLAYERS[killingTeam]
                for hero in Players.heroList(p)
                    hero.toUnit().hydraBonus()
                    hero.addXp(250)

            PlayerWrapper.statHydrasKilled[killerId]++

        doAfter(REVIVE_TIME, () -> (begin
            udg_Hydra = createUnit(players[CREEP_NORMAL_OWNER], HYDRA, spawnPos, facing)
            hydraIcon.show()
            SetUnitAcquireRange(udg_Hydra, 200)
            if creepLevel < MAX_LEVEL
                creepLevel++


            let lvl = creepLevel
            udg_Hydra.wrapper()
                ..addStatAbsoluteBonus(Stat.STR, DMG[lvl])
                ..addStatAbsoluteBonus(Stat.HP, HP[lvl])
                ..addStatAbsoluteBonus(Stat.AR, ARMOR[lvl])
                ..addStatAbsoluteBonus(Stat.AGI, WILLPOWER[lvl])
                ..addStatAbsoluteBonus(Stat.AS, ATTACK_SPEED[lvl])

        end))

function unit.hydraBonus()
    this.wrapper()
        ..addStatAbsoluteBonus(Stat.AS, 6)
        ..addStatAbsoluteBonus(Stat.STR, 3)
        ..addStatAbsoluteBonus(Stat.AGI, 3)
        ..addStatAbsoluteBonus(Stat.INT, 3)
        ..addStatAbsoluteBonus(Stat.AR, 3)

        ..addStatAbsoluteBonus(Stat.HP, 45)
        ..addStatAbsoluteBonus(Stat.HR, 9)
        ..addStatAbsoluteBonus(Stat.MP, 30)
        ..addStatAbsoluteBonus(Stat.MR, 3)


init
 
    spawnPos = udg_Hydra.getPos() + vec2(-1,1) * 800
    hydraIcon = createUnit(players[CREEP_ICON_OWNER], HYDRA_ICON, spawnPos, angle(0))
    SetAltMinimapIcon("UI\\Minimap\\minimap-hydra.blp")
    UnitSetUsesAltIcon(hydraIcon, true)
    facing = udg_Hydra.getFacingAngle()
    creepLevel = 0



    let lvl = creepLevel
    doAfter(0) ->
        udg_Hydra.wrapper()
            ..addStatAbsoluteBonus(Stat.STR, DMG[lvl])
            ..addStatAbsoluteBonus(Stat.HP, HP[lvl])
            ..addStatAbsoluteBonus(Stat.AR, ARMOR[lvl])
            ..addStatAbsoluteBonus(Stat.AGI, WILLPOWER[lvl])
            ..addStatAbsoluteBonus(Stat.AS, ATTACK_SPEED[lvl])

    CreateTrigger()
        ..registerPlayerUnitEvent(players[CREEP_NORMAL_OWNER], EVENT_PLAYER_UNIT_DEATH, null)
        ..addAction(function onHydraDeath)

    buffAcidBreath = new BuffType(false, DispelLevel.DISPEL)

    buffAcidBreath.setupBuffWithIcon(ACID_BREATH_BUFF_ID, ACID_BREATH_ABILTIY_ID)

    buffAcidBreath.addFirstFunction( (Buff whichBuff) -> (begin
        whichBuff.getTarget().wrapper()
            ..addStatAbsoluteBonus(Stat.AS, -ACID_BREATH_SLOW)
            ..addStatRelativeBonus(Stat.MS, -ACID_BREATH_SLOW*10)
            ..addStatAbsoluteBonus(Stat.AR, -ACID_BREATH_ARMOR)
        whichBuff.setData(1)
    end))

    buffAcidBreath.addStackFunction( (Buff whichBuff) -> (begin
        let stacks = whichBuff.getData() + 1
        whichBuff.setData(stacks)
        whichBuff.getTarget().wrapper()
            ..addStatAbsoluteBonus(Stat.AR, -ACID_BREATH_ARMOR)
    end))


    buffAcidBreath.addEndFunction( (Buff whichBuff) -> (begin
        let stacks = whichBuff.getData()
        whichBuff.getTarget().wrapper()
            ..addStatAbsoluteBonus(Stat.AS, ACID_BREATH_SLOW)
            ..addStatRelativeBonus(Stat.MS, ACID_BREATH_SLOW*10)
            ..addStatAbsoluteBonus(Stat.AR, ACID_BREATH_ARMOR * stacks)
    end))

    /*OnAttack.addOnAttackFunc((unit attacker, unit target, boolean isActive) -> (begin
        if attacker.getTypeId() == HYDRA and not target.isType(UNIT_TYPE_STRUCTURE)
            target.addBuffReduced(attacker, ACID_BREATH_DUR, buffAcidBreath, 1)
    end))*/