package Creeps

import LinkedList
import HashMap
import ClosureTimers
import Assets
import AbilityObjEditing
import ObjectEditingPreset
import GeneralEvents
import Buff
import UnitLib
import UnitTypeConfig
import Constants
import PlayerControl
import TeamUtil
import UnitImpl
import FastDamageEvent
import ErrorHandling

constant int DUMMY_CASTER = compiletime(UNIT_ID_GEN.next())
constant int HEAL_BUFF_ID = compiletime(createDummyBuff())

constant int MAX_CAMP_LEVEL = 20


/*  Normal creeps are owned by neutral hostile and will show their green creep icon.
    Boss creeps are owned by a different player to not show creep icons.
    Instead an icon dummy owned by neutral passive shows the creep camp.*/
constant BUFF_MAP = new HashMap<int, BuffConfiguration>

constant TURTLE_RETURN_RATIO = 25
constant JUNGLE_STALKER_HP_REG = 20
constant MURGUL_AS = 30
constant SEA_GIANT_STR = 20
constant MAKRURA_AR = 40
constant SEA_ELEMENTAL_MP_REG = 3
constant REVENANT_SLOW = 30

constant TURTLE_BUFF = compiletime(setupBuff("Turtle Shell", "Returns "+TURTLE_RETURN_RATIO.toString()+"% of the damage the unit takes from attacks to the attacker.", Icons.bTNSeaTurtleGreen, true, 1, "", "", DispelLevel.BREAK)) //return dmg
constant JUNGLE_STALKER_BUFF = compiletime(setupBuff("Jungle Blood", "Heals "+JUNGLE_STALKER_HP_REG.toString()+" hit points per second.", Icons.bTNJungleBeast, true, 1, "", "", DispelLevel.BREAK)) //hp reg bonus
constant MURGUL_BUFF = compiletime(setupBuff("Mur'gul Frenzy", "Increases attack speed by "+MURGUL_AS.toString()+"%.", Icons.bTNMurgulShadowCaster, true, 1, "", "", DispelLevel.BREAK)) //attack speed bonus
constant SEA_GIANT_BUFF = compiletime(setupBuff("Giant Strength", "Increases strength by "+SEA_GIANT_STR.toString()+"%.", Icons.bTNSeaGiantGreen, true, 1, "", "", DispelLevel.BREAK)) //str bonus
constant MAKRURA_BUFF = compiletime(setupBuff("Makrura Carapace", "Increases armor by "+MAKRURA_AR.toString()+".", Icons.bTNLobstrokkGreen, true, 1, "", "", DispelLevel.BREAK)) //armor bonus
constant SEA_ELEMENTAL_BUFF = compiletime(setupBuff("Liquid Energy", "Restores "+SEA_ELEMENTAL_MP_REG.toString()+" mana points per second.", Icons.bTNSeaElemental, true, 1, "", "", DispelLevel.BREAK)) //mana reg bonus
constant REVENANT_BUFF = compiletime(setupBuff("Death Curse", "Slows movement speed of all targets damaged by this unit by "+REVENANT_SLOW.toString()+"%.", Icons.bTNDeepLordRevenant, true, 1, Abilities.unholyAura, "", DispelLevel.BREAK)) //dealing damage slows
public constant REVENANT_SLOW_BUFF = compiletime(setupBuff("Death Curse", "This unit is slowed by "+REVENANT_SLOW.toString()+"%.", Icons.bTNCripple, false, 1, Abilities.crippleTarget, "", DispelLevel.DISPEL)) //dealing damage slows




function initCreepBuffs()
    JUNGLE_STALKER_BUFF.setPeriodicTime(0.25)
    JUNGLE_STALKER_BUFF.addPeriodicFunction((Buff whichBuff) -> begin
        let target = whichBuff.getTarget()
        target.healHP(target, 0.25 * JUNGLE_STALKER_HP_REG)
    end)

    SEA_ELEMENTAL_BUFF.setPeriodicTime(0.25)
    SEA_ELEMENTAL_BUFF.addPeriodicFunction((Buff whichBuff) -> begin
        let target = whichBuff.getTarget()
        target.healMana(target, 0.25 * SEA_ELEMENTAL_MP_REG)
    end)

    TURTLE_BUFF.addSetupFunction() (Buff thisBuff, int factor) ->
        if factor == 1
            let pointer = DamageEventUnit.fromUnit(thisBuff.getTarget()).attackHitNoBuilding.add() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, boolean attack, boolean _active, boolean advanced) ->
                target.dealDamage(source, damage * 0.1, ReductionType.PHYSICAL)
            thisBuff.setData(pointer)
        else
            DamageEventUnit.fromUnit(thisBuff.getTarget()).attackHitNoBuilding.remove(thisBuff.getData())

    MURGUL_BUFF.addLevelFunction() (Buff thisBuff, int factor) ->
        thisBuff.getTarget().wrapper().modAttackSpeed( factor * MURGUL_AS)


    SEA_GIANT_BUFF.addLevelFunction() (Buff thisBuff, int factor) ->
        thisBuff.getTarget().wrapper().modStrengthRelative( factor * SEA_GIANT_STR * 10)


    MAKRURA_BUFF.addLevelFunction() (Buff thisBuff, int factor) ->
        thisBuff.getTarget().wrapper().modArmor( factor * MAKRURA_AR)


    REVENANT_BUFF.addSetupFunction() (Buff thisBuff, int factor) ->
        if factor == 1
            let pointer = DamageEventUnit.fromUnit(thisBuff.getTarget()).anyDamage.add() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, boolean attack, boolean _active, boolean advanced) ->
                if damage > 0.1 and target.isTargetableEnemyUnit(source)
                    target.addBuffReduced(source, 2, REVENANT_SLOW_BUFF, 1)
            thisBuff.setData(pointer)
        else
            DamageEventUnit.fromUnit(thisBuff.getTarget()).anyDamage.remove(thisBuff.getData())

    REVENANT_SLOW_BUFF..addLevelFunction() (Buff thisBuff, int factor) ->
        thisBuff.getTarget().wrapper().modMoveSpeedRelative( -factor * REVENANT_SLOW * 10)



    new BuffConfiguration(MURGUL_BUFF, 90)
    ..addToUnitType(MURGUL_MAGE)
    new BuffConfiguration(MURGUL_BUFF, -1)
    ..addToUnitType(MURGUL_MELEE)

    new BuffConfiguration(MAKRURA_BUFF, 90)
    ..addToUnitType(MAKRURA_LORD)
    new BuffConfiguration(MAKRURA_BUFF, -1)
    ..addToUnitType(MAKRURA_SNAPPER)

    new BuffConfiguration(SEA_GIANT_BUFF, 90)
    ..addToUnitType(SEA_GIANT)

    new BuffConfiguration(SEA_ELEMENTAL_BUFF, 90)
    ..addToUnitType(SEA_ELEMENTAL)

    new BuffConfiguration(JUNGLE_STALKER_BUFF, 90)
    ..addToUnitType(JUNGLE_BEAST_ELDER)
    new BuffConfiguration(JUNGLE_STALKER_BUFF, -1)
    ..addToUnitType(JUNGLE_BEAST)

    new BuffConfiguration(REVENANT_BUFF, 180)
    ..addToUnitType(REVENANT_BOSS)
    new BuffConfiguration(REVENANT_BUFF, -1)
    ..addToUnitType(REVENANT)

    new BuffConfiguration(TURTLE_BUFF, 90)
    ..addToUnitType(TURTLE_GARGANTUAN)
    new BuffConfiguration(TURTLE_BUFF, -1)
    ..addToUnitType(TURTLE_GIANT)



class BuffConfiguration
    BuffType customBuff
    BuffType bountyBuff
    real bountyDuration
    static constant unitTypeToBuffConfig = new HashMap<int, BuffConfiguration>

    construct(BuffType whichBuff, real bountyDuration)
        this.customBuff = whichBuff
        this.bountyBuff = bountyDuration > 0 ? whichBuff : null
        this.bountyDuration = bountyDuration

    function addToUnitType(int unitTypeId)
        unitTypeToBuffConfig.put(unitTypeId, this)
        

unit DUMMY_HEALER

class Creep
    int unitTypeId
    vec2 spawnPos
    angle facing

    construct(unit baseUnit)
        this.unitTypeId = baseUnit.getTypeId()
        this.spawnPos = baseUnit.getPos()
        this.facing = baseUnit.getFacingAngle()

    construct(int unitTypeId, vec2 spawnPos, angle facing)
        this.unitTypeId = unitTypeId
        this.spawnPos = spawnPos
        this.facing = facing




public class CreepCamp



    private static constant unitToCamp = new HashMap<unit, CreepCamp>
    private static constant allCreeps = CreateGroup()
    private static constant creepCamps = new LinkedList<CreepCamp>
    //private LinkedList<unit> creepUnits
    private LinkedList<Creep> creepTypes

    private int alive
    private int totalLevel
    private real respawnDuration = 10
    private int campLevel = 0
    private boolean revenant = false
    private boolean boss = false
    private unit iconUnit = null
    private vec2 campPosition //this is the center of the creep camp

    construct()
        alive = 0
        totalLevel = 0
        creepCamps.add(this)
        creepTypes = new LinkedList<Creep>

    private function initCampPosition()
        var pos = vec2(0,0)
        for c in creepTypes
            if c.unitTypeId == REVENANT_BOSS
                revenant = true
        for c in creepTypes
            pos+=c.spawnPos
        if creepTypes.size() == 1
            boss = true


        campPosition = pos * (1.0/creepTypes.size())
        
        if not boss
            if revenant
                iconUnit = CreateUnit(players[CREEP_ICON_OWNER], REVENANT_ICON, campPosition.x, campPosition.y, 0)
            else
                iconUnit = CreateUnit(players[CREEP_ICON_OWNER], STANDARD_ICON, campPosition.x, campPosition.y, 0)
            
    function getCampPosition() returns vec2
        return this.campPosition

    
    private function addUnitInit(unit creepUnit)
        SetUnitAcquireRange(creepUnit, 200)
        allCreeps.addUnit(creepUnit)
        alive++
        unitToCamp.put(creepUnit, this)
        creepTypes.add(new Creep(creepUnit))
        let creepTypeId = creepUnit.getTypeId()
        totalLevel += creepUnit.getLevel()
        if BuffConfiguration.unitTypeToBuffConfig.has(creepTypeId)
            let customBuff = BuffConfiguration.unitTypeToBuffConfig.get(creepTypeId).customBuff
            doAfter(0.01) ->
                let creepBuff =creepUnit.addBuff(creepUnit, -1, customBuff, 1)
                // the creep version of the buff is permanent
                creepBuff.setDispelLevel(DispelLevel.NONE)
    
    private function addUnitRespawn(unit creepUnit)
        SetUnitAcquireRange(creepUnit, 200)
        allCreeps.addUnit(creepUnit)
        alive++
        unitToCamp.put(creepUnit, this)
        creepUnit.wrapper().modStrengthRelative( campLevel*200)
        creepUnit.wrapper().modHealthRelative( campLevel*200)

    private function respawn()
        if campLevel < MAX_CAMP_LEVEL
            campLevel++

        //let owner = usesIcon ? players[CREEP_SPECIAL_OWNER] : players[CREEP_NORMAL_OWNER]
        let owner = players[CREEP_NORMAL_OWNER]
        for c in creepTypes
            let creepUnit = createUnit(owner, c.unitTypeId, c.spawnPos, c.facing)
            addUnitRespawn(creepUnit)

            let buffConfig = BuffConfiguration.unitTypeToBuffConfig.get(c.unitTypeId)
            if buffConfig != null and buffConfig.customBuff != null
                creepUnit.addBuff(creepUnit, -1, buffConfig.customBuff, 1)

        if iconUnit != null
            iconUnit.show()


    private static function onKill(unit u, unit killer)
        DUMMY_HEALER
            ..setPos(u.getPos())
        //for i = 1 to count
        DUMMY_HEALER.issueTargetOrder("acidbomb", killer)

        let buffConfig = BuffConfiguration.unitTypeToBuffConfig.get(u.getTypeId())
        if buffConfig != null and buffConfig.bountyBuff != null
            killer.addBuff(killer, buffConfig.bountyDuration, buffConfig.bountyBuff, 1)

        let killerId = killer.getOwner().getId()
        PlayerWrapper.addUnitKill(killerId)

        killer.healHP(killer, killer.getMaxHP()*0.05)
        killer.healMana(killer, killer.getMaxMana()*0.05)
    

    private static function onDeath()
        let u = GetTriggerUnit()
        if u.getTypeId() != HYDRA and u.getTypeId() != DRAGON_TURTLE
            let camp = unitToCamp.get(u)
            if camp != null
                unitToCamp.remove(u)
                allCreeps.removeUnit(u)
                camp.alive--
                if camp.alive == 0
                    if camp.iconUnit != null
                        camp.iconUnit.hide()
                    doAfter(camp.respawnDuration, -> camp.respawn())

            let killer = GetKillingUnit()
            if killer != null
                let pId = killer.getOwner().getId()
                if pId <= Teams.last2()
                    let owningHero = killer.wrapper().getOwningHero()
                    if owningHero != null
                        onKill(u, owningHero.toUnit())
                    else
                        error("A player owned unit that is not owned by a hero killed a creep")

    private static function initCreep(unit creepUnit, CreepCamp camp) returns CreepCamp
        CreepCamp ret = null
        if not allCreeps.contains(creepUnit)

            let newCamp = camp == null ? new CreepCamp : camp
            newCamp.addUnitInit(creepUnit)

            let g = CreateGroup()
            g.enumUnitsInRange(creepUnit.getPos(), 500)
            unit u
            
            while true
                u = FirstOfGroup(g)
                if u == null
                    break
                g.removeUnit(u)
                initCreep(u, newCamp)

            
            g.destr()
            ret = newCamp
        return ret


    protected static function initialize()

        unit u
        GroupEnumUnitsOfPlayer(ENUM_GROUP, players[CREEP_NORMAL_OWNER], null)
        while true
            u = FirstOfGroup(ENUM_GROUP)
            if u == null
                break
            ENUM_GROUP.removeUnit(u)
            if u.getTypeId() != HYDRA and u.getTypeId() != DRAGON_TURTLE
                let initializedCamp = initCreep(u, null)
                if initializedCamp != null
                    initializedCamp.initCampPosition()

        CreateTrigger()
        ..registerPlayerUnitEvent(players[CREEP_NORMAL_OWNER], EVENT_PLAYER_UNIT_DEATH, null)
        ..addAction(function onDeath)

        onImpact(HEAL_BUFF_ID) (unit source, unit target) ->
            skip

        DUMMY_HEALER = createUnit(DUMMY_PLAYER, DUMMY_CASTER, gg_rct_CenterMid.getCenter(), angle(0))

        for c in creepCamps
            c.respawnDuration = c.totalLevel * 4.

init
    initCreepBuffs()
    CreepCamp.initialize()


@compiletime
function objectData()
    let dummy = new UnitDefinition(DUMMY_CASTER, 'hfoo')
    let rootId = ABIL_ID_GEN.next()
    let root = new AbilityDefinitionRootAncientProtector(rootId)
    let missileId = ABIL_ID_GEN.next()
    let healMissile = createTargetMissile(missileId, HEAL_BUFF_ID)

    dummy
        ..setNormalAbilities(commaList('Aloc', rootId, missileId))
        ..setAnimationCastBackswing(0)
        ..setAnimationCastPoint(0)
        ..setAttacksEnabled(0)
        ..setCollisionSize(0)
        ..setFoodCost(0)
        ..setUnitSoundSet("")
        ..setShadowImageUnit("")
        ..setModelFile("")

    root
        ..setRootedWeapons(1, "0")
        ..setUprootedWeapons(1, "0")

    healMissile
        ..setMissileArc(0)
        ..setMissileArt(Abilities.targetArtLumber)
        ..setLevels(1)
        ..setManaCost(1, 0)
        ..setCooldown(1, 0)
        ..setCastRange(1, 92083)
        ..setHeroAbility(false)
        ..setTargetsAllowed(1, "air,enemies,friend,ground,invulnerable,neutral,structure,vulnerable")
