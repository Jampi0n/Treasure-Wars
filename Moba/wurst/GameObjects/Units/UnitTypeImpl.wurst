package UnitTypeImpl

import HashMap
import Constants
import StandardTextTags
import Assets
import initlater PlayerControl
import initlater TeamUtil
import initlater IUnitType

public class UnitTypeImpl implements IUnitType

    private static constant unitIdToUnitType = new HashMap<int, UnitTypeImpl>

    private int unitId
    private int bounty

    private int baseAttack
    private int baseArmor
    private int baseHp

    private int upgradeAttack
    private int upgradeArmor

    private int attackUpgradeId
    private int armorUpgradeId

    private int hitBox

    private int powerLevel // used instead of the actual unit level, so creeps can have level 0 and have green camp icons.

    private string modelPath

    construct(int baseHp, int unitId, int bounty, int baseAttack, int upgradeAttack, int attackUpgradeId, int baseArmor, int upgradeArmor, int armorUpgradeId, int hitBox, string modelPath, int powerLevel)
        this.setup(baseHp, unitId, bounty, baseAttack, upgradeAttack, attackUpgradeId, baseArmor, upgradeArmor, armorUpgradeId, hitBox, modelPath, powerLevel)

    private function setup(int baseHp, int unitId, int bounty, int baseAttack, int upgradeAttack, int attackUpgradeId, int baseArmor, int upgradeArmor, int armorUpgradeId, int hitBox, string modelPath, int powerLevel)
        objectCount++
        this.unitId = unitId
        this.bounty = bounty
        this.baseAttack = baseAttack
        this.upgradeAttack = upgradeAttack
        this.attackUpgradeId = attackUpgradeId
        this.upgradeArmor = upgradeArmor
        this.armorUpgradeId = armorUpgradeId
        this.baseArmor = baseArmor
        this.baseHp = baseHp
        this.hitBox = hitBox
        this.modelPath = modelPath
        this.powerLevel = powerLevel
        unitIdToUnitType.put(unitId, this)

    static function getUnitType(int unitId) returns IUnitType
        return unitIdToUnitType.get(unitId)

    override function getUnitId() returns int
        return this.unitId

    override function getBounty() returns int
        return this.bounty

    override function getBaseAttack() returns int
        return this.baseAttack

    override function getBaseArmor() returns int
        return this.baseArmor

    override function getBaseHp() returns int
        return this.baseHp

    override function getPowerLevel() returns int
        return this.powerLevel

    override function getUpgradeAttack(player owner) returns int
        if this.upgradeAttack != 0
            return this.upgradeAttack * GetPlayerTechCount(owner, this.attackUpgradeId, true)
        else
            return 0

    override function getUpgradeArmorCount(player owner) returns int
        return GetPlayerTechCount(owner, this.armorUpgradeId, true)

    override function getUpgradeArmor(player owner) returns int
        if this.upgradeArmor != 0
            return this.upgradeArmor * GetPlayerTechCount(owner, this.armorUpgradeId, true)
        else
            return 0

    override function getHitBox() returns int
        return this.hitBox

    override function getModel() returns string
        return this.modelPath


function onUnitDeath()
    let dyingUnit = GetTriggerUnit()
    let dyingType = UnitTypeImpl.getUnitType(dyingUnit.getTypeId())

    if dyingType != null

        
        let killingUnit = GetKillingUnit()
        let killingId = killingUnit.getOwner().getId()
        let dyingId = dyingUnit.getOwner().getId()
        let dyingTeam = Players.team(dyingId)
        let pos = dyingUnit.getPos()

        // army unit dies
        if dyingTeam == TEAM_1 or dyingTeam == TEAM_2
            let bounty = dyingType.getBounty()
            let xp = dyingType.getPowerLevel() * 8.0

            let killerIsEnemy = killingUnit != null and Players.team(killingId) == Teams.invert(dyingTeam)
            int killerIsHero = 0
            //the killing player belongs to the enemy team
            if killerIsEnemy and killingId < MAX_HERO_COUNT 
                killerIsHero = 1

            // gold
            if killerIsEnemy and killerIsHero == 1
                PlayerWrapper.addGoldEx(killingId, bounty)
                PlayerWrapper.addUnitKill(killingId)
                
                addEffect(UI.goldCredit, pos).destr()

                createGoldBountyTextTag(dyingUnit, bounty, players[killingId])

            //xp
            if killerIsHero == 1 or not killingUnit.isType(UNIT_TYPE_STRUCTURE)
                Teams.rewardXp(Teams.invert(dyingTeam), pos, xp)

public class UnitTypeStaticImpl extends IUnitTypeStatic
    override function get(int unitTypeId) returns IUnitType
        return UnitTypeImpl.getUnitType(unitTypeId)
    override function create(int baseHp, int unitId, int bounty, int baseAttack, int upgradeAttack, int attackUpgradeId, int baseArmor, int upgradeArmor, int armorUpgradeId, int hitBox, string modelPath, int powerLevel) returns IUnitType
        return new UnitTypeImpl(baseHp, unitId, bounty, baseAttack, upgradeAttack, attackUpgradeId, baseArmor, upgradeArmor, armorUpgradeId, hitBox, modelPath, powerLevel)

init
    CreateTrigger()
    ..addAction(function onUnitDeath)
    ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)
