package TowerBuff

/*
	Tower attacks reduce the armor of heros in order to punish long tower dives and prevent towers from dealing almost no damage against very tanky heros.
*/

import Assets
import Buff
import UnitLib
import UnitImpl
import FastDamageEvent
import BuildingIds

constant int TOWER_FOCUS_MAX_STACKS = 5
constant int TOWER_FOCUS_ARMOR = 20
constant real TOWER_FOCUS_DUR = 5
constant int TOWER_FOCUS_ABILITY_ID = 'A00O'

constant BUFF_TOWER_FOCUS = compiletime(setupBuff("Tower Focus", "This unit was hit by a Tower; it has reduced armor.", Icons.bTNHumanWatchTower, false, 1, "", "", DispelLevel.DISPEL))


init
	BUFF_TOWER_FOCUS.addSetupFunction() (Buff thisBuff, int factor) ->
		if factor == 1
			thisBuff.getTarget().wrapper().modArmorRelative(-TOWER_FOCUS_ARMOR * 10)
			thisBuff.setData(1)
		else
			let stacks = thisBuff.getData()
			thisBuff.getTarget().wrapper().modArmorRelative(TOWER_FOCUS_ARMOR * 10 * stacks)

	BUFF_TOWER_FOCUS.addStackFunction( (Buff whichBuff) -> (begin
		let stacks = whichBuff.getData() + 1
		if stacks <= TOWER_FOCUS_MAX_STACKS
			whichBuff.setData(stacks)
			whichBuff.getTarget().wrapper().modArmorRelative(-TOWER_FOCUS_ARMOR * 10)
	end))


	let g = CreateGroup()
	g.enumUnitsAll(null)
	for u in g
		let id = u.getTypeId()
		if id == HERO_TOWER or id == BASE_TOWER or id == GATE_TOWER or id == OUTER_TOWER
			DamageEventUnit.fromUnit(u).attackDamageNoBuilding.add() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, bool attack, bool arrow, bool alternate) ->
				if target.isType(UNIT_TYPE_HERO)
					target.addBuffReduced(source, TOWER_FOCUS_DUR, BUFF_TOWER_FOCUS, 1)
