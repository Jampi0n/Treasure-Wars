package TowerAI

/*
    Towers prioritize units over heroes. This behavior is inverted once the hero damages another hero.
    The tower will then focus the aggressor.
*/

import LinkedList
import HashMap
import IUnit
import UnitImpl
import IHero
import HeroAIImpl
import TeamUtil
import BuildingIds

class TowerPos
    real x
    real y
    TowerAI tower

    construct(real x, real y, TowerAI tower)
        this.x = x
        this.y = y
        this.tower = tower

    function inRange(unit whichUnit, real range) returns boolean
        let deltaX = whichUnit.getX() - x
        let deltaY = whichUnit.getY() - y
        let dist = deltaX*deltaX + deltaY*deltaY
        return dist < range * range


public class TowerAI

    private unit tower
    private unit currentTarget = null
    private boolean heroFocus = false
    private TowerPos pos

    private static constant towerList = new LinkedList<TowerAI>
    private static constant towerGroup = CreateGroup()
    private static constant towerMap = new HashMap<unit,TowerAI>
    private static LinkedList<TowerPos> array towerPos = [new LinkedList<TowerPos>, new LinkedList<TowerPos>]

    static function classInit()

        CreateTrigger()
        ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_ATTACKED)
        ..addAction() ->
            if towerGroup.contains(GetAttacker())
                towerMap.get(GetAttacker()).onAttack(GetTriggerUnit())

        CreateTrigger()
        ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)
        ..addAction() ->
            if towerGroup.contains(GetTriggerUnit())
                destroy towerMap.get(GetTriggerUnit())

        

        let g = CreateGroup()
        unit u

        GroupEnumUnitsOfPlayer(g, players[Teams.army1()], null)

        while true
            u = FirstOfGroup(g)
            if u == null
                break
            g.removeUnit(u)
            let id = u.getTypeId()
            
            if id == BASE_TOWER or id == GATE_TOWER or id == OUTER_TOWER
                new TowerAI(u)

        GroupEnumUnitsOfPlayer(g, players[Teams.army2()], null)

        while true
            u = FirstOfGroup(g)
            if u == null
                break
            g.removeUnit(u)
            let id = u.getTypeId()
            
            if id == BASE_TOWER or id == GATE_TOWER or id == OUTER_TOWER
                new TowerAI(u)

        g.destr()

    construct(unit tower)
        this.tower = tower
        towerList.add(this)
        towerGroup.addUnit(tower)
        towerMap.put(tower, this)

        this.pos = new TowerPos(tower.getX(), tower.getY(), this)

        towerPos[Players.team(tower.getOwner().getId())].add(this.pos)

    ondestroy
        towerGroup.removeUnit(this.tower)
        towerList.remove(this)
        towerMap.remove(this.tower)
        towerPos[Players.team(tower.getOwner().getId())].remove(this.pos)


    static function onDamage(unit source, unit _target, real damage)
        if damage > 0.1
            let offendingHero = source.wrapper().getOwningHero()
            if offendingHero != null
                let offendingUnit = offendingHero.toUnit()
                let offendingTeam = Players.team(offendingUnit.getOwner().getId())
                for TowerPos pos in towerPos[Teams.invert(offendingTeam)]
                    if pos.inRange(source, 800)
                        pos.tower.attackHero(offendingUnit)

    function determineTarget()
        this.heroFocus = false
        currentTarget = tower.findTarget(800, AbilityTargetFocus.ENEMY_UNIT, AbilityTargetPriority.LOW_DISTANCE, null)

    function onAttack(unit attacked)
        //tower is not focusing its target
        if attacked != currentTarget
            //target cannot attack its target
            if not tower.issueTargetOrder("attack", currentTarget)
                //choose new target and attack it
                determineTarget()
                tower.issueTargetOrder("attack", currentTarget)

                if currentTarget == null
                    currentTarget = attacked

                if currentTarget.isType(UNIT_TYPE_HERO)
                    let ai = attacked.toHeroAI()
                    if ai != null
                        ai.attackedByTower()

    //a hero inside the tower range damages an allied hero
    function attackHero(unit targetHero)
        if not this.heroFocus
            this.currentTarget = targetHero
            this.heroFocus = true

init
    TowerAI.classInit()
    