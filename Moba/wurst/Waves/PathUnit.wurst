package PathUnit

import Path
import TimerUtils
import HashMap
import GameTimer
import ClosureTimers
import UnitIndexer
import Constants
import PlayerControl
import initlater WaveSpawn

constant SHOW_STATE_COLORS = false

enum PathState
    HOME_TOWN
    RETURNING
    PATH
    ENEMY_TOWN

public function rect.contains(vec2 r, real tolerance)returns boolean
    return r.x > this.getMinX()-tolerance and r.x < this.getMaxX()+tolerance and r.y > this.getMinY()-tolerance and r.y < this.getMaxY()+tolerance

public class PathUnit 

    static int operations = 0
    static int moveOrders = 0
    static int instances = 0
    static HashMap<unit,PathUnit> unitToPathUnit = new HashMap<unit,PathUnit>
    static group pathUnits = CreateGroup()
    static real gameTime
    static trigger onAttackTrigger = CreateTrigger()
    unit assocUnit
    Path currentPath
    int currentSubPath
    static timer periodicTimer = getTimer()
    private real nextUpdate
    private real lastAttack
    private PathState pathState
    private rect returnRect = null

    boolean checkEnter = false

    function setPathState(PathState newState)
        this.pathState = newState
        if SHOW_STATE_COLORS
            if newState == PathState.HOME_TOWN
                this.assocUnit.setVertexColor(100,255,100,255)
            else if newState == PathState.RETURNING
                this.assocUnit.setVertexColor(100,100,255,255)
            else if newState == PathState.PATH
                this.assocUnit.setVertexColor(255,255,255,255)
            else if newState == PathState.ENEMY_TOWN
                this.assocUnit.setVertexColor(255,100,100,255)

    static function classInit()
        periodicTimer.startPeriodic(0.05, function updateMovementStatic)
        doPeriodically(1, (CallbackPeriodic cb) -> (begin
            //print("["+instances.toString()+"]orders: "+moveOrders.toString())
            operations = 0
            moveOrders = 0
        end))
        onUnitDeindex(function onRemove)
        onAttackTrigger.registerAnyUnitEvent(EVENT_PLAYER_UNIT_ATTACKED)
        onAttackTrigger.addAction(function onAttackStatic)

        region brownBase = CreateRegion()
            ..addRect(gg_rct_BrownBase)
        region greenBase = CreateRegion()
            ..addRect(gg_rct_GreenBase) 

        region brownHome = CreateRegion()
            ..addRect(gg_rct_BrownTopHome)
            ..addRect(gg_rct_BrownMidHome)
            ..addRect(gg_rct_BrownBotHome)

        region greenHome = CreateRegion()
            ..addRect(gg_rct_GreenTopHome)
            ..addRect(gg_rct_GreenMidHome)
            ..addRect(gg_rct_GreenBotHome)

        CreateTrigger()
            ..registerEnterRegion(brownBase, null)
            ..addAction(function onBaseEnterBrown)
        CreateTrigger()
            ..registerLeaveRegion(brownBase, null)
            ..addAction(function onBaseLeaveBrown)

        CreateTrigger()
            ..registerEnterRegion(greenBase, null)
            ..addAction(function onBaseEnterGreen)
        CreateTrigger()
            ..registerLeaveRegion(greenBase, null)
            ..addAction(function onBaseLeaveGreen)

        CreateTrigger()
            ..registerEnterRegion(brownHome, null)
            ..addAction(function onReturnBrown)
        CreateTrigger()
            ..registerEnterRegion(greenHome, null)
            ..addAction(function onReturnGreen)

        CreateTrigger()
            ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)
            ..addAction(function onDeath)


    //prepares a unit to be able to use paths
    construct(unit u)
        objectCount++
        if(unitToPathUnit.has(u))
            print("Warning! - "+u.getName()+" is already a PathUnit.")
            destroy(this)
        else
            this.assocUnit = u
            this.currentPath = null
            this.currentSubPath = 0
            unitToPathUnit.put(this.assocUnit, this)
            pathUnits.addUnit(this.assocUnit)
            this.nextUpdate = getElapsedGameTime() + GetRandomReal(0, 0.1)
            this.lastAttack = 0

            this.setPathState(PathState.HOME_TOWN)

            
            doAfter(0, () -> (this.enableEnterCheck()  ) )

            instances++

    function enableEnterCheck()
        this.checkEnter = true

    static function onRemove()
        let removedPathUnit = unitToPathUnit.get(getDeindexedUnit())
        if(removedPathUnit!=null)
            destroy removedPathUnit

    static function onDeath()
        let removedPathUnit = unitToPathUnit.get(GetTriggerUnit())
        if(removedPathUnit!=null)
            destroy removedPathUnit   

    ondestroy
        if this.currentPath == GREEN_TOP
            addLaneUnitCount(Team.TEAM1, Lane.TOP, -1)
        else if this.currentPath == GREEN_MID
            addLaneUnitCount(Team.TEAM1, Lane.MID, -1)
        else if this.currentPath == GREEN_BOT
            addLaneUnitCount(Team.TEAM1, Lane.BOT, -1)
        else if this.currentPath == BROWN_TOP
            addLaneUnitCount(Team.TEAM2, Lane.TOP, -1)
        else if this.currentPath == BROWN_MID
            addLaneUnitCount(Team.TEAM2, Lane.MID, -1)
        else if this.currentPath == BROWN_BOT
            addLaneUnitCount(Team.TEAM2, Lane.BOT, -1)

        objectCount--
        unitToPathUnit.remove(this.assocUnit)
        pathUnits.removeUnit(this.assocUnit)
        instances--

    function setPath(Path p)
        this.currentPath = p

        if this.currentPath == GREEN_TOP
            returnRect = gg_rct_GreenTopHome
        else if this.currentPath == BROWN_TOP
            returnRect = gg_rct_BrownTopHome
        else if this.currentPath == GREEN_MID 
            returnRect = gg_rct_GreenMidHome
        else if this.currentPath == BROWN_MID
            returnRect = gg_rct_BrownMidHome
        else if this.currentPath == GREEN_BOT
            returnRect = gg_rct_GreenBotHome      
        else if this.currentPath == BROWN_BOT
            returnRect = gg_rct_BrownBotHome

    function setPathFirst(Path p)
        this.setPath(p)
        this.assocUnit.issuePointOrder("attack", p.getStartTargetPos())
        this.nextUpdate = gameTime + 15


        
    function getNextUpdate() returns real
        return GetRandomReal(1.1, 1.6)

    static function onAttackStatic()
        PathUnit pathUnit = unitToPathUnit.get(GetAttacker())
        if( pathUnit!=null)
            pathUnit.lastAttack = getElapsedGameTime()

        pathUnit = unitToPathUnit.get(GetTriggerUnit())
        if( pathUnit!=null and GetAttacker().isType(UNIT_TYPE_STRUCTURE))
            pathUnit.nextUpdate = getElapsedGameTime()+4
            if(pathUnit.assocUnit.getCurrentOrder()!=OrderId("attack"))
                pathUnit.assocUnit.issuePointOrder("attack", pathUnit.assocUnit.getPos())
                moveOrders++

        

    function updateMovement()
        //print("updateMovement "+this.assocUnit.getName() + " " +this.assocUnit.getHandleId().toString() )
        if(assocUnit==null)
            destroy(this)
            return
        
        this.nextUpdate = gameTime + this.getNextUpdate()

        if(currentPath==null)
            return
       
        //print("continue")

        if this.pathState == PathState.PATH
            vec2 v0 = vec2(assocUnit.getX(), assocUnit.getY())
            vec2 v1
            vec2 v2
            real minDistance = -1
            int newSubPath = -1
            int moveSubPath


            //print(this.currentPath.getSubPathCount()-2)
            for i=this.currentSubPath to this.currentPath.getSubPathCount()-2

                v1 = vec2(this.currentPath.getSubPathX(i), this.currentPath.getSubPathY(i))
                //print("v1="+v1.toString())
                v2 = vec2(this.currentPath.getSubPathX(i+1), this.currentPath.getSubPathY(i+1))
                //print("v2="+v2.toString())
                real distance = v0.distanceToSegmentSq(v1, v2).pow(0.5)
                //print("["+i.toString()+"] distance="+distance.toString())
                //print("minDistance="+minDistance.toString())
                if(distance <= minDistance+200 or minDistance==-1)
                    minDistance = distance
                    newSubPath = i
                //if a subpath is far away, there won't come any close subpathes anymore
                if distance>3000 or minDistance<100
                    break
            int newOrder
            //string currentOrder =  OrderId2String(this.assocUnit.getCurrentOrder())
        
            //print(minDistance)
            
            //print(currentOrder)

            //move two subpathes forward
            if(newSubPath+2<=this.currentPath.getSubPathCount()-1)
                moveSubPath = newSubPath+2
            else
                moveSubPath = newSubPath+1

            v2 = vec2(this.currentPath.getSubPathX(moveSubPath), this.currentPath.getSubPathY(moveSubPath))

            //addEffect("Abilities\\Weapons\\FarseerMissile\\FarseerMissile.mdl", v2)

            //print("path: "+this.currentSubPath.toString()+" -> "+newSubPath.toString()+" -> "+moveSubPath.toString())

            if(minDistance>900)
                newOrder = 1
            else
                newOrder = 2

            this.currentSubPath = newSubPath

            //order:
                //0 = do nothing
                //1 = move back
                //2 = continue move


            group nearby = CreateGroup()
            nearby.enumUnitsInRange(v0, 500)
            
            

            while(true)
                unit n = nearby.next()
                if(n==null)
                    break
                nearby.removeUnit(n)
                if(unitToPathUnit.has(n))
                    PathUnit nearbyPathUnit = unitToPathUnit.get(n)

                    if(nearbyPathUnit.currentPath == this.currentPath and (nearbyPathUnit.nextUpdate<gameTime or nearbyPathUnit == this) )
                        

                        if newOrder==1
                            n.issuePointOrder("move", v2)
                            //print("move back?")
                            moveOrders++
                            nearbyPathUnit.nextUpdate = gameTime + this.getNextUpdate()
                        else
                            if(gameTime-nearbyPathUnit.lastAttack > 2)
                                n.issuePointOrder("attack", v2)
                                moveOrders++
                                nearbyPathUnit.nextUpdate = gameTime + this.getNextUpdate()
                            else
                                nearbyPathUnit.nextUpdate = gameTime + this.getNextUpdate()

                        
                
            nearby.destr()
        else if this.pathState == PathState.ENEMY_TOWN
            if this.assocUnit.getOwner() == players[TEAM_PLAYER_TEAM_1]
                this.assocUnit.issuePointOrder("attack", gg_rct_BrownCastle.getCenter())
            else if this.assocUnit.getOwner() == players[TEAM_PLAYER_TEAM_2]
                this.assocUnit.issuePointOrder("attack", gg_rct_GreenCastle.getCenter())
        else if this.pathState == PathState.HOME_TOWN
            this.assocUnit.issuePointOrder("attack", this.returnRect.getCenter())          
        else if this.pathState == PathState.RETURNING
            this.assocUnit.issuePointOrder("move", this.returnRect.getCenter())          
                                
    static function updateMovementGroup()
        var pU = PathUnit.unitToPathUnit.get(GetEnumUnit())
        if(pU.nextUpdate<gameTime)
            operations++
            pU.updateMovement()

    static function updateMovementStatic()
        gameTime = getElapsedGameTime()
        ForGroup(pathUnits, function updateMovementGroup)

    
    
    function onBaseLeave()
        this.nextUpdate = gameTime + 0.5
        this.setPathState(PathState.RETURNING)
        

        if this.returnRect != null
            if this.returnRect.contains(this.assocUnit.getPos())
                this.setPathState(PathState.PATH)
            else
                this.assocUnit.issuePointOrder("move", this.returnRect.getCenter())

    function onBaseEnter()
        this.setPathState(PathState.ENEMY_TOWN)
        this.nextUpdate = gameTime + 1000
        if this.assocUnit.getOwner() == players[TEAM_PLAYER_TEAM_1]
            this.assocUnit.issuePointOrder("attack", gg_rct_BrownCastle.getRightTop())
        else
            this.assocUnit.issuePointOrder("attack", gg_rct_GreenCastle.getLeftBot())

    //A path unit enters the enemy base
    static function onBaseEnterGreen()
        let u = GetTriggerUnit()
        if u.getOwner() == players[TEAM_PLAYER_TEAM_2]
            let pathUnit = unitToPathUnit.get(u)
            if pathUnit != null and pathUnit.checkEnter == true and pathUnit.pathState == PathState.PATH
                pathUnit.onBaseEnter()
                //print("onBaseEnterGreen")

    static function onBaseEnterBrown()
        let u = GetTriggerUnit()
        if u.getOwner() == players[TEAM_PLAYER_TEAM_1]
            let pathUnit = unitToPathUnit.get(u)
            if pathUnit != null and pathUnit.checkEnter == true and pathUnit.pathState == PathState.PATH
                pathUnit.onBaseEnter()
                //print("onBaseEnterBrown")

    //A path unit leaves its own base

    static function onBaseLeaveGreen()
        let u = GetTriggerUnit()
        if u.getOwner() == players[TEAM_PLAYER_TEAM_1]
            let pathUnit = unitToPathUnit.get(u)
            if pathUnit != null and pathUnit.checkEnter == true and pathUnit.pathState == PathState.HOME_TOWN
                pathUnit.onBaseLeave()
                //print("onBaseLeaveGreen")


    static function onBaseLeaveBrown()
        let u = GetTriggerUnit()
        if u.getOwner() == players[TEAM_PLAYER_TEAM_2]
            let pathUnit = unitToPathUnit.get(u)
            if pathUnit != null and pathUnit.checkEnter == true and pathUnit.pathState == PathState.HOME_TOWN
                pathUnit.onBaseLeave()
                //print("onBaseLeaveBrown")

    static function onReturnGreen()
        let u = GetTriggerUnit()
        if u.getOwner() == players[TEAM_PLAYER_TEAM_1]
            let pathUnit = unitToPathUnit.get(u)
            if pathUnit.currentPath == GREEN_MID
                //print("green leaves mid")
            if pathUnit != null and pathUnit.checkEnter == true and (pathUnit.pathState == PathState.RETURNING or pathUnit.pathState == PathState.HOME_TOWN)
                if pathUnit.returnRect.contains(pathUnit.assocUnit.getPos(), 64)
                    pathUnit.setPathState(PathState.PATH)
                    pathUnit.nextUpdate = 0
                    //print("green -> true")
                else
                    //print("green -> wrong")

    static function onReturnBrown()
        let u = GetTriggerUnit()
        if u.getOwner() == players[TEAM_PLAYER_TEAM_2]
            let pathUnit = unitToPathUnit.get(u)
            if pathUnit != null and pathUnit.checkEnter == true and (pathUnit.pathState == PathState.RETURNING or pathUnit.pathState == PathState.HOME_TOWN)
                if pathUnit.returnRect.contains(pathUnit.assocUnit.getPos(), 64)
                    pathUnit.setPathState(PathState.PATH)
                    pathUnit.nextUpdate = 0
                    //print("brown -> true")
                else
                    //print("brown -> wrong")



        
init
    PathUnit.classInit()