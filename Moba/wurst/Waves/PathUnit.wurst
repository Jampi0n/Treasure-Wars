package PathUnit

import HashMap
import ClosureTimers
import TeamUtil
import OnUnitEnterLeave
import ErrorHandling

constant SHOW_STATE_COLORS = false
constant UPDATE_INTERVAL = 2.0
constant NUM_GROUPS = 8

enum PathState
    HOME_TOWN
    RETURNING
    PATH
    ENEMY_TOWN

constant DISTANCE_THRESHOLD = 360000 // squared

constant TOP_X_THRESHOLD = gg_rct_CornerTopBrown.getCenterX()
constant TOP_Y_THRESHOLD = gg_rct_CornerTopGreen.getCenterY()
constant BOT_X_THRESHOLD = gg_rct_CornerBotGreen.getCenterX()
constant BOT_Y_THRESHOLD = gg_rct_CornerBotBrown.getCenterY()

public enum AssignedPath
    GREEN_TOP
    GREEN_MID
    GREEN_BOT
    BROWN_TOP
    BROWN_MID
    BROWN_BOT

enum PathStateNew
    ATTACK_MOVE
    RETURN_MOVE
    PASSIVE_MOVE
    SIEGE_MOVE

function getPathStage(AssignedPath path, vec2 pos) returns int
    if path == GREEN_TOP or path == BROWN_TOP
        if pos.y < TOP_Y_THRESHOLD
            return 1
        else if pos.x > TOP_X_THRESHOLD
            return 3
        else
            return 2
    if path == GREEN_BOT or path == BROWN_BOT
        if pos.x < BOT_X_THRESHOLD
            return 5
        else if pos.y > BOT_Y_THRESHOLD
            return 7
        else
            return 6
    if path == GREEN_MID or path == BROWN_MID
        return 4

    error("no matching path")

    return 0

group array attackMoveGroup
group array returnMoveGroup
group array passiveMoveGroup
group array siegeMoveGroup

vec2 array targetPoint
vec2 array finalPoint

function initTargetPoints()
    targetPoint[2] = gg_rct_GreenCastle.getCenter()
    targetPoint[3] = gg_rct_CornerTop.getCenter() + vec2(-400, 400)
    targetPoint[4] = gg_rct_CornerTopGreen.getCenter() + vec2(-400, -400)
    targetPoint[5] = gg_rct_CornerTopBrown.getCenter() + vec2(400, 400)
    targetPoint[6] = gg_rct_CornerTop.getCenter() + vec2(-400, 400)
    targetPoint[7] = gg_rct_BrownCastle.getCenter()

    targetPoint[8] = gg_rct_GreenCastle.getCenter()
    targetPoint[9] = gg_rct_BrownCastle.getCenter()

    targetPoint[10] = gg_rct_GreenCastle.getCenter()
    targetPoint[11] = gg_rct_CornerBot.getCenter() + vec2(400, -400)
    targetPoint[12] = gg_rct_CornerBotGreen.getCenter() + vec2(-400, -400)
    targetPoint[13] = gg_rct_CornerBotBrown.getCenter() + vec2(400, 400)
    targetPoint[14] = gg_rct_CornerBot.getCenter() + vec2(400, -400)
    targetPoint[15] = gg_rct_BrownCastle.getCenter()

    finalPoint[Teams.army1()] = gg_rct_BrownCastle.getCenter()
    finalPoint[Teams.army2()] = gg_rct_GreenCastle.getCenter()

function attackMoveGroup()
    let u = GetEnumUnit()
    if not PathUnitNew.unitToPathUnit.has(u)
        return
    let pathUnit = PathUnitNew.unitToPathUnit.get(u)
    if pathUnit == null
        return
    let pos = u.getPos()
    let stage = getPathStage(pathUnit.path, pos)
    let dist = pos.distanceToSegmentSq(targetPoint[stage*2], targetPoint[stage*2+1])
    let index = pathUnit.index

    if dist <= DISTANCE_THRESHOLD
        pathUnit.lastValidPos = pos
        if pathUnit.direction
            if gg_rct_BrownBase.contains(pos)
                pathUnit.state = PathStateNew.SIEGE_MOVE
                attackMoveGroup[index].removeUnit(u)
                siegeMoveGroup[index].addUnit(u)

            if not pathUnit.attacking
                u.issuePointOrder("attack", targetPoint[stage*2+1])
            else
                pathUnit.attacking = false
        else
            if gg_rct_GreenBase.contains(pos)
                pathUnit.state = PathStateNew.SIEGE_MOVE
                attackMoveGroup[index].removeUnit(u)
                siegeMoveGroup[index].addUnit(u)

            if not pathUnit.attacking
                u.issuePointOrder("attack", targetPoint[stage*2])
            else
                pathUnit.attacking = false
    else
        if pathUnit.direction
            u.issuePointOrder("move", targetPoint[stage*2+1])
        else
            u.issuePointOrder("move", targetPoint[stage*2])
        pathUnit.state = PathStateNew.RETURN_MOVE
        attackMoveGroup[index].removeUnit(u)
        returnMoveGroup[index].addUnit(u)



function returnMoveGroup()
    let u = GetEnumUnit()
    if not PathUnitNew.unitToPathUnit.has(u)
        return
    let pathUnit = PathUnitNew.unitToPathUnit.get(u)
    if pathUnit == null
        return
    let pos = u.getPos()
    let stage = getPathStage(pathUnit.path, pos)
    let dist = pos.distanceToSegmentSq(targetPoint[stage*2], targetPoint[stage*2+1])
    let index = pathUnit.index

    if dist <= DISTANCE_THRESHOLD
        pathUnit.lastValidPos = pos
        if pathUnit.direction
            if gg_rct_BrownBase.contains(pos)
                pathUnit.state = PathStateNew.SIEGE_MOVE
                returnMoveGroup[index].removeUnit(u)
                siegeMoveGroup[index].addUnit(u)
            else
                returnMoveGroup[index].removeUnit(u)
                attackMoveGroup[index].addUnit(u)
            u.issuePointOrder("attack", targetPoint[stage*2+1])
        else
            if gg_rct_GreenBase.contains(pos)
                pathUnit.state = PathStateNew.SIEGE_MOVE
                returnMoveGroup[index].removeUnit(u)
                siegeMoveGroup[index].addUnit(u)
            else
                pathUnit.state = PathStateNew.ATTACK_MOVE
                returnMoveGroup[index].removeUnit(u)
                attackMoveGroup[index].addUnit(u)
            u.issuePointOrder("attack", targetPoint[stage*2])
    else
        if pathUnit.direction
            u.issuePointOrder("move", targetPoint[stage*2+1])
        else
            u.issuePointOrder("move", targetPoint[stage*2])

function passiveMoveGroup()

function siegeMoveGroup()
    let u = GetEnumUnit()
    if not PathUnitNew.unitToPathUnit.has(u)
        return
    let pathUnit = PathUnitNew.unitToPathUnit.get(u)
    if pathUnit == null
        return
    if not pathUnit.attacking
        u.issuePointOrder("attack", finalPoint[u.getOwner().getId()])
    else
        pathUnit.attacking = false

function initMovement()
    for i = 0 to NUM_GROUPS - 1
        attackMoveGroup[i] = CreateGroup()
        returnMoveGroup[i] = CreateGroup()
        passiveMoveGroup[i] = CreateGroup()
        siegeMoveGroup[i] = CreateGroup()

        doAfter(UPDATE_INTERVAL*(i/NUM_GROUPS)) () ->
            doPeriodically(UPDATE_INTERVAL) (CallbackPeriodic cb) ->
                ForGroup(attackMoveGroup[i], function attackMoveGroup)
                ForGroup(returnMoveGroup[i], function returnMoveGroup)
                ForGroup(passiveMoveGroup[i], function passiveMoveGroup)
                ForGroup(siegeMoveGroup[i], function siegeMoveGroup)

    onLeave() ->
        let u = getEnterLeaveUnit()
        if PathUnitNew.unitToPathUnit.has(u)
            let pathUnit = PathUnitNew.unitToPathUnit.get(u)
            if pathUnit != null
                let index = pathUnit.index
                attackMoveGroup[index].removeUnit(u)
                returnMoveGroup[index].removeUnit(u)
                passiveMoveGroup[index].removeUnit(u)
                siegeMoveGroup[index].removeUnit(u)
                destroy pathUnit



public class PathUnitNew

    protected int index
    protected unit whichUnit
    protected AssignedPath path
    protected PathStateNew state
    protected vec2 lastValidPos
    protected static constant unitToPathUnit = new HashMap<unit,PathUnitNew>
    protected bool direction
    protected bool attacking = false

    construct(unit whichUnit, AssignedPath path)
        this.index = (this castTo int) mod NUM_GROUPS
        this.whichUnit = whichUnit
        this.path = path
        this.state = PathStateNew.ATTACK_MOVE
        
        let stage = getPathStage(path, whichUnit.getPos())
        attackMoveGroup[this.index].addUnit(whichUnit)
        unitToPathUnit.put(whichUnit, this)
        this.direction = path == AssignedPath.GREEN_TOP or path == AssignedPath.GREEN_MID or path == AssignedPath.GREEN_BOT
        if this.direction
            whichUnit.issuePointOrder("attack", targetPoint[stage*2+1])
            this.lastValidPos = targetPoint[stage*2]
        else
            whichUnit.issuePointOrder("attack", targetPoint[stage*2])
            this.lastValidPos = targetPoint[stage*2+1]

    ondestroy
        unitToPathUnit.remove(this.whichUnit)



init
    initTargetPoints()
    initMovement()

    CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_UNIT_ATTACKED)..addAction() ->
        let u = GetAttacker()
        if PathUnitNew.unitToPathUnit.has(u)
            let pathUnit = PathUnitNew.unitToPathUnit.get(u)
            if pathUnit != null
                pathUnit.attacking = true
