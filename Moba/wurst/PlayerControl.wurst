package PlayerControl

import LinkedList

/*
* This package handles players
*
*
*/

CPlayer array allPlayers

function initPlayers()
    for i = 0 to 9
        player p = players[i]
        Team t = i<=5?Team.TEAM1:Team.TEAM2
        if(p.getController()== MAP_CONTROL_USER and p.getSlotState()==PLAYER_SLOT_STATE_PLAYING )
            allPlayers[i] = new UserHeroPlayer(p, t)
        else if(p.getController()==MAP_CONTROL_COMPUTER and p.getSlotState()==PLAYER_SLOT_STATE_PLAYING)
            allPlayers[i] = new AIHeroPlayer(p, t)
        else
            allPlayers[i] = new UnusedHeroPlayer(p, t)
    allPlayers[10] = new ArmyPlayer(players[10], Team.TEAM1)
    allPlayers[11] = new ArmyPlayer(players[11], Team.TEAM2)
    allPlayers[12] = new NeutralPlayer(players[12], Team.NEUTRAL_HOSTILE)
    for i=13 to 15
        allPlayers[15] = new NeutralPlayer(players[15], Team.NEUTRAL_PASSIVE)
        













enum Team
    TEAM1
    TEAM2
    NEUTRAL_HOSTILE
    NEUTRAL_PASSIVE

public function player.getCPlayer() returns CPlayer
    return CPlayer.idToPlayer[this.getId()]

//player class
public class CPlayer
    private player assocPlayer
    private int playerId
    
    protected static CPlayer array idToPlayer
    private Team team

    construct(player p, Team t)
        this.assocPlayer = p
        this.playerId = p.getId()
        this.team = t
        idToPlayer[this.playerId] = this
    
    function toString() returns string
        return "Player = "+assocPlayer.getName()

    function getPlayer() returns player
        return this.assocPlayer
    
    function getId() returns integer
        return this.playerId

    function getTeam() returns Team
        return this.team
        
//player 0-9 controlling a hero
public class HeroPlayer extends CPlayer
    
    static LinkedList<HeroPlayer> heroPlayers = new LinkedList<HeroPlayer>()

    construct(player p, Team t)
        super(p, t)
        heroPlayers.add(this)
        
//player controlled by AI
public class AIHeroPlayer extends HeroPlayer

    construct(player p, Team t)
        super(p, t)

// player controlled by users
public class UserHeroPlayer extends HeroPlayer

    construct(player p, Team t)
        super(p, t)

    //if a player leaves the game, the hero will be controlled by an AI player
    function toAI()
        allPlayers[this.getId()] = new AIHeroPlayer(this.getPlayer(), this.getTeam())
        destroy(this)


// player for empty player slots
public class UnusedHeroPlayer extends HeroPlayer

    construct(player p, Team t)
        super(p, t)


// player controlling the buildings and wave minions
public class ArmyPlayer extends CPlayer

    construct(player p, Team t)
        super(p, t)

// neutral players
public class NeutralPlayer extends CPlayer

    construct(player p, Team t)
        super(p, t)


init
    initPlayers()