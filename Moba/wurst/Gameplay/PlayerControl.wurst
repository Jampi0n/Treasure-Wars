package PlayerControl

import UtilityFunctions
import LinkedList
import ErrorHandling
import ClosureTimers
import Assets
import Constants
import initlater HeroControl
import initlater HeroAI
/*
* This package handles players
*
*
*/

public int adminPlayer

public enum PlayerType
    HERO
    NONE
    ARMY
    NEUTRAL

public function player.getCPlayer() returns CPlayer
    return CPlayer.idToPlayer[this.getId()]

public function getCPlayer(int id) returns CPlayer
    return CPlayer.idToPlayer[id]



public class StatTable

    static protected multiboard mBoard

    static CPlayer array columnToPlayer
    static int array playerToColumn

    static int rowCount = 0

    static constant playerList = new LinkedList<CPlayer>

    static function setStatTitle(int row, string title)
        mBoard.getItem(row, 0)
            ..setValue(title)
            ..release()

        rowCount++

    static function setStatTitles()
        setStatTitle(rowCount, "Players >")
        setStatTitle(rowCount, "Stats v")
        setStatTitle(rowCount, "Heroes killed:")
        setStatTitle(rowCount, "Deaths:")
        setStatTitle(rowCount, "Assists:")
        setStatTitle(rowCount, "Units killed:")
        setStatTitle(rowCount, "Damage dealt:")
        setStatTitle(rowCount, "Damage taken:")
        setStatTitle(rowCount, "Healing done:")
        setStatTitle(rowCount, "Healing received:")
        setStatTitle(rowCount, "Gold earned:")
        setStatTitle(rowCount, "Hydra's slain:")
        setStatTitle(rowCount, "Buildings razed:")

    static function setRowStat(int row, int column, string value)
        mBoard.getItem(row, column)
            ..setValue(value)
            ..release()

        rowCount++

    static function setRowStats(int column)
        let cPlayer = columnToPlayer[column]
        let tmp = rowCount
        rowCount = 2
        setRowStat(rowCount, column, cPlayer.heroKills.toString())
        setRowStat(rowCount, column, cPlayer.deaths.toString())
        setRowStat(rowCount, column, cPlayer.assists.toString())
        setRowStat(rowCount, column, cPlayer.unitKills.toString())
        setRowStat(rowCount, column, cPlayer.statDamageDealt.toStatString())
        setRowStat(rowCount, column, cPlayer.statDamageTaken.toStatString())
        setRowStat(rowCount, column, cPlayer.statHealingDone.toStatString())
        setRowStat(rowCount, column, cPlayer.statHealingReceived.toStatString())
        setRowStat(rowCount, column, cPlayer.statGoldGained.toString())
        setRowStat(rowCount, column, cPlayer.statHydrasKilled.toString())
        setRowStat(rowCount, column, cPlayer.statBuildingsRazed.toString())

        rowCount = tmp

    static function create()
        int count = 2
        columnToPlayer[1] = getCPlayer(TEAM_PLAYER_TEAM_1)
        playerToColumn[TEAM_PLAYER_TEAM_1] = 1
        for i = 0 to MAX_HERO_COUNT-1
            if Hero.getHero(i) != null
                columnToPlayer[count] = getCPlayer(i)
                playerToColumn[i] = count
                count++

            if i == HERO_PLAYER_TEAM_1_LAST
                columnToPlayer[count] = getCPlayer(TEAM_PLAYER_TEAM_2)
                playerToColumn[TEAM_PLAYER_TEAM_2] = count
                count++

        mBoard = CreateMultiboard()
            ..setColumnCount(count)
            ..setRowCount(13)
            ..setItemsStyle(true, false)
            ..setTitle("Stats: "+
                players[TEAM_PLAYER_TEAM_1].getColor().toColor().toColorString()+ScoreTable.team1Kills.toString()+"|r / "+
                players[TEAM_PLAYER_TEAM_2].getColor().toColor().toColorString()+ScoreTable.team2Kills.toString()+"|r"  )
            ..display(true)
            ..minimalize(true)

        for j = 0 to mBoard.getRowCount() - 1
            for i = 1 to mBoard.getColumnCount() - 1 
                mBoard.getItem(j, i)
                    ..setWidth(0.05)
                    ..release()
            mBoard.getItem(j, 0)
                ..setWidth(0.14)
                ..release()

        for i = 1 to mBoard.getColumnCount() - 1 
            let cPlayer = columnToPlayer[i]
            let color = cPlayer.getPlayer().getColor().toColor()
            string icon

            let hero = Hero.getHero(cPlayer)
            if hero != null
                icon = hero.getHeroType().getIcon()
            else
                icon = Icons.bTNCastle

            string name = cPlayer.getPlayer().getName().substring(0, 5)

            mBoard.getItem(0, i)
                ..setValueColor(color.red, color.green, color.blue, 255)
                ..setStyle(true, true)
                ..setValue(name)
                ..setIcon(icon)
                ..release()

            mBoard.getItem(1, i)
                ..setValueColor(color.red, color.green, color.blue, 255)
                ..setValue("xxxxxx")
                ..release()

            setRowStats(i)

        setStatTitles()

public class ScoreTable

    static protected multiboard mBoard

    protected static int team1Kills = 0
    protected static int team2Kills = 0

    static CPlayer array rowToPlayer
    static int array playerToRow

    private static real array width

    static constant playerList = new LinkedList<CPlayer>

    static function updateHeader(boolean firstTeam)
        let row = (firstTeam ? 0 : CPlayer.team1HeroCount + 1)
        string teamName = firstTeam ?
        players[TEAM_PLAYER_TEAM_1].getColor().toColor().toColorString() + TEAM_NAME_TEAM_1 + "|r" :
        players[TEAM_PLAYER_TEAM_2].getColor().toColor().toColorString() + TEAM_NAME_TEAM_2 + "|r"
        
        mBoard.getItem(row, 0)
            ..setStyle(true, false)
            ..setValue(teamName)
            ..setWidth(width[0])
            ..release() 
        mBoard.getItem(row, 1)
            ..setStyle(false, true)
            ..setValue("H")
            ..setIcon(Icons.bTNHelmutPurple)
            ..setWidth(width[1])
            ..release() 
        mBoard.getItem(row, 2)
            ..setStyle(false, true)
            ..setValue("D")
            ..setIcon(Icons.bTNSkeletonWarrior)
            ..setWidth(width[2])
            ..release() 
        mBoard.getItem(row, 3)
            ..setStyle(false, true)
            ..setValue("A")
            ..setIcon(Icons.bTNStatUp)
            ..setWidth(width[3])
            ..release() 
        mBoard.getItem(row, 4)
            ..setStyle(false, true)
            ..setValue("U")
            ..setIcon(Icons.bTNFootman)
            ..setWidth(width[4])
            ..release() 

    static function addIcon(CPlayer p)
        let row = playerToRow[p.getId()]

        let hero = Hero.getHero(p)
        let icon = hero == null ? "ReplaceableTextures\\CommandButtons\\BTNSelectHeroOn.blp" : hero.getHeroType().getIcon()

        mBoard.getItem(row, 0)
            ..setIcon(icon)
            ..release() 

    static function update()
        int index = 0
        mBoard.display(true)

        updateHeader(true)
        updateHeader(false)

        for CPlayer p in playerList
            let row = 1 + index + (p.getTeam() == Team.TEAM2 ? 1: 0)
            rowToPlayer[row] = p
            playerToRow[p.getId()] = row

            let hero = Hero.getHero(p)
            let icon = hero == null ? "ReplaceableTextures\\CommandButtons\\BTNSelectHeroOn.blp" : hero.getHeroType().getIcon()

            mBoard.getItem(row, 0)
                ..setStyle(true, true)
                ..setValue(p.getPlayer().getNameColored())
                ..setIcon(icon)
                ..setWidth(width[0])
                ..release() 
            mBoard.getItem(row, 1)
                ..setStyle(true, false)
                ..setValue(p.getHeroKills().toString()) 
                ..setWidth(width[1])
                ..release() 
            mBoard.getItem(row, 2)
                ..setStyle(true, false)
                ..setValue(p.getDeaths().toString()) 
                ..setWidth(width[2])
                ..release() 
            mBoard.getItem(row, 3)
                ..setStyle(true, false)
                ..setValue(p.getAssists().toString()) 
                ..setWidth(width[3])
                ..release() 
            mBoard.getItem(row, 4)
                ..setStyle(true, false)
                ..setValue(p.getUnitKills().toString())
                ..setWidth(width[4])
                ..release() 
            index++

    static function updatePlayerHeroKills(CPlayer p)
        let row = playerToRow[p.getId()]
        mBoard.getItem(row, 1)
            ..setValue(p.getHeroKills().toString()) 
            ..release() 

        mBoard.setTitle("Score: "+
        players[TEAM_PLAYER_TEAM_1].getColor().toColor().toColorString()+team1Kills.toString()+"|r / "+
        players[TEAM_PLAYER_TEAM_2].getColor().toColor().toColorString()+team2Kills.toString()+"|r"  )

    static function updatePlayerDeaths(CPlayer p)
        let row = playerToRow[p.getId()]
        mBoard.getItem(row, 2)
            ..setValue(p.getDeaths().toString()) 
            ..release() 

    static function updatePlayerAssists(CPlayer p)
        let row = playerToRow[p.getId()]
        mBoard.getItem(row, 3)
            ..setValue(p.getAssists().toString()) 
            ..release() 
            
    static function updatePlayerUnitKills(CPlayer p)
        let row = playerToRow[p.getId()]
        mBoard.getItem(row, 4)
            ..setValue(p.getUnitKills().toString())
            ..release() 

    static function display()
    
        print("displaying score")
        mBoard.display(true)

    static function create()
        width[0] = 0.1
        width[1] = 0.03
        width[2] = 0.03
        width[3] = 0.03
        width[4] = 0.03

        width[5] = 0.09
        width[6] = 0.09
        width[7] = 0.06
        width[8] = 0.07
        width[9] = 0.09
        width[10] = 0.09

        mBoard = CreateMultiboard()
            ..setColumnCount(5)
            ..setRowCount(2)
            ..setItemsStyle(true, false)
            ..setTitle("Score: "+players[TEAM_PLAYER_TEAM_1].getColor().toColor().toColorString()+"0|r / "+players[TEAM_PLAYER_TEAM_2].getColor().toColor().toColorString()+"0|r"  )
            ..display(true)
            ..minimalize(true)
        doAfter(0.02, () -> mBoard.minimalize(false))
        

    static function addPlayer(CPlayer p)
        doAfter(0.01, () -> (begin
            playerList.add(p)
            playerList.sortWith( (CPlayer p1, CPlayer p2) -> (p1.getId() - p2.getId()) )
            mBoard.setRowCount(mBoard.getRowCount()+1)
            update()
            /*for cp in playerList
                if cp.getTeam() == Team.TEAM1
                    cp.getPlayer().setState(PLAYER_STATE_RESOURCE_FOOD_USED, CPlayer.team1HeroCount)
                    cp.getPlayer().setState(PLAYER_STATE_RESOURCE_FOOD_CAP, CPlayer.team2HeroCount)
                else
                    cp.getPlayer().setState(PLAYER_STATE_RESOURCE_FOOD_USED, CPlayer.team2HeroCount)
                    cp.getPlayer().setState(PLAYER_STATE_RESOURCE_FOOD_CAP, CPlayer.team1HeroCount)*/
        end))

        


//player class
public class CPlayer

    private player assocPlayer
    private int playerId
    
    private static constant team1HeroPlayers = new LinkedList<CPlayer>()
    private static constant team2HeroPlayers = new LinkedList<CPlayer>()

    protected static int team1HeroCount = 0
    protected static int team2HeroCount = 0

    protected int unitKills = 0
    protected int heroKills = 0
    protected int deaths = 0
    protected int assists = 0

    private real realGold = 0
    int statGoldGained = 0
    real statDamageDealt = 0
    real statDamageTaken = 0
    real statHealingReceived = 0
    real statHealingDone = 0
    real statManaHealed = 0
    int statHydrasKilled = 0
    int statDragonTurtlesKilled = 0
    int statBuildingsRazed = 0

    protected static CPlayer array idToPlayer
    private Team team
    private PlayerType playertype

    construct(player p, Team t, PlayerType pType)
        objectCount++
        this.assocPlayer = p
        this.playerId = p.getId()
        this.team = t
        this.playertype = pType
        idToPlayer[this.playerId] = this
        if pType == PlayerType.HERO
            ScoreTable.addPlayer(this)
            if t == Team.TEAM1
                team1HeroPlayers.add(this)
                team1HeroCount++
            else
                team2HeroPlayers.add(this)
                team2HeroCount++

        

    function addUnitKill()
        this.unitKills++
        ScoreTable.updatePlayerUnitKills(this)

    function addHeroKill(boolean byHero)
        this.heroKills++

        if byHero
            if this.team == Team.TEAM1
                ScoreTable.team1Kills++
            else if this.team == Team.TEAM2
                ScoreTable.team2Kills++

            ScoreTable.updatePlayerHeroKills(this)

    function addDeath()
        this.deaths++
        ScoreTable.updatePlayerDeaths(this)

    function addAssist()
        this.assists++
        ScoreTable.updatePlayerAssists(this)

    function getUnitKills() returns int
        return this.unitKills

    function getHeroKills() returns int
        return this.heroKills

    function getDeaths() returns int
        return this.deaths

    function getAssists() returns int
        return this.assists

    function toString() returns string
        return "Player = "+assocPlayer.getName()

    function getPlayer() returns player
        return this.assocPlayer
    
    function getId() returns integer
        return this.playerId

    function getTeam() returns Team
        return this.team

    function getPlayerType() returns PlayerType
        return this.playertype

    static function getAllyHeroPlayers(Team t) returns LinkedList<CPlayer>
        LinkedList<CPlayer> ret
        if t == Team.TEAM1
            ret = team1HeroPlayers
        else if t == Team.TEAM2
            ret =  team2HeroPlayers
        else
            error("Must be used on TEAM1 or TEAM2")
            ret =  null

        return ret

    static function getAllyHeroPlayers(player p) returns LinkedList<CPlayer>
        return getAllyHeroPlayers(p.getCPlayer().getTeam())

    static function getEnemyHeroPlayers(Team t) returns LinkedList<CPlayer>
        LinkedList<CPlayer> ret
        if t == Team.TEAM1
            ret = team2HeroPlayers
        else if t == Team.TEAM2
            ret = team1HeroPlayers
        else
            error("Must be used on TEAM1 or TEAM2")
            ret = null

        return ret

    static function getEnemyHeroPlayers(player p) returns LinkedList<CPlayer>
        return getEnemyHeroPlayers(p.getCPlayer().getTeam())

    static function getTeamHeroCount(Team t) returns int
        int ret
        if t == Team.TEAM1
            ret = team1HeroCount
        else if t == Team.TEAM2
            ret = team2HeroCount
        else
            error("Must be used on TEAM1 or TEAM2")
            ret = -1

        return ret

    static function invertTeam(Team t) returns Team
        Team ret
        if t == Team.TEAM1
            ret = Team.TEAM2
        else if t == Team.TEAM2
            ret = Team.TEAM1
        else
            error("Must be used on TEAM1 or TEAM2")
            ret = t

        return ret

    protected static function initPlayers()
        var admin = false
        for i = 0 to MAX_HERO_COUNT-1
            player p = players[i]
            SetPlayerState(p, PLAYER_STATE_RESOURCE_FOOD_USED, 1)
            SetPlayerState(p, PLAYER_STATE_RESOURCE_FOOD_USED, 0)
            Team t = i <= HERO_PLAYER_TEAM_1_LAST ?Team.TEAM1:Team.TEAM2
            if p.getSlotState()==PLAYER_SLOT_STATE_PLAYING
                new CPlayer(p, t, PlayerType.HERO)
                if p.getController() == MAP_CONTROL_COMPUTER
                    PauseCompAI(players[i], true)
                if not admin and p.getController() == MAP_CONTROL_USER
                    admin = true
                    adminPlayer = i
            else
                new CPlayer(p, t, PlayerType.NONE)
    

        new CPlayer(players[TEAM_PLAYER_TEAM_1], Team.TEAM1, PlayerType.ARMY)
        new CPlayer(players[TEAM_PLAYER_TEAM_2], Team.TEAM2, PlayerType.ARMY)

        new CPlayer(players[PLAYER_NEUTRAL_AGGRESSIVE], Team.NEUTRAL_HOSTILE, PlayerType.NEUTRAL)
        new CPlayer(players[CREEP_SPECIAL_OWNER], Team.NEUTRAL_HOSTILE, PlayerType.NEUTRAL)

        for i=PLAYER_NEUTRAL_AGGRESSIVE+1 to PLAYER_NEUTRAL_PASSIVE
            new CPlayer(players[i], Team.NEUTRAL_PASSIVE, PlayerType.NEUTRAL)
    
        for i=0 to TEAM_PLAYER_TEAM_2
            for j=0 to TEAM_PLAYER_TEAM_2

                if i < MAX_HERO_COUNT or i == TEAM_PLAYER_TEAM_1 or i == TEAM_PLAYER_TEAM_2
                    if j < MAX_HERO_COUNT or j == TEAM_PLAYER_TEAM_1 or j == TEAM_PLAYER_TEAM_2

                        if(i!=j and getCPlayer(i).getTeam()==getCPlayer(j).getTeam())
                            SetPlayerAllianceStateBJ(players[i],players[j], bj_ALLIANCE_ALLIED_VISION)
                    
        //armies do not fight vs creeps
        SetPlayerAlliance(players[TEAM_PLAYER_TEAM_1], players[PLAYER_NEUTRAL_AGGRESSIVE], ALLIANCE_PASSIVE, true)
        SetPlayerAlliance(players[TEAM_PLAYER_TEAM_2], players[PLAYER_NEUTRAL_AGGRESSIVE], ALLIANCE_PASSIVE, true)
        SetPlayerAlliance(players[PLAYER_NEUTRAL_AGGRESSIVE], players[TEAM_PLAYER_TEAM_1], ALLIANCE_PASSIVE, true)
        SetPlayerAlliance(players[PLAYER_NEUTRAL_AGGRESSIVE], players[TEAM_PLAYER_TEAM_2], ALLIANCE_PASSIVE, true)

        SetPlayerAlliance(players[TEAM_PLAYER_TEAM_1], players[CREEP_SPECIAL_OWNER], ALLIANCE_PASSIVE, true)
        SetPlayerAlliance(players[TEAM_PLAYER_TEAM_2], players[CREEP_SPECIAL_OWNER], ALLIANCE_PASSIVE, true)
        SetPlayerAlliance(players[CREEP_SPECIAL_OWNER], players[TEAM_PLAYER_TEAM_1], ALLIANCE_PASSIVE, true)
        SetPlayerAlliance(players[CREEP_SPECIAL_OWNER], players[TEAM_PLAYER_TEAM_2], ALLIANCE_PASSIVE, true)

    function addGoldEx(real gold)
        this.realGold += gold
        let intGold = this.realGold.toInt()
        this.addGoldEx(intGold)
        this.realGold -= intGold

    function addGoldEx(int gold)
        this.getPlayer().addGold(gold)
        this.statGoldGained += gold
        let ai = getAI(this.getPlayer().getId())
        if ai != null
            ai.addGold(gold)




init
    CPlayer.initPlayers()
    doAfter(0, () -> ScoreTable.create())