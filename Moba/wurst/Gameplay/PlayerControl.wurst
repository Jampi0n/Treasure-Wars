package PlayerControl

import LinkedList
import ErrorHandling
import ClosureTimers
import Constants
import Assets
import initlater HeroControl
/*
* This package handles players
*
*
*/

public int adminPlayer

public enum Team
    TEAM1
    TEAM2
    NEUTRAL_HOSTILE
    NEUTRAL_PASSIVE

public enum PlayerType
    HERO
    NONE
    ARMY
    NEUTRAL

public function player.getCPlayer() returns CPlayer
    return CPlayer.idToPlayer[this.getId()]

public function getCPlayer(int id) returns CPlayer
    return CPlayer.idToPlayer[id]

public class ScoreTable

    static protected multiboard mBoard

    protected static int team1Kills = 0
    protected static int team2Kills = 0

    static CPlayer array rowToPlayer
    static int array playerToRow

    private static real array width

    static constant playerList = new LinkedList<CPlayer>

    static function updateHeader(boolean firstTeam)
        let row = (firstTeam ? 0 : CPlayer.team1HeroCount + 1)
        string teamName = firstTeam ?
        playercolors[TEAM_PLAYER_TEAM_1].toColorString() + TEAM_NAME_TEAM_1 + "|r" :
        playercolors[TEAM_PLAYER_TEAM_2].toColorString() + TEAM_NAME_TEAM_2 + "|r"
        
        mBoard.getItem(row, 0)
            ..setStyle(true, false)
            ..setValue(teamName)
            ..setWidth(width[0])
            ..release() 
        mBoard.getItem(row, 1)
            ..setStyle(false, true)
            ..setValue("H")
            ..setIcon(Icons.bTNHelmutPurple)
            ..setWidth(width[1])
            ..release() 
        mBoard.getItem(row, 2)
            ..setStyle(false, true)
            ..setValue("D")
            ..setIcon(Icons.bTNSkeletonWarrior)
            ..setWidth(width[2])
            ..release() 
        mBoard.getItem(row, 3)
            ..setStyle(false, true)
            ..setValue("A")
            ..setIcon(Icons.bTNStatUp)
            ..setWidth(width[3])
            ..release() 
        mBoard.getItem(row, 4)
            ..setStyle(false, true)
            ..setValue("U")
            ..setIcon(Icons.bTNFootman)
            ..setWidth(width[4])
            ..release() 

    static function addIcon(CPlayer p)
        let row = playerToRow[p.getId()]

        let hero = Hero.getHero(p)
        let icon = hero == null ? "ReplaceableTextures\\CommandButtons\\BTNSelectHeroOn.blp" : hero.getHeroType().getIcon()

        mBoard.getItem(row, 0)
            ..setIcon(icon)
            ..release() 

    static function update()
        int index = 0
        mBoard.display(true)

        updateHeader(true)
        updateHeader(false)

        for CPlayer p in playerList
            let row = 1 + index + (p.getTeam() == Team.TEAM2 ? 1: 0)
            rowToPlayer[row] = p
            playerToRow[p.getId()] = row

            let hero = Hero.getHero(p)
            let icon = hero == null ? "ReplaceableTextures\\CommandButtons\\BTNSelectHeroOn.blp" : hero.getHeroType().getIcon()

            mBoard.getItem(row, 0)
                ..setStyle(true, true)
                ..setValue(p.getPlayer().getNameColored())
                ..setIcon(icon)
                ..setWidth(width[0])
                ..release() 
            mBoard.getItem(row, 1)
                ..setStyle(true, false)
                ..setValue(p.getHeroKills().toString()) 
                ..setWidth(width[1])
                ..release() 
            mBoard.getItem(row, 2)
                ..setStyle(true, false)
                ..setValue(p.getDeaths().toString()) 
                ..setWidth(width[2])
                ..release() 
            mBoard.getItem(row, 3)
                ..setStyle(true, false)
                ..setValue(p.getAssists().toString()) 
                ..setWidth(width[3])
                ..release() 
            mBoard.getItem(row, 4)
                ..setStyle(true, false)
                ..setValue(p.getUnitKills().toString())
                ..setWidth(width[4])
                ..release() 
            index++

    static function updatePlayerHeroKills(CPlayer p)
        let row = playerToRow[p.getId()]
        mBoard.getItem(row, 1)
            ..setValue(p.getHeroKills().toString()) 
            ..release() 

        mBoard.setTitle("Score: "+
        playercolors[TEAM_PLAYER_TEAM_1].toColorString()+team1Kills.toString()+"|r / "+
        playercolors[TEAM_PLAYER_TEAM_2].toColorString()+team2Kills.toString()+"|r"  )

    static function updatePlayerDeaths(CPlayer p)
        let row = playerToRow[p.getId()]
        mBoard.getItem(row, 2)
            ..setValue(p.getDeaths().toString()) 
            ..release() 

    static function updatePlayerAssists(CPlayer p)
        let row = playerToRow[p.getId()]
        mBoard.getItem(row, 3)
            ..setValue(p.getAssists().toString()) 
            ..release() 
            
    static function updatePlayerUnitKills(CPlayer p)
        let row = playerToRow[p.getId()]
        mBoard.getItem(row, 4)
            ..setValue(p.getUnitKills().toString())
            ..release() 

    static function display()
    
        print("displaying score")
        mBoard.display(true)

    static function create()
        width[0] = 0.1
        width[1] = 0.03
        width[2] = 0.03
        width[3] = 0.03
        width[4] = 0.03

        width[5] = 0.09
        width[6] = 0.09
        width[7] = 0.06
        width[8] = 0.07
        width[9] = 0.09
        width[10] = 0.09

        mBoard = CreateMultiboard()
            ..setColumnCount(5)
            ..setRowCount(2)
            ..setItemsStyle(true, false)
            ..setTitle("Score: "+playercolors[MAX_HERO_COUNT].toColorString()+"0|r / "+playercolors[MAX_HERO_COUNT+1].toColorString()+"0|r"  )
            ..display(true)
            ..minimalize(true)
        doAfter(0.02, () -> mBoard.minimalize(false))
        

    static function addPlayer(CPlayer p)
        doAfter(0.01, () -> (begin
            playerList.add(p)
            playerList.sortWith( (CPlayer p1, CPlayer p2) -> (p1.getId() - p2.getId()) )
            mBoard.setRowCount(mBoard.getRowCount()+1)
            update()
        end))

    static function extendToStatTable()
        mBoard.setTitle("Stats - Score: "+
        playercolors[TEAM_PLAYER_TEAM_1].toColorString()+team1Kills.toString()+"|r / "+
        playercolors[TEAM_PLAYER_TEAM_2].toColorString()+team2Kills.toString()+"|r"  )

        mBoard
            ..minimalize(true)
            ..setColumnCount(11)

        for i = 0 to mBoard.getRowCount()
            for j = 0 to mBoard.getColumnCount()
                mBoard.getItem(i, j)
                    ..setWidth(width[j])
                    ..release()

        for second = 0 to 1
             let row = (second == 0 ? 0 : CPlayer.team1HeroCount + 1)
            string teamName = second == 0 ?
            playercolors[TEAM_PLAYER_TEAM_1].toColorString() + TEAM_NAME_TEAM_1 + "|r" :
            playercolors[TEAM_PLAYER_TEAM_2].toColorString() + TEAM_NAME_TEAM_2 + "|r"
            
            mBoard.getItem(row, 0)
                ..setStyle(true, false)
                ..setValue(teamName)
                ..release() 
            mBoard.getItem(row, 1)
                ..setStyle(false, true)
                ..setValue("H")
                ..setIcon(Icons.bTNHelmutPurple)
                ..release() 
            mBoard.getItem(row, 2)
                ..setStyle(false, true)
                ..setValue("D")
                ..setIcon(Icons.bTNSkeletonWarrior)
                ..release() 
            mBoard.getItem(row, 3)
                ..setStyle(false, true)
                ..setValue("A")
                ..setIcon(Icons.bTNStatUp)
                ..release() 
            mBoard.getItem(row, 4)
                ..setStyle(false, true)
                ..setValue("U")
                ..setIcon(Icons.bTNFootman)
                ..release() 

            mBoard.getItem(row, 5)
                ..setStyle(true, false)
                ..setValue("damage dealt")
                ..release() 

            mBoard.getItem(row, 6)
                ..setStyle(true, false)
                ..setValue("damage taken")
                ..release() 

            mBoard.getItem(row, 7)
                ..setStyle(true, false)
                ..setValue("hp healed")
                ..release() 

            mBoard.getItem(row, 8)
                ..setStyle(true, false)
                ..setValue("gold gained")
                ..release() 

            mBoard.getItem(row, 9)
                ..setStyle(true, false)
                ..setValue("buildings razed")
                ..release() 

            mBoard.getItem(row, 10)
                ..setStyle(true, false)
                ..setValue("hydra's killed")
                ..release() 

        int index = 0
        for CPlayer p in playerList
            let row = 1 + index + (p.getTeam() == Team.TEAM2 ? 1: 0)
            rowToPlayer[row] = p
            playerToRow[p.getId()] = row


            mBoard.getItem(row, 5)
                ..setStyle(true, false)
                ..setValue(p.statDamageDealt.round().toString())
                ..release() 

            mBoard.getItem(row, 6)
                ..setStyle(true, false)
                ..setValue(p.statDamageTaken.round().toString())
                ..release() 

            mBoard.getItem(row, 7)
                ..setStyle(true, false)
                ..setValue(p.statHPHealed.round().toString())
                ..release() 

            mBoard.getItem(row, 8)
                ..setStyle(true, false)
                ..setValue(p.statGoldGained.toString())
                ..release() 

            mBoard.getItem(row, 9)
                ..setStyle(true, false)
                ..setValue(p.statBuildingsRazed.toString())
                ..release() 

            mBoard.getItem(row, 10)
                ..setStyle(true, false)
                ..setValue(p.statHydrasKilled.toString())
                ..release() 

            index++

        


//player class
public class CPlayer

    private player assocPlayer
    private int playerId
    
    private static constant team1HeroPlayers = new LinkedList<CPlayer>()
    private static constant team2HeroPlayers = new LinkedList<CPlayer>()

    protected static int team1HeroCount = 0
    protected static int team2HeroCount = 0

    private int unitKills = 0
    private int heroKills = 0
    private int deaths = 0
    private int assists = 0

    private real realGold = 0
    int statGoldGained = 0
    real statDamageDealt = 0
    real statDamageTaken = 0
    real statHPHealed = 0
    real statManaHealed = 0
    int statHydrasKilled = 0
    int statBuildingsRazed = 0

    protected static CPlayer array idToPlayer
    private Team team
    private PlayerType playertype

    construct(player p, Team t, PlayerType pType)
        objectCount++
        this.assocPlayer = p
        this.playerId = p.getId()
        this.team = t
        this.playertype = pType
        idToPlayer[this.playerId] = this
        if pType == PlayerType.HERO
            ScoreTable.addPlayer(this)
            if t == Team.TEAM1
                team1HeroPlayers.add(this)
                team1HeroCount++
            else
                team2HeroPlayers.add(this)
                team2HeroCount++

        

    function addUnitKill()
        this.unitKills++
        ScoreTable.updatePlayerUnitKills(this)

    function addHeroKill()
        this.heroKills++
        if this.team == Team.TEAM1
            ScoreTable.team1Kills++
        else if this.team == Team.TEAM2
            ScoreTable.team2Kills++

        ScoreTable.updatePlayerHeroKills(this)

    function addDeath()
        this.deaths++
        ScoreTable.updatePlayerDeaths(this)

    function addAssist()
        this.assists++
        ScoreTable.updatePlayerAssists(this)

    function getUnitKills() returns int
        return this.unitKills

    function getHeroKills() returns int
        return this.heroKills

    function getDeaths() returns int
        return this.deaths

    function getAssists() returns int
        return this.assists

    function toString() returns string
        return "Player = "+assocPlayer.getName()

    function getPlayer() returns player
        return this.assocPlayer
    
    function getId() returns integer
        return this.playerId

    function getTeam() returns Team
        return this.team

    function getPlayerType() returns PlayerType
        return this.playertype

    static function getAllyHeroPlayers(Team t) returns LinkedList<CPlayer>
        if t == Team.TEAM1
            return team1HeroPlayers
        else if t == Team.TEAM2
            return team2HeroPlayers
        else
            error("Must be used on TEAM1 or TEAM2")
            return null

    static function getAllyHeroPlayers(player p) returns LinkedList<CPlayer>
        return getAllyHeroPlayers(p.getCPlayer().getTeam())

    static function getEnemyHeroPlayers(Team t) returns LinkedList<CPlayer>
        if t == Team.TEAM1
            return team2HeroPlayers
        else if t == Team.TEAM2
            return team1HeroPlayers
        else
            error("Must be used on TEAM1 or TEAM2")
            return null

    static function getEnemyHeroPlayers(player p) returns LinkedList<CPlayer>
        return getEnemyHeroPlayers(p.getCPlayer().getTeam())

    static function getTeamHeroCount(Team t) returns int
        if t == Team.TEAM1
            return team1HeroCount
        else if t == Team.TEAM2
            return team2HeroCount
        else
            error("Must be used on TEAM1 or TEAM2")
            return -1

    static function invertTeam(Team t) returns Team
        if t == Team.TEAM1
            return Team.TEAM2
        else if t == Team.TEAM2
            return Team.TEAM1
        else
            error("Must be used on TEAM1 or TEAM2")
            return t

    protected static function initPlayers()
        var admin = false
        for i = 0 to MAX_HERO_COUNT-1
            player p = players[i]
            Team t = i <= HERO_PLAYER_TEAM_1_LAST ?Team.TEAM1:Team.TEAM2
            if( p.getSlotState()==PLAYER_SLOT_STATE_PLAYING )
                new CPlayer(p, t, PlayerType.HERO)
                if(not admin)
                    admin = true
                    adminPlayer = i
            else
                new CPlayer(p, t, PlayerType.NONE)
    

        new CPlayer(players[TEAM_PLAYER_TEAM_1], Team.TEAM1, PlayerType.ARMY)
        new CPlayer(players[TEAM_PLAYER_TEAM_2], Team.TEAM2, PlayerType.ARMY)

        new CPlayer(players[PLAYER_NEUTRAL_AGGRESSIVE], Team.NEUTRAL_HOSTILE, PlayerType.NEUTRAL)
        for i=PLAYER_NEUTRAL_AGGRESSIVE+1 to PLAYER_NEUTRAL_PASSIVE
            new CPlayer(players[i], Team.NEUTRAL_PASSIVE, PlayerType.NEUTRAL)
    
        for i=0 to TEAM_PLAYER_TEAM_2
            for j=0 to TEAM_PLAYER_TEAM_2

                if i < MAX_HERO_COUNT or i == TEAM_PLAYER_TEAM_1 or i == TEAM_PLAYER_TEAM_2
                    if j < MAX_HERO_COUNT or j == TEAM_PLAYER_TEAM_1 or j == TEAM_PLAYER_TEAM_2

                        if(i!=j and getCPlayer(i).getTeam()==getCPlayer(j).getTeam())
                            SetPlayerAllianceStateBJ(players[i],players[j], bj_ALLIANCE_ALLIED_VISION)
                    

    function addGoldEx(real gold)
        this.realGold += gold
        let intGold = this.realGold.toInt()
        this.addGoldEx(intGold)
        this.realGold -= intGold

    function addGoldEx(int gold)
        this.getPlayer().addGold(gold)
        this.statGoldGained += gold




init
    CPlayer.initPlayers()
    doAfter(0, () -> ScoreTable.create())