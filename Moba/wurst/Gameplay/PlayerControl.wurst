package PlayerControl

import LinkedList
import ErrorHandling
import ClosureTimers
import Constants
import Assets
/*
* This package handles players
*
*
*/

public int adminPlayer



public enum Team
    TEAM1
    TEAM2
    NEUTRAL_HOSTILE
    NEUTRAL_PASSIVE

public enum PlayerType
    HERO
    NONE
    ARMY
    NEUTRAL

public function player.getCPlayer() returns CPlayer
    return CPlayer.idToPlayer[this.getId()]

public function getCPlayer(int id) returns CPlayer
    return CPlayer.idToPlayer[id]

public class ScoreTable

    static protected multiboard mBoard

    protected static int team1Kills = 0
    protected static int team2Kills = 0

    static CPlayer array rowToPlayer
    static int array playerToRow

    static constant playerList = new LinkedList<CPlayer>

    static function updateHeader(boolean firstTeam)
        let row = (firstTeam ? 0 : CPlayer.team1HeroCount + 1)
        string teamName = firstTeam ?
        playercolors[MAX_HERO_COUNT].toColorString() +   "Green|r" :
        playercolors[MAX_HERO_COUNT+1].toColorString() + "Brown|r"
        
        mBoard.getItem(row, 0)
            ..setStyle(true, false)
            ..setValue(teamName)
            ..setWidth(0.08)
        mBoard.getItem(row, 1)
            ..setStyle(false, true)
            ..setValue("H")
            ..setIcon(Icons.bTNHelmutPurple)
        mBoard.getItem(row, 2)
            ..setStyle(false, true)
            ..setValue("D")
            ..setIcon(Icons.bTNSkeletonWarrior)
        mBoard.getItem(row, 3)
            ..setStyle(false, true)
            ..setValue("A")
            ..setIcon(Icons.bTNStatUp)
        mBoard.getItem(row, 4)
            ..setStyle(false, true)
            ..setValue("U")
            ..setIcon(Icons.bTNFootman)

    static function update()
        int index = 0
        mBoard.display(true)

        updateHeader(true)
        updateHeader(false)

        for CPlayer p in playerList
            let row = 1 + index + (p.getTeam() == Team.TEAM2 ? 1: 0)
            rowToPlayer[row] = p
            playerToRow[p.getId()] = row
            mBoard.getItem(row, 0)
                ..setStyle(true, false)
                ..setValue(p.getPlayer().getNameColored())
                ..setWidth(0.08)
            mBoard.getItem(row, 1)
                ..setStyle(true, false)
                ..setValue(p.getHeroKills().toString()) 
            mBoard.getItem(row, 2)
                ..setStyle(true, false)
                ..setValue(p.getDeaths().toString()) 
            mBoard.getItem(row, 3)
                ..setStyle(true, false)
                ..setValue(p.getAssists().toString()) 
            mBoard.getItem(row, 4)
                ..setStyle(true, false)
                ..setValue(p.getUnitKills().toString())
            index++

    static function updatePlayerHeroKills(CPlayer p)
        let row = playerToRow[p.getId()]
        mBoard.getItem(row, 1)
            ..setStyle(true, false)
            ..setValue(p.getHeroKills().toString()) 

        mBoard.setTitle("Score: "+
        playercolors[MAX_HERO_COUNT].toColorString()+team1Kills.toString()+"|r / "+
        playercolors[MAX_HERO_COUNT+1].toColorString()+team2Kills.toString()+"|r"  )

    static function updatePlayerDeaths(CPlayer p)
        let row = playerToRow[p.getId()]
        mBoard.getItem(row, 2)
            ..setStyle(true, false)
            ..setValue(p.getDeaths().toString()) 

    static function updatePlayerAssists(CPlayer p)
        let row = playerToRow[p.getId()]
        mBoard.getItem(row, 3)
            ..setStyle(true, false)
            ..setValue(p.getAssists().toString()) 
            
    static function updatePlayerUnitKills(CPlayer p)
        let row = playerToRow[p.getId()]
        mBoard.getItem(row, 4)
            ..setStyle(true, false)
            ..setValue(p.getUnitKills().toString())

    static function create()
        mBoard = CreateMultiboard()
            ..setColumnCount(5)
            ..setRowCount(2)
            ..display(true)
            ..minimalize(true)
        doAfter(0.02, () -> mBoard.minimalize(false))

        mBoard.setItemsStyle(true, false)
        mBoard.setTitle("Score: "+playercolors[MAX_HERO_COUNT].toColorString()+"0|r / "+playercolors[MAX_HERO_COUNT+1].toColorString()+"0|r"  )


    static function addPlayer(CPlayer p)
        doAfter(0.01, () -> (begin
            playerList.add(p)
            playerList.sortWith( (CPlayer p1, CPlayer p2) -> (p1.getId() - p2.getId()) )
            mBoard.setRowCount(mBoard.getRowCount()+1)
            update()
        end))

        


//player class
public class CPlayer

    private player assocPlayer
    private int playerId
    
    private static constant team1HeroPlayers = new LinkedList<CPlayer>()
    private static constant team2HeroPlayers = new LinkedList<CPlayer>()

    protected static int team1HeroCount = 0
    protected static int team2HeroCount = 0

    private int unitKills = 0
    private int heroKills = 0
    private int deaths = 0
    private int assists = 0

    protected static CPlayer array idToPlayer
    private Team team
    private PlayerType playertype

    construct(player p, Team t, PlayerType pType)
        objectCount++
        this.assocPlayer = p
        this.playerId = p.getId()
        this.team = t
        this.playertype = pType
        idToPlayer[this.playerId] = this
        if pType == PlayerType.HERO
            ScoreTable.addPlayer(this)
            if t == Team.TEAM1
                team1HeroPlayers.add(this)
                team1HeroCount++
            else
                team2HeroPlayers.add(this)
                team2HeroCount++

        

    function addUnitKill()
        this.unitKills++
        ScoreTable.updatePlayerUnitKills(this)

    function addHeroKill()
        this.heroKills++
        if this.team == Team.TEAM1
            ScoreTable.team1Kills++
        else if this.team == Team.TEAM2
            ScoreTable.team2Kills++

        ScoreTable.updatePlayerHeroKills(this)

    function addDeath()
        this.deaths++
        ScoreTable.updatePlayerDeaths(this)

    function addAssist()
        this.assists++
        ScoreTable.updatePlayerAssists(this)

    function getUnitKills() returns int
        return this.unitKills

    function getHeroKills() returns int
        return this.heroKills

    function getDeaths() returns int
        return this.deaths

    function getAssists() returns int
        return this.assists

    function toString() returns string
        return "Player = "+assocPlayer.getName()

    function getPlayer() returns player
        return this.assocPlayer
    
    function getId() returns integer
        return this.playerId

    function getTeam() returns Team
        return this.team

    function getPlayerType() returns PlayerType
        return this.playertype

    static function getAllyHeroPlayers(Team t) returns LinkedList<CPlayer>
        if t == Team.TEAM1
            return team1HeroPlayers
        else if t == Team.TEAM2
            return team2HeroPlayers
        else
            error("Must be used on TEAM1 or TEAM2")
            return null

    static function getAllyHeroPlayers(player p) returns LinkedList<CPlayer>
        return getAllyHeroPlayers(p.getCPlayer().getTeam())

    static function getEnemyHeroPlayers(Team t) returns LinkedList<CPlayer>
        if t == Team.TEAM1
            return team2HeroPlayers
        else if t == Team.TEAM2
            return team1HeroPlayers
        else
            error("Must be used on TEAM1 or TEAM2")
            return null

    static function getEnemyHeroPlayers(player p) returns LinkedList<CPlayer>
        return getEnemyHeroPlayers(p.getCPlayer().getTeam())

    static function getTeamHeroCount(Team t) returns int
        if t == Team.TEAM1
            return team1HeroCount
        else if t == Team.TEAM2
            return team2HeroCount
        else
            error("Must be used on TEAM1 or TEAM2")
            return -1

    static function invertTeam(Team t) returns Team
        if t == Team.TEAM1
            return Team.TEAM2
        else if t == Team.TEAM2
            return Team.TEAM1
        else
            error("Must be used on TEAM1 or TEAM2")
            return t

    protected static function initPlayers()
        var admin = false
        for i = 0 to MAX_HERO_COUNT-1
            player p = players[i]
            Team t = i <= (MAX_HERO_COUNT/2)-1 ?Team.TEAM1:Team.TEAM2
            if( p.getSlotState()==PLAYER_SLOT_STATE_PLAYING )
                new CPlayer(p, t, PlayerType.HERO)
                if(not admin)
                    admin = true
                    adminPlayer = i
            else
                new CPlayer(p, t, PlayerType.NONE)
    

        new CPlayer(players[MAX_HERO_COUNT], Team.TEAM1, PlayerType.ARMY)
        new CPlayer(players[MAX_HERO_COUNT+1], Team.TEAM2, PlayerType.ARMY)

        new CPlayer(players[PLAYER_NEUTRAL_AGGRESSIVE], Team.NEUTRAL_HOSTILE, PlayerType.NEUTRAL)
        for i=PLAYER_NEUTRAL_AGGRESSIVE+1 to PLAYER_NEUTRAL_PASSIVE
            new CPlayer(players[i], Team.NEUTRAL_PASSIVE, PlayerType.NEUTRAL)
    
        for i=0 to MAX_HERO_COUNT+1
            for j=0 to MAX_HERO_COUNT+1
                if(i!=j and getCPlayer(i).getTeam()==getCPlayer(j).getTeam())
                    SetPlayerAllianceStateBJ(players[i],players[j], bj_ALLIANCE_ALLIED_VISION)
                    


init
    CPlayer.initPlayers()
    doAfter(0, () -> ScoreTable.create())