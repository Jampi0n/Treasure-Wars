package BuildingTypes

import StandardTextTags
import PlayerControl
import ClosureTimers
import initlater WaveSpawn
import initlater UnitTypeConfig
import PathUnit
import Path
import General
import BuffTypeConfig
import UnitWrapper
import ErrorHandling
import HeroControl
import Buff
import ObjectEditingPreset
import SoundUtils
import Assets
import LinkedList
import OnAttack

public constant int ALTAR = 'h002'
public constant int ARCANE_SANCTUM = 'h008'
public constant int ARCANE_VAULT = 'h005'
public constant int BARRACKS = 'h003'
public constant int BARRACKS_REBUILD = 'h01E'
public constant int BASE_TOWER = 'h009'
public constant int BLACKSMITH = 'h004'
public constant int CASTLE = 'h001'
public constant int FARM = 'h007'
public constant int OUTER_TOWER = 'h016'
public constant int GATE_TOWER = 'h006'
public constant int HERO_TOWER = 'n000'
public constant int WORKSHOP = 'h00A'
public constant int WORKSHOP_REBUILD = 'h01A'

public boolean array barracksAliveTeam1 = [true, true, true]
public boolean array barracksAliveTeam2 = [true, true, true]

public boolean array workshopAliveTeam1 = [true, true]
public boolean array workshopAliveTeam2 = [true, true]

public boolean array blacksmithAliveTeam1 = [true, true]
public boolean array blacksmithAliveTeam2 = [true, true]

public int array UPGRADES = ['R000', 'R001', 'R002', 'R003']
public int array UPGRADE_ITEMS = ['I002', 'I003', 'I004', 'I005']

int farmsTeam1 = 26
int farmsTeam2 = farmsTeam1

constant real BARRACKS_REBUILD_TIME = -1 //300 // -1 means the building cannot be rebuilt
constant real WORKSHOP_REBUILD_TIME = -1 //60 // -1 means the building cannot be rebuilt

constant int SHOP_SHARING = 'Aall'

constant int TOWER_FOCUS_MAX_STACKS = 5
constant int TOWER_FOCUS_ARMOR = 20
constant real TOWER_FOCUS_DUR = 5
constant int TOWER_FOCUS_ABILITY_ID = 'A00O'

BuffType buffTowerFocus

constant int TOWER_FOCUS_BUFF_ID = compiletime(createAuraBuff("Tower Focus", "This unit was hit by a Tower; it has reduced armor.", Icons.bTNHumanWatchTower))
constant int TOWER_FOCUS_ABILTIY_ID = compiletime(createNegativeBuffAbility(1, TOWER_FOCUS_BUFF_ID, "", "chest"))

constant SOUND_UPGRADE = new SoundDefinition(Sounds.blacksmithWhat1, false, true)
constant SOUND_REPAIR_1 = new SoundDefinition(Sounds.peonRepair1, false, true)
constant SOUND_REPAIR_2 = new SoundDefinition(Sounds.peonRepair2, false, true)
constant SOUND_REPAIR_3 = new SoundDefinition(Sounds.peonRepair3, false, true)
constant SOUND_SIEGE_ENGINE = new SoundDefinition(Sounds.steamTankWhat3, false, true)
constant SOUND_MORTAR_TEAM = new SoundDefinition(Sounds.mortarTeamReady1, false, true)
constant SOUND_TOME = new SoundDefinition(Sounds.tomes, false, true)
constant SOUND_CALL_TO_ARMS = new SoundDefinition(Sounds.humanCallToArmsWhat1, false, true)

let a = "|cffffcc00gdg|r"

enum VictoryState
	UNDECIDED
	WIN_TEAM1
	WIN_TEAM2

VictoryState victoryState


int birth = 0
group militiaTeam1 = CreateGroup()
group militiaTeam2 = CreateGroup()
boolean removeMilitaTeam1 = true
boolean removeMilitaTeam2 = true


function setVictoryState(VictoryState newState)
	victoryState = newState

	if newState != VictoryState.UNDECIDED
		gameOver = true

		//stops heroes from reviving
		for i = 0 to MAX_HERO_COUNT-1
			for Hero hero in CPlayer.getPlayerHeroes(i)
				hero.destroyTimer()


		let g = CreateGroup()
		for i = 0 to bj_MAX_PLAYER_SLOTS-1
			GroupEnumUnitsOfPlayer(g, players[i], null)
			unit u
			while true
				u = FirstOfGroup(g)
				if u == null
					break
				g.removeUnit(u)
				u.pause()

		g.destr()
				 
		boolean winTeam1
		string teamName
		if newState == VictoryState.WIN_TEAM1
			teamName = Player(TEAM_PLAYER_TEAM_1).getFullColoredName()
			winTeam1 = true
		else
			teamName = Player(TEAM_PLAYER_TEAM_2).getFullColoredName()
			winTeam1 = false


		printTimed("Team "+teamName+" has destroyed the enemy castle and wins the game!", 60)

		//ScoreTable.extendToStatTable()
		stopSpawning()
		StatTable.create()

		printTimed("You can now view player stats on the Stats-Multiboard.", 60)

		if false
			doAfter(5, -> (begin
				let winList = CPlayer.getAllyHeroPlayers(winTeam1 ? players[TEAM_PLAYER_TEAM_1] : players[TEAM_PLAYER_TEAM_2] ) 
				let defeatList = CPlayer.getAllyHeroPlayers(winTeam1 ? players[TEAM_PLAYER_TEAM_2] : players[TEAM_PLAYER_TEAM_1] )

				for CPlayer p in winList
					CustomVictoryBJ( p.getPlayer() , false, true )

				for CPlayer p in defeatList
					CustomDefeatBJ( p.getPlayer(), "Your team's castle has been destroyed." )
			end))


		


function onBuildingDeath()
	let building = GetTriggerUnit()
	if building.isType(UNIT_TYPE_STRUCTURE)

		let unitId = building.getTypeId()
		let killer = GetKillingUnit().getOwner()

		int bounty = 0
		int globalBounty = 0

		if unitId == FARM
			bounty = 50
			globalBounty = 50
			if building.getOwner().getId() == TEAM_PLAYER_TEAM_1
				farmsTeam1--
			else
				farmsTeam2--

		else if unitId == OUTER_TOWER
			bounty = 75
			globalBounty = 75

		else if unitId == GATE_TOWER
			bounty = 100
			globalBounty = 100

		else if unitId == BASE_TOWER
			bounty = 100
			globalBounty = 100

		else if unitId == BARRACKS
			bounty = 250
			globalBounty = 250

			if BARRACKS_REBUILD_TIME != -1
				let newBuilding = createUnit(building.getOwner(), BARRACKS_REBUILD, building.getPos(), (270).fromDeg())
					..setAnimation("birth")
					..setTimeScale(60/BARRACKS_REBUILD_TIME)
					..setHP(0.5)
				UnitAddType(newBuilding, UNIT_TYPE_ANCIENT)
				

				for i=0 to 2
					
					let count = (BARRACKS_REBUILD_TIME / 0.1 +0.5).toInt()

					if(building==udg_GreenBarracks[i])
						udg_GreenBarracks[i] = newBuilding
						barracksAliveTeam1[i] = false
						doPeriodicallyCounted(0.1, count, (CallbackCounted cb) -> (begin
							if cb.isLast()
								let owner = newBuilding.getOwner()
								let pos = newBuilding.getPos()
								newBuilding.remove()
								udg_GreenBarracks[i] = createUnit(owner, BARRACKS, pos, (270).fromDeg())
								barracksAliveTeam1[i] = true
							else
								newBuilding.setHP(max(0.5, (1-cb.getCount()/count) * newBuilding.getMaxHP() ) )
						end))
					else if(building==udg_BrownBarracks[i])
						udg_BrownBarracks[i] = newBuilding
						barracksAliveTeam2[i] = false
						doPeriodicallyCounted(0.1, count, (CallbackCounted cb) -> (begin
							if cb.isLast()
								let owner = newBuilding.getOwner()
								let pos = newBuilding.getPos()
								newBuilding.remove()
								udg_BrownBarracks[i] = createUnit(owner, BARRACKS, pos, (270).fromDeg())
								barracksAliveTeam2[i] = true
							else
								newBuilding.setHP(max(0.5, (1-cb.getCount()/count) * newBuilding.getMaxHP() ) )
						end))
			else
				for i=0 to 2
					if(building==udg_GreenBarracks[i])
						udg_GreenBarracks[i] = null
						barracksAliveTeam1[i] = false
					else if(building==udg_BrownBarracks[i])
						udg_BrownBarracks[i] = null
						barracksAliveTeam2[i] = false

		else if unitId == WORKSHOP
			bounty = 150
			globalBounty = 150

			if WORKSHOP_REBUILD_TIME != -1
				let newBuilding = createUnit(building.getOwner(), WORKSHOP_REBUILD, building.getPos(), (270).fromDeg())
					..setAnimation("birth")
					..setTimeScale(0)
					..setHP(0.5)
				UnitAddType(newBuilding, UNIT_TYPE_ANCIENT)

				for i=0 to 1
					if(building==udg_GreenWorkShop[i])
						udg_GreenWorkShop[i] = newBuilding
						workshopAliveTeam1[i] = false

					else if(building==udg_BrownWorkShop[i])
						workshopAliveTeam2[i] = false
						udg_BrownWorkShop[i] = newBuilding
			else
				for i=0 to 1
					if(building==udg_GreenWorkShop[i])
						udg_GreenWorkShop[i] = null
						workshopAliveTeam1[i] = false

					else if(building==udg_BrownWorkShop[i])
						workshopAliveTeam2[i] = false
						udg_BrownWorkShop[i] = null
					


		else if unitId == ARCANE_VAULT
			bounty = 100
			globalBounty = 100

		else if unitId == BLACKSMITH
			bounty = 150
			globalBounty = 150

			for i=0 to 1
				if(building==udg_GreenBlacksmith[i])
					blacksmithAliveTeam1[i] = false

				else if(building==udg_BrownBlacksmith[i])
					blacksmithAliveTeam2[i] = false


		else if unitId == CASTLE

			if victoryState == VictoryState.UNDECIDED
				if building.getOwner() == players[TEAM_PLAYER_TEAM_1]
					setVictoryState(VictoryState.WIN_TEAM2)
				else if building.getOwner() == players[TEAM_PLAYER_TEAM_2]
					setVictoryState(VictoryState.WIN_TEAM1)
				else
					error("Castle killed for player "+building.getOwner().getId().toString())
			
		if bounty + globalBounty > 0
			let team = building.getOwner().getCPlayer().getTeam()

			if killer.getCPlayer().getTeam() == CPlayer.invertTeam(team)
				killer.getCPlayer().addGoldEx(bounty + globalBounty)
				killer.getCPlayer().statBuildingsRazed++
				createGoldBountyTextTag(building, bounty + globalBounty, killer)

			
			for CPlayer cp in CPlayer.getEnemyHeroPlayers(team)
				let p = cp.getPlayer()
				if cp.getTeam() == CPlayer.invertTeam(team) and p!=killer
					cp.addGoldEx(globalBounty)
					createGoldBountyTextTag(building, globalBounty, p)



function onBuildingAbility()
	let itemTypeId = GetSoldItem().getTypeId()
	let building = GetTriggerUnit()
	let hero = GetBuyingUnit()
	let heroPos = hero.getPos3Zero()
	bool buildingAbilityUsed = true
	if itemTypeId == 'I000' //Rebuild Workshop
		doPeriodicallyCounted(1, 5, (CallbackCounted cb) -> begin
			let r = GetRandomInt(1, 3)
			if r == 1
				SOUND_REPAIR_1.playOnPoint(heroPos).snd.setVolume(350)
			else if r == 2
				SOUND_REPAIR_2.playOnPoint(heroPos).snd.setVolume(350)
			else
				SOUND_REPAIR_3.playOnPoint(heroPos).snd.setVolume(350)
		end)
		
		building.removeAbility(SHOP_SHARING)

		let count = (WORKSHOP_REBUILD_TIME / 0.1 +0.5).toInt()

		building.setTimeScale(60/WORKSHOP_REBUILD_TIME)

		doPeriodicallyCounted(0.1, count, (CallbackCounted cb) -> (begin
			if cb.isLast()
				UnitRemoveType(building, UNIT_TYPE_ANCIENT)
				for i = 0 to 1
					if building == udg_BrownWorkShop[i]
						workshopAliveTeam2[i] = true
						let owner = building.getOwner()
						let pos = building.getPos()
						building.remove()
						udg_BrownWorkShop[i] = createUnit(owner, WORKSHOP, pos, (270).fromDeg())
						break
					if building == udg_GreenWorkShop[i]
						workshopAliveTeam1[i] = true
						let owner = building.getOwner()
						let pos = building.getPos()
						building.remove()
						udg_GreenWorkShop[i] = createUnit(owner, WORKSHOP, pos, (270).fromDeg())
						break
			else
				building.setHP(max(0.5, (1-cb.getCount()/count) * building.getMaxHP() ) )
		end))
	else if itemTypeId == 'I001' //Siege Engine
		SOUND_SIEGE_ENGINE.playOnPoint(heroPos).snd.setVolume(150)
		if building == udg_GreenWorkShop[0]
			let spawnedUnit = spawnUnit(true, TANK, gg_rct_GreenWorkShopTop.getCenter())
			let pathUnit = new PathUnit(spawnedUnit)
			pathUnit.setPathFirst(GREEN_TOP)
			addLaneUnitCount(Team.TEAM1, Lane.TOP, 1)
		else if building == udg_GreenWorkShop[1]
			let spawnedUnit = spawnUnit(true, TANK, gg_rct_GreenWorkShopBot.getCenter())
			let pathUnit = new PathUnit(spawnedUnit)
			pathUnit.setPathFirst(GREEN_BOT)
			addLaneUnitCount(Team.TEAM1, Lane.BOT, 1)
		else if building == udg_BrownWorkShop[0]
			let spawnedUnit = spawnUnit(false, TANK, gg_rct_BrownWorkShopTop.getCenter())
			let pathUnit = new PathUnit(spawnedUnit)
			pathUnit.setPathFirst(BROWN_TOP)
			addLaneUnitCount(Team.TEAM2, Lane.TOP, 1)
		else if building == udg_BrownWorkShop[1]
			let spawnedUnit = spawnUnit(false, TANK, gg_rct_BrownWorkShopBot.getCenter())
			let pathUnit = new PathUnit(spawnedUnit)
			pathUnit.setPathFirst(BROWN_BOT)
			addLaneUnitCount(Team.TEAM2, Lane.BOT, 1)

	else if itemTypeId == 'I007' //Mortar Team
		SOUND_MORTAR_TEAM.playOnPoint(heroPos).snd.setVolume(150)
		if building == udg_GreenWorkShop[0]
			let spawnedUnit = spawnUnit(true, MORTAR_TEAM, gg_rct_GreenWorkShopTop.getCenter())
			let pathUnit = new PathUnit(spawnedUnit)
			pathUnit.setPathFirst(GREEN_TOP)
			addLaneUnitCount(Team.TEAM1, Lane.TOP, 1)
		else if building == udg_GreenWorkShop[1]
			let spawnedUnit = spawnUnit(true, MORTAR_TEAM, gg_rct_GreenWorkShopBot.getCenter())
			let pathUnit = new PathUnit(spawnedUnit)
			pathUnit.setPathFirst(GREEN_BOT)
			addLaneUnitCount(Team.TEAM1, Lane.BOT, 1)
		else if building == udg_BrownWorkShop[0]
			let spawnedUnit = spawnUnit(false, MORTAR_TEAM, gg_rct_BrownWorkShopTop.getCenter())
			let pathUnit = new PathUnit(spawnedUnit)
			pathUnit.setPathFirst(BROWN_TOP)
			addLaneUnitCount(Team.TEAM2, Lane.TOP, 1)
		else if building == udg_BrownWorkShop[1]
			let spawnedUnit = spawnUnit(false, MORTAR_TEAM, gg_rct_BrownWorkShopBot.getCenter())
			let pathUnit = new PathUnit(spawnedUnit)
			pathUnit.setPathFirst(BROWN_BOT)
			addLaneUnitCount(Team.TEAM2, Lane.BOT, 1)
		

	else if itemTypeId == 'I002' //Melee Attack
		SOUND_UPGRADE.playOnPoint(heroPos).snd.setVolume(150)
		let current = GetPlayerTechCount(building.getOwner(), 'R000', true)
		if current == 4
			SetPlayerTechMaxAllowed(building.getOwner(), itemTypeId, 0)
		SetPlayerTechResearched(building.getOwner(), 'R000', current + 1)

		let g = CreateGroup()
		GroupEnumUnitsOfPlayer(g, building.getOwner(), null)
		unit u
		while(true)
			u = FirstOfGroup(g)
			if u == null
				break
			g.removeUnit(u)
			if not u.isType(UNIT_TYPE_STRUCTURE)
				u.wrapper().updateBaseStatsUnits()
		g.destr()

	else if itemTypeId == 'I003' //Ranged Attack
		SOUND_UPGRADE.playOnPoint(heroPos).snd.setVolume(150)
		let current = GetPlayerTechCount(building.getOwner(), 'R001', true)
		if current == 4
			SetPlayerTechMaxAllowed(building.getOwner(), itemTypeId, 0)
		SetPlayerTechResearched(building.getOwner(), 'R001', current + 1)

		let g = CreateGroup()
		GroupEnumUnitsOfPlayer(g, building.getOwner(), null)
		unit u
		while(true)
			u = FirstOfGroup(g)
			if u == null
				break
			g.removeUnit(u)
			if not u.isType(UNIT_TYPE_STRUCTURE)
				u.wrapper().updateBaseStatsUnits()
		g.destr()

	else if itemTypeId == 'I004' //Heavy Armor
		SOUND_UPGRADE.playOnPoint(heroPos).snd.setVolume(150)
		let current = GetPlayerTechCount(building.getOwner(), 'R002', true)
		if current == 4
			SetPlayerTechMaxAllowed(building.getOwner(), itemTypeId, 0)
		SetPlayerTechResearched(building.getOwner(), 'R002', current + 1)

		let g = CreateGroup()
		GroupEnumUnitsOfPlayer(g, building.getOwner(), null)
		unit u
		while(true)
			u = FirstOfGroup(g)
			if u == null
				break
			g.removeUnit(u)
			if not u.isType(UNIT_TYPE_STRUCTURE)
				u.wrapper().updateBaseStatsUnits()
		g.destr()

	else if itemTypeId == 'I005' //Light Armor
		SOUND_UPGRADE.playOnPoint(heroPos).snd.setVolume(150)
		let current = GetPlayerTechCount(building.getOwner(), 'R003', true)
		if current == 4
			SetPlayerTechMaxAllowed(building.getOwner(), itemTypeId, 0)
		SetPlayerTechResearched(building.getOwner(), 'R003', current + 1)

		let g = CreateGroup()
		GroupEnumUnitsOfPlayer(g, building.getOwner(), null)
		unit u
		while(true)
			u = FirstOfGroup(g)
			if u == null
				break
			g.removeUnit(u)
			if not u.isType(UNIT_TYPE_STRUCTURE)
				u.wrapper().updateBaseStatsUnits()
		g.destr()

	else if itemTypeId == 'I006' //Call to Arms
		SOUND_CALL_TO_ARMS.playOnPoint(heroPos).snd.setVolume(350)
		if building.getOwner().getCPlayer().getTeam() == Team.TEAM1
			removeMilitaTeam1 = false
			for i = 0 to 15
				let spawnedUnit = spawnUnit(true, MILITIA_DEFEND, gg_rct_GreenCastle.getCenter())
				militiaTeam1.addUnit(spawnedUnit)
			doAfter(45, () -> (begin
				removeMilitaTeam1 = true
				ForGroup(militiaTeam1, () -> (begin
					let u = GetEnumUnit()
					u.addBuff(u, -1, DISARMED, 1)
					u.issuePointOrder("move", gg_rct_GreenCastle.getCenter())
					if gg_rct_GreenMilitiaDespawn.contains(u.getPos())
						militiaTeam1.removeUnit(u)
						u.remove()
				end))
			end))
			doAfter(50, () -> (begin
				removeMilitaTeam1 = true
				ForGroup(militiaTeam1, () -> (begin
					let u = GetEnumUnit()
					u.addBuff(u, -1, DISARMED, 1)
					u.issuePointOrder("move", gg_rct_GreenCastle.getCenter())
					if gg_rct_GreenMilitiaDespawn.contains(u.getPos())
						militiaTeam1.removeUnit(u)
						u.remove()
				end))
			end))
			doAfter(89, () -> (begin
				ForGroup(militiaTeam1, () -> (begin
					let u = GetEnumUnit()
					militiaTeam1.removeUnit(u)
					u.remove()
				end))
			end))

		else if building.getOwner().getCPlayer().getTeam() == Team.TEAM2
			removeMilitaTeam2 = false
			for i = 0 to 15
				let spawnedUnit = spawnUnit(false, MILITIA_DEFEND, gg_rct_BrownCastle.getCenter())
				militiaTeam2.addUnit(spawnedUnit)
			doAfter(45, () -> (begin
				removeMilitaTeam2 = true
				ForGroup(militiaTeam2, () -> (begin
					let u = GetEnumUnit()
					u.addBuff(u, -1, DISARMED, 1)
					u.issuePointOrder("move", gg_rct_BrownCastle.getCenter())
					if gg_rct_BrownMilitiaDespawn.contains(u.getPos())
						militiaTeam2.removeUnit(u)
						u.remove()
				end))
			end))
			doAfter(50, () -> (begin
				removeMilitaTeam2 = true
				ForGroup(militiaTeam2, () -> (begin
					let u = GetEnumUnit()
					u.addBuff(u, -1, DISARMED, 1)
					u.issuePointOrder("move", gg_rct_BrownCastle.getCenter())
					if gg_rct_BrownMilitiaDespawn.contains(u.getPos())
						militiaTeam2.removeUnit(u)
						u.remove()
				end))
			end))
			doAfter(89, () -> (begin
				ForGroup(militiaTeam2, () -> (begin
					let u = GetEnumUnit()
					militiaTeam2.removeUnit(u)
					u.remove()
				end))
			end))


	else if itemTypeId == 'I008' //Teleport Top
		vec2 targetPos
		if building.getOwner().getCPlayer().getTeam() == Team.TEAM1
			targetPos = gg_rct_GreenPortTop.getCenter()
		else
			targetPos = gg_rct_BrownPortTop.getCenter()

		new ChannelTeleport(hero, targetPos, 3, 200)

	else if itemTypeId == 'I009' //Teleport Middle
		vec2 targetPos
		if building.getOwner().getCPlayer().getTeam() == Team.TEAM1
			targetPos = gg_rct_GreenPortMid.getCenter()
		else
			targetPos = gg_rct_BrownPortMid.getCenter()

		new ChannelTeleport(hero, targetPos, 3, 200)

	else if itemTypeId == 'I00A' //Teleport Bottom
		vec2 targetPos
		if building.getOwner().getCPlayer().getTeam() == Team.TEAM1
			targetPos = gg_rct_GreenPortBot.getCenter()
		else
			targetPos = gg_rct_BrownPortBot.getCenter()

		new ChannelTeleport(hero, targetPos, 3, 200)

	//stats
	
	else  if itemTypeId == 'I00B' //Strength
		hero.wrapper().addStatAbsoluteBonus(Stat.STR, 1)
		SOUND_TOME.playOnPoint(heroPos).snd.setVolume(150)
		hero.addEffect(Abilities.aIimTarget, "chest").destr()
	else if itemTypeId == 'I00C' //Willpower
		hero.wrapper().addStatAbsoluteBonus(Stat.AGI, 1)
		SOUND_TOME.playOnPoint(heroPos).snd.setVolume(150)
		hero.addEffect(Abilities.aIimTarget, "chest").destr()
	else if itemTypeId == 'I00D' //Intelligenace
		hero.wrapper().addStatAbsoluteBonus(Stat.INT, 1)
		SOUND_TOME.playOnPoint(heroPos).snd.setVolume(150)
		hero.addEffect(Abilities.aIimTarget, "chest").destr()
	else if itemTypeId == 'I00E' //Armor
		hero.wrapper().addStatAbsoluteBonus(Stat.AR, 1)
		SOUND_TOME.playOnPoint(heroPos).snd.setVolume(150)
		hero.addEffect(Abilities.aIimTarget, "chest").destr()
	else if itemTypeId == 'I00F' //Attack Speed
		hero.wrapper().addStatAbsoluteBonus(Stat.AS, 1)
		SOUND_TOME.playOnPoint(heroPos).snd.setVolume(150)
		hero.addEffect(Abilities.aIimTarget, "chest").destr()
	else if itemTypeId == 'I00G' //Hit Points
		hero.wrapper().addStatAbsoluteBonus(Stat.HP, 15)
		SOUND_TOME.playOnPoint(heroPos).snd.setVolume(150)
		hero.addEffect(Abilities.aIimTarget, "chest").destr()
	else if itemTypeId == 'I00H' //Mana Point
		hero.wrapper().addStatAbsoluteBonus(Stat.MP, 10)
		SOUND_TOME.playOnPoint(heroPos).snd.setVolume(150)
		hero.addEffect(Abilities.aIimTarget, "chest").destr()
	else if itemTypeId == 'I00I' //Hit Point Regeneration
		hero.wrapper().addStatAbsoluteBonus(Stat.HR, 3)
		SOUND_TOME.playOnPoint(heroPos).snd.setVolume(150)
		hero.addEffect(Abilities.aIimTarget, "chest").destr()
	else if itemTypeId == 'I00J' //Mana Point Regeneration
		hero.wrapper().addStatAbsoluteBonus(Stat.MR, 1)
		SOUND_TOME.playOnPoint(heroPos).snd.setVolume(150)
		hero.addEffect(Abilities.aIimTarget, "chest").destr()
	else
		buildingAbilityUsed = false

	if buildingAbilityUsed
		standardTextTag(hero.getPos(), GetObjectName(itemTypeId)).setColor(255, 220, 0, 255)
		GetSoldItem().remove()



function onMilitiaDespawn()
	let u = GetEnumUnit()
	if u.getTypeId() == MILITIA_DEFEND
		if removeMilitaTeam1
			if u.getOwner().getCPlayer().getTeam() == Team.TEAM1 and gg_rct_GreenMilitiaDespawn.contains(u.getPos())
				militiaTeam1.removeUnit(u)
				u.remove()
		if removeMilitaTeam2
			if u.getOwner().getCPlayer().getTeam() == Team.TEAM2 and gg_rct_BrownMilitiaDespawn.contains(u.getPos())
				militiaTeam2.removeUnit(u)
				u.remove()

constant HOME_BUFF_ID = compiletime(createAuraBuff("Protected", "This unit is protected; it is invulnerable and is being healed.", Icons.bTNInvulnerable))
constant HOME_ABILTIY_ID = compiletime(createPositiveBuffAbility(1, HOME_BUFF_ID, "Abilities\\Spells\\Human\\DivineShield\\DivineShieldTarget.mdl", ""))
constant BUFF_HOME = new BuffType(true, true)

function homeInvulnerability()
	group nearby = CreateGroup()
	nearby.enumUnitsInRange(gg_rct_GreenAltar.getCenter(), 800)

	while(not nearby.isEmpty())
		unit target = FirstOfGroup(nearby)
		nearby.removeUnit(target)
		if not target.isType(UNIT_TYPE_STRUCTURE) and IsUnitAlly(target, players[TEAM_PLAYER_TEAM_1]) 
			target.addBuff( target, 0.5, UNTARGETABLE, 1)
			target.addBuff( target, 0.5, BUFF_HOME, 1)

	nearby.destr()

	nearby = CreateGroup()
	nearby.enumUnitsInRange(gg_rct_BrownAltar.getCenter(), 800)

	while(not nearby.isEmpty())
		unit target = FirstOfGroup(nearby)
		nearby.removeUnit(target)
		if not target.isType(UNIT_TYPE_STRUCTURE) and IsUnitAlly(target, players[TEAM_PLAYER_TEAM_2]) 
			target.addBuff( target, 0.5, UNTARGETABLE, 1)
			target.addBuff( target, 0.5, BUFF_HOME, 1)

	nearby.destr()

public function income()
	int factorTeam1 = 5
	int factorTeam2 = 5

	/*let difference = CPlayer.getTeamHeroCount(Team.TEAM1) - CPlayer.getTeamHeroCount(Team.TEAM2)

	if difference > 0
		factorTeam1 -= max(1, difference)
	else if difference < 0
		factorTeam2 -= max(1, -difference)*/

	for i = 0 to MAX_HERO_COUNT-1
		let farms = i <= HERO_PLAYER_TEAM_1_LAST ? farmsTeam1 : farmsTeam2
		let factor = i <= HERO_PLAYER_TEAM_1_LAST ? factorTeam1 : factorTeam2


		let gold = factor * farms
		printTimedToPlayer("You get |cffffcc00"+gold.toString()+"|r gold (|cffffcc00+"+factor.toString()+"|r for every Farm).", 8, players[i])
		getCPlayer(i).addGoldEx(gold)
	

init
	CreateTrigger()
		..addAction(function onBuildingDeath)
		..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)

	CreateTrigger()
		..addAction(function onBuildingAbility)
		..registerAnyUnitEvent(EVENT_PLAYER_UNIT_SELL_ITEM)

	//region reg = CreateRegion()
	//reg.addRect(gg_rct_GreenMilitiaDespawn)
	//reg.addRect(gg_rct_BrownMilitiaDespawn)

	CreateTrigger()
		//..addAction(function onMilitiaDespawn)
		//..registerEnterRegion(reg, null)
	..registerTimerEvent(0.1, true)
	..addAction()->
		ForGroup(militiaTeam1, function onMilitiaDespawn)
		ForGroup(militiaTeam2, function onMilitiaDespawn)

	var abilityList = new LinkedList<int>
	..add(HOME_ABILTIY_ID)
	BUFF_HOME.setup(abilityList, HOME_BUFF_ID)

	CreateTrigger()
		..registerTimerEvent(0.2, true)
		..addAction(function homeInvulnerability)



	buffTowerFocus = new BuffType(false, true)

	abilityList = new LinkedList<int>
	..add(TOWER_FOCUS_ABILTIY_ID)
	buffTowerFocus.setup(abilityList, TOWER_FOCUS_BUFF_ID)

	buffTowerFocus.addFirstFunction( (Buff whichBuff) -> (begin
		whichBuff.getTarget().wrapper()
			..addStatRelativeBonus(Stat.AR, -TOWER_FOCUS_ARMOR * 10)
		whichBuff.setData(1)
	end))

	buffTowerFocus.addStackFunction( (Buff whichBuff) -> (begin
		var stacks = whichBuff.getData() + 1
		if stacks <= TOWER_FOCUS_MAX_STACKS
			whichBuff.setData(stacks)
			whichBuff.getTarget().wrapper()
				..addStatRelativeBonus(Stat.AR, -TOWER_FOCUS_ARMOR * 10)
	end))


	buffTowerFocus.addEndFunction( (Buff whichBuff) -> (begin
		let stacks = whichBuff.getData()
		whichBuff.getTarget().wrapper()
			..addStatRelativeBonus(Stat.AR, TOWER_FOCUS_ARMOR * stacks * 10)
	end))

	OnAttack.addOnAttackFunc((unit attacker, unit target, boolean isActive) -> (begin
		if attacker.getAbilityLevel(TOWER_FOCUS_ABILITY_ID)>0 and target.isType(UNIT_TYPE_HERO)
			target.addBuffReduced(attacker, TOWER_FOCUS_DUR, buffTowerFocus, 1)
	end))
		

	/*group buildings = CreateGroup()
	GroupEnumUnitsOfPlayer(buildings, players[10], null)
	for unit u in buildings
		for int i=0 to 4
			UnitShareVision(u, players[i], true)
			
	GroupEnumUnitsOfPlayer(buildings, players[11], null)
	for unit u in buildings
		for int i=5 to 9
			UnitShareVision(u, players[i], true)

	buildings.destr()*/