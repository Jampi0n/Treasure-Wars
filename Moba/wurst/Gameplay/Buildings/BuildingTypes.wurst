package BuildingTypes

import StandardTextTags
import PlayerControl
import ClosureTimers
import initlater WaveSpawn
import initlater UnitTypeConfig
import PathUnit
import Path

constant integer ALTAR = 'h002'
constant integer ARCANE_SANCTUM = 'h008'
constant integer ARCANE_VAULT = 'h005'
constant integer BARRACKS = 'h003'
constant integer BASE_TOWER = 'h009'
constant integer BLACKSMITH = 'h004'
constant integer CASTLE = 'h001'
constant integer FARM = 'h007'
constant integer OUTER_TOWER = 'h016'
constant integer GATE_TOWER = 'h006'
constant integer HERO_TOWER = 'h000'
constant integer WORKSHOP = 'h00A'
constant int WORKSHOP_REBUILD = 'h01A'

public boolean array greenBarracksAlive = [true, true, true]
public boolean array brownBarracksAlive = [true, true, true]

public boolean array greenWorkshopAlive = [true, true]
public boolean array brownWorkshopAlive = [true, true]

constant real BARRACKS_REBUILD_TIME = 180
constant real WORKSHOP_REBUILD_TIME = 60

constant int SHOP_SHARING = 'Aall'

int birth = 0




function onBuildingDeath()
    let building = GetTriggerUnit()
    if not building.isType(UNIT_TYPE_STRUCTURE)
        return

    let unitId = building.getTypeId()
    let killer = GetKillingUnit().getOwner()

    int bounty = 0
    int globalBounty = 0

    if unitId == FARM
        bounty = 50
        globalBounty = 50

    else if unitId == OUTER_TOWER
        bounty = 75
        globalBounty = 75

    else if unitId == GATE_TOWER
        bounty = 100
        globalBounty = 100

    else if unitId == BASE_TOWER
        bounty = 100
        globalBounty = 100

    else if unitId == BARRACKS
        bounty = 250
        globalBounty = 250

        let newBuilding = createUnit(building.getOwner(), unitId, building.getPos(), (270).fromDeg())
            ..setAnimation("birth")
            ..setTimeScale(60/BARRACKS_REBUILD_TIME)
        UnitAddType(newBuilding, UNIT_TYPE_ANCIENT)
        

        for i=0 to 2
            
            if(building==udg_GreenBarracks[i])
                udg_GreenBarracks[i] = newBuilding
                greenBarracksAlive[i] = false
                doAfter(BARRACKS_REBUILD_TIME, () -> (begin
                    newBuilding
                        ..setAnimation("stand")
                        ..setTimeScale(1)
                    greenBarracksAlive[i] = true
                    UnitRemoveType(newBuilding, UNIT_TYPE_ANCIENT)
                end))
            else if(building==udg_BrownBarracks[i])
                udg_BrownBarracks[i] = newBuilding
                brownBarracksAlive[i] = false
                doAfter(BARRACKS_REBUILD_TIME, () -> (begin
                    newBuilding
                        ..setAnimation("stand")
                        ..setTimeScale(1)
                    brownBarracksAlive[i] = true
                    UnitRemoveType(newBuilding, UNIT_TYPE_ANCIENT)
                end))

    else if unitId == WORKSHOP
        bounty = 150
        globalBounty = 150

        let newBuilding = createUnit(building.getOwner(), WORKSHOP_REBUILD, building.getPos(), (270).fromDeg())
            ..setAnimation("birth")
            ..setTimeScale(0)
        UnitAddType(newBuilding, UNIT_TYPE_ANCIENT)

        for i=0 to 1
            if(building==udg_GreenWorkShop[i])
                udg_GreenWorkShop[i] = newBuilding
                greenWorkshopAlive[i] = false

            else if(building==udg_BrownWorkShop[i])
                brownWorkshopAlive[i] = false
                udg_BrownWorkShop[i] = newBuilding


    else if unitId == ARCANE_VAULT
        bounty = 100
        globalBounty = 100

    else if unitId == BLACKSMITH
        bounty = 150
        globalBounty = 150

    else if unitId == CASTLE
        bounty = 1000
        globalBounty = 1000
        
    if bounty + globalBounty > 0
        let team = building.getOwner().getCPlayer().getTeam()

        if killer.getCPlayer().getTeam() == CPlayer.invertTeam(team)
            killer.addGold(bounty + globalBounty)
            createGoldBountyTextTag(building, bounty + globalBounty, killer)

        
        for CPlayer cp in CPlayer.getEnemyHeroPlayers(team)
            let p = cp.getPlayer()
            if cp.getTeam() == CPlayer.invertTeam(team) and p!=killer
                p.addGold(globalBounty)
                createGoldBountyTextTag(building, globalBounty, p)



function onBuildingAbility()
    let itemTypeId = GetSoldItem().getTypeId()
    let building = GetTriggerUnit()
    if itemTypeId == 'I000' //Rebuild Workshop
        building.removeAbility(SHOP_SHARING)
        building.setTimeScale(60/WORKSHOP_REBUILD_TIME)
        doAfter(BARRACKS_REBUILD_TIME, () -> (begin
            UnitRemoveType(building, UNIT_TYPE_ANCIENT)
            for i = 0 to 1
                if building == udg_BrownWorkShop[i]
                    brownWorkshopAlive[i] = true
                    let owner = building.getOwner()
                    let pos = building.getPos()
                    building.remove()
                    udg_BrownWorkShop[i] = createUnit(owner, WORKSHOP, pos, (270).fromDeg())
                    break
                if building == udg_GreenWorkShop[i]
                    greenWorkshopAlive[i] = true
                    let owner = building.getOwner()
                    let pos = building.getPos()
                    building.remove()
                    udg_BrownWorkShop[i] = createUnit(owner, WORKSHOP, pos, (270).fromDeg())
                    break
        end))
    if itemTypeId == 'I001' //Siege Engine

        if building == udg_GreenWorkShop[0]
            let spawnedUnit = spawnUnit(true, TANK, gg_rct_GreenWorkShopTop.getCenter())
            let pathUnit = new PathUnit(spawnedUnit)
            pathUnit.setPathFirst(GREEN_TOP)
            addLaneUnitCount(Team.TEAM1, Lane.TOP, 1)
        else if building == udg_GreenWorkShop[1]
            let spawnedUnit = spawnUnit(true, TANK, gg_rct_GreenWorkShopBot.getCenter())
            let pathUnit = new PathUnit(spawnedUnit)
            pathUnit.setPathFirst(GREEN_BOT)
            addLaneUnitCount(Team.TEAM1, Lane.BOT, 1)
        else if building == udg_BrownWorkShop[0]
            let spawnedUnit = spawnUnit(false, TANK, gg_rct_BrownWorkShopTop.getCenter())
            let pathUnit = new PathUnit(spawnedUnit)
            pathUnit.setPathFirst(BROWN_TOP)
            addLaneUnitCount(Team.TEAM2, Lane.TOP, 1)
        else if building == udg_BrownWorkShop[1]
            let spawnedUnit = spawnUnit(false, TANK, gg_rct_BrownWorkShopBot.getCenter())
            let pathUnit = new PathUnit(spawnedUnit)
            pathUnit.setPathFirst(BROWN_BOT)
            addLaneUnitCount(Team.TEAM2, Lane.BOT, 1)

    if itemTypeId == 'I002' //Melee Attack
        let current = GetPlayerTechCount(building.getOwner(), 'R000', true)
        if current == 4
            SetPlayerTechMaxAllowed(building.getOwner(), itemTypeId, 0)
        SetPlayerTechResearched(building.getOwner(), 'R000', current + 1)

    if itemTypeId == 'I003' //Ranged Attack
        let current = GetPlayerTechCount(building.getOwner(), 'R001', true)
        if current == 4
            SetPlayerTechMaxAllowed(building.getOwner(), itemTypeId, 0)
        SetPlayerTechResearched(building.getOwner(), 'R001', current + 1)

    if itemTypeId == 'I004' //Heavy Armor
        let current = GetPlayerTechCount(building.getOwner(), 'R002', true)
        if current == 4
            SetPlayerTechMaxAllowed(building.getOwner(), itemTypeId, 0)
        SetPlayerTechResearched(building.getOwner(), 'R002', current + 1)

    if itemTypeId == 'I005' //Light Armor
        let current = GetPlayerTechCount(building.getOwner(), 'R003', true)
        if current == 4
            SetPlayerTechMaxAllowed(building.getOwner(), itemTypeId, 0)
        SetPlayerTechResearched(building.getOwner(), 'R003', current + 1)



init
    CreateTrigger()
        ..addAction(function onBuildingDeath)
        ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)

    CreateTrigger()
        ..addAction(function onBuildingAbility)
        ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_SELL_ITEM)
    /*group buildings = CreateGroup()
    GroupEnumUnitsOfPlayer(buildings, players[10], null)
    for unit u in buildings
        for int i=0 to 4
            UnitShareVision(u, players[i], true)
            
    GroupEnumUnitsOfPlayer(buildings, players[11], null)
    for unit u in buildings
        for int i=5 to 9
            UnitShareVision(u, players[i], true)

    buildings.destr()*/