package PickHero
import TimerUtils
import HeroType
import ClosureTimers
import Gameplay
import HashMap
import ShopGUI
import ShopManager
import ErrorHandling

public PickMode pickMode
timer chooseModeTimer
timer pickTimer
timerdialog timerWindow
trigger chooseModeTrigger
trigger onPickTrigger
trigger onClickButtonTrigger
int clickedButtonId
int array playerGoldArray
bool locked = false
region pickRegion

unit array tavern
unit array patron
fogmodifier array tavernVision
bool array playerHasPicked
int array tavernButtons
HashMap<int, HeroType> buttonToHeroType

HeroType array remainingHeroTypes
int remainingHeroTypesCount
constant heroTypeIndex = new HashMap<HeroType, int>()

enum PickMode
    UNDECIDED
    ALLRANDOM
    ALLPICK
    //...
    /*
ban, reverse pick, same heroes
    */

//debug
boolean itemCarry = false

function setupCreatedHero(Hero hero)
    let heroUnit = hero.toUnit()
    player owner = heroUnit.getOwner()
    playerHasPicked[owner.getId()] = true
    CPlayer cPlayer = owner.getCPlayer()
    owner.setGold(500)
        
    vec2 pos// = gg_rct_CenterMid.getCenter()
    patron[owner.getId()].remove()

    if(cPlayer.getTeam()==Team.TEAM1)
        pos = gg_rct_GreenAltar.getCenter()+vec2(128,128)
    else
        pos = gg_rct_BrownAltar.getCenter()-vec2(128,128)

    if owner.getController() == MAP_CONTROL_COMPUTER and owner.getSlotState() == PLAYER_SLOT_STATE_PLAYING
        doAfter(GetRandomReal(1, 3), () -> ( begin
            let ai = new HeroAI(cPlayer, GetAIDifficulty(owner))
            ai.togglePause()
            doAfter(GetRandomReal(48, 52), () -> (begin
                ai.togglePause()
                ai.buyItems()
                ai.selectSkills()
            end))
        end))

    
    heroUnit.setPos(pos)
    getGUI(owner.getId())
    ..start(hero.getCopy())
    if GetLocalPlayer() == owner
        ClearTextMessages()
    printTimedToPlayer("You can now open/close the shop by pressing escape.", 25, owner)
    //prevent using skills for first 5 seconds, as skills will be initialized
    UnitModifySkillPoints(heroUnit, -1)
    
    doAfter(5) ->
        UnitModifySkillPoints(heroUnit, 1)
        hideSecondaryHeroButtons()

    if GetLocalPlayer() == heroUnit.getOwner()
        heroUnit.getOwner().resetToGameCamera(0)
        PanCameraTo(pos.x, pos.y)


function createRandomHeroForAI(CPlayer cPlayer, boolean removeFromTavern)
    int random


    while(true)
        random = GetRandomInt(0, remainingHeroTypesCount-1)
        if remainingHeroTypes[random].hasAI()
            break

    Hero hero = new Hero(cPlayer, remainingHeroTypes[random].getUnitId() , gg_rct_CenterMid.getCenter(), angle(0))
    setupCreatedHero(hero)







    removeHeroType(remainingHeroTypes[random], removeFromTavern)


//creates a random hero for a player
function createRandomHero(CPlayer cPlayer, boolean removeFromTavern)
    var random = GetRandomInt(0, remainingHeroTypesCount-1)

    Hero hero = new Hero(cPlayer, remainingHeroTypes[random].getUnitId() , gg_rct_CenterMid.getCenter(), angle(0))
    setupCreatedHero(hero)







    removeHeroType(remainingHeroTypes[random], removeFromTavern)


function removeHeroType(HeroType herotype, boolean _removeFromTavern)
    let index = heroTypeIndex.get(herotype)

    //print("remove: "+herotype.getUnitId().toRawCode()+ "at index "+index.toString())

    heroTypeIndex.put(remainingHeroTypes[remainingHeroTypesCount-1], index)
    heroTypeIndex.remove(remainingHeroTypes[index])

    remainingHeroTypes[index] = remainingHeroTypes[remainingHeroTypesCount-1]
    remainingHeroTypes[remainingHeroTypesCount-1]=null
    remainingHeroTypesCount--

    /*if removeFromTavern
        for i = 0 to MAX_HERO_COUNT-1
            if(getCPlayer(i).getPlayerType()==PlayerType.HERO)
                SetPlayerTechMaxAllowed(players[i], herotype.getUnitId(), 0)*/
        


function allRandom()
    for i = 0 to MAX_HERO_COUNT-1
        if(getCPlayer(i).getPlayerType()==PlayerType.HERO)
            if players[i].getController() == MAP_CONTROL_COMPUTER
                createRandomHeroForAI(getCPlayer(i), false)
            else
                createRandomHero(getCPlayer(i), false)

    allHeroesPicked()
    
function allPick()
    int pickTime = DEBUG_MODE?10:60
    print("|cffffcc00All Pick was chosen. You have " + pickTime.toString() + " seconds to pick a Hero!|r")

    tavern[0] = createUnit(players[PLAYER_NEUTRAL_PASSIVE], 'n002', gg_rct_Tavern0.getCenter(), angle(0) )
    tavern[0].setColor(PLAYER_COLOR_RED)
    tavern[1] = createUnit(players[PLAYER_NEUTRAL_PASSIVE], 'n003', gg_rct_Tavern1.getCenter(), angle(0) )
    tavern[1].setColor(PLAYER_COLOR_BLUE)
    tavern[2] = createUnit(players[PLAYER_NEUTRAL_PASSIVE], 'n004', gg_rct_Tavern2.getCenter(), angle(0) )
    tavern[2].setColor(PLAYER_COLOR_YELLOW)
    tavern[3] = createUnit(players[PLAYER_NEUTRAL_PASSIVE], 'n005', gg_rct_Tavern3.getCenter(), angle(0) )
    tavern[3].setColor(PLAYER_COLOR_GREEN)

    for i = 0 to 47
        tavern[i div 12].addAbility(tavernButtons[i])
    



    for i = 0 to MAX_HERO_COUNT-1
        if(getCPlayer(i).getPlayerType()==PlayerType.HERO)
            players[i].setGold(HERO_GOLD_COST)
            patron[i] = createUnit(players[i], 'n006', gg_rct_CenterMid.getCenter(), angle(0))
            players[i].setCameraTargetControllerNoZ(patron[i], vec2(0,0), false)
            tavernVision[i] = CreateFogModifierRadius(players[i], FOG_OF_WAR_VISIBLE,
                                gg_rct_CenterMid.getCenterX(),  gg_rct_CenterMid.getCenterX(), 900, true, false)
            FogModifierStart(tavernVision[i])


   

    pickRegion = CreateRegion()
    ..addRect(bj_mapInitialPlayableArea)
    onPickTrigger = CreateTrigger()
    ..addAction(function onPick)
    ..registerEnterRegion(pickRegion, null)

    onClickButtonTrigger = CreateTrigger()
    ..addAction(function onClick)
    for i = 0 to 3
        onClickButtonTrigger.registerUnitEvent(tavern[i], EVENT_UNIT_SPELL_EFFECT)

    pickTimer = getTimer()
    ..start(pickTime.toReal(), function allPickEnd)

    doAfter(1, () -> (begin
        timerWindow = CreateTimerDialog(pickTimer)
        TimerDialogSetTitle(timerWindow,"Pick hero:")
        TimerDialogDisplay(timerWindow, true)
    end))

function onClick()
    if locked
        error("Two players bought at the same time.")
        return

    locked = true
    clickedButtonId = GetSpellAbilityId()
    let triggerTavern = GetTriggerUnit()
    for i = HERO_PLAYER_TEAM_1_FIRST to HERO_PLAYER_TEAM_2_LAST
        playerGoldArray[i] = players[i].getGold()

    doAfter(0) ->
        player triggerPlayer = null
        for i = HERO_PLAYER_TEAM_1_FIRST to HERO_PLAYER_TEAM_2_LAST
            if playerGoldArray[i] - players[i].getGold() == HERO_GOLD_COST
                triggerPlayer = players[i]
                break

        triggerTavern.removeAbility(clickedButtonId)
        createUnit(triggerPlayer, buttonToHeroType.get(clickedButtonId).getUnitId() , tavern[0].getPos(), angle(0))

        locked = false




function onPick()
    unit pickedUnit = GetTriggerUnit()
    CPlayer cPlayer = pickedUnit.getOwner().getCPlayer()
    if(cPlayer.getPlayerType()==PlayerType.HERO)
        if HeroType.getHeroType(pickedUnit.getTypeId()) != null
            Hero hero = new Hero(pickedUnit)
            setupCreatedHero(hero)

            removeHeroType(hero.getHeroType(), true)

function allPickEnd()
    DestroyTimerDialog(timerWindow)
    pickTimer.release()
    timerWindow = null
    pickRegion.clearRect(bj_mapInitialPlayableArea)
    pickRegion.destr()
    for i = 0 to 3
        tavern[i].remove()
        tavern[i]=null
    for i = 0 to MAX_HERO_COUNT-1
        if getCPlayer(i).getPlayerType()==PlayerType.HERO
            patron[i].remove()
            patron[i]=null
            if not playerHasPicked[i]
                if(GetLocalPlayer()==players[i])
                    print("|cffffcc00You have not picked a hero in time. You will get a random one.")
                if players[i].getController() == MAP_CONTROL_COMPUTER
                    createRandomHeroForAI(getCPlayer(i), false)
                else
                    createRandomHero(getCPlayer(i), false)

            FogModifierStop(tavernVision[i])
            DestroyFogModifier(tavernVision[i])

    onClickButtonTrigger
    ..clearActions()
    ..destr()

    onPickTrigger
    ..clearActions()
    ..destr()   

    allHeroesPicked()

function endPickMode()
    
    DestroyTimerDialog(timerWindow)
    chooseModeTimer.release()

    if(pickMode == PickMode.ALLPICK)
        allPick()
    if(pickMode == PickMode.ALLRANDOM)
        print("|cffffcc00All Random was chosen. Heroes will be random!|r")
        allRandom()
    if(pickMode == PickMode.UNDECIDED)
        print("|cffffcc00No mode was chosen. Heroes will be random!|r")
        pickMode = PickMode.ALLRANDOM
        allRandom()

    chooseModeTrigger
    ..clearActions()
    ..destr()

function onModePick()
    string s = GetEventPlayerChatString().toLowerCase()
    if s == "-ap"
        pickMode = PickMode.ALLPICK
    else
        pickMode = PickMode.ALLRANDOM

    endPickMode()

function startPickMode()

    for i = 0 to MAX_HERO_COUNT-1
        playerHasPicked[i] = false

    //copies the array of hero types
    remainingHeroTypesCount = HeroType.heroTypeCount

    for i = 0 to remainingHeroTypesCount-1
        remainingHeroTypes[i] = HeroType.heroTypes[i]
        heroTypeIndex.put(HeroType.heroTypes[i], i)

    PanCameraToTimed(gg_rct_CenterMid.getCenterX(), gg_rct_CenterMid.getCenterY(), 0)
    

    pickMode = PickMode.UNDECIDED
    chooseModeTrigger = CreateTrigger()
    ..registerPlayerChatEvent(players[adminPlayer], "-ap", true)
    ..registerPlayerChatEvent(players[adminPlayer], "-ar", true)
    ..addAction(function onModePick)
    
    chooseModeTimer= getTimer()
    ..start(30, function endPickMode)

    doAfter(1, () -> (begin
        if pickMode == PickMode.UNDECIDED
            timerWindow = CreateTimerDialog(chooseModeTimer)
            TimerDialogSetTitle(timerWindow,"Choose pick mode:")
            TimerDialogDisplay(timerWindow, true)
    end))

    print("|cffffcc00"+players[adminPlayer].getName()+" has 30 seconds to pick a mode!|r")
    print("|cffffcc00Available modes are all random (-ar) and all pick (-ap).|r")


public function addButtonToTavern(int heroId, int buttonPos, HeroType heroType, int tavernId)
    let buttonId = getAbilityOffset(heroId) + 66 //B
    let q = heroType.getAbilityId(AbilitySlot.Q)
    let w = heroType.getAbilityId(AbilitySlot.W)
    let e = heroType.getAbilityId(AbilitySlot.E)
    let r = heroType.getAbilityId(AbilitySlot.R)
    let passive = heroType.getAbilityId(AbilitySlot.PASSIVE)
    let nameQ = "(Q) |cffffcc00" + GetObjectName(q) + "|r"
    let nameW = "(W) |cffffcc00" + GetObjectName(w) + "|r"
    let nameE = "(E) |cffffcc00" + GetObjectName(e) + "|r"
    let nameR = "(R) |cffffcc00" + GetObjectName(r) + "|r"
    let namePassive = "(Passive) |cffffcc00" + GetObjectName(passive) + "|r"
    let tooltipQ = DynamicTooltip.getDynamicTooltip(q).getSummary()
    let tooltipW = DynamicTooltip.getDynamicTooltip(w).getSummary()
    let tooltipE = DynamicTooltip.getDynamicTooltip(e).getSummary()
    let tooltipR = DynamicTooltip.getDynamicTooltip(r).getSummary()
    let tooltipPassive = DynamicTooltip.getDynamicTooltip(passive).getSummary()
    if tavernButtons[12 * tavernId + buttonPos] != -1
        error("tavernButtons["+(12 * tavernId + buttonPos).toString()+"] = " + tavernButtons[12 * tavernId + buttonPos].toString())
    else
        tavernButtons[12 * tavernId + buttonPos] = buttonId
        buttonToHeroType.put(getAbilityOffset(heroId) + 66, heroType)
        BlzSetAbilityTooltip(buttonId, GetObjectName(heroType.getUnitId()), 0)
        let tooltip = namePassive + "|n" + tooltipPassive + "|n|n" + 
        nameQ + "|n" + tooltipQ + "|n|n" + 
        nameW + "|n" + tooltipW + "|n|n" + 
        nameE + "|n" + tooltipE + "|n|n" + 
        nameR + "|n" + tooltipR
        BlzSetAbilityExtendedTooltip(buttonId, tooltip, 0)
        if BlzGetAbilityExtendedTooltip(buttonId, 0) != tooltip
            error("Tooltip for hero " + GetObjectName(heroType.getUnitId()) + " was not correctly generated.")

public function initBeforeHeroType()
    buttonToHeroType = new HashMap<int, HeroType>()
    for i = 0 to 47
        tavernButtons[i] = -1

init
    doAfter(0, ()-> startPickMode())

    // DEBUG_MODE automatically chooses all pick
    if DEBUG_MODE
        doAfter(0.1, () -> (begin
            pickMode = PickMode.ALLPICK
            endPickMode()
        end))

    
    if DEBUG_MODE
        // you can spawn new heroes in DEBUG_MODE
        CreateTrigger()
        ..registerPlayerChatEvent(players[0], "hero ", false)
        ..addAction() ->
            let i = GetEventPlayerChatString().substring(5).toInt()

            if i >= 0 and i<=MAX_HERO_COUNT-1 and not playerHasPicked[i]

                

                new CPlayer(players[i], i<=4?Team.TEAM1:Team.TEAM2, PlayerType.HERO)
                createRandomHero(getCPlayer(i), false)


                if not itemCarry
                    itemCarry = true
                    let carry = createUnit(players[0], 'Hmkg', gg_rct_BrownAltar.getLeftBot(), angle(0))
                    UnitAddType(carry, UNIT_TYPE_ANCIENT)
                    carry.addBuff(carry, -1, DISARMED, 1)

                SetPlayerAlliance(players[i], players[0], ALLIANCE_SHARED_VISION, true)
                SetPlayerAlliance(players[i], players[0], ALLIANCE_SHARED_CONTROL, true)
                SetPlayerAlliance(players[0], players[i], ALLIANCE_SHARED_CONTROL, true)
                SetPlayerAlliance(players[i], players[0], ALLIANCE_SHARED_ADVANCED_CONTROL, true)


        CreateTrigger()
        ..registerPlayerChatEvent(players[0], "ai ", false)
        ..addAction() ->
            let i = GetEventPlayerChatString().substring(3).toInt()

            if i >= 0 and i<=MAX_HERO_COUNT-1 and not playerHasPicked[i]

                

                if i!= 0
                    new CPlayer(players[i], i<=4?Team.TEAM1:Team.TEAM2, PlayerType.HERO)

                //Hero hero = new Hero(createUnit(players[i], 'H00H', gg_rct_CenterMid.getCenter(), angle(0)))
                createRandomHeroForAI(getCPlayer(i), false)
                //setupCreatedHero(hero)

                //removeHeroType(hero.getHeroType())

                let ai = new HeroAI(getCPlayer(i), AI_DIFFICULTY_NEWBIE)

                doAfter(6) ->
                    ai.buyItems()
                    ai.selectSkills()

                SetPlayerAlliance(players[i], players[0], ALLIANCE_SHARED_VISION, true)
                SetPlayerAlliance(players[i], players[0], ALLIANCE_SHARED_CONTROL, true)
                SetPlayerAlliance(players[0], players[i], ALLIANCE_SHARED_CONTROL, true)
                SetPlayerAlliance(players[i], players[0], ALLIANCE_SHARED_ADVANCED_CONTROL, true)

        CreateTrigger()
        ..registerPlayerChatEvent(players[0], "full2", false)
        ..addAction() ->
            for i = HERO_PLAYER_TEAM_2_FIRST to HERO_PLAYER_TEAM_2_LAST
                if i >= 0 and i<=MAX_HERO_COUNT-1 and not playerHasPicked[i]

                    

                    if i!= 0
                        new CPlayer(players[i], i<=4?Team.TEAM1:Team.TEAM2, PlayerType.HERO)

                    //Hero hero = new Hero(createUnit(players[i], 'H00H', gg_rct_CenterMid.getCenter(), angle(0)))
                    createRandomHeroForAI(getCPlayer(i), false)
                    //setupCreatedHero(hero)

                    //removeHeroType(hero.getHeroType())

                    let ai = new HeroAI(getCPlayer(i), AI_DIFFICULTY_INSANE)

                    for Hero hero in CPlayer.getPlayerHeroes(i)
                        hero.toUnit().setLevel(25, false)

                    doAfter(6) ->
                        players[i].addGold(100000)
                        ai.buyItems()
                        ai.selectSkills()

                    SetPlayerAlliance(players[i], players[0], ALLIANCE_SHARED_VISION, true)
                    SetPlayerAlliance(players[i], players[0], ALLIANCE_SHARED_CONTROL, true)
                    SetPlayerAlliance(players[0], players[i], ALLIANCE_SHARED_CONTROL, true)
                    SetPlayerAlliance(players[i], players[0], ALLIANCE_SHARED_ADVANCED_CONTROL, true)


        CreateTrigger()
        ..registerPlayerChatEvent(players[0], "pause ", false)
        ..addAction() ->
            let i = GetEventPlayerChatString().substring(6).toInt()
            if i >= 0 and i<=MAX_HERO_COUNT-1 and getAI(i)!=null
                getAI(i).togglePause()

        // teleport heroes mid
        CreateTrigger()
        ..registerPlayerChatEvent(players[0], "mid ", false)
        ..addAction() ->
            let i = GetEventPlayerChatString().substring(4).toInt()
            for Hero hero in CPlayer.getPlayerHeroes(i)
                hero.toUnit().setXY(gg_rct_CenterMid.getCenter())

        CreateTrigger()
        ..registerPlayerChatEvent(players[0], "mid", true)
        ..addAction() ->
            for Hero hero in CPlayer.getPlayerHeroes(0)
                hero.toUnit().setXY(gg_rct_CenterMid.getCenter())

        CreateTrigger()
        ..registerPlayerChatEvent(players[0], "g", true)
        ..addAction() ->
            players[0].addGold(100000)

        CreateTrigger()
        ..registerPlayerChatEvent(players[0], "castle", true)
        ..addAction() ->
            for Hero hero in CPlayer.getPlayerHeroes(0)
                hero.toUnit().setXY(gg_rct_BrownCastle.getCenter())
                hero.toUnit().wrapper().addStatAbsoluteBonus(Stat.STR, 10000)
                hero.toUnit().wrapper().addStatAbsoluteBonus(Stat.AS, 200)
                hero.toUnit().wrapper().addStatAbsoluteBonus(Stat.HP, 10000)

        CreateTrigger()
        ..registerPlayerChatEvent(players[0], "lvl ", false)
        ..addAction() ->
            let i = GetEventPlayerChatString().substring(4).toInt()
            for Hero hero in CPlayer.getPlayerHeroes(i)
                hero.toUnit().setLevel(25, false)

        CreateTrigger()
        ..registerPlayerChatEvent(players[0], "lvl", true)
        ..addAction() ->
            for Hero hero in CPlayer.getPlayerHeroes(0)
                hero.toUnit().setLevel(25, false)

     //SetHeroLevel(hero.toUnit(), 25, true)