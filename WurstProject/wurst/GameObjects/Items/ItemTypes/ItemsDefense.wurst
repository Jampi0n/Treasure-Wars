package ItemsDefense

import ItemInclude

constant CATEGORY = 5

function gemOfHealth()
    let hp = ItemBalance.hp(500)
    setupItem(ITEM_ID_GEM_OF_HEALTH, CATEGORY)
    addStatLine(ItemStat.HP, hp)
    setInfo("Gem Of Health")
    onEither() (int factor) ->
        modHealth(hp)

function ringOfHealth()
    let hr = ItemBalance.hr(500)
    setupItem(ITEM_ID_RING_OF_HEALTH, CATEGORY)
    addStatLine(ItemStat.HR, hr)
    setInfo("Ring of Health")
    onEither() (int factor) ->
        modHealthRegen(hr)

function voidCrystal()
    let wp = ItemBalance.agi(500)
    setupItem(ITEM_ID_VOID_CRYSTAL, CATEGORY)
    addStatLine(ItemStat.AGI, wp)
    setInfo("Void Crystal")
    onEither() (int factor) ->
        modAgility(wp)

function basicShield()
    let ar =  ItemBalance.ar(500)
    setupItem(ITEM_ID_SHIELD, CATEGORY)
    addStatLine(ItemStat.AR, ar)
    setInfo("Wooden Shield")
    onEither() (int factor) ->
        modArmor(ar)

function heavyGauntlets()
    let ar = ItemBalance.ar(800)
    setupItem(ITEM_ID_PLATED_GAUNTLETS, CATEGORY)
    addStatLine(ItemStat.AR, ar)
    setInfo("Plated Gauntlets")
    onEither() (int factor) ->
        modArmor(ar)

function leatherArmor()
    ItemBalance.stats(ItemStat.AR, ItemStat.HP)
    ItemBalance.values(450, 350)
    let ar = ItemBalance.ar()
    let hp = ItemBalance.hp()
    setupItem(ITEM_ID_LEATHER_ARMOR, CATEGORY)
    addStatLine(ItemStat.AR, ar)
    addStatLine(ItemStat.HP, hp)
    setInfo("Leather Armor")
    onEither() (int factor) ->
        modArmor(ar)
        modHealth(hp)
function heavyArmor()
    setupItem(ITEM_ID_HEAVY_ARMOR, CATEGORY, 1500)
function voidArmor()
    setupItem(ITEM_ID_VOID_ARMOR, CATEGORY, 1500)
function arcaneShield()
    setupItem(ITEM_ID_ARCANE_SHIELD, CATEGORY, 3000)
function enchantedArmor()
    setupItem(ITEM_ID_ENCHANTED_ARMOR, CATEGORY, 3000)
function armorOfCourage()
    setupItem(ITEM_ID_ARMOR_OF_COURAGE, CATEGORY, 3000)
function spikedArmor()
    setupItem(ITEM_ID_SPIKED_ARMOR, CATEGORY, 3000)
function runicArmor()
    setupItem(ITEM_ID_RUNIC_ARMOR, CATEGORY, 3000)

constant FIRE_HAND_GAUNTLET_PASSIVE = compiletime(generateCooldownAbility())

function fireHandGauntlet()
    setupItem(ITEM_ID_FIRE_HAND_GAUNTLET, CATEGORY, 3000)
    addUnique("hdht")
    setInfo("Fire Hand Gauntlet")
    setPassiveAbilities(FIRE_HAND_GAUNTLET_PASSIVE)
    onEither() (int factor) ->
        skip

public constant HEART_AMULET_PASSIVE = compiletime(generateCooldownAbility())
public constant HEART_AMULET_COOLDOWN = 30
public constant HEART_AMULET_DURATION = 4

public constant HEART_AMULET_BUFF = compiletime(setupBuff("Heart Amulet", "This unit is under the effect of Heart Amulet and is invulnerable.", "BTNHeartAmulet", true, 1, Abilities.divineShieldTarget, "origin", DispelLevel.BREAK))

function heartAmulet()
    setupItem(ITEM_ID_HEART_AMULET, CATEGORY, 3000)
    addUnique("When taking lethal damage, the hero survives with 1 hit point and is rendered invulnerable for " + HEART_AMULET_DURATION.toString() + " seconds. This effect has a " + HEART_AMULET_COOLDOWN.toString() + " seconds cooldown.")
    setInfo("Heart  Amulet")
    setPassiveAbilities(HEART_AMULET_PASSIVE)
    onEither() (int factor) ->
        damageEventInt(D_HEART_AMULET)

            
function dragonRing()
    setupItem(ITEM_ID_DRAGON_RING, CATEGORY, 3000)
function wardensHelmet()
    setupItem(ITEM_ID_WARDENS_HELMET, CATEGORY, 3000)

@compiletime
function initItems1()
    gemOfHealth()
    ringOfHealth()
    voidCrystal()
    basicShield()
    heavyGauntlets()
    leatherArmor()


@compiletime
function initItems2()
    heavyArmor()


@compiletime
function initItems3()
    arcaneShield()
    enchantedArmor()
    voidArmor()
    armorOfCourage()
    spikedArmor()
    runicArmor()
    fireHandGauntlet()
    heartAmulet()
    dragonRing()
    wardensHelmet()



init
    execute() ->
        initItems1()
    execute() ->
        initItems2()
    execute() ->
        initItems3()