package ItemsDamagePhysical

import ItemInclude
import GameTimer

constant CATEGORY = 3


function itemHammerOfStrength()
    let str = 8
    setupItem(ITEM_ID_HAMMER_OF_STRENGTH, CATEGORY, 500)
    setInfo("Hammer of Strength", "+ {0} strength".format(str.toString()))
    onEither() (int factor) ->
        modStrength(str)


function itemGlovesOfHaste()
    let as = 12
    setupItem(ITEM_ID_GLOVES_OF_HASTE, CATEGORY, 500)
    setInfo("Gloves of Haste", "+ {0}% attack speed".format(as.toString()))
    onEither() (int factor) ->
        modAttackSpeed(as)

function warAxe()
    let str = 16
    setupItem(ITEM_ID_WAR_AXE, CATEGORY, 1000)
    setInfo("War Axe", "+ {0} strength".format(str.toString()))
    onEither() (int factor) ->
        modStrength(str)


function dagger()
    let str = 5
    let as = 10
    setupItem(ITEM_ID_DAGGER, CATEGORY, 700)
    setInfo("Dagger", "+ {0} strength|n +{1}% attack speed".format(str.toString(), as.toString()))
    onEither() (int factor) ->
        modStrength(str)
        modAttackSpeed(as)

function woodenBow()
    let str = 12
    setupItem(ITEM_ID_BOW, CATEGORY, 750)
    setInfo("Wooden Bow", "+ {0} strength".format(str.toString()))
    onEither() (int factor) ->
        modStrength(str)
            
/*constant ARMOR_BREAKER_BUFF_ID = compiletime(createAuraBuff("Armor Breaker", "This unit's armor is broken; it has reduced armor.", "BTNHammer1"))
constant ARMOR_BREAKER_ABILITY_ID = compiletime(createNegativeBuffAbility(1, ARMOR_BREAKER_BUFF_ID, "", ""))*/
            
constant ABILITY_ARMOR_BREAKER_SLAM = compiletime(ABIL_ID_GEN.next())

function itemArmorBreaker()
    let str = 20
    let armorDmg = 35
    let armorDuration = 6
    let activeDmg = 150
    let activeArmor = 50
    let activeDuration = 6
    let cooldown = 45

    if compiletime
        new AbilityDefinitionPitLordHowlofTerror(ABILITY_ARMOR_BREAKER_SLAM)
        ..setCooldown(1, cooldown.toReal())
        ..targetNone()
        ..targetNone()
        ..setArtCaster("")
        ..setManaCost(1, 0)

    setupItem(ITEM_ID_ARMOR_BREAKER, CATEGORY, 3325)
    setActiveAbilities(ABILITY_ARMOR_BREAKER_SLAM)
    setInfo("Armor Breaker", "+ {0} strength|n|cffffcc00Passive:|r|nAttacks reduce the target's armor by {1}% for {2} seconds.".format(
            str.toString(), armorDmg.toString(), armorDuration.toString()
        )+ "|n|cffffcc00Active:|r|nSlams the ground, dealing {0} damage and reducing the armor of affected units by {1}% for {2} seconds.".format(
            activeDmg.toString(), activeArmor.toString(), activeDuration.toString()
        ) )

    if not compiletime
        /*let hammerBuff = new BuffType(false, DispelLevel.DISPEL)
        hammerBuff.setupBuffWithIcon(ARMOR_BREAKER_BUFF_ID, ARMOR_BREAKER_ABILITY_ID)
        hammerBuff.addSetupFunction() (Buff thisBuff, int factor) ->
            thisBuff.getTarget().wrapper().modArmorRelative(-factor * armorDmg*10)*/
        onEither() (int factor) ->
            modStrength(str)
            attackDamageFunction() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, bool attack, bool arrow, bool alternate) ->
                //target.addBuffReduced( source, armorDuration.toReal(), hammerBuff, 1)
                target.addEffect(Abilities.bloodElfSpellThiefMISSILE, "chest").destr()

            let trg = itemTrigger(-1)
            if trg != null
                trg.registerUnitEvent(getItemUnit(), EVENT_UNIT_SPELL_EFFECT)
                trg.addAction() ->
                    if GetSpellAbilityId() == ABILITY_ARMOR_BREAKER_SLAM
                        let caster = GetTriggerUnit()
                        let pos = caster.getPos()
                        addEffect(Abilities.thunderclapCaster, pos).destr()


/*constant CHILLING_BLADE_BUFF_ID = compiletime(createAuraBuff("Chilling Blade", "This unit was hit by Chilling Blade; it has reduced movement speed.", "BTNMysticDagger"))
constant CHILLING_BLADE_ABILITY_ID = compiletime(createNegativeBuffAbility(1, CHILLING_BLADE_BUFF_ID, Abilities.frostDamage, "chest"))*/

real lastAttack = 0.0

function itemChillingBlade()
    let str = 20
    let slowAmount = 30
    let slowDuration = 2
    setupItem(ITEM_ID_CHILLING_DAGGER, CATEGORY, 3950)
    setInfo("Chilling Blade", "+ {0} strength|n|cffffcc00Passive:|r|nAttacks reduce the target's movement speed by {1}% for {2} seconds".format(
            str.toString(), slowAmount.toString(), slowDuration.toString()
        )+ "|n|cffffcc00Active:|r|nasd" )

    if not compiletime
        /*let slowBuff = new BuffType(false, DispelLevel.DISPEL)
        slowBuff.setupBuffWithIcon(CHILLING_BLADE_BUFF_ID, CHILLING_BLADE_ABILITY_ID)
        slowBuff.addSetupFunction() (Buff thisBuff, int factor) ->
            let wrapper = thisBuff.getTarget().wrapper()
            wrapper.modMoveSpeedRelative(-factor * slowAmount*10)
            wrapper.modBlue(factor)*/
        onEither() (int factor) ->
            modStrength(str)
            attackDamageFunction() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, bool attack, bool arrow, bool alternate) ->
                //target.addBuffReduced( source, slowDuration.toReal(), slowBuff, 1)
                let diff = getElapsedGameTime() - lastAttack
                lastAttack = getElapsedGameTime()
                print(diff)

function axeOfEmbers()
    let aoeDmg = 20
    let aoeRange = 150.0
    setupItem(ITEM_ID_AXE_OF_EMBERS, CATEGORY, 3000)
    addUnique("Attacks deal " + aoeDmg.toString() + " magic damage to enemy units around the target.")
    setInfo("Axe of Embers")
    onEither() (int factor) ->
        attackDamageFunction() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, boolean attack, boolean _active, boolean advanced) ->
            let g = CreateGroup()
            g.enumUnitsInRange(target.getPos(), aoeRange)
            while true
                let u = FirstOfGroup(g)
                if u == null
                    break
                g.removeUnit(u)
                if u.isTargetableEnemyUnit(source)
                    source.dealDamage(u, aoeDmg * 1.0, ReductionType.MAGIC)
                    u.addEffect(Abilities.fireBallMissile, "chest").destr()
            g.destr()
function runeBlade()
    setupItem(ITEM_ID_RUNE_BLADE, CATEGORY, 3000)
function cursedSword()
    setupItem(ITEM_ID_SOUL_TORMENTOR, CATEGORY, 3000)
function bloodSword()
    setupItem(ITEM_ID_SWORD_OF_THE_BLOOD_STEALER, CATEGORY, 3000)
function axeOfDecay()
    setupItem(ITEM_ID_AXE_OF_DECAY, CATEGORY, 3000)
function arcaneBlade()
    setupItem(ITEM_ID_ARCANE_BLADE, CATEGORY, 3000)
function bloodStinger()
    let lifeSteal = 20
    setupItem(ITEM_ID_BLOOD_STINGER, CATEGORY, 3000)
    addRequirement(ITEM_ID_DAGGER)
    addRequirement(ITEM_ID_WAR_AXE)
    addRequirement(ITEM_ID_GLOVES_OF_HASTE)
    addRequirement(ITEM_ID_HAMMER_OF_STRENGTH)
    addPassive("Lifesteal","Attacks restore " + lifeSteal.toString() + "% of the damage dealt as hit points.")
    setInfo("Sacrificial Dagger")
    onEither() (int factor) ->
        attackDamageFunction() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, boolean attack, boolean _active, boolean advanced) ->
            source.healHP(source, lifeSteal * 0.01 * damage)
            source.addEffect(Abilities.vampiricAuraTarget, "origin").destr()

@compiletime
function initItems1()
    itemGlovesOfHaste()
    itemHammerOfStrength()
    woodenBow()
    warAxe()
    dagger()

@compiletime
function initItems2()


@compiletime
function initItems3()
    itemArmorBreaker()
    itemChillingBlade()
    axeOfEmbers()
    runeBlade()
    cursedSword()
    bloodSword()
    axeOfDecay()
    arcaneBlade()
    bloodStinger()


init
    execute() ->
        initItems1()
    execute() ->
        initItems2()
    execute() ->
        initItems3()