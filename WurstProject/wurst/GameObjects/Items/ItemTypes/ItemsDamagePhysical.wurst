package ItemsDamagePhysical

import ItemInclude

constant CATEGORY = 3

function itemHammerOfStrength()
    ItemBalance.stats(ItemStat.STR, ItemStat.HP)
    ItemBalance.values(325,175)
    let str = ItemBalance.str()
    let hp = ItemBalance.hp()
    setupItem(ITEM_ID_HAMMER_OF_STRENGTH, CATEGORY)
    addStatLine(ItemStat.STR, str)
    addStatLine(ItemStat.HP, hp)
    setInfo("Hammer of Strength")
    onEither() (int factor) ->
        modStrength(str)
        modHealth(hp)

function ironSword()
    let str = ItemBalance.str(500)
    setupItem(ITEM_ID_IRON_SWORD, CATEGORY)
    addStatLine(ItemStat.STR, str)
    setInfo("Iron Sword")
    onEither() (int factor) ->
        modStrength(str)

function warAxe()
    let str = ItemBalance.str(800)
    setupItem(ITEM_ID_WAR_AXE, CATEGORY)
    addStatLine(ItemStat.STR, str)
    setInfo("War Axe")
    onEither() (int factor) ->
        modStrength(str)

function dagger()
    let as = ItemBalance.as(500)
    setupItem(ITEM_ID_DAGGER, CATEGORY)
    addStatLine(ItemStat.AS, as, true)
    setInfo("Dagger")
    onEither() (int factor) ->
        modAttackSpeed(as)

function woodenBow()
    let str = ItemBalance.str(600)
    let strPercentage = 5
    setupItem(ITEM_ID_BOW, CATEGORY)
    addStatLine(ItemStat.STR, str)
    addStatLine(ItemStat.STR, strPercentage, true)
    setInfo("Wooden Bow")
    onEither() (int factor) ->
        modStrength(str)
        modStrengthRelative(strPercentage * 10)

function magmaCrystal()
    let dmg = 15
    setupItem(ITEM_ID_MAGMA_CRYSTAL, CATEGORY)
    addLine("Attacks deal {0} additional magic damage.".format(dmg.toString()))
    setInfo("Magma Crystal")
    onEither() (int factor) ->
        attackDamageFunction() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, boolean attack, boolean active, boolean alternate) ->
            source.dealDamage(target, dmg * 1.0, ReductionType.MAGIC)
            target.addEffect(Abilities.fireBallMissile, "chest").destr()
        
function bloodSword()
    ItemBalance.stats(ItemStat.STR, ItemStat.LS)
    ItemBalance.values(750,450)
    let str = ItemBalance.str()
    let steal = ItemBalance.ls()
    setupItem(ITEM_ID_BRUTAL_SLASHER, CATEGORY)
    addStatLine(ItemStat.STR, str)
    addStatLine(ItemStat.LS, steal)
    setInfo("Vampiric Sword")
    addRequirements(ITEM_ID_IRON_SWORD)
    onEither() (int factor) ->
        modLifeSteal(steal)
        modStrength(str)

function skullCrusher()
    let str = 1
    setupItem(ITEM_ID_SKULL_CRUSHER, CATEGORY)
    setInfo("Orcish Warhammer", "+ {0} strength".format(str.toString()))
    addRequirements(ITEM_ID_HAMMER_OF_STRENGTH, ITEM_ID_WAR_AXE)

function woodenClub()
    ItemBalance.stats(ItemStat.STR, ItemStat.HP)
    ItemBalance.values(615,710)
    let str = ItemBalance.str()
    let hp = ItemBalance.hp()
    setupItem(ITEM_ID_WOODEB_CLUB, CATEGORY)
    addRequirements(ITEM_ID_GEM_OF_HEALTH, ITEM_ID_HAMMER_OF_STRENGTH)
    addStatLine(ItemStat.STR, str)
    addStatLine(ItemStat.HP, hp)
    setInfo("Giant's Club")
    onEither() (int factor) ->
        modStrength(str)
        modHealth(hp)

function skullAxe()
    let str = 30
    setupItem(ITEM_ID_SKULL_AXE, CATEGORY)
    addStatLine(ItemStat.STR, str)
    setInfo("Skull Axe")
    addRequirements(ITEM_ID_WAR_AXE, ITEM_ID_IRON_SWORD)
    onEither() (int factor) ->
        modStrength(str)

function ravenSword()
    ItemBalance.stats(ItemStat.STR, ItemStat.AS)
    ItemBalance.values(750,600)
    let str = ItemBalance.str()
    let as = ItemBalance.as()
    setupItem(ITEM_ID_RAVEN_SWORD, CATEGORY)
    addStatLine(ItemStat.STR, str)
    addStatLine(ItemStat.AS, as)
    setInfo("Raven Sword")
    addRequirements(ITEM_ID_IRON_SWORD, ITEM_ID_DAGGER)
    onEither() (int factor) ->
        modAttackSpeed(as)
        modStrength(str)


function blazingBow()
    let str = 12
    let strPercentage = 5
    let dmg = 15
    setupItem(ITEM_ID_BLAZING_BOW, CATEGORY)
    addStatLine(ItemStat.STR, str)
    addStatLine(ItemStat.STR, strPercentage, true)
    addLine("Attacks deal {0} additional magic damage.".format(dmg.toString()))
    setInfo("Blazing Bow")
    addRequirements(ITEM_ID_BOW, ITEM_ID_MAGMA_CRYSTAL)
    onEither() (int factor) ->
        modStrength(str)
        modStrengthRelative(strPercentage)
        attackDamageFunction() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, boolean attack, boolean active, boolean alternate) ->
            source.dealDamage(target, dmg * 1.0, ReductionType.MAGIC)
            target.addEffect(Abilities.fireBallMissile, "chest").destr()

constant HAMMER_SLAM_BUFF = compiletime(setupBuff("Slam", "This unit has been hit by Slam; its movement speed and attack rate are reduced.", "BTNAzureCrystalHammerV2", false, 1, Abilities.stasisTotemTarget, "overhead", DispelLevel.DISPEL))

constant SLAM_DURATION = 3
constant SLAM_DAMAGE = 150.0
            
constant ABILITY_ARMOR_BREAKER_SLAM = compiletime(ABIL_ID_GEN.next())

function itemArmorBreaker()
    let str = 20
    let dmgPerXArmor = 5
    let activeSlow = 50
    let cooldown = 45

    if compiletime
        new AbilityDefinitionPitLordHowlofTerror(ABILITY_ARMOR_BREAKER_SLAM)
        ..setCooldown(1, cooldown.toReal())
        ..targetNone()
        ..targetNone()
        ..setArtCaster("")
        ..setManaCost(1, 0)

    setupItem(ITEM_ID_ARMOR_BREAKER, CATEGORY)
    setActiveAbilities(ABILITY_ARMOR_BREAKER_SLAM)
    addUnique("Attacks deal 1 additional damage for every {0} points of armor of the target.".format(dmgPerXArmor.str()))
    addActive("Slam", "Slams the ground, dealing {0} damage and slowing enemy units by {1}% for {2} seconds.".format(SLAM_DAMAGE.str(), activeSlow.str(), SLAM_DURATION.str()))
    setInfo("Armor Breaker")
    addRequirements(ITEM_ID_SKULL_CRUSHER, ITEM_ID_WOODEB_CLUB)

    if not compiletime
        onEither() (int factor) ->
            modStrength(str)
            attackDamageFunction() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, bool attack, bool arrow, bool alternate) ->
                source.dealDamage(target, target.wrapper().getArmor() / 5, ReductionType.NONE)
                
            let trg = itemTrigger(-1)
            if trg != null
                trg.registerUnitEvent(getItemUnit(), EVENT_UNIT_SPELL_EFFECT)
                trg.addAction() ->
                    if GetSpellAbilityId() == ABILITY_ARMOR_BREAKER_SLAM
                        let caster = GetTriggerUnit()
                        let pos = caster.getPos()
                        addEffect(Abilities.thunderclapCaster, pos).destr()
                        let g = CreateGroup()
                        g.enumUnitsInRange(pos, 250)
                        let p = caster.getOwner()
                        for u from g
                            if u.isTargetableEnemyUnit(p)
                                caster.dealDamage(u, SLAM_DAMAGE, ReductionType.PHYSICAL)
                                u.addBuffReduced(caster, SLAM_DURATION.toReal(), HAMMER_SLAM_BUFF, 1)


constant CHILLING_BLADE_BUFF = compiletime(setupBuff("Chilling Blade", "This unit was hit by Chilling Blade; it has reduced movement speed.", "BTNMysticDagger", false, 1, Abilities.frostDamage, "chest", DispelLevel.DISPEL))

function itemChillingBlade()
    let str = 20
    let slowAmount = 30
    let slowDuration = 2
    setupItem(ITEM_ID_CHILLING_DAGGER, CATEGORY)
    addUnique("Attacks reduce the target's movement speed by {0}% for {1} seconds.".format(slowAmount.str(), slowDuration.str()))
    setInfo("Chilling Blade")
    addRequirements(ITEM_ID_IRON_SWORD, ITEM_ID_RAVEN_SWORD, ITEM_ID_WAR_AXE)

    if not compiletime
        CHILLING_BLADE_BUFF.addSetupFunction() (Buff thisBuff, int factor) ->
            let wrapper = thisBuff.getTarget().wrapper()
            wrapper.modMoveSpeedRelative(-factor * slowAmount*10)
            wrapper.modBlue(factor)
        onEither() (int factor) ->
            modStrength(str)
            attackDamageFunction() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, bool attack, bool arrow, bool alternate) ->
                target.addBuffReduced( source, slowDuration.toReal(), CHILLING_BLADE_BUFF, 1)

function axeOfEmbers()
    let aoeDmg = 30
    let aoeRange = 150.0
    setupItem(ITEM_ID_AXE_OF_EMBERS, CATEGORY)
    addUnique("Attacks deal " + aoeDmg.toString() + " magic damage to enemy units around the target.")
    addRequirements(ITEM_ID_SKULL_AXE, ITEM_ID_MAGMA_CRYSTAL, ITEM_ID_WOODEB_CLUB)
    setInfo("Axe of Embers")
    onEither() (int factor) ->
        attackDamageFunction() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, boolean attack, boolean _active, boolean advanced) ->
            let g = CreateGroup()
            g.enumUnitsInRange(target.getPos(), aoeRange)
            for u from g
                if u.isTargetableEnemyUnit(source)
                    source.dealDamage(u, aoeDmg * 1.0, ReductionType.MAGIC)
                    u.addEffect(Abilities.fireBallMissile, "chest").destr()

constant ABILITY_RUNE_BLADE_BURN = compiletime(ABIL_ID_GEN.next())

constant RUNE_BLADE_BUFF = compiletime(setupBuff("Rune Blade Shield", "Magic resistance is increased.", "BTN_RunicBlade_CR", false, 1, Abilities.antiMagicShell, "chest", DispelLevel.DISPEL))

constant RUNE_BLADE_BURN = 25
constant RUNE_BLADE_SHIELD_DUR = 8
int runeBladeManaBurnt = -1

function runeBlade()
    let str = 1
    let lifesteal = 10
    let manasteal = 5
    let agi = 1
    let cooldown = 75

    if compiletime
        new AbilityDefinitionFarseerChainLightning(ABILITY_RUNE_BLADE_BURN)
        ..setCooldown(1, cooldown.toReal())
        ..targetEnemyHeroes()
        ..setMissileArt("")
        ..setArtTarget("")
        ..setLightningEffects(LIGHTNING_MANA_BURN)
        ..setManaCost(1, 0)
        ..setDamageperTarget(1, 0)
        ..setDamageReductionperTarget(1, 0)
        ..setNumberofTargetsHit(1, 1)
    else
        RUNE_BLADE_BUFF.addSetupFunction() (Buff thisBuff, int factor) ->
            int burnt
            if factor == 1
                thisBuff.setData(runeBladeManaBurnt)
                burnt = runeBladeManaBurnt
            else
                burnt = thisBuff.getData()
            thisBuff.getTarget().wrapper().modAgility(factor * burnt)



    setupItem(ITEM_ID_RUNE_BLADE, CATEGORY)
    setActiveAbilities(ABILITY_RUNE_BLADE_BURN)
    addRequirements(ITEM_ID_BRUTAL_SLASHER, ITEM_ID_VOID_CRYSTAL, ITEM_ID_SKULL_AXE)
    addStatLine(ItemStat.STR, str)
    addStatLine(ItemStat.AGI, agi)
    addStatLine(ItemStat.LS, lifesteal)
    addUnique("Attacks steal mana equal to {0}% of the damage dealt.".format(manasteal.str()))
    addActive("Mana Burn", "Burns {0}% of the target's maximum mana. For every point burnt, the target takes 1 damage and the hero's magic resistance is increased by 1 for {1} seconds.".format(RUNE_BLADE_BURN.str(), RUNE_BLADE_SHIELD_DUR.str()))
    setInfo("Runic Blade")
    onEither() (int factor) ->
        modLifeSteal(lifesteal)
        attackDamageFunction() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, boolean attack, boolean _active, boolean advanced) ->
            var amount = (manasteal * damage / 100.0).reduceMagic(target.getUnitWp())
            amount = min(amount, target.getMana())
            source.damageMana(target, amount, ReductionType.NONE)
            source.healMana(source, amount)
            target.addEffect(Abilities.arcaneTowerAttack, "chest").destr()

        let trg = itemTrigger(-1)
        if trg != null
            trg.registerUnitEvent(getItemUnit(), EVENT_UNIT_SPELL_EFFECT)
            trg.addAction() ->
                if GetSpellAbilityId() == ABILITY_RUNE_BLADE_BURN
                    let caster = GetTriggerUnit()
                    let target = GetSpellTargetUnit()
                    let maxMana = target.getMaxMana()
                    runeBladeManaBurnt = min(maxMana * RUNE_BLADE_BURN / 100, target.getMana()).trunc()
                    caster.damageMana(target, runeBladeManaBurnt * 1.0, ReductionType.NONE)
                    caster.addBuff(caster, RUNE_BLADE_SHIELD_DUR * 1.0, RUNE_BLADE_BUFF, 1)
                    createManaBurnTextTag(target, runeBladeManaBurnt)


function cursedSword()
    let str = 1
    let steal = 10
    setupItem(ITEM_ID_SOUL_TORMENTOR, CATEGORY)
    addRequirements(ITEM_ID_BRUTAL_SLASHER, ITEM_ID_IRON_SWORD, ITEM_ID_RAVEN_SWORD)
    addStatLine(ItemStat.STR, str)
    addStatLine(ItemStat.LS, steal)
    setInfo("Cursed Sword")
    onEither() (int factor) ->
        modLifeSteal(steal)

function axeOfDecay()
    setupItem(ITEM_ID_AXE_OF_DECAY, CATEGORY)
    addRequirements(ITEM_ID_SKULL_AXE, ITEM_ID_SKULL_CRUSHER)
    setInfo("Axe of Decay")

constant ARCANE_BLADE_BUFF = compiletime(setupBuff("Arcane Blade", "This is under the effect of Arcane Blade; its next attack will deal additional magic damage.", "BTNScarabusEdgeV2", true, 1, "","", DispelLevel.DISPEL))

constant ARCANE_BLADE_DEBUFF = compiletime(setupBuff("Arcane Blade", "This is under the effect of Arcane Blade; it has reduced magic resistance.", "BTNScarabusEdgeV2", true, 1, "","", DispelLevel.DISPEL))

constant ARCANE_BLADE_DURATION = 4.0

function arcaneBlade()
    let dmg = 35
    let dmgInt = 25.0
    let mrReduce = 30
    let mrReduceDur = 5.0
    setupItem(ITEM_ID_ARCANE_BLADE, CATEGORY)
    addRequirements(ITEM_ID_RAVEN_SWORD, ITEM_ID_GEM_OF_MANA, ITEM_ID_SCEPTER_OF_THE_TIDES)
    addUnique("Attacks reduce the target's magic resistance by {0} for {1} seconds".format(mrReduce.str(), mrReduceDur.str()))
    addUnique("After casting a spell, the next attack within {0} seconds deals {1} additional magic damage.".format(ARCANE_BLADE_DURATION.str(), dmg.str() + bonusStringFactor(C_INT, dmgInt, "Intelligence")))
    
    setInfo("Arcane Blade")
    if not compiletime
        ARCANE_BLADE_DEBUFF.addLevelFunction() (Buff thisBuff, int factor) ->
            thisBuff.getTarget().wrapper().modAgilityRelative(-mrReduce * 10 * factor)
        HeroCast.register() -> 
            let hero = GetTriggerUnit()
            if hero.hasItemById(ITEM_ID_ARCANE_BLADE)
                hero.addBuff(hero, ARCANE_BLADE_DURATION, ARCANE_BLADE_BUFF, 1)
        onEither() (int factor) ->
            attackDamageFunction() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, boolean attack, boolean _active, boolean advanced) ->
                target.addBuffReduced(source, mrReduceDur, ARCANE_BLADE_DEBUFF, 1)
                let b = source.wrapper().getBuffOfType(ARCANE_BLADE_BUFF)
                if b != null
                    b.dispel()
                    source.dealDamage(target, dmg.toReal().bonus(source.getHeroInt(), dmgInt), ReductionType.MAGIC)
                    target.addEffect(Abilities.orbOfDeathMissile, "chest").destr()

    

function bloodStinger()
    let str = 1
    let steal = 25
    setupItem(ITEM_ID_BLOOD_STINGER, CATEGORY)
    addRequirements(ITEM_ID_DAGGER, ITEM_ID_BRUTAL_SLASHER, ITEM_ID_BRUTAL_SLASHER)
    addStatLine(ItemStat.STR, str)
    addStatLine(ItemStat.LS, steal)
    setInfo("Sacrificial Dagger")
    onEither() (int factor) ->
        modLifeSteal(steal)


constant SCIMITAR_BUFF = compiletime(setupBuff("Moon Light Scimitar", "Armor is reduced.", "BTNMercurialScimtar", false, 1, Abilities.orbCorruptionSpecialArt, "chest", DispelLevel.DISPEL))


function moonLightScimitar()
    let attacks = 5
    setupItem(ITEM_ID_MOON_LIGHT_SCIMITAR, CATEGORY)
    addRequirements(ITEM_ID_DAGGER, ITEM_ID_RAVEN_SWORD, ITEM_ID_IRON_SWORD)
    addUnique("Every {0}th attack applies on-hit effects twice.".format(attacks.str()))
    setInfo("Moon Light Scimitar")
    onEither() (int factor) ->
        DamageEventUnit.fromUnit(getItemUnit()).saveIntSlow(D_MOON_LIGHT_SCIMITAR_ATTACK_COUNTER, 0)
        attackDamageFunction() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, boolean attack, boolean active, boolean alternate) ->
            let counter = sourceWrapper.loadIntSlow(D_MOON_LIGHT_SCIMITAR_ATTACK_COUNTER) + 1
            if counter >= attacks
                sourceWrapper.saveIntSlow(D_MOON_LIGHT_SCIMITAR_ATTACK_COUNTER, -1)
                //print("Moon Light Scimitar")
                sourceWrapper.attackDamageNoBuilding.runEvents(source, target, sourceWrapper, targetWrapper, damage, attack, active, alternate)
            else
                sourceWrapper.saveIntSlow(D_MOON_LIGHT_SCIMITAR_ATTACK_COUNTER, counter)

            



function infernalBow()
    let str = 12
    let dps = 20
    let healing = 25
    let dur = 6
    let strPercentage = 10
    setupItem(ITEM_ID_INFERNAL_BOW, CATEGORY)
    addRequirements(ITEM_ID_BLAZING_BOW, ITEM_ID_MAGMA_CRYSTAL)
    addStatLine(ItemStat.STR, str)
    addStatLine(ItemStat.STR, strPercentage, true)
    addUnique("Attacks deal {0} magic damage per second and reduce healing by {1}% for {2} seconds.".format(dps.str(), healing.str(), dur.str()))
    setInfo("Infernal Bow")
    onEither() (int factor) ->
        modStrength(str)
        modStrengthRelative(strPercentage)
            

@compiletime
function initItems1()
    itemHammerOfStrength()
    woodenBow()
    warAxe()
    dagger()
    ironSword()

@compiletime
function initItems2()
    bloodSword()
    skullCrusher()
    woodenClub()
    skullAxe()
    ravenSword()
    blazingBow()
    magmaCrystal()


@compiletime
function initItems3()
    itemArmorBreaker()
    itemChillingBlade()
    axeOfEmbers()
    runeBlade()
    cursedSword()
    axeOfDecay()
    arcaneBlade()
    bloodStinger()
    moonLightScimitar()
    infernalBow()


init
    execute() ->
        initItems1()
    execute() ->
        initItems2()
    execute() ->
        initItems3()
