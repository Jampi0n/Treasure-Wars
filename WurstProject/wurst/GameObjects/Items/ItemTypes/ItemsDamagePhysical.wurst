package ItemsDamagePhysical

import ItemInclude

constant CATEGORY = 3

function itemHammerOfStrength()
    let str = 6
    let ap = 5
    setupItem(ITEM_ID_HAMMER_OF_STRENGTH, CATEGORY, 500)
    addStatLine(ItemStat.STR, str)
    addStatLine(ItemStat.AP, ap)
    setInfo("Hammer of Strength")
    onEither() (int factor) ->
        modStrength(str)
        modArmorReductionRelative(ap * 10)

function ironSword()
    let str = 8
    setupItem(ITEM_ID_IRON_SWORD, CATEGORY, 500)
    addStatLine(ItemStat.STR, str)
    setInfo("Iron Sword")
    onEither() (int factor) ->
        modStrength(str)

function warAxe()
    let str = 12
    setupItem(ITEM_ID_WAR_AXE, CATEGORY, 750)
    addStatLine(ItemStat.STR, str)
    setInfo("War Axe")
    onEither() (int factor) ->
        modStrength(str)

function dagger()
    let as = 12
    setupItem(ITEM_ID_DAGGER, CATEGORY, 500)
    addStatLine(ItemStat.AS, as, true)
    setInfo("Dagger")
    onEither() (int factor) ->
        modAttackSpeed(as)

function woodenBow()
    let str = 9
    let strPercentage = 5
    setupItem(ITEM_ID_BOW, CATEGORY, 900)
    addStatLine(ItemStat.STR, str)
    addStatLine(ItemStat.STR, strPercentage, true)
    setInfo("Wooden Bow")
    onEither() (int factor) ->
        modStrength(str)
        modStrengthRelative(strPercentage * 10)

function magmaCrystal()
    let dmg = 10
    setupItem(ITEM_ID_MAGMA_CRYSTAL, CATEGORY, 500)
    addLine("Attacks deal {0} additional magic damage.".format(dmg.toString()))
    setInfo("Magma Crystal")
        
function bloodSword()
    let str = 12
    let steal = 8
    setupItem(ITEM_ID_BRUTAL_SLASHER, CATEGORY, 1200)
    addStatLine(ItemStat.STR, str)
    addStatLine("lifesteal", steal, true)
    setInfo("Vampiric Sword")
    addRequirements(ITEM_ID_IRON_SWORD)
    onEither() (int factor) ->
        modLifeSteal(steal)
function skullCrusher()
    let str = 1
    setupItem(ITEM_ID_SKULL_CRUSHER, CATEGORY, 1500)
    setInfo("Orcish Warhammer", "+ {0} strength".format(str.toString()))
    addRequirements(ITEM_ID_HAMMER_OF_STRENGTH, ITEM_ID_WAR_AXE)
function woodenClub()
    let str = 1
    setupItem(ITEM_ID_WOODEB_CLUB, CATEGORY, 1300)
    setInfo("Giant Club", "+ {0} strength".format(str.toString()))
    addRequirements(ITEM_ID_HAMMER_OF_STRENGTH, ITEM_ID_GEM_OF_HEALTH)
function skullAxe()
    let str = 30
    setupItem(ITEM_ID_SKULL_AXE, CATEGORY, 1500)
    addStatLine(ItemStat.STR, str)
    setInfo("Skull Axe")
    addRequirements(ITEM_ID_WAR_AXE, ITEM_ID_IRON_SWORD)
function ravenSword()
    let str = 20
    let as = 15
    setupItem(ITEM_ID_RAVEN_SWORD, CATEGORY, 1400)
    addStatLine(ItemStat.STR, str)
    addStatLine(ItemStat.AS, as)
    setInfo("Raven Sword")
    addRequirements(ITEM_ID_IRON_SWORD, ITEM_ID_DAGGER)

function blazingBow()
    let str = 12
    setupItem(ITEM_ID_BLAZING_BOW, CATEGORY, 2200)
    setInfo("Blazing Bow", "+ {0} strength".format(str.toString()))
    addRequirements(ITEM_ID_BOW, ITEM_ID_MAGMA_CRYSTAL)
    onEither() (int factor) ->
        modStrength(str)

constant ARMOR_BREAKER_BUFF = compiletime(setupBuff("Armor Breaker", "This unit's armor is broken; it has reduced armor.", "BTNAzureCrystalHammerV2", false, 1, "", "", DispelLevel.DISPEL))
constant HAMMER_SLAM_BUFF = compiletime(setupBuff("Slam", "This unit has been hit by Slam; its movement speed and attack rate are reduced.", "BTNAzureCrystalHammerV2", false, 1, Abilities.stasisTotemTarget, "overhead", DispelLevel.DISPEL))

constant SLAM_DURATION = 3
            
constant ABILITY_ARMOR_BREAKER_SLAM = compiletime(ABIL_ID_GEN.next())

function itemArmorBreaker()
    let str = 20
    let armorDmg = 30
    let armorDuration = 4
    let activeDmg = 150
    let activeSlow = 50
    let cooldown = 45

    if compiletime
        new AbilityDefinitionPitLordHowlofTerror(ABILITY_ARMOR_BREAKER_SLAM)
        ..setCooldown(1, cooldown.toReal())
        ..targetNone()
        ..targetNone()
        ..setArtCaster("")
        ..setManaCost(1, 0)

    setupItem(ITEM_ID_ARMOR_BREAKER, CATEGORY, 4500)
    setActiveAbilities(ABILITY_ARMOR_BREAKER_SLAM)
    addUnique("Attacks reduce the target's armor by {0}% for {1} seconds.".format(armorDmg.str(), armorDuration.str()))
    addActive("Slam", "Slams the ground, dealing {0} damage and slowing enemy units by {1}% for {2} seconds.".format(activeDmg.str(), activeSlow.str(), SLAM_DURATION.str()))
    setInfo("Armor Breaker")
    addRequirements(ITEM_ID_SKULL_CRUSHER, ITEM_ID_WOODEB_CLUB)

    if not compiletime
        ARMOR_BREAKER_BUFF.addLevelFunction() (Buff thisBuff, int factor) ->
            thisBuff.getTarget().wrapper().modArmorRelative(-factor * armorDmg*10)
        HAMMER_SLAM_BUFF.addLevelFunction() (Buff thisBuff, int factor) ->
            thisBuff.getTarget().wrapper()..modMoveSpeedRelative(-factor * activeSlow*10)
            ..modAttackSpeed(-factor * activeSlow)
        onEither() (int factor) ->
            modStrength(str)
            attackDamageFunction() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, bool attack, bool arrow, bool alternate) ->
                target.addBuffReduced( source, armorDuration.toReal(), ARMOR_BREAKER_BUFF, 1)
                target.addEffect(Abilities.bloodElfSpellThiefMISSILE, "chest").destr()

            let trg = itemTrigger(-1)
            if trg != null
                trg.registerUnitEvent(getItemUnit(), EVENT_UNIT_SPELL_EFFECT)
                trg.addAction() ->
                    if GetSpellAbilityId() == ABILITY_ARMOR_BREAKER_SLAM
                        let caster = GetTriggerUnit()
                        let pos = caster.getPos()
                        addEffect(Abilities.thunderclapCaster, pos).destr()
                        let g = CreateGroup()
                        g.enumUnitsInRange(pos, 250)
                        let p = caster.getOwner()
                        for u from g
                            if u.isTargetableEnemyUnit(p)
                                u.addBuffReduced(caster, SLAM_DURATION.toReal(), HAMMER_SLAM_BUFF, 1)


constant CHILLING_BLADE_BUFF = compiletime(setupBuff("Chilling Blade", "This unit was hit by Chilling Blade; it has reduced movement speed.", "BTNMysticDagger", false, 1, Abilities.frostDamage, "chest", DispelLevel.DISPEL))

function itemChillingBlade()
    let str = 20
    let slowAmount = 30
    let slowDuration = 2
    setupItem(ITEM_ID_CHILLING_DAGGER, CATEGORY, 4500)
    addUnique("Attacks reduce the target's movement speed by {0}% for {1} seconds.".format(slowAmount.str(), slowDuration.str()))
    setInfo("Chilling Blade")
    addRequirements(ITEM_ID_IRON_SWORD, ITEM_ID_RAVEN_SWORD, ITEM_ID_IRON_SWORD)

    if not compiletime
        CHILLING_BLADE_BUFF.addSetupFunction() (Buff thisBuff, int factor) ->
            let wrapper = thisBuff.getTarget().wrapper()
            wrapper.modMoveSpeedRelative(-factor * slowAmount*10)
            wrapper.modBlue(factor)
        onEither() (int factor) ->
            modStrength(str)
            attackDamageFunction() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, bool attack, bool arrow, bool alternate) ->
                target.addBuffReduced( source, slowDuration.toReal(), CHILLING_BLADE_BUFF, 1)

function axeOfEmbers()
    let aoeDmg = 30
    let aoeRange = 150.0
    setupItem(ITEM_ID_AXE_OF_EMBERS, CATEGORY, 4500)
    addUnique("Attacks deal " + aoeDmg.toString() + " magic damage to enemy units around the target.")
    addRequirements(ITEM_ID_SKULL_AXE, ITEM_ID_MAGMA_CRYSTAL, ITEM_ID_WOODEB_CLUB)
    setInfo("Axe of Embers")
    onEither() (int factor) ->
        attackDamageFunction() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, boolean attack, boolean _active, boolean advanced) ->
            let g = CreateGroup()
            g.enumUnitsInRange(target.getPos(), aoeRange)
            for u from g
                if u.isTargetableEnemyUnit(source)
                    source.dealDamage(u, aoeDmg * 1.0, ReductionType.MAGIC)
                    u.addEffect(Abilities.fireBallMissile, "chest").destr()
function runeBlade()
    let str = 1
    let lifesteal = 10
    let manasteal = 5
    setupItem(ITEM_ID_RUNE_BLADE, CATEGORY, 4500)
    addRequirements(ITEM_ID_BRUTAL_SLASHER, ITEM_ID_VOID_CRYSTAL, ITEM_ID_SKULL_AXE)
    addStatLine(ItemStat.STR, str)
    addStatLine("lifesteal", lifesteal, true)
    addUnique("Attacks steal {0}% of the damage as mana.".format(manasteal.str()))
    setInfo("Runic Blade")
    onEither() (int factor) ->
        modLifeSteal(lifesteal)
        attackDamageFunction() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, boolean attack, boolean _active, boolean advanced) ->
            var amount = (manasteal * damage / 100.0).reduceMagic(target.getUnitWp())
            amount = min(amount, target.getMana())
            source.damageMana(target, amount, ReductionType.NONE)
            source.healMana(target, amount)
            target.addEffect(Abilities.arcaneTowerAttack, "chest").destr()


function cursedSword()
    let str = 1
    let steal = 10
    setupItem(ITEM_ID_SOUL_TORMENTOR, CATEGORY, 4500)
    addRequirements(ITEM_ID_BRUTAL_SLASHER, ITEM_ID_IRON_SWORD, ITEM_ID_RAVEN_SWORD)
    addStatLine(ItemStat.STR, str)
    addStatLine("lifesteal", steal, true)
    setInfo("Cursed Sword")
    onEither() (int factor) ->
        modLifeSteal(steal)

function axeOfDecay()
    setupItem(ITEM_ID_AXE_OF_DECAY, CATEGORY, 4500)
    addRequirements(ITEM_ID_SKULL_AXE, ITEM_ID_SKULL_CRUSHER)
    setInfo("Axe of Decay")

constant ARCANE_BLADE_BUFF = compiletime(setupBuff("Arcane Blade", "This is under the effect of Arcane Blade; its next attack will deal additional magic damage.", "BTNScarabusEdgeV2", true, 1, "","", DispelLevel.DISPEL))

constant ARCANE_BLADE_DURATION = 4.0

function arcaneBlade()
    let dmg = 35
    let dmgInt = 15.0
    setupItem(ITEM_ID_ARCANE_BLADE, CATEGORY, 4500)
    addRequirements(ITEM_ID_RAVEN_SWORD, ITEM_ID_GEM_OF_MANA, ITEM_ID_SCEPTER_OF_THE_TIDES)
    addUnique("After casting a spell, the next attack within {0} seconds deals {1} additional magic damage.".format(ARCANE_BLADE_DURATION.str(), dmg.str() + bonusStringFactor(C_INT, dmgInt, "Intelligence")))
    setInfo("Arcane Blade")
    if not compiletime
        registerOnHeroCast() -> 
            let hero = GetTriggerUnit()
            if hero.hasItemById(ITEM_ID_ARCANE_BLADE)
                hero.addBuff(hero, ARCANE_BLADE_DURATION, ARCANE_BLADE_BUFF, 1)
        onEither() (int factor) ->
            attackDamageFunction() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, boolean attack, boolean _active, boolean advanced) ->
                let b = source.wrapper().getBuffOfType(ARCANE_BLADE_BUFF)
                if b != null
                    b.dispel()
                    source.dealDamage(target, dmg.toReal().bonus(source.getHeroInt(), dmgInt), ReductionType.MAGIC)
                    target.addEffect(Abilities.orbOfDeathMissile, "chest").destr()

    

function bloodStinger()
    let str = 1
    let steal = 25
    setupItem(ITEM_ID_BLOOD_STINGER, CATEGORY, 4500)
    addRequirements(ITEM_ID_DAGGER, ITEM_ID_BRUTAL_SLASHER, ITEM_ID_BRUTAL_SLASHER, ITEM_ID_IRON_SWORD)
    addStatLine(ItemStat.STR, str)
    addStatLine("lifesteal", steal, true)
    setInfo("Sacrificial Dagger")
    onEither() (int factor) ->
        modLifeSteal(steal)


constant SCIMITAR_BUFF = compiletime(setupBuff("Moon Light Scimitar", "Armor is reduced.", "BTNMercurialScimtar", false, 1, Abilities.orbCorruptionSpecialArt, "chest", DispelLevel.DISPEL))

function moonLightScimitar()
    let armor = 10
    let dur = 5
    setupItem(ITEM_ID_MOON_LIGHT_SCIMITAR, CATEGORY, 4500)
    addRequirements(ITEM_ID_DAGGER, ITEM_ID_RAVEN_SWORD, ITEM_ID_DAGGER)
    addUnique("Attacks reduce the target's armor by {0} points for {1} seconds. This effect stacks.".format(armor.str(), dur.str()))
    setInfo("Moon Light Scimitar")

    if not compiletime
        SCIMITAR_BUFF.addSetupFunction() (Buff thisBuff, int factor) ->
            if factor == 1
                thisBuff.getTarget().wrapper()
                ..modArmor(-armor)
                thisBuff.setData(1)
            else
                let stacks = thisBuff.getData()
                thisBuff.getTarget().wrapper()
                ..modArmor(armor * stacks)

        SCIMITAR_BUFF.addStackFunction() (Buff whichBuff) ->
            let stacks = whichBuff.getData() + 1
            whichBuff.setData(stacks)
            whichBuff.getTarget().wrapper()
            ..modArmor(-armor)

        onEither() (int factor) ->
            attackDamageFunction() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, boolean attack, boolean _active, boolean advanced) ->
                target.addBuff(source, dur.toReal(), SCIMITAR_BUFF, 1)



function infernalBow()
    let str = 12
    let dps = 20
    let healing = 25
    let dur = 6
    setupItem(ITEM_ID_INFERNAL_BOW, CATEGORY, 4500)
    setInfo("Infernal Bow", "+ {0} strength".format(str.toString()))
    addRequirements(ITEM_ID_BLAZING_BOW, ITEM_ID_MAGMA_CRYSTAL)
    addUnique("Attacks deal {0} magic damage per second and reduce healing by {1}% for {2} seconds.".format(dps.str(), healing.str(), dur.str()))
    onEither() (int factor) ->
        modStrength(str)
            

@compiletime
function initItems1()
    itemHammerOfStrength()
    woodenBow()
    warAxe()
    dagger()
    ironSword()

@compiletime
function initItems2()
    bloodSword()
    skullCrusher()
    woodenClub()
    skullAxe()
    ravenSword()
    blazingBow()
    magmaCrystal()


@compiletime
function initItems3()
    itemArmorBreaker()
    itemChillingBlade()
    axeOfEmbers()
    runeBlade()
    cursedSword()
    axeOfDecay()
    arcaneBlade()
    bloodStinger()
    moonLightScimitar()
    infernalBow()


init
    execute() ->
        initItems1()
    execute() ->
        initItems2()
    execute() ->
        initItems3()
