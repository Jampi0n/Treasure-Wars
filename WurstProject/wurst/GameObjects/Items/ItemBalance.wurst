package ItemBalance

import ItemEffectPreset
import LinkedList
import ErrorHandling
import ItemConfiguration
import ItemConfigurationCompiletime
import FileLog

int exactGold = 0

public function roundGold(int gold) returns int
    return (gold/25).round()*25

public function updateGoldCost(int newValue)
    exactGold = newValue
    if compiletime
        currentItemDefinition.setGoldCost(roundGold(exactGold))
    else
        currentItemInShop.setTotalCost(roundGold(exactGold))

public function setupItem(int itemId, int category)
    exactGold = ItemBalance.gold()
    setupItem(itemId, category, roundGold(exactGold))

public function addPassive(string name, string desc, int gold)
    updateGoldCost(exactGold + gold)
    addPassive(name, desc)

public function addUnique(string desc, int gold)
    updateGoldCost(exactGold + gold)
    addUnique(desc)

public function addActive(string name, string desc, int gold)
    updateGoldCost(exactGold + gold)
    addActive(name, desc)

class StatValuePair
    ItemStat stat
    real value
    construct(ItemStat stat, real value)
        this.stat = stat
        this.value = value

public abstract class ItemBalance
    private static constant STRENGTH = 2
    private static constant ATTACK_SPEED = 2.5
    private static constant INTELLIGENCE = 2
    private static constant HEALTH = 30
    private static constant HEALTH_REG = 40
    private static constant MANA = 20
    private static constant MANA_REG = 10
    private static constant WILLPOWER = 3
    private static constant ARMOR = 3
    private static constant COOLDOWN = 2
    private static constant MOVEMENT_SPEED = 10
    private static constant LIFESTEAL = 2
    protected static real array PER_100
    protected static int array ROUND
    protected static real array result
    private static bool initialized = false
    private static LinkedList<ItemStat> statList = null
    private static LinkedList<int> valueList = null
    private static int gold = 0

    static function gold() returns int
        return gold

    static function str() returns int
        return getRoundedResult(ItemStat.STR)
    static function intel() returns int
        return getRoundedResult(ItemStat.INT)
    static function agi() returns int
        return getRoundedResult(ItemStat.AGI)
    static function hp() returns int
        return getRoundedResult(ItemStat.HP)
    static function hr() returns int
        return getRoundedResult(ItemStat.HR)
    static function mp() returns int
        return getRoundedResult(ItemStat.MP)
    static function mr() returns int
        return getRoundedResult(ItemStat.MR)
    static function ms() returns int
        return getRoundedResult(ItemStat.MS)
    static function as() returns int
        return getRoundedResult(ItemStat.AS)
    static function cd() returns int
        return getRoundedResult(ItemStat.CD)
    static function ar() returns int
        return getRoundedResult(ItemStat.AR)
    static function ls() returns int
        return getRoundedResult(ItemStat.LS)


    static function str(int value) returns int
        FILE_LOG.writeLine("str" + value.toString())
        ItemBalance.values(value)
        ItemBalance.stats(ItemStat.STR)
        return getRoundedResult(ItemStat.STR)
    static function intel(int value) returns int
        FILE_LOG.writeLine("intel" + value.toString())
        ItemBalance.values(value)
        ItemBalance.stats(ItemStat.INT)
        return getRoundedResult(ItemStat.INT)
    static function agi(int value) returns int
        FILE_LOG.writeLine("agi" + value.toString())
        ItemBalance.values(value)
        ItemBalance.stats(ItemStat.AGI)
        return getRoundedResult(ItemStat.AGI)
    static function hp(int value) returns int
        FILE_LOG.writeLine("hp" + value.toString())
        ItemBalance.values(value)
        ItemBalance.stats(ItemStat.HP)
        return getRoundedResult(ItemStat.HP)
    static function hr(int value) returns int
        FILE_LOG.writeLine("hr" + value.toString())
        ItemBalance.values(value)
        ItemBalance.stats(ItemStat.HR)
        return getRoundedResult(ItemStat.HR)
    static function mp(int value) returns int
        FILE_LOG.writeLine("mp" + value.toString())
        ItemBalance.values(value)
        ItemBalance.stats(ItemStat.MP)
        return getRoundedResult(ItemStat.MP)
    static function mr(int value) returns int
        FILE_LOG.writeLine("mr" + value.toString())
        ItemBalance.values(value)
        ItemBalance.stats(ItemStat.MR)    
        return getRoundedResult(ItemStat.MR)
    static function ms(int value) returns int
        FILE_LOG.writeLine("ms" + value.toString())
        ItemBalance.values(value)
        ItemBalance.stats(ItemStat.MS)
        return getRoundedResult(ItemStat.MS)
    static function as(int value) returns int
        FILE_LOG.writeLine("as" + value.toString())
        ItemBalance.values(value)
        ItemBalance.stats(ItemStat.AS)
        return getRoundedResult(ItemStat.AS)
    static function cd(int value) returns int
        FILE_LOG.writeLine("cd" + value.toString())
        ItemBalance.values(value)
        ItemBalance.stats(ItemStat.CD)
        return getRoundedResult(ItemStat.CD)
    static function ar(int value) returns int
        FILE_LOG.writeLine("ar" + value.toString())
        ItemBalance.values(value)
        ItemBalance.stats(ItemStat.AR)
        return getRoundedResult(ItemStat.AR)
    static function ls(int value) returns int
        FILE_LOG.writeLine("ls" + value.toString())
        ItemBalance.values(value)
        ItemBalance.stats(ItemStat.LS)
        return getRoundedResult(ItemStat.LS)

    static function stats(vararg ItemStat stats)
        FILE_LOG.writeLine("stats(")
        statList = new LinkedList<ItemStat>()
        for i in stats
            statList.add(i)
            FILE_LOG.writeLine((i castTo int).toString() + ",")
        if valueList != null
            calculateStatValues()
        FILE_LOG.writeLine(")")


    static function values(vararg int values)
        FILE_LOG.writeLine("values(")
        valueList = new LinkedList<int>()
        for i in values
            valueList.add(i)
            FILE_LOG.writeLine(i.toString() + ",")
        if statList != null
            calculateStatValues()
        FILE_LOG.writeLine(")")

    private static function updateResult(int stat, real value)
        result[stat] = value

    private static function getRoundedResult(ItemStat stat) returns int
        return (result[stat castTo int] / ROUND[stat castTo int]).round() * ROUND[stat castTo int]

    private static function calculateStatValues()
        if not initialized
            initialized = classInit()
        let statLength = statList.size()
        let valueLength = valueList.size()
        if statLength != valueLength
            error("Stat and value lists must have the same size")

        let statValueList = new LinkedList<StatValuePair>()
        for i = 0 to statLength - 1
            statValueList.add(new StatValuePair(statList.get(i), valueList.get(i).toReal()))

        for i = 0 to NUM_ITEM_STATS - 1
            updateResult(i, 0)

        statValueList.sortWith() (StatValuePair o1, StatValuePair o2) ->
            return (o2.value * 100).round() - (o1.value * 100).round()

        real totalValue = 0.0
        real remainingValue = 0.0
        while statValueList.size() > 0
            bool anyGain = false
            for pair in statValueList
                let stat = pair.stat castTo int
                let value = pair.value
                let gain = ((value/100) * PER_100[stat] / ROUND[stat]).floor() * ROUND[stat]
                if gain > 0.0
                    anyGain = true
                   
                updateResult(stat, result[stat] + gain)
                let usedValue = gain / PER_100[stat] * 100
                pair.value -= usedValue
                totalValue += usedValue
                if pair.value <= 0
                    statValueList.remove(pair)

            if not anyGain
                if statValueList.size() == 1
                    remainingValue = statValueList.getFirst().value
                    break
                else
                    let last = statValueList.pop()
                    let size = statValueList.size()
                    for pair in statValueList
                        pair.value += last.value / size

        if remainingValue > 0.1
            real minCost = -1.0
            int minStat = 0
            int minGain = 0
            for itemStat in statList
                let stat = itemStat castTo int
                let gain = ((remainingValue/100) * PER_100[stat] / ROUND[stat]).ceil() * ROUND[stat]
                let cost = gain / PER_100[stat] * 100
                if cost < minCost or minCost < -0.5
                    minCost = cost
                    minStat = stat
                    minGain = gain

            updateResult(minStat, result[minStat] + minGain)
            totalValue += minCost

        destroy statList
        destroy valueList
        statList = null
        valueList = null
        gold = totalValue.floor()


    private static function registerStat(ItemStat stat, real per100, int round)
        PER_100[stat castTo int] = per100
        ROUND[stat castTo int] = round
    private static function registerStat(ItemStat stat, int per100, int round)
        registerStat(stat, per100.toReal(), round)

    protected static function classInit() returns bool
        registerStat(ItemStat.STR, ItemBalance.STRENGTH, 1)
        registerStat(ItemStat.INT, ItemBalance.INTELLIGENCE, 1)
        registerStat(ItemStat.AGI, ItemBalance.WILLPOWER, 1)
        registerStat(ItemStat.HP, ItemBalance.HEALTH, 5)
        registerStat(ItemStat.MP, ItemBalance.MANA, 5)
        registerStat(ItemStat.HR, ItemBalance.HEALTH_REG, 5)
        registerStat(ItemStat.MR, ItemBalance.MANA_REG, 5)
        registerStat(ItemStat.AR, ItemBalance.ARMOR, 1)
        registerStat(ItemStat.CD, ItemBalance.COOLDOWN, 1)
        registerStat(ItemStat.MS, ItemBalance.MOVEMENT_SPEED, 1)
        registerStat(ItemStat.LS, ItemBalance.LIFESTEAL, 1)
        registerStat(ItemStat.AS, ItemBalance.ATTACK_SPEED, 1)
        return true


@Test function test()
    ItemBalance.stats(ItemStat.HP, ItemStat.AR)
    ItemBalance.values(501, 499)
    print(ItemBalance.hp())
    print(ItemBalance.ar())

    //print(ItemBalance.str(500))
