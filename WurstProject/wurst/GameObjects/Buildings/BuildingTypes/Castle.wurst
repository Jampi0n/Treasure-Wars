package Castle

import BuildingsInclude
import TimerUtils
import PathUnit
import Artillery

constant SOUND_CALL_TO_ARMS = new SoundDefinition(Sounds.humanCallToArmsWhat1, false, true)


vec2 array militaSpawn = [gg_rct_GreenCastle.getCenter(), gg_rct_BrownCastle.getCenter()]
LinkedList<unit> array militia = [new LinkedList<unit>(), new LinkedList<unit>()]
timer array removeMilitaTimer = [getTimer()..setData(0), getTimer()..setData(1)]
rect array militiaDespawn = [gg_rct_GreenMilitiaDespawn, gg_rct_BrownMilitiaDespawn]

function onMilitiaDespawn()
	let team = GetExpiredTimer().getData()
	for u in militia[team]
		if Players.team(u.getOwner().getId()) == team and militiaDespawn[team].contains(u.getPos())
			militia[team].remove(u)
			u.remove()

enum VictoryState
	UNDECIDED
	WIN_TEAM1
	WIN_TEAM2

VictoryState victoryState

function setVictoryState(VictoryState newState)
	victoryState = newState

	if newState != VictoryState.UNDECIDED
		gameOver = true

		//stops heroes from reviving
		for i = 0 to MAX_HERO_COUNT-1
			for IHero hero in Players.heroList(i)
				hero.destroyTimer()


		let g = CreateGroup()
		for i = 0 to bj_MAX_PLAYER_SLOTS-1
			GroupEnumUnitsOfPlayer(g, players[i], null)
			unit u
			while true
				u = FirstOfGroup(g)
				if u == null
					break
				g.remove(u)
				u.pause()

		g.destr()
				 
		int winTeam
		string teamName
		if newState == VictoryState.WIN_TEAM1
			teamName = Teams.COLORED_NAME[TEAM_1]
			winTeam = TEAM_1
		else
			teamName = Teams.COLORED_NAME[TEAM_2]
			winTeam = TEAM_2


		printTimed("Team "+teamName+" has destroyed the enemy castle and wins the game!", 60)

		//ScoreTable.extendToStatTable()
		stopSpawning()
		StatTable.create()

		printTimed("You can now view player stats on the Stats-Multiboard.", 60)
		ArtilleryDetection.enable(false)

		if false
			doAfter(5) ->
				let winList = Teams.HEROES[winTeam]
				let defeatList = Teams.HEROES[Teams.invert(winTeam)]

				for int id in winList
					CustomVictoryBJ( players[id] , false, true )

				for int id in defeatList
					CustomDefeatBJ( players[id], "Your team's castle has been destroyed." )

public class Castle extends Building
	construct()
		super(HU_MAIN, UD_MAIN, 0, 0)

	override function onDeath(unit building, unit killer)
		if victoryState == VictoryState.UNDECIDED
			if building.getOwner() == players[Teams.army1()]
				setVictoryState(VictoryState.WIN_TEAM2)
			else if building.getOwner() == players[Teams.army2()]
				setVictoryState(VictoryState.WIN_TEAM1)
			else
				error("Castle killed for player "+building.getOwner().getId().toString())

	override function onCast(unit building, int itemId, unit hero)
		let heroPos = hero.getPos3Zero()
		let team = Players.team(building.getOwner().getId())
		if itemId == 'I006' or itemId == 'I00D' //Call to Arms
			SOUND_CALL_TO_ARMS.playOnPoint(heroPos).snd.setVolume(350)
			let unitType = team == 0 ? MILITIA_DEFEND : MILITIA_DEFEND_2
			for i = 0 to 15
				let spawnedUnit = spawnUnit(team, unitType, militaSpawn[team])
				spawnedUnit.addBuff(spawnedUnit, -1, DEFEND_HOME_BASE, 1)
				militia[team].add(spawnedUnit)
			doAfter(45) () ->
				removeMilitaTimer[team].startPeriodic(0.1, ()->onMilitiaDespawn())
				for u in militia[team]
					u.addBuff(u, -1, DISARMED, 1)
					u.issuePointOrder("move", militaSpawn[team])
					if militiaDespawn[team].contains(u.getPos())
						militia[team].remove(u)
						u.remove()
			
			doAfter(50) () ->
				for u in militia[team]
					u.addBuff(u, -1, DISARMED, 1)
					u.issuePointOrder("move", militaSpawn[team])
					if militiaDespawn[team].contains(u.getPos())
						militia[team].remove(u)
						u.remove()
			
			doAfter(89) () ->
				removeMilitaTimer[team].pause()
				for u in militia[team]
					militia[team].remove(u)
					u.remove()
			

