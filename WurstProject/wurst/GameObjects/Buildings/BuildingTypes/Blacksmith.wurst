package Blacksmith

import BuildingsInclude

public unit array blacksmith = [udg_GreenBlacksmith[0], udg_GreenBlacksmith[1], udg_BrownBlacksmith[0], udg_BrownBlacksmith[1]]
public boolean array blacksmithAlive = [true, true, true, true]

constant SOUND_UPGRADE = new SoundDefinition(Sounds.blacksmithWhat1, false, true)

function getUpgrade(player armyPlayer, int index) returns int
    let p = armyPlayer.getId()
    if Players.isArmy1(p)
        return HU_UPGRADES[index]
    if Players.isArmy1(p)
        return UD_UPGRADES[index]
    return -1

function getUpgradeItem(player armyPlayer, int index) returns int
    let p = armyPlayer.getId()
    if Players.isArmy1(p)
        return HU_UPGRADE_ITEMS[index]
    if Players.isArmy1(p)
        return UD_UPGRADE_ITEMS[index]
    return -1



public class Blacksmith extends Building
    construct()
        super(HU_TECH, UD_TECH, 50, 50)

    override function onDeath(unit building, unit killer)
        for i = 0 to 3
            if building == blacksmith[i]
                blacksmithAlive[i] = false

    override function onCast(unit building, int itemId, unit hero)
        let heroPos = hero.getPos3Zero()
        let p = building.getOwner()
        for i = 0 to 3
            if itemId == getUpgradeItem(p, i)
                SOUND_UPGRADE.playOnPoint(heroPos).snd.setVolume(150)
                let current = GetPlayerTechCount(p, getUpgrade(p, i), true)
                if current == 4
                    SetPlayerTechMaxAllowed(p, itemId, 0)
                SetPlayerTechResearched(p, getUpgrade(p, i), current + 1)

                let g = CreateGroup()
                GroupEnumUnitsOfPlayer(g, p, null)
                unit u
                while(true)
                    u = FirstOfGroup(g)
                    if u == null
                        break
                    g.remove(u)
                    if not u.isType(UNIT_TYPE_STRUCTURE)// and not u.isDummy()
                        // the unit stats are already applied by upgrades
                        // only base value stats need to be updated and bonuses need to be recalculated
                        u.wrapper()
                        ..setStatBaseInternal(Stat.AR, u.getArmor().round())
                        ..setStatBaseInternal(Stat.STR, u.getBaseDamage(0))
                        ..setStatBaseInternal(Stat.AGI, u.getArmor().round())
                        ..modArmor(0)
                        ..modStrength(0)
                        ..modAgility(0)
                g.destr()
    

    static function findNextUpgrade(int team) returns int

        let teamPlayer = players[Teams.army(team)]
        int array upgrades
        int max = 5
        int index = -1
        for i = 0 to 3
            upgrades[i] = GetPlayerTechCount(teamPlayer, getUpgrade(teamPlayer, i), true)
            if upgrades[i] < max
                max = upgrades[i]
                index = i

        int ret = -1
        if index != -1
            ret = getUpgradeItem(teamPlayer, index)

        return ret

    static function findNextBlacksmith(int team, vec2 pos) returns unit
        unit ret = null
        real minDist = 1000000
        if team == TEAM_1
            for i=0 to 1
                if blacksmithAlive[i]
                    let dist = pos.distanceTo(blacksmith[i].getPos())
                    if dist < minDist 
                        minDist = dist
                        ret = blacksmith[i]
        else
            for i=2 to 3
                if blacksmithAlive[i]
                    let dist = pos.distanceTo(blacksmith[i].getPos())
                    if dist < minDist 
                        minDist = dist
                        ret = blacksmith[i]
        return ret
