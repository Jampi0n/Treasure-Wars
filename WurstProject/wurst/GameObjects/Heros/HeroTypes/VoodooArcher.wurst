package VoodooArcher

//12

import HeroInclude

int HERO_ORDER = 12

public class HeroVoodooArcher extends HeroTemplate
    use HeroTemplateModule

    override function objectDefinition()
        this.icon = "BTNShadowHunter"
        this.model = "Models\\ShadowhunterLujka.mdl"
        this.castBackswing = 0.5
        this.castPoint = 0.5
        this.launchZ = 80
        this.scalingValue = 1
        this.selectionScale = 1.25
        this.shadowX = 80
        this.shadowY = 80
        this.shadowH = 200
        this.shadowW = 200
        this.armorSoundType = ArmorSoundType.Flesh
        this.backswingPoint = 0.3
        this.damagePoint = 0.5
        this.projectileArc = 0.1
        this.projectileArt = "Models\\LujkaArrow.mdl"
        this.projectileHoming = true
        this.projectileSpeed = 1200
        this.range = 600
        this.weaponSound = weaponSound.Nothing
        this.weaponType = WeaponType.Missile
        this.unitSoundSet = "HeroShadowHunter"
        this.name = "Voodoo Archer"
        this.properName = "Jo Jo Headshrinker"

    static constant real array VOODOO_ARROW_DAMAGE = [5, 10, 15, 20, 25]


    override function setupPassive(int abilityId, IHeroType heroType)
        if compiletime
            createNoEffectAbiltiy(abilityId)
                ..setupIcon("PASDemonArrow")
                ..setupWithHotKey("Voodoo Arrows", "D")


        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceStrength(0)
        tooltip.setLearnString("Each attack deals additional void damage.") (int lvl) ->
            return "{0} damage.".format(
                VOODOO_ARROW_DAMAGE[lvl-1].str())
        
        
        for lvl = 1 to 5
            tooltip.setNormalString(false, lvl, "Each attack deals {0} additional void damage.".format( 
                VOODOO_ARROW_DAMAGE[lvl-1].str())
            )
        addDynamicTooltipStrength(heroType, tooltip)


    static constant real array GHOST_ARROWS_DAMAGE = [70, 110, 150, 190, 230]
    static constant real GHOST_ARROWS_DAMAGE_BONUS = 115


    override function setupQ(int abilityId, IHeroType heroType)
        if compiletime
            let MANA = skillData(90, 95, 100, 105, 110)
            let COOLDOWN = skillData(9, 9, 9, 9, 9)
            let RANGE = skillData(700, 700, 700, 700, 700)

            new AbilityDefinitionIllidanChannel(abilityId)
                ..setupIcon("BTNThunderArrow")
                ..setupWithHotKey("Ghost Arrows", "Q")
                ..setAnimationNames("spell")
                ..setupChannel(TargetType.UNIT, "channel", 0.5)
                ..targetEnemies()
                ..setSkillData(COOLDOWN, MANA, RANGE)

        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceStrength(GHOST_ARROWS_DAMAGE_BONUS)
        tooltip.setLearnString("Summons Ghost Arrows to pierce the target enemy unit dealing damage.") (int lvl) ->
            return "{0}{S0} damage.".format(
                GHOST_ARROWS_DAMAGE[lvl-1].str())
        
        
        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, "Summons Ghost Arrows to pierce the target enemy unit dealing {0}{S0} damage.".format(
                GHOST_ARROWS_DAMAGE[lvl-1].str())
            )
        addDynamicTooltipStrength(heroType, tooltip)


    static constant real array MIND_CURSE_MANA_DRAIN = [30, 40, 50, 60, 70]
    static constant real MIND_CURSE_MANA_DRAIN_BONUS = 30

    static constant real array MIND_CURSE_DURATION = [2.4, 2.8, 3.2, 3.6, 4]
    static constant real MIND_CURSE_DURATION_BONUS = 4

    static constant BUFF_MIND_CURSE_TARGET = compiletime(setupBuff("Mind Curse", "This unit is under the effect of Mind Curse; it loses mana over time and cannot cast spells.", "BTNWitchDoctorRitual", false, 5, Abilities.manaDrainTarget, "origin", DispelLevel.DISPEL))


    override function setupW(int abilityId, IHeroType heroType)

        if compiletime
            let MANA = skillData(60, 60, 60, 60, 60)
            let COOLDOWN = skillData(9, 9, 9, 9, 9)
            let RANGE = skillData(800, 800, 800, 800, 800)
            
            new AbilityDefinitionIllidanChannel(abilityId)
                ..setupIcon("BTNWitchDoctorRitual")
                ..setupWithHotKey("Mind Curse", "W")
                ..setAnimationNames("spell")
                ..setupChannel(TargetType.UNIT, "manaburn", 0.5)
                ..targetEnemies()
                ..setSkillData(COOLDOWN, MANA, RANGE)


        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceIntelligence(MIND_CURSE_MANA_DRAIN_BONUS, MIND_CURSE_DURATION_BONUS)
        tooltip.setLearnString("Burns mana of the target enemy unit over time and silences it.") (int lvl) ->
            return "{0}{I0} mana per second, {1}{I1} seconds.".format(
            MIND_CURSE_MANA_DRAIN[lvl-1].str(),
            MIND_CURSE_DURATION[lvl-1].str())
        
        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, "Burns {0}{I0} mana per second of the target enemy unit over time and silences it for {1}{I1} seconds.".format(
                MIND_CURSE_MANA_DRAIN[lvl-1].str(),
            MIND_CURSE_DURATION[lvl-1].str()))
        addDynamicTooltipIntelligence(heroType, tooltip)


    static constant int array SERPEND_WARD_HP = [0, 50, 100, 150, 200]
    static constant real SERPENT_WARD_DURATION = 30
    static constant real array SERPENT_POISON_DURATION = [2, 2.25, 2.5, 2.75, 3]

    static constant int SERPENT_POISON_ARMOR = 1
    static constant int SERPENT_POISON_SLOW = 1

    static constant int SERPENT_POISON_FIRST_ATTACK_FACTOR = 5
    static constant int array SERPENT_POISON_STACKS = [20, 25, 30, 35, 40]

    static constant int SERPENT_POSION_MAX_STACKS = 15

    static constant BUFF_SERPENT_POISON = compiletime(setupBuff("Serpent Poison", "This unit was hit by Serpent Ward; it is slowed and has reduced armor.", Icons.bTNSerpentWard, false, 5, Abilities.poisonStingTarget, "chest", DispelLevel.DISPEL))

    override function setupE(int abilityId, IHeroType heroType)

        if compiletime
            let MANA = skillData(60, 60, 60, 60, 60)
            let COOLDOWN = skillData(6, 6, 6, 6, 6)
            let RANGE = skillData(500, 500, 500, 500, 500)

            new AbilityDefinitionIllidanChannel(abilityId)
                ..setAnimationNames("spell")
                ..setupIcon(Icons.bTNSerpentWard)
                ..setupWithHotKey("Serpent Ward", "E")
                ..setupChannel(TargetType.POINT, "ward", 0.5)
                ..setSkillData(COOLDOWN, MANA, RANGE)


        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceIntelligence(0)
        tooltip.setLearnString(
            (
                "Summons an immobile serpentine ward to attack nearby enemies for {0} seconds. " +
                "Attacked targets have their armor and movement speed reduced. " + 
                "Stacks up to {1} times, but the first attack applies {2} stacks."
            ).format(
                SERPENT_WARD_DURATION.str(),
                SERPENT_POSION_MAX_STACKS.toString(),
                SERPENT_POISON_FIRST_ATTACK_FACTOR.toString()
            ),
            (int lvl) -> (begin
                return (
                    "{0} armor, {1}% movement speed per attack, {2} seconds."
                ).format(
                    (SERPENT_POISON_ARMOR*SERPENT_POISON_STACKS[lvl-1]/10).str(),
                    (SERPENT_POISON_SLOW*SERPENT_POISON_STACKS[lvl-1]/10).str(),
                    SERPENT_POISON_DURATION[lvl-1].str()
                )
            end)
        )
        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, 
                (
                    "Summons an immobile serpentine ward to attack nearby enemies for {3} seconds. " +
                    "Attacked targets have their armor reduced by {0} and movement speed by {1}% for {2} seconds per attack. " +
                    "Stacks up to {4} times, but the first attack applies {5} stacks."
                ).format(
                    (SERPENT_POISON_ARMOR*SERPENT_POISON_STACKS[lvl-1]/10).str(),
                    (SERPENT_POISON_SLOW*SERPENT_POISON_STACKS[lvl-1]/10).str(),
                    SERPENT_POISON_DURATION[lvl-1].str(),
                    SERPENT_WARD_DURATION.str(),
                    SERPENT_POSION_MAX_STACKS.toString(),
                    SERPENT_POISON_FIRST_ATTACK_FACTOR.toString()
                )
            )

        addDynamicTooltipIntelligence(heroType, tooltip)
            
    static constant real array BBV_DAMAGE = [38, 46, 54, 62, 70]
    static constant real BBV_DAMAGE_BONUS = 50
    static constant real BBV_DURATION = 4

    static constant integer BUFF_ID_ON_DEATH_COIL = compiletime(createDummyBuff())


    override function setupR(int abilityId, IHeroType heroType)

        if compiletime
            let MANA = skillData(160, 170, 180, 190, 200)
            let COOLDOWN = skillData(110, 110, 110, 110, 110)

            let aDef = new AbilityDefinitionKeeperoftheGroveTranquility(abilityId)
                ..setLevels(5)
                ..setupIcon(Icons.bTNBigBadVoodooSpell)
                ..setupWithHotKey("Big Bad Voodoo", "R")
                ..setAnimationNames("spell,channel")
                ..targetNone()
                ..setSkillData(COOLDOWN, MANA, 0)

            for lvl = 1 to 5
                aDef
                    ..setDurationHero(lvl, BBV_DURATION)
                    ..setDurationNormal(lvl, BBV_DURATION)
                    ..setEffects(lvl, "X000")

        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceIntelligence(BBV_DAMAGE_BONUS)
        tooltip.setLearnString("Deals void damage to all enemy heroes while channeling.".format(BBV_DURATION.str())) (int lvl) ->
            return "{0}{I0} damage per second.".format(
            BBV_DAMAGE[lvl-1].str())
        
        
        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, "Deals {0}{I0} void damage per second to all enemy heroes while channeling.".format(
                BBV_DAMAGE[lvl-1].str()))
        addDynamicTooltipIntelligence(heroType, tooltip)


    override function stats()
            
        setStat(Stat.AR, 31, 47)
        setStat(Stat.AS, 14, 48)
        setStat(Stat.HP, 11, 39)
        setStat(Stat.HR, 11, 29)
        setStat(Stat.MP, 17, 33)
        setStat(Stat.MR, 15, 29)
        setStat(Stat.MS, 31, 51)
        setStat(Stat.STR, 13, 61)
        setStat(Stat.AGI, 28, 43)
        setStat(Stat.INT, 9, 33)

    override static function castQ()
        let spellId = GetSpellAbilityId()
        let caster = GetTriggerUnit()
        let level = caster.getAbilityLevel(spellId)
        let target = GetSpellTargetUnit()
        let angles = 12
        let angleStep = bj_PI*2/angles

        for i = 0 to angles - 1
            let mOffset = vec2(0,0).polarOffset(angle(angleStep*i), 250)
            let facing = angle(angleStep*i+bj_PI)
            let fx = new Fx((target.getPos()+mOffset).withZ(110), facing, "Models\\LujkaArrow.mdl")
            doPeriodicallyTimed(0.03, 0.99, (CallbackCounted cb)-> begin
                fx.setXY(target.getPos()+mOffset)
                fx.setXYAngle(facing)
            end)
            doAfter(1, -> begin
                doPeriodicallyTimed(0.03, 0.3, (CallbackCounted cb)-> begin
                    fx.setXY(target.getPos()+mOffset*(cb.getCount()/10))
                    if cb.isLast()
                        destroy fx
                end)
            end)
        doAfter(1.25) ->
            caster.dealDamage(target, GHOST_ARROWS_DAMAGE[level-1].bonus(caster.getHeroStr(), GHOST_ARROWS_DAMAGE_BONUS), ReductionType.PHYSICAL)
        

    override static function castW()
        let spellId = GetSpellAbilityId()
        let caster = GetTriggerUnit()
        let level = caster.getAbilityLevel(spellId)
        let target = GetSpellTargetUnit()
        let dur = MIND_CURSE_DURATION[level-1].bonus(caster.getHeroInt(), MIND_CURSE_DURATION_BONUS)
        target.addBuffReduced(caster, dur, BUFF_MIND_CURSE_TARGET, level)
        target.addBuffReduced(caster, dur, SILENCED, 1).setDispelLevel(DispelLevel.DISPEL)

    override static function castE()
        let spellId = GetSpellAbilityId()
        let caster = GetTriggerUnit()
        let level = caster.getAbilityLevel(spellId)
        let ward = createUnit(caster.getOwner(), SERPENT_WARD, vec2(GetSpellTargetX(), GetSpellTargetY()), angle(0))
        let wrapper = ward.wrapper()
        ward.setTimedLife(SERPENT_WARD_DURATION)
        wrapper.setOwningHero(caster.toHero())
        wrapper.modHealth( SERPEND_WARD_HP[level-1] )

        DamageEventUnit.fromUnit(ward).attackDamageNoBuilding.add() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, bool attack, bool arrow, bool alternate) ->
            let hero = source.wrapper().getOwningHero().toUnit()
            if not target.isType(UNIT_TYPE_STRUCTURE)
                target.addBuffReduced(hero, SERPENT_POISON_DURATION[level-1], BUFF_SERPENT_POISON, level)

    override static function castR()
        let spellId = GetSpellAbilityId()
        let caster = GetTriggerUnit()
        let level = caster.getAbilityLevel(spellId)
        let fx = caster.addEffect(Abilities.voodooAura, "origin")
        let enemyList = Teams.HERO_PLAYERS[Teams.invert(Players.team(caster.getOwner().getId()))]
        doPeriodically(0.1, (cb) -> begin
            if not caster.isAlive() or caster.getCurrentOrder() != OrderId("tranquility")
                destroy cb
                fx.destr()
            else
                for p in enemyList
                    for IHero hero in Players.heroList(p)
                        let target = hero.toUnit()
                        if target.isTargetableEnemy(caster)
                            caster.dealDamage(target, 0.1 * BBV_DAMAGE[level-1].bonus(caster.getHeroInt(), BBV_DAMAGE_BONUS), ReductionType.NONE)
                            target.addEffect(Abilities.vengeanceMissile, "overhead").destr()
                    
        end)

    override function retreatAI(IHeroAI _ai)

    override function attackAI(IHeroAI _ai)

    override function teamFightAI(IHeroAI _ai)

    override function recommendedItems(LinkedList<int> list)
        list.add(ITEM_ID_BOOTS_BASE)
        
    override function onInit(IHeroType heroType)
        heroType.setOnAttackFunc() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, boolean attack, boolean active, boolean advanced) ->
            let level = source.getAbilityLevel(ABILITY_ID_Q)
            source.dealDamage(target, VOODOO_ARROW_DAMAGE[level-1], ReductionType.NONE)

    override function onInitDelayed(IHeroType heroType)
        BUFF_MIND_CURSE_TARGET.setPeriodicTime(0.25)
        BUFF_MIND_CURSE_TARGET.addPeriodicFunction((whichBuff) -> begin
            let target = whichBuff.getTarget()
            let caster = whichBuff.getCaster()
            let level = whichBuff.getLevel()
            caster.damageMana(target, 0.25 * MIND_CURSE_MANA_DRAIN[level-1].bonus(caster.getHeroInt(), MIND_CURSE_MANA_DRAIN_BONUS), ReductionType.MAGIC)
        end)
        /*
            About stacks:
            Stacks are used, so the buff is level independent.
            Instead more stacks are gained on higher levels.
            Stacks are divided by 10 to allow smaller numbers: 25 -> 2.5 stacks
            To use non-integer values for stacks, the total stack amount is rounded down.
            So if you have 3 times 2.5 stacks, you have 7 in total.
            The stack number times 10 is stored in data to have the accuracy of one decimal.
            To ensure no rounding errors, the new bonus is calculated by (stacks div 10) - (prevStacks div 10)
            So the new total bonus is calculated and the old total bonus is subtracted.
            This makes sure rounding only occures in the total bonus.

            Stacks SERPENT_POSION_MAX_STACKS times. In reality the total stack count is capped at
            SERPENT_POSION_MAX_STACKS * SERPENT_POISON_STACKS[level-1]
        */
        BUFF_SERPENT_POISON.addSetupFunction() (Buff thisBuff, int factor) ->
            let level = thisBuff.getLevel()
            let target = thisBuff.getTarget().wrapper()
            if factor == 1
                thisBuff.setData(SERPENT_POISON_STACKS[level-1])
            let stacks = thisBuff.getData() div 10
            target.modMoveSpeedRelative( -factor * 10 * SERPENT_POISON_SLOW * (stacks))
            target.modArmor( -factor * SERPENT_POISON_ARMOR * (stacks))

        BUFF_SERPENT_POISON.addStackFunction( (Buff whichBuff) -> (begin
            let level = whichBuff.getLevel()
            let prevStacks = whichBuff.getData()
            let newStacks = min(prevStacks + SERPENT_POISON_STACKS[level-1], SERPENT_POISON_STACKS[level-1]*SERPENT_POSION_MAX_STACKS)
            let stackDiff = (newStacks div 10) - (prevStacks div 10)
            whichBuff.setData(newStacks)
            whichBuff.getTarget().wrapper()
                ..modMoveSpeedRelative( -10 * SERPENT_POISON_SLOW * stackDiff) 
                ..modArmor( -SERPENT_POISON_ARMOR * stackDiff)
        end))


    
init
    initialize()
    
@compiletime
function initialize()
    HeroType.create(new HeroVoodooArcher(), HERO_ORDER)
        
