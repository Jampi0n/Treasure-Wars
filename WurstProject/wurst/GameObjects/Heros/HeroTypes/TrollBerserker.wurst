package TrollBerserker

//7

import HeroInclude

int HERO_ORDER = 7

public class HeroTrollBerserker extends HeroTemplate
    use HeroTemplateModule

    override function customDefintions(HeroDefinition def)
        let melee = defaultHero(HERO_TROLL_BERSERKER_MELEE)
        applyObjectDefinition(melee)
        melee
        ..setAttack1ProjectileArt("")
        ..setAttack1Range(100)
        ..setAttack1WeaponType(WeaponType.Normal)
        ..setAttack1WeaponSound(weaponSound.MetalHeavySlice)


    override function objectDefinition()
        this.icon = "BTNForestTroll"
        this.model = "Models\\Zuljin.mdl"
        this.castBackswing = 0.5
        this.castPoint = 0.5
        this.scalingValue = 1.3
        this.selectionScale = 1.9
        this.shadowX = 80
        this.shadowY = 80
        this.shadowH = 200
        this.shadowW = 200
        this.armorSoundType = ArmorSoundType.Flesh
        this.backswingPoint = 0.3
        this.damagePoint = 0.3
        this.projectileArc = 0.15
        this.projectileArt = "Models\\ZuljinProjectile.mdl"
        this.projectileHoming = true
        this.projectileSpeed = 1200
        this.range = 600
        this.weaponSound = weaponSound.Nothing
        this.weaponType = WeaponType.Missile
        this.unitSoundSet = "ForestTroll"
        this.name = "Troll Berserker"
        this.properName = "Shaka-zahn"

    static constant HERO_TROLL_BERSERKER_MELEE = compiletime(HERO_ID_GEN.next())

    static constant real array FOCUS_DURATION = [4, 6, 8, 10, 12]
    static constant int FOCUS_BONUS = 2


    override function setupPassive(int abilityId, IHeroType heroType)
        if compiletime
            createNoEffectAbiltiy(abilityId)
                ..setupIcon("PASGrimRupture")
                ..setupWithHotKey("Focus", "D")

        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceStrength(0)
        tooltip.setLearnString("Every attack increases the Troll Berserker's strength by {0} for a short time.".format(FOCUS_BONUS.str())) (int lvl) ->
            return "{0} seconds.".format(
                FOCUS_DURATION[lvl-1].str()
                )
        
        
        for lvl = 1 to 5
            tooltip.setNormalString(false, lvl, "Every attack increases the Troll Berserker's strength by {0} for {1} seconds.".format(
                FOCUS_BONUS.str(), FOCUS_DURATION[lvl-1].str()
            ))
        addDynamicTooltipStrength(heroType, tooltip)

    static constant real array CRITICAL_DAMAGE_MULT = [65, 80, 95, 110, 125]

    static constant BUFF_CRITICAL_STRIKE = compiletime(setupBuff("Critical Strike", "This unit's next attack will deal more damage.", "BTN_CR_BLOOD", true, 5, "", "", DispelLevel.BREAK))



    override function setupQ(int abilityId, IHeroType heroType)

        if compiletime
            let MANA = skillData(30, 30, 30, 30, 30)
            let COOLDOWN = skillData(5, 5, 5, 5, 5)

            let aDef = new AbilityDefinitionBeserk(abilityId)
                ..setupIcon("BTN_CR_BLOOD")
                ..setAnimationNames("")
                ..setupWithHotKey("Critical Strike", "Q")
                ..setLightningEffects("")
                ..setArtTarget("")
                ..setMissileArt("")
                ..setArtSpecial("")
                ..setLightningEffects("")
                ..setCheckDependencies(true)
                ..setSkillData(COOLDOWN, MANA, 0)

            for lvl = 1 to 5
                aDef
                    ..setAttackSpeedIncrease(lvl, 0)
                    ..setDamageTakenIncrease(lvl, 0)
                    ..setMovementSpeedIncrease(lvl, 0)
                    ..setBuffs(lvl, BUFF_CRITICAL_STRIKE.getBuffId().toRawCode())
                    ..setDurationHero(lvl, 0.01)

        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceStrength(0)
        tooltip.setLearnString("Increases the attack damage of the next attack.") (int lvl) ->
            return "{0}% damage increase.".format(
                CRITICAL_DAMAGE_MULT[lvl-1].str()
                )
        
        
        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, "Increases the attack damage of the next attack by {0}%.".format(
                CRITICAL_DAMAGE_MULT[lvl-1].str()
            ))
        addDynamicTooltipStrength(heroType, tooltip)


    static constant real array BLINK_MAX_RANGE =[700, 750, 800, 850, 900]

    override function setupW(int abilityId, IHeroType heroType)
        let COOLDOWN = skillData(18, 16, 14, 12, 10)
        if compiletime
            let MANA = skillData(50, 50, 50, 50, 50)
            let aDef = new AbilityDefinitionWardenBlink(abilityId)
                ..setAnimationNames("")
                ..setupWithHotKey("Blink", "W")
                ..setLightningEffects("")
                ..setArtTarget("")
                ..setMissileArt("")
                ..setArtSpecial("")
                ..setLightningEffects("")
                ..setCheckDependencies(true)
                ..setSkillData(COOLDOWN, MANA, 99999)

            for lvl = 1 to 5
                aDef
                    ..setMinimumRange(lvl, 250)
                    ..setMaximumRange(lvl, BLINK_MAX_RANGE[lvl-1])

        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceStrength(0)
        tooltip.setLearnString("Teleports the Troll Berserker a short distance.") (int lvl) ->
            return "{0} range, {1} seconds cooldown".format(
                BLINK_MAX_RANGE[lvl-1].str(),
                COOLDOWN.data(lvl).str()
                )
        
        
        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, "Teleports the Troll Berserker a short distance.")
        addDynamicTooltipStrength(heroType, tooltip)

    static constant int array SWITCH_DMG = [12, 18, 26, 36, 48]
    static constant int array SWITCH_MOVE_SPEED = [20, 25, 30, 35, 40]

    static constant real SWITCH_DURATION = 1.67


    override function setupE(int abilityId, IHeroType heroType)

        if compiletime
            let MANA = skillData(20, 20, 20, 20, 20)
            let COOLDOWN = skillData(5, 5, 5, 5, 5)

            let aDef = new AbilityDefinitionBearform(abilityId)
                ..setupIcon("BTNLightning_blade")
                ..setIconTurnOff("ReplaceableTextures\\CommandButtons\\BTNThrowingAxe.blp")
                ..setupWithHotKey("Switch to Melee", "E")
                ..setTurnOff("Switch to Ranged", "E")
                ..setSkillData(COOLDOWN, MANA, 0)

            for lvl = 1 to 5
                aDef
                    ..setNormalFormUnit(lvl, UNIT_ID_HERO.toRawCode())
                    ..setAlternateFormUnit(lvl, HERO_TROLL_BERSERKER_MELEE.toRawCode())
                    ..setDurationNormal(lvl, SWITCH_DURATION)

        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceStrength(0)
        tooltip.setLearnString("Turnes the Troll Berserker into a melee fighter, increasing attack damage and movement speed.") (int lvl) ->
            return "+{0} attack damage, +{1} movement speed.".format(
                SWITCH_DMG[lvl-1].str(), SWITCH_MOVE_SPEED[lvl-1].str()
            )
        
        
        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, "Turnes the Troll Berserker into a melee fighter, increasing attack damage by {0} and movement speed by {1}.".format(
                SWITCH_DMG[lvl-1].str(), SWITCH_MOVE_SPEED[lvl-1].str()
            ))
            tooltip.setTurnOffString(true, lvl, "Turnes the Troll Berserker back into a ranged fighter.")
        addDynamicTooltipStrength(heroType, tooltip)


    static constant real array GROWTH_HP =[300, 350, 400, 450, 500]
    static constant real GROWTH_HP_BONUS = 400
    static constant int array GROWTH_HP_REGEN = [16, 22, 28, 34, 40]

    static constant real array GROWTH_DURATION = [15, 15, 15, 15, 15]

    static constant real array GROWTH_FEAR_DURATION = [1.5, 1.75, 2, 2.25 ,2.5]
    static constant real GROWTH_FEAR_AOE = 900

    static constant int GROWTH_ABILITY_ID = compiletime(ABIL_ID_GEN.next())

    static constant real GROWTH_SCALE = 1.7

    static constant BUFF_GROWTH = compiletime(setupBuff("Berserk", "This unit's maximum hit points and hit point regeneration are increased.", "BTNDireGrowth", true, GROWTH_ABILITY_ID, DispelLevel.BREAK))
    static constant BUFF_GROWTH_FEAR = compiletime(setupBuff("Berserk- Fear", "This unit is under the effect of Fear; it cannot move.", "BTNDireGrowth", false, 5, "FearEffect2.mdx", "overhead", DispelLevel.DISPEL))


    override function setupR(int abilityId, IHeroType heroType)

        if compiletime
            let MANA = skillData(140, 150, 160, 170, 180)
            let COOLDOWN = skillData(75, 75, 75, 75, 75)

            let buffADef = new AbilityDefinitionUnholyAuracreep(GROWTH_ABILITY_ID)
                ..setArtTarget("Abilities\\Spells\\Orc\\Bloodlust\\BloodlustTarget.mdl,Abilities\\Spells\\Orc\\Bloodlust\\BloodlustSpecial.mdl")
                ..setTargetAttachmentPoint("hand,left")
                ..setTargetAttachmentPoint1("hand,right")
                ..setTargetAttachments(2)
                ..hideIcon()
            for i = 1 to 5
                buffADef
                    ..setTargetsAllowed(i, "invulnerable,self,vulnerable")
                    ..setAreaofEffect(i, 1)
                    ..setMovementSpeedIncrease(i, 0)
                    ..setLifeRegenerationIncrease(i, 0)
                    ..setBuffs(i, BUFF_GROWTH.getBuffId().toRawCode())


            new AbilityDefinitionRoar(abilityId)
                ..setupIcon("BTNDireGrowth")
                ..setAnimationNames("")
                ..setupWithHotKey("Berserk", "R")
                ..setLightningEffects("")
                ..setArtTarget("")
                ..setMissileArt("")
                ..setArtSpecial("")
                ..setLightningEffects("")
                ..setCheckDependencies(true)
                ..targetNone()
                ..setSkillData(COOLDOWN, MANA, 0)

        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceIntelligence(GROWTH_HP_BONUS)
        tooltip.setLearnString("Increases the Troll Berserker's maximum hit points and hit point regeneration. When activated, the Troll Berserker petrifies nearby enemies making them unable to move for a short time.") (int lvl) ->
            return "{0}{I0} hit points, {1} hit point regeneration per second, lasts {2} seconds, {3} seconds fear.".format(
                GROWTH_HP[lvl-1].str(), GROWTH_HP_REGEN[lvl-1].str(), GROWTH_DURATION[lvl-1].str(), GROWTH_FEAR_DURATION[lvl-1].str())
        
        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, "Increases the Troll Berserker's maximum hit points by {0}{I0} and hit point regeneration by {1} hit points per second for {2} seconds. When activated, the Troll Berserker petrifies nearby enemies making them unable to move for {3} seconds.".format(
                GROWTH_HP[lvl-1].str(), GROWTH_HP_REGEN[lvl-1].str(), GROWTH_DURATION[lvl-1].str(), GROWTH_FEAR_DURATION[lvl-1].str()))
        addDynamicTooltipIntelligence(heroType, tooltip)
                

    static function onMeleeStats(unit caster, int level) // add bonus
        caster.wrapper().modStrength( SWITCH_DMG[level-1])
        caster.wrapper().modMoveSpeed( SWITCH_MOVE_SPEED[level-1])

    static function onSwitchToMelee(unit caster, int level) // add bonus
        doAfter(0) () ->
            caster.toHero().morph()
            onMeleeStats(caster, level)
            if caster.wrapper().hasBuffOfType(BUFF_GROWTH)
                caster.setScale(GROWTH_SCALE)
        

    static function onRangedStats(unit caster, int level) // remove bonus
        caster.wrapper().modStrength( -SWITCH_DMG[level-1])
        caster.wrapper().modMoveSpeed( -SWITCH_MOVE_SPEED[level-1])
        

    static function onSwitchToRanged(unit caster, int level) // remove bonus
        doAfter(0) () ->
            caster.toHero().morph()
            onRangedStats(caster, level)
            if caster.wrapper().hasBuffOfType(BUFF_GROWTH)
                caster.setScale(GROWTH_SCALE)
        



    function onAttack(unit attacker, unit _target, boolean _isActive)
        let level = attacker.getAbilityLevel(ABILITY_ID_PASSIVE)
        if level > 0
            let wrapper = attacker.wrapper()
            wrapper.modStrength( FOCUS_BONUS)
            doAfter(FOCUS_DURATION[level-1], () -> (wrapper.modStrength( -FOCUS_BONUS)))
        
    override static function castQ()
        let spellId = GetSpellAbilityId()
        let caster = GetTriggerUnit()
        let level = caster.getAbilityLevel(spellId)
        caster.addBuff(caster, 4, BUFF_CRITICAL_STRIKE, level)

    override static function castW()

    override static function castE()
        let spellId = GetSpellAbilityId()
        let caster = GetTriggerUnit()
        let level = caster.getAbilityLevel(spellId)
        if caster.getTypeId() == instance.UNIT_ID_HERO
            doAfter( SWITCH_DURATION, () -> onSwitchToMelee(caster, level))
        else
            doAfter( SWITCH_DURATION, () -> onSwitchToRanged(caster, level))

    override static function castR()
        let spellId = GetSpellAbilityId()
        let caster = GetTriggerUnit()
        let level = caster.getAbilityLevel(spellId)
        caster.addBuff(caster, GROWTH_DURATION[level-1], BUFF_GROWTH, level)
        let nearby = CreateGroup()

        nearby.enumUnitsInRange(caster.getPos(), GROWTH_FEAR_AOE)


        while(not nearby.isEmpty())
            let target = FirstOfGroup(nearby)
            nearby.removeUnit(target)
            if target.isTargetableEnemyUnit(caster)

                target.addBuffReduced(caster, GROWTH_FEAR_DURATION[level-1], BUFF_GROWTH_FEAR, level)
                target.addBuffReduced(caster, GROWTH_FEAR_DURATION[level-1], ENSNARED, level).setDispelLevel(DispelLevel.DISPEL)


        nearby.destr()


    override function stats()
        setStat(Stat.AR, 28, 54)
        setStat(Stat.AS, 18, 56)
        setStat(Stat.HP, 14, 44)
        setStat(Stat.HR, 15, 34)
        setStat(Stat.MP, 10, 27)
        setStat(Stat.MR, 12, 37)
        setStat(Stat.MS, 12, 31)
        setStat(Stat.STR, 11, 48)
        setStat(Stat.AGI, 28, 46)
        setStat(Stat.INT, 4, 11)

    override function retreatAI(IHeroAI ai)
        ai.issue("blink", ai.getHomeLoc())

    override function attackAI(IHeroAI ai)
        let hero = ai.getHeroUnit()

        unit target = hero.findTarget(700, AbilityTargetFocus.ENEMY_HERO, AbilityTargetPriority.LOW_HEALTH, null)
        if target.isTargetableEnemy(hero)
            ai.issue("attackonce", target)

        target = hero.findTarget(600, AbilityTargetFocus.ENEMY, AbilityTargetPriority.LOW_HEALTH, null)
        if target.isTargetableEnemy(hero)
            if not ai.getAttacking()
                ai.attack(target)

    override function teamFightAI(IHeroAI ai)
        let ulti = ABILITY_ID_R
        let hero = ai.getHeroUnit()
        if hero.getAbilityLevel(ulti) > 0 and hero.getAbilityCooldownRemaining(ulti) <= 0
            let g = CreateGroup()
            unit u
            int count = 0
            g.enumUnitsInRange(hero.getPos(), GROWTH_FEAR_AOE)
            while(true)
                u = FirstOfGroup(g)
                if u == null
                    break
                g.removeUnit(u)
                if u.isTargetableEnemy(hero)
                    if u.isType(UNIT_TYPE_HERO)
                        count++

            g.destr()
            if count != 0
                if ai.issue("roar")
                    return

            
        let target = ai.getTeamFightTarget()
        if target.isTargetableEnemy(hero)
            hero.issueImmediateOrder("berserk")

            if not ai.getAttacking()
                ai.attack(target)


    override function skillBuild() returns string
        return "QWQWQWQWQWEEEEE"

    override function recommendedItems(LinkedList<int> list)
        list.add(ITEM_ID_BOOTS_BASE)

    override function onCreate(IHeroType heroType, IHero hero)
        let heroUnit = hero.toUnit()
        CreateTrigger()
        ..registerUnitEvent(heroUnit, EVENT_UNIT_DEATH)
        ..addAction(() -> (begin
            if GetTriggerUnit().getTypeId() == HERO_TROLL_BERSERKER_MELEE
                let u = GetTriggerUnit()
                onSwitchToRanged(u, u.getAbilityLevel(HeroTrollBerserker.instance.ABILITY_ID_E))

        end))

        CreateTrigger()
        ..registerUnitEvent(heroUnit, EVENT_UNIT_HERO_SKILL)
        ..addAction(() -> (begin
            let u = GetTriggerUnit()

            if GetLearnedSkill() == HeroTrollBerserker.instance.ABILITY_ID_E and u.getTypeId() == HERO_TROLL_BERSERKER_MELEE
                let newLevel = u.getAbilityLevel(HeroTrollBerserker.instance.ABILITY_ID_E)
                onRangedStats(u, newLevel - 1)
                onMeleeStats(u, newLevel)
        end))

    override function onInit(IHeroType heroType)
        heroType.setOnAttackFunc() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, boolean attack, boolean active, boolean advanced) ->
            onAttack(source, target, active)
    override function onInitDelayed(IHeroType heroType)
        heroType.addMorph(HERO_TROLL_BERSERKER_MELEE)

        BUFF_CRITICAL_STRIKE.addSetupFunction() (Buff thisBuff, int factor) ->
            DamageEvent.useAlternate( thisBuff.getTarget(), factor == 1)

        BUFF_GROWTH.addLevelFunction() (Buff thisBuff, int factor) ->
            let level = thisBuff.getLevel()
            let caster = thisBuff.getCaster()
            let target = thisBuff.getTarget()
            int hpBonus
            if factor == 1
                hpBonus = GROWTH_HP[level-1].bonus(caster.getHeroInt(), GROWTH_HP_BONUS).toInt()
                thisBuff.setData(hpBonus)
                target.setScale(GROWTH_SCALE)
            else
                hpBonus = thisBuff.getData()
                target.setScale(1.3)
            target.wrapper()
            ..modHealth( factor * hpBonus)
            ..modHealthRegen( factor * GROWTH_HP_REGEN[level-1]*10)


init
    initialize()
    
@compiletime
function initialize()
    HeroType.create(new HeroTrollBerserker(), HERO_ORDER)

   


