package Destroyer


import HeroInclude

constant int HERO_ORDER = 13

class DestroyerInstance
    use HeroInstance
    group hitByBreath = CreateGroup()




public class HeroDestroyer extends HeroTemplate
    use HeroTemplateModule
    override function objectDefinition()
        this.model = "Models\\Eligoropt.mdl"
        this.icon = "BTNEligor"
        this.castBackswing = 0.375
        this.castPoint = 0.4
        this.impactZ = 60
        this.launchY = 0
        this.launchZ = 60
        this.selectionScale = 1.35
        this.scalingValue = 0.9
        this.shadowX = 80
        this.shadowY = 80
        this.shadowH = 200
        this.shadowW = 200
        this.armorSoundType = ArmorSoundType.Flesh
        this.backswingPoint = 0.65
        this.damagePoint = 0.35
        this.cooldownTime = 1.8
        this.range = 100
        this.weaponSound = weaponSound.MetalMediumChop
        this.unitSoundSet = "Tauren"
        this.name = "Destroyer"
        this.properName = "Terrordar"


    static constant real array DEATH_FRENZY_BONUS = [25, 35, 45, 55, 65]
    override function setupPassive(int abilityId, IHeroType heroType)
        if compiletime
            createNoEffectAbiltiy(abilityId)
                ..setupIcon("PAS_BloodPresence")
                ..setupWithHotKey("Death Frenzy", "D")


        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceStats(0)
        tooltip.setLearnString("The Destroyer deals increased damage from all sources, the more injured he becomes.") (int lvl) ->
            return "up to {0}% increased damage.".format(
                DEATH_FRENZY_BONUS[lvl-1].str())
        
        
        for lvl = 1 to 5
            tooltip.setNormalString(false, lvl, "The Destroyer deals up to {0}% increased damage from all sources, the more injured he becomes".format( 
                DEATH_FRENZY_BONUS[lvl-1].str())
            )
        addDynamicTooltipIntelligence(heroType, tooltip)


    static constant integer BUFF_ID_ON_BREATH = compiletime(createDummyBuff())

    static constant real array BREATH_DAMAGE = [70, 100, 130, 160, 190]
    static constant real BREATH_DAMAGE_BONUS = 80

    static constant int array BREATH_ARMOR_REDUCTION = [30, 35, 40, 45, 50]
    static constant real BREATH_DURATION = 4

    static constant BUFF_MELTING_BREATH = compiletime(setupBuff("Melting Breath", "This unit was hit by Melting Breath; it has reduced armor.", "BTNFlameBurst", true, 5, Abilities.lordofFlameMissile, "chest", DispelLevel.DISPEL))

    override function setupQ(int abilityId, IHeroType heroType)
        if compiletime
            let MANA = skillData(80, 80, 80, 80, 80)
            let COOLDOWN = skillData(8, 8, 8, 8, 8)
            let RANGE = skillData(450, 450, 450, 450, 450)
            let aDef = new AbilityDefinitionBreathofFrostCreep(abilityId)
                ..setupIcon("BTNFlameBurst")
                ..setupWithHotKey("Melting Breath", "Q")
                ..setAnimationNames("spell,channel")
                ..setMissileArt("BreathOfFireMissile3.mdx")
                ..setMissileSpeed(800)
                ..targetEnemies()
                ..setSkillData(COOLDOWN, MANA, RANGE)

            for lvl = 1 to 5
                aDef
                    ..setDamage(lvl, 0.01)
                    ..setDamagePerSecond(lvl, 0.01)
                    ..setBuffs(lvl, BUFF_ID_ON_BREATH.toRawCode())
                    ..setDistance(lvl, 325)
                    ..setFinalArea(lvl, 175)
                    ..setMaxDamage(lvl, 99999)
                    ..setAreaofEffect(lvl, 100)

        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceStats(BREATH_DAMAGE_BONUS)
        tooltip.setLearnString("Breathes a cone of fire at enemy units, dealing magic damage. The heat melts the target's armor, reducing it for {0} seconds.".format(
            BREATH_DURATION.str()
        )) (int lvl) ->
            return "{0}{I0} damage, {1}% armor reduction.".format(
            BREATH_DAMAGE[lvl-1].str(), BREATH_ARMOR_REDUCTION[lvl-1].str())
        
        
        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, "Breathes a cone of fire at enemy units, dealing {0}{I0} magic damage. The heat melts the target's armor, reducing it by {1}% for {2} seconds.".format(
                BREATH_DAMAGE[lvl-1].str(), BREATH_ARMOR_REDUCTION[lvl-1].str(), BREATH_DURATION.str()
                ))
        addDynamicTooltipIntelligence(heroType, tooltip)


    static constant real array IMMOLATION_DAMAGE = [32, 44, 56, 68, 80]
    static constant real IMMOLATION_DAMAGE_BONUS = 30

    static constant int array IMMOLATION_ATTACK_SPEED = [18, 26, 34, 42, 50]
    static constant real array IMMOLATION_MANA_DRAIN = [5, 6.2, 7.4, 8.6, 9.8]

    static BuffType buffImmolation
    static constant IMMOLATION_BUFF_ID = compiletime(BUFF_ID_GEN.next())


    override function setupW(int abilityId, IHeroType heroType)

        if compiletime
            let MANA = skillData(25, 25, 25, 25, 25)
            let AOE = 250.0
            new BuffDefinition(IMMOLATION_BUFF_ID, 'BEim')
                ..setTooltipNormalExtended(1, "This unit has Immolation; it attacks faster and nearby enemy units will take damage over time.")
                ..setArtSpecial(1, Abilities.immolationRedDamage)
                ..setArtTarget(1, Abilities.immolationREDTarget)
                ..setTargetAttachmentPoint0(1, "chest")

            let aDef = new AbilityDefinitionDemonHunterImmolation(abilityId)
                ..setupIcon(Icons.bTNImmolationOn)
                ..setIconTurnOff(Icons.bTNImmolationOff)
                ..setupWithHotKey("Immolation", "W")
                ..setTurnOff("Deactivate Immolation","W")
                ..setAnimationNames("spell")
                ..targetEnemies()
                ..setSkillData(0, MANA, 0)

            for lvl = 1 to 5
                aDef
                    ..setAreaofEffect(lvl, AOE)
                    ..setManaDrainedperSecond(lvl, IMMOLATION_MANA_DRAIN[lvl-1])
                    ..setBuffs(lvl, IMMOLATION_BUFF_ID.toRawCode()+",BEia")

        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setSummary("Damages nearby enemy units and increases the Destroyer's attack speed at the cost of mana and health. Can be turned off.")
        tooltip.setReplaceStats(IMMOLATION_DAMAGE_BONUS)
        tooltip.setLearnString("Engulfs the Destroyer in flames, damaging nearby enemies and the Destroyer himself. Heroes take double damage. Also increases the Destroyer's attack speed.|nDrains mana until deactivated.") (int lvl) ->
            return "{0}{I0} damage per second, {1}% attack speed.".format(
            IMMOLATION_DAMAGE[lvl-1].str(),
            IMMOLATION_ATTACK_SPEED[lvl-1].str())
        
        for lvl = 1 to 5
            tooltip.setNormalString(false, lvl, "Engulfs the Destroyer in flames, dealing {0}{I0} damage per second to nearby enemies and the Destroyer himself. Heroes take double damage. Also increases the Destroyer's attack speed by {1}%.|nDrains mana until deactivated.".format(
                IMMOLATION_DAMAGE[lvl-1].str(),
                IMMOLATION_ATTACK_SPEED[lvl-1].str()))
            tooltip.setTurnOffString(false, lvl, "Deactivate to stop draining mana and life.")
        addDynamicTooltipIntelligence(heroType, tooltip)


    static constant int array WALL_NUMBER = [6, 7, 8, 9, 10]
    static constant real array WALL_DURATION = [3, 3.5, 4, 4.5, 5]

    override function setupE(int abilityId, IHeroType heroType)

        if compiletime
            let MANA = skillData(70, 70, 70, 70, 70)
            let COOLDOWN = skillData(17, 16, 15, 14, 13)
            let RANGE = skillData(800, 850, 900, 950, 1000)
            new AbilityDefinitionIllidanChannel(abilityId)
                ..setAnimationNames("spell")
                ..setupIcon("BTNNecromancy")
                ..setupWithHotKey("Bone Wall", "E")
                ..setupChannel(TargetType.POINT, "ward", 0.5)
                ..setSkillData(COOLDOWN, MANA, RANGE)

        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceStats(0)
        tooltip.setLearnString("Summons a wall of bones at the target location, blocking the way for the Destroyer's victims to flee. The wall gets bigger on higher levels.") (int lvl) ->
            return "Lasts {0} seconds.".format(
                WALL_DURATION[lvl-1].str())
        
        
        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, "Summons a wall of bones at the target location, blocking the way for the Destroyer's victims to flee. Lasts {0} seconds.".format(
                WALL_DURATION[lvl-1].str()
            ))
        addDynamicTooltipIntelligence(heroType, tooltip)


            

    static constant real array PREY_BONUS_DAMAGE = [25, 35, 45, 55, 65]
    static constant real PREY_DURATION = 15
    static constant int array PREY_MOVE_SPEED = [30, 40, 50, 60, 70]

    static constant int PREY_SLOW = 35
    static constant real PREY_SLOW_DURATION = 1

    static constant BUFF_PREY_TARGET = compiletime(setupBuff("Prey", "This unit is the Prey; it is revealed and takes increased damage from the Hunter.", Icons.bTNUnholyFrenzy, false, 5, Abilities.possessionTarget, "overhead", DispelLevel.NONE))
    static constant BUFF_PREY_CASTER = compiletime(setupBuff("Hunter", "This unit is the Hunter; it's movement speed is increased while moving towards the target.", Icons.bTNUnholyFrenzy, true, 5, Abilities.unholyFrenzyTarget, "overhead",  DispelLevel.NONE))
    static constant BUFF_PREY_SLOW = compiletime(setupBuff("Prey - Slowed", "The Prey was hit by the Hunter; it has reduced movement speed.", Icons.bTNUnholyFrenzy, false, 5, "", "",  DispelLevel.DISPEL))

    override function setupR(int abilityId, IHeroType heroType)

        if compiletime
            let MANA = skillData(140, 145, 150, 155, 160)
            let COOLDOWN = skillData(75, 75, 75, 75, 75)
            let RANGE = 900.0
            new AbilityDefinitionIllidanChannel(abilityId)
                ..setAnimationNames("spell")
                ..setupChannel(TargetType.UNIT, "channel", 0.5)
                ..setupIcon(Icons.bTNUnholyFrenzy)
                ..setupWithHotKey("Hunter and Prey", "R")
                ..setLightningEffects("")
                ..setArtTarget("")
                ..setMissileArt("")
                ..setArtSpecial("")
                ..setLightningEffects("")
                ..setCheckDependencies(true)
                ..targetEnemies()
                ..setSkillData(COOLDOWN, MANA, RANGE)




        let tooltip = new DynamicTooltip(abilityId)
        tooltip.setReplaceStats(0)
        tooltip.setSummary("Increases the Destroyer's movement speed when chasing the targeted unit and causes his attacks against the target to deal more damage and slow.")
        tooltip.setLearnString("Marks the target enemy unit as his prey. The Destroyer will have increased movmement speed when moving towards the prey. Every attack against the prey deals bonus damage and slows the prey. Lasts {0} seconds.".format(PREY_DURATION.str())) (int lvl) ->
            return "{0} damage, {1}% movement speed".format(
                PREY_BONUS_DAMAGE[lvl-1].str(),
                PREY_MOVE_SPEED[lvl-1].str())
        
        
        for lvl = 1 to 5
            tooltip.setNormalString(true, lvl, "Marks the target enemy unit as his prey. The Destroyer will have move {2}% faster when moving towards the prey. Every attack against the prey deals {1} bonus damage and slows the prey. Lasts {0} seconds.".format(
                PREY_DURATION.str(),
                PREY_BONUS_DAMAGE[lvl-1].str(),
                PREY_MOVE_SPEED[lvl-1].str())
            )
        addDynamicTooltipIntelligence(heroType, tooltip)

    override function stats()        
        setStat(Stat.AR, 32, 53)
        setStat(Stat.AS, 13, 36)
        setStat(Stat.HP, 11, 41)
        setStat(Stat.HR, 32, 69)
        setStat(Stat.MP, 21, 39)
        setStat(Stat.MR, 19, 45)
        setStat(Stat.MS, 10, 32)
        setStat(Stat.STR, 14, 42)
        setStat(Stat.AGI, 33, 49)
        setStat(Stat.INT, 13, 34)

    function onAttack(unit attacker, unit target, boolean _isActive)
        let prey = target.wrapper().getBuffOfType(BUFF_PREY_TARGET)
        if prey != null
            let level = prey.getLevel()
            attacker.dealDamage(target, PREY_BONUS_DAMAGE[level-1], ReductionType.PHYSICAL)
            target.addBuffReduced(attacker, PREY_SLOW_DURATION, BUFF_PREY_SLOW, 1)
            target.addEffect(Abilities.stampedeMissileDeath, "origin")


    override static function castQ()
        let instance = DestroyerInstance.fromTrigger()
        instance.hitByBreath.clear()

    override static function castW()
        let caster = GetTriggerUnit()
        caster.addBuff(caster, -1, buffImmolation, 1)

    override static function castE()
        let spellId = GetSpellAbilityId()
        let caster = GetTriggerUnit()
        let level = caster.getAbilityLevel(spellId)
        let pos = vec2(GetSpellTargetX(), GetSpellTargetY())
        let angle1 = caster.getPos().angleTo(pos)
        let angle2 = angle1.op_minus(angle(bj_PI/2))
        let facing = angle1
        let modelPath = "Doodads\\LordaeronSummer\\Props\\SkullPile\\SkullPile0.mdl"

        var wall = createUnit(caster.getOwner(), WALL, pos, angle(0))
        wall.setXY(pos)
        var model = addEffect(modelPath, pos)
        model.setRoll(facing)
        doAfter(WALL_DURATION[level-1]) ->
            doPeriodicallyCounted(0.05, 20) (CallbackCounted cb) ->
                model.setAlpha((12.75 * cb.getCount()).round() )
            addEffect(Abilities.mirrorImageDeathCaster, pos).destr()
            model.destr()
            wall.kill()

        for i = 1 to WALL_NUMBER[level-1]
            var newPos = pos.polarOffset(angle2, 64. * i)
            wall = createUnit(caster.getOwner(), WALL, newPos, angle(0))
            wall.setXY(newPos)
            model = addEffect(modelPath, newPos)
            model.setRoll(facing)
            doAfter(WALL_DURATION[level-1]) ->
                doPeriodicallyCounted(0.05, 20) (CallbackCounted cb) ->
                    model.setAlpha((12.75 * cb.getCount()).round() )
                addEffect(Abilities.mirrorImageDeathCaster, newPos).destr()
                model.destr()
                wall.kill()

            newPos = pos.polarOffset(angle2, -64. * i)
            wall = createUnit(caster.getOwner(), WALL, newPos, angle(0))
            wall.setXY(newPos)
            model = addEffect(modelPath, newPos)
            model.setRoll(facing)
            doAfter(WALL_DURATION[level-1]) ->
                doPeriodicallyCounted(0.05, 20) (CallbackCounted cb) ->
                    model.setAlpha((12.75 * cb.getCount()).round() )
                addEffect(Abilities.mirrorImageDeathCaster, newPos).destr()
                model.destr()
                wall.kill()

    override static function castR()
        let spellId = GetSpellAbilityId()
        let target = GetSpellTargetUnit()
        let caster = GetTriggerUnit()
        let level = caster.getAbilityLevel(spellId)
        target.addBuffReduced(caster, PREY_DURATION, BUFF_PREY_TARGET, level)
        caster.addBuff(caster, -1, BUFF_PREY_CASTER, level)


    override function retreatAI(IHeroAI _ai)

    override function attackAI(IHeroAI _ai)

    override function teamFightAI(IHeroAI _ai)

    override function recommendedItems(LinkedList<int> list)
        list.add(ITEM_ID_BOOTS_BASE)

    override function onCreate(IHeroType heroType, IHero hero)
        new DestroyerInstance()

    override function onInit(IHeroType heroType)
        heroType.setOnAttackFunc() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, boolean attack, boolean _active, boolean advanced) ->
            let prey = target.wrapper().getBuffOfType(BUFF_PREY_TARGET)
            if prey != null
                let level = prey.getLevel()
                source.dealDamage(target, PREY_BONUS_DAMAGE[level-1], ReductionType.PHYSICAL)
                target.addBuffReduced(source, PREY_SLOW_DURATION, BUFF_PREY_SLOW, 1)
                target.addEffect(Abilities.stampedeMissileDeath, "origin")
    override function onInitDelayed(IHeroType heroType)
        onImpact(BUFF_ID_ON_BREATH) (unit source, unit target) ->
            let instance = DestroyerInstance.fromUnit(source)
            if target.isTargetableEnemy(source) and not instance.hitByBreath.has(target)
                let level = source.getAbilityLevel(ABILITY_ID_Q)
                instance.hitByBreath.add(target)
                source.dealDamage(target, BREATH_DAMAGE[level-1].bonus(source.getHeroInt(), BREATH_DAMAGE_BONUS), ReductionType.MAGIC)
                target.addBuffReduced(source, BREATH_DURATION, BUFF_MELTING_BREATH, level)
            
        BUFF_MELTING_BREATH.addLevelFunction() (Buff thisBuff, int factor) ->
            thisBuff.getTarget().wrapper().modArmorRelative( -factor * BREATH_ARMOR_REDUCTION[thisBuff.getLevel()-1] * 10)

        BUFF_PREY_TARGET.setPeriodicTime(0.2)

        BUFF_PREY_TARGET.addPeriodicFunction() (Buff whichBuff) ->
            let caster = whichBuff.getCaster()
            let target = whichBuff.getTarget()
            let direction = caster.getPos().angleTo(target.getPos())
            let facing = caster.getFacingAngle()
            var diffDegrees = (direction - facing).degrees() %360

            if diffDegrees < 0
                diffDegrees += 360
            if diffDegrees > 180
                diffDegrees = 360 - diffDegrees

            if diffDegrees < 90
                if whichBuff.getData() == 0
                    whichBuff.setData(1)
                    caster.wrapper().modMoveSpeedRelative( PREY_MOVE_SPEED[whichBuff.getLevel()-1]*10)
            else
                if whichBuff.getData() == 1
                    whichBuff.setData(0)
                    caster.wrapper().modMoveSpeedRelative( -PREY_MOVE_SPEED[whichBuff.getLevel()-1]*10)
                
        
        BUFF_PREY_TARGET.addLevelFunction() (Buff thisBuff, int factor) ->
            if factor == -1
                let caster = thisBuff.getCaster()
                let level = thisBuff.getLevel()
                if thisBuff.getData()==1
                    caster.wrapper().modMoveSpeedRelative( -PREY_MOVE_SPEED[level-1]*10)

                let casterBuff = caster.wrapper().getBuffOfType(BUFF_PREY_CASTER)
                if casterBuff!= null
                    casterBuff.dispel()

        BUFF_PREY_SLOW.addLevelFunction() (Buff thisBuff, int factor) ->
            thisBuff.getTarget().wrapper().modMoveSpeedRelative( -factor * PREY_SLOW * 10)

        buffImmolation = new BuffType(true, DispelLevel.BREAK)
        buffImmolation.setPeriodicTime(0.2)

        buffImmolation.addLevelFunction() (Buff thisBuff, int factor) ->
            let level = thisBuff.getLevel()
            thisBuff.getCaster().wrapper().modAttackSpeed( IMMOLATION_ATTACK_SPEED[level-1])

        buffImmolation.addPeriodicFunction() (Buff whichBuff) ->
            let caster = whichBuff.getCaster()
            let owner = caster.getOwner()
            let level = whichBuff.getData()
            if caster.hasAbility(IMMOLATION_BUFF_ID)
                let dmg = IMMOLATION_DAMAGE[level-1].bonus(caster.getHeroInt(), IMMOLATION_DAMAGE_BONUS) * 0.2
                //use hp to not trigger damage event
                caster.addHP(-(0.5 * dmg.reduceMagic(caster.getHeroWp())))
                let g = CreateGroup()
                g.enumUnitsInRange(caster.getPos(), 250)
                while true
                    let u = FirstOfGroup(g)
                    if u == null
                        break
                    g.remove(u)
                    if u.isTargetableEnemyUnit(owner)
                        if u.isType(UNIT_TYPE_HERO)
                            caster.dealDamage(u, 2 * dmg, ReductionType.MAGIC)
                        else
                            caster.dealDamage(u, dmg, ReductionType.MAGIC)
            else
                whichBuff.dispel()
        
    
init
    initialize()
    
@compiletime
function initialize()
    HeroType.create(new HeroDestroyer(), HERO_ORDER)
        
