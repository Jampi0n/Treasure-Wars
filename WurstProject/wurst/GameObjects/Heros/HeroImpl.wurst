package HeroImpl

import HashMap
import GameTimer
import TimerUtils
import ClosureTimers
import Execute
import Constants
import LinkedList
import IUnit
import IHero
import HeroTypeImpl
import TeamUtil
import UnitLib
import PlayerControl
import FastDamageEvent
import TowerAI

constant HP_PER_LEVEL = 15
constant STRENGTH_BONUS = 45
constant ARMOR_BONUS = 30

constant HR_FACTOR = 8
constant MR_FACTOR = 3
constant HP_FACTOR = 15
constant MP_FACTOR = 10

constant int array ASSIST_BOUNTY = [0, 60, 40, 30, 24]
constant int array KILL_BOUNTY = [240, 180, 160, 150, 144]

string array assistStringListTeam1
string array assistStringListTeam2

constant int array LIST_ID_POW_2 = [1, 2, 4, 8, 16, 1, 2, 4, 8, 16]


function initAssistLists()
    for i = 0 to 30 // 31 would be all 5, which is not needed
        assistStringListTeam1[i] = ""
        assistStringListTeam2[i] = ""
        let indexList = new LinkedList<int>
        string array assistName1
        string array assistName2
        int size = 0
        for j = 0 to 4
            if i div LIST_ID_POW_2[j] mod 2 == 1
                indexList.add(j)
                assistName1[size] = Players.coloredName(Teams.first1() + j)
                assistName2[size] = Players.coloredName(Teams.first2() + j)
                size++

        //creating the assist string with correct use of <,> and <and>
        if size > 2
            if size == 3
                assistStringListTeam1[i] = assistName1[0]+", "+assistName1[1]+" and "+assistName1[2] + " get "
                assistStringListTeam2[i] = assistName2[0]+", "+assistName2[1]+" and "+assistName2[2] + " get "
            else // 4
                assistStringListTeam1[i] = assistName1[0]+", "+assistName1[1]+", "+assistName1[2]+" and "+assistName1[3] + " get "
                assistStringListTeam2[i] = assistName2[0]+", "+assistName2[1]+", "+assistName2[2]+" and "+assistName2[3] + " get "
        else
            if size == 1
                assistStringListTeam1[i] = assistName1[0] + " gets "
                assistStringListTeam2[i] = assistName2[0] + " gets "
            else //2
                assistStringListTeam1[i] = assistName1[0]+" and "+assistName1[1] + " get "
                assistStringListTeam2[i] = assistName2[0]+" and "+assistName2[1] + " get "



        destroy indexList
        

public class HeroImpl implements IHero

    static constant assistDuration = 10.

    private player owner
    private int ownerId
    private IHeroType heroType
    private unit hero
    private integer level
    private static constant onDeathTrigger = CreateTrigger()
    private static constant onLevelUpTrigger = CreateTrigger()
    //protected static Hero array heroes
    private static constant unitToHero = new HashMap<unit, HeroImpl>
    private constant assistMap = new HashMap<int, real>
    private int lastAssistant = -1
    private timer reviveTimer
    private timerdialog reviveWindow
    private int team

    private int array [5] skillIds

    private bool array [4] allowCooldownChange
    private real array [4] defaultCooldown
    //modifies each cooldown seperately
    private real array [4] cooldownMod

    //when gold or xp is shared, their values are mostly non integer. To avoid rounding errors, the remainder will be stored here.
    private real sharedXp = 0

    private unit heroGlow = null

    private timer tooltipUpdateTimer

    private real defaultAttackCooldown

    private bool permanent
    private bool updateTooltips = true
    private trigger onCastTrigger

    private int instanceIndex
    private static int numInstances = 0
    private static HeroImpl array allInstances

    private int anyHitPointer


    protected static function classInit()
        onDeathTrigger.addAction(function onDeathStatic)
        onLevelUpTrigger.addAction(function onLevelUpStatic)
        

        for i = 0 to bj_MAX_PLAYER_SLOTS - 1
            onLevelUpTrigger.registerPlayerUnitEvent(players[i], EVENT_PLAYER_HERO_LEVEL, null)
            SetPlayerTechResearched(players[i], ATTACK_ANIMATION_OFFSET, 1)

        CreateTrigger()
        ..registerAnyUnitEvent(EVENT_PLAYER_HERO_SKILL)
        ..addAction() ->
            let heroUnit = GetTriggerUnit()
            
            if unitToHero.has(heroUnit)
                let hero = unitToHero.get(heroUnit)
                for i = 0 to 3
                    if hero.skillIds[i] == GetLearnedSkill()
                        hero.defaultCooldown[i] = BlzGetUnitAbilityCooldown(heroUnit, hero.skillIds[i], GetLearnedSkillLevel()-1)
                hero.updateCooldowns()

    private function setup(IHero owningHero)
        this.instanceIndex = numInstances
        allInstances[this.instanceIndex] = this
        numInstances++
       
        this.permanent = owningHero == null
        this.updateTooltips = this.permanent
        if this.permanent
            this.hero.wrapper().setOwningHero(this)
        else
            this.hero.wrapper().setOwningHero(owningHero)
        
        this.team = Players.team(this.ownerId)
        this.heroType = HeroType.get(this.hero.getTypeId())

        this.skillIds[0] = this.heroType.getAbilityId(AbilitySlot.Q)
        this.skillIds[1] = this.heroType.getAbilityId(AbilitySlot.W)
        this.skillIds[2] = this.heroType.getAbilityId(AbilitySlot.E)
        this.skillIds[3] = this.heroType.getAbilityId(AbilitySlot.R)
        this.skillIds[4] = this.heroType.getAbilityId(AbilitySlot.PASSIVE)

        for i = Teams.first1() to Teams.last1()
            assistMap.put(i, 0)
        for i = Teams.first2() to Teams.last2()
            assistMap.put(i, 0)

        for i = 0 to 3
            this.cooldownMod[i] = 0
            this.defaultCooldown[i] = 0
            this.allowCooldownChange[i] = this.heroType.getAllowCooldownChange(i)

        execute( -> this.heroType.initialize())
        
        
        unitToHero.put(this.hero, this)
        if this.permanent
            Players.addHero(this.ownerId, this)

        let wrapper = this.hero.wrapper()
        wrapper.setHero(this)

        if this.permanent
            onDeathTrigger.registerUnitEvent(this.hero, EVENT_UNIT_DEATH)
            this.reviveTimer = getTimer()
            ..setData(this castTo int)
            this.reviveWindow = CreateTimerDialog(this.reviveTimer)
            TimerDialogDisplay(this.reviveWindow, false)
            TimerDialogSetTitle(this.reviveWindow, Players.coloredName(this.ownerId))

        if this.heroType.getBonusCalculation() != null
            wrapper.setBonusCalculation(this.heroType.getBonusCalculation())

        if this.heroType.getUsesHeroGlow()
            this.heroGlow = createUnit(this.hero.getOwner(), 'n00H', this.hero.getPos(), angle(0))
            doPeriodically(0.03) (CallbackPeriodic _) ->
                if this.hero.isAlive()
                    this.heroGlow.setXY(this.hero.getPos())
        defaultAttackCooldown = wrapper.getBaseAttackCooldown()
        wrapper.modManaRegen(this.heroType.getBase(Stat.MR) * MR_FACTOR )
        wrapper.modHealthRegen(this.heroType.getBase(Stat.HR) * HR_FACTOR )
        wrapper.modHealth(this.heroType.getBase(Stat.HP) * HP_FACTOR + HP_PER_LEVEL )
        wrapper.modMana(this.heroType.getBase(Stat.MP) * MP_FACTOR )
        wrapper.modMoveSpeed(this.heroType.getBase(Stat.MS) )
        wrapper.setStatBaseInternal(Stat.AR, this.heroType.getBase(Stat.AR) + ARMOR_BONUS)
        wrapper.setBaseAttackCooldown(convertAttackSpeed(defaultAttackCooldown, this.heroType.getBase(Stat.AS)))
        wrapper.setStatBaseInternal(Stat.STR, this.heroType.getBase(Stat.STR) + STRENGTH_BONUS)
        wrapper.setStatBaseInternal(Stat.AGI, this.heroType.getBase(Stat.AGI))
        wrapper.setStatBaseInternal(Stat.INT, this.heroType.getBase(Stat.INT))

        wrapper.applyBaseStats()
        
        this.onCastTrigger = setupOnCastTriggerMap.get(this.heroType.getUnitId()).setupForUnit(this.hero)

        HeroTemplate.lastCreatedHero = this
        (this.heroType castTo HeroTypeImpl).TEMPLATE.onCreate(this.heroType, this)
        let onAttack = this.heroType.getOnAttackFunction()
        if onAttack != null
            DamageEventUnit.fromUnit(this.hero).attackDamageNoBuilding.add(onAttack)
            
                

        if updateTooltips   
            this.heroType.updateTooltipsStr(this.hero)
            this.heroType.updateTooltipsInt(this.hero)

        this.tooltipUpdateTimer = getTimer()..setData(this castTo int)

        if PlayerWrapper.revealIcons
            PlayerWrapper.revealIcon(this.ownerId)

        this.anyHitPointer = DamageEventUnit.fromUnit(this.hero).anyHit.add() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, boolean attack, boolean _active, boolean advanced) ->
            TowerAI.onDamage(source, target, damage)
            if this.permanent
                this.onDamage(source)




    construct(int playerId, int unitId, vec2 pos, angle facing, IHero owningHero)
        objectCount++
        this.owner = players[playerId]
        this.ownerId = playerId
        this.level = 1
        this.hero = createUnit(this.owner, unitId, pos, facing)
        this.setup(owningHero)
    
    construct(unit u, IHero owningHero)
        objectCount++
        this.hero = u
        this.level = GetHeroLevel(this.hero)
        this.owner = u.getOwner()
        this.ownerId = owner.getId()
        this.setup(owningHero)

    static function copyInventory(unit copyFrom, unit copyTo)
        for i = 0 to 5
            let itm = copyTo.itemInSlot(i)
            let itmId = copyFrom.itemInSlot(i).getTypeId()
            if itm.getTypeId() != itmId
                itm.remove()
                copyTo.addItemToSlot(itmId, i)

    static function getHero(unit whichUnit) returns HeroImpl
        if unitToHero.has(whichUnit)
            return unitToHero.get(whichUnit)
        else
            return null

    override function toUnit() returns unit
        return this.hero

    protected static function regenerate()
        for i = 0 to numInstances - 1
            let heroUnit = allInstances[i].toUnit()
            if heroUnit.isAlive()
                let wrapper = heroUnit.wrapper()
                heroUnit.healHP(heroUnit, wrapper.getHealthRegen() / 1000)
                heroUnit.healMana(heroUnit, wrapper.getManaRegen() / 1000)

    private function upgrade()
        let newLvl = GetHeroLevel(this.hero)
        let wrapper = this.hero.wrapper()
        wrapper.setBaseAttackCooldown(convertAttackSpeed(defaultAttackCooldown, this.heroType.calculateStat(Stat.AS, newLvl)))
        wrapper.modHealth( (this.heroType.calculateStat(Stat.HP, newLvl) - this.heroType.calculateStat(Stat.HP, this.level)) * HP_FACTOR )
        wrapper.modMana( (this.heroType.calculateStat(Stat.MP, newLvl) - this.heroType.calculateStat(Stat.MP, this.level)) * MP_FACTOR )
        wrapper.modManaRegen( (this.heroType.calculateStat(Stat.MR, newLvl) - this.heroType.calculateStat(Stat.MR, this.level)) * MR_FACTOR )
        wrapper.modHealthRegen( (this.heroType.calculateStat(Stat.HR, newLvl) - this.heroType.calculateStat(Stat.HR, this.level)) * HR_FACTOR )
        wrapper.modHealth( (newLvl - this.level) * HP_PER_LEVEL )
        wrapper.modMoveSpeed( this.heroType.calculateStat(Stat.MS, newLvl) - this.heroType.calculateStat(Stat.MS, this.level))
        wrapper.setStatBaseInternal(Stat.AR, this.heroType.getBase(Stat.AR))
        wrapper.setStatBaseInternal(Stat.STR, this.heroType.calculateStat(Stat.STR, newLvl) + STRENGTH_BONUS)
        wrapper.setStatBaseInternal(Stat.AGI, this.heroType.calculateStat(Stat.AGI, newLvl))
        wrapper.setStatBaseInternal(Stat.INT, this.heroType.calculateStat(Stat.INT, newLvl))
        wrapper.setStatBaseInternal(Stat.AS, this.heroType.calculateStat(Stat.AS, newLvl))
        wrapper.setStatBaseInternal(Stat.AR, this.heroType.calculateStat(Stat.AR, newLvl))
        wrapper.applyBaseStats()

        this.level = newLvl

    private function onLevelUp()
        this.upgrade()

    private static function onLevelUpStatic()
        let u = GetTriggerUnit()
        if unitToHero.has(u)
            unitToHero.get(u).onLevelUp()

    
    //handles assists
    private function addAssistDuration(int playerId)
        this.assistMap.put(playerId ,getElapsedGameTime() + assistDuration)
        this.lastAssistant = playerId

    private function onDamage(unit source)
        let damageSource = source.getOwner()
        let damageSourceId = damageSource.getId()
        if damageSource != null
            if team == TEAM_1
                if Teams.first2() <= damageSourceId and damageSourceId <= Teams.last2()
                    this.addAssistDuration(damageSource.getId())
            else
                if Teams.first1() <= damageSourceId and damageSourceId <= Teams.last1()
                    this.addAssistDuration(damageSource.getId())

    private function revive()
        TimerDialogDisplay(this.reviveWindow, false)
        vec2 pos
        if this.team == TEAM_1
            pos = gg_rct_GreenAltar.getCenter()+vec2(128,128)
        else
            pos = gg_rct_BrownAltar.getCenter()-vec2(128,128)
            
        this.hero.revive(pos, true)
        this.hero.setMana(this.hero.getMaxMana())
        this.hero.setTimeScale(1)
        this.upgrade()
        if this.hero.getMoveSpeed() < 100
            let wrapper = this.hero.wrapper()
            Log.warn(this.hero.getName()+" has very low movement speed after revive.")
            Log.warn("getStatTotalValue = "+wrapper.getMoveSpeed().toString())
            Log.warn("getStatTotalBonus = "+wrapper.getMoveSpeedBonus().toString())
            Log.warn("getStatAbsoluteBonus = "+wrapper.getMoveSpeedAbsoluteBonus().toString())
            Log.warn("getStatRelativeBonus = "+wrapper.getMoveSpeedRelativeBonus().toString())
            Log.warn("getStatBaseValue = "+wrapper.getMoveSpeedBase().toString())
            Log.warn("actual ms = "+this.hero.getMoveSpeed().toString())
            Log.warn("default ms = "+this.hero.getDefaultMovespeed().toString() )

        if this.heroGlow != null
            this.heroGlow
                ..setXY(pos)
                ..setVertexColor(colorA(255, 255, 255, 255))

    private static function reviveStatic()
        let t = GetExpiredTimer()
        let hero = t.getData() castTo HeroImpl
        t.pause()
        hero.revive()

    //handles death
    private function onDeath()
        //indetify true killer
        if this.heroGlow != null
            this.heroGlow.setVertexColor(colorA(255, 255, 255, 0))

        player killingPlayer = GetKillingUnit().getOwner()
        int killingId = killingPlayer.getId()

        //replace killer with last assistant, if killer is not an enemy hero
        boolean replaceKiller = false

        //team 1 hero dies
        if this.team == TEAM_1
            //killer not in team 2
            if killingId < Teams.first2() or killingId > Teams.last2()
                replaceKiller = true
        //team 2 hero dies
        else
            //killer not in team 1
            if killingId < Teams.first1() or killingId > Teams.last1()
                replaceKiller = true

        let gameTime = getElapsedGameTime()
        let assistList = new LinkedList<int>
        int assistListId = 0
        string assistString
        boolean unknownKiller = false

        if replaceKiller
            if lastAssistant != -1 and assistMap.get(lastAssistant) > gameTime
                killingId = lastAssistant
                killingPlayer = players[lastAssistant]
            else
                if killingId != Teams.army1() and killingId != Teams.army2() and killingId != PLAYER_NEUTRAL_AGGRESSIVE
                    unknownKiller = true

        if this.team == TEAM_1
            for assistantId in Teams.HERO_PLAYERS[Teams.team(false)]
                let time = this.assistMap.get(assistantId)
                if time > gameTime and assistantId != killingId
                    assistList.add(assistantId)
                    assistListId += LIST_ID_POW_2[assistantId]
            assistString = assistStringListTeam2[assistListId]
        else
            for assistantId in Teams.HERO_PLAYERS[Teams.team(true)]
                let time = this.assistMap.get(assistantId)
                if time > gameTime and assistantId != killingId
                    assistList.add(assistantId)
                    assistListId += LIST_ID_POW_2[assistantId]
            assistString = assistStringListTeam1[assistListId]
        let assistants = assistList.size()

        if not unknownKiller
            if killingId <= Teams.last2()
                let assistBounty = ASSIST_BOUNTY[assistants]
                let killBounty = KILL_BOUNTY[assistants]
                if assistants == 0
                    printTimed(Players.coloredName(this.ownerId) + " was killed by " + Players.coloredName(killingId) + " for |cffffcc00"+killBounty.toString()+"|r gold.", 10)
                else
                    printTimed(Players.coloredName(this.ownerId) + " was killed by " + Players.coloredName(killingId) +
                    " for |cffffcc00" + killBounty.toString() + "|r gold. " + assistString + "|cffffcc00" + assistBounty.toString() +"|r gold for helping.", 10)
                doAfter(0.1) ->
                    for p in assistList
                        PlayerWrapper.addGoldEx(p, assistBounty)
                        PlayerWrapper.addAssist(p)
                    PlayerWrapper.addGoldEx(killingId, killBounty)
                    PlayerWrapper.addHeroKill(killingId, killingId <= Teams.last2())
                    destroy assistList
            else
                printTimed(Players.coloredName(this.ownerId) + " was killed by " + killingPlayer.getName() + ".", 10)
                destroy assistList
        else
            printTimed(Players.coloredName(this.ownerId) + " died.", 10)
            destroy assistList
        this.reviveTimer.start(10.+level*2, function reviveStatic)
        if GetLocalPlayer() == owner
            TimerDialogDisplay(this.reviveWindow, true)
        doAfter(0.1) ->
            PlayerWrapper.addDeath(this.ownerId)

    private static function onDeathStatic()
        unitToHero.get( GetTriggerUnit()).onDeath()

    override function toString() returns string
        return "Hero "+ this.owner.getName() +"="+this.hero.getName()

    override function getHeroType() returns IHeroType
        return this.heroType

    override function getLevel() returns int
        return this.level

    override function updateTooltipsStr()
        if this.updateTooltips
            this.heroType.updateTooltipsStr(this.hero)
    override function updateTooltipsInt()
        if this.updateTooltips
            this.heroType.updateTooltipsInt(this.hero)

    override function addXp(real xp)
        this.sharedXp += xp
        let intXp = this.sharedXp.toInt()
        this.hero.addXp(intXp, true)
        this.sharedXp -= intXp

    //once the game is over
    override function destroyTimer()
        TimerDialogDisplay(this.reviveWindow, false)
        DestroyTimerDialog(this.reviveWindow)
        this.reviveTimer.release()

    /*
    **  Changing cooldowns of morph abilities crashes the game, once they are used.
    */
    override function updateCooldowns()
        for i = 0 to 3
            if allowCooldownChange[i]
                let newCd = (this.defaultCooldown[i]+this.cooldownMod[i]) / (1.0+0.01*hero.wrapper().getCooldown())
                BlzSetUnitAbilityCooldown(hero, skillIds[i], GetUnitAbilityLevel(hero, skillIds[i]) - 1, newCd )  
        
        /*
            Tooltips do not need to be updated instantly. This serves as a cooldown to prevent lag spikes.
        */
        if updateTooltips
            tooltipUpdateTimer.start(0.125) ->
                let hero = GetExpiredTimer().getData() castTo HeroImpl
                let heroType = hero.getHeroType()
                let heroUnit = hero.toUnit()
                heroType.updateTooltipsStr(heroUnit)
                heroType.updateTooltipsInt(heroUnit)

    override function disableSkills(bool flag, bool hide)
        for i = 0 to 3
            this.hero.disableAbility(this.skillIds[i], flag, hide)

    override function duplicate(bool disableInventory, bool disableSpells) returns IHero
        let heroCopy = new HeroImpl(this.owner.getId(), this.heroType.getUnitId(), this.hero.getPos(), this.hero.getFacingAngle(), this)
        heroCopy.hero.setXp(this.hero.getXp(), false)

        for i = 0 to 5
            let itm = heroCopy.hero.itemInSlot(i)
            let itmId = this.hero.itemInSlot(i).getTypeId()
            if itm.getTypeId() != itmId
                itm.remove()
                heroCopy.hero.addItemToSlot(itmId, i)
        if disableInventory
            heroCopy.hero.toggleInventory(false)

        for int i = 0 to 4
            for int j = 1 to this.hero.getAbilityLevel(this.skillIds[i])
                heroCopy.hero.selectSkill(this.skillIds[i])
            let level = this.hero.getAbilityLevel(this.skillIds[i])
            if level > 0
                BlzStartUnitAbilityCooldown(heroCopy.hero, this.skillIds[i], this.hero.getAbilityCooldownRemaining(this.skillIds[i]))

        if disableSpells
            heroCopy.hero.setSkillPoints(0)

        heroCopy.hero..setHP(this.hero.getHP()).setMana(this.hero.getMana())
            
        
        return heroCopy

    ondestroy
        DamageEventUnit.fromUnit(this.hero).anyHit.remove(this.anyHitPointer)
        onCastTrigger.destr()
        tooltipUpdateTimer.release()
        numInstances--
        allInstances[this.instanceIndex] = allInstances[numInstances]
        unitToHero.remove(this.hero)

/**
Returns the hero instance for this unit or null if it does not exist.
The hero instance may be a temporary hero.
**/
public function unit.toHero() returns IHero
    return HeroImpl.getHero(this)

/**
Returns the permanent hero who owns this unit or null if the unit is not owned.
All damage dealing units of hero players should be owned by exactly one hero.
The owning hero gets credit for kills and damage by its owned units.
Main heroes "own" themselves.
**/
public function unit.toOwningHero() returns IHero
    return this.wrapper().getOwningHero()

public abstract class Hero
    static function create(int playerId, int unitId, vec2 pos, angle facing) returns IHero
        return new HeroImpl(playerId, unitId, pos, facing, null)

    static function setup(unit u) returns IHero
        return new HeroImpl(u, null)

    static function copyInventory(unit copyFrom, unit copyTo)
        for i = 0 to 5
            let itm = copyTo.itemInSlot(i)
            let itmId = copyFrom.itemInSlot(i).getTypeId()
            if itm.getTypeId() != itmId
                itm.remove()
                copyTo.addItemToSlot(itmId, i)

init
    HeroImpl.classInit()
    initAssistLists()
    CreateTrigger()
        ..addAction(function HeroImpl.regenerate)
        ..registerTimerEvent(0.1, true)
