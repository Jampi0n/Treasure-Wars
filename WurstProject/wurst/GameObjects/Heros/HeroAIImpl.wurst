package HeroAIImpl

import TimerUtils
import ClosureTimers
import ItemInShop
import BuildingIds
import ErrorHandling
import RecommendedItems
import ShopAPI
import HashMap
import Constants
import LinkedList
import PlayerControl
import UnitLib
import TeamUtil
import FastDamageEvent
import IUnit
import IHero
import Blacksmith

enum AIState
    ATTACK //attack moves towards the enemy base, focus is on pushing/killing minions
    RETREAT //retreats fully to heal up
    RETREAT_TEMP //retreats to the next tower, should be initiated, if a bad fight is assumed
    RETREAT_TEMP_AI //retreats to the next tower, should be initiated, if a bad fight is assumed
    HEAL //waits at the altar to be fully healed
    TEAM_FIGHT //engages against nearby enemies, should be initiated, if a favoured fight is assumed
    BUY_UPGRADES //goes to a blacksmith and buys upgrades, if hero doesn't want or can't buy items, state goes to Attack

constant teamAIs = [new LinkedList<IHeroAI>,new LinkedList<IHeroAI>,new LinkedList<IHeroAI>,new LinkedList<IHeroAI>]

constant real TEAM_FIGHT_RANGE = 1200
constant real HALF_DISTANCE = 11200
constant real UPDATE_INTERVAL = 0.35

public function unit.findAreaTarget(real range, real aoe, int heroValue) returns targetPoint
    int currentValue = 0

    let g = CreateGroup()
    let nearby = CreateGroup()
    let pos = this.getPos()

    let owner = this.getOwner()
    unit u
    g.enumUnitsInRange(pos, range)
    let targetUnit = g.getRandom()
    let unitPos = targetUnit.getPos()
    if targetUnit != null
        if not targetUnit.isType(UNIT_TYPE_STRUCTURE) and targetUnit.isAlive() and targetUnit.isVisible(owner) and IsUnitEnemy(targetUnit, owner)
            nearby.enumUnitsInRange(unitPos, aoe)
            while(true)
                
                u = FirstOfGroup(nearby)
                if u == null
                    break
                nearby.remove(u)
            
                if not u.isType(UNIT_TYPE_STRUCTURE) and u.isAlive() and u.isVisible(owner) and IsUnitEnemy(u, owner)
                    if u.isType(UNIT_TYPE_HERO)
                        currentValue += heroValue
                    else
                        currentValue++

    nearby.destr()
    g.destr()

    return targetPoint(unitPos, currentValue)



public function unit.findTarget(real range, AbilityTargetFocus focus, AbilityTargetPriority priority, Filter filter) returns unit
    let g = CreateGroup()
    let pos = this.getPos()

    real currentPrio = 0
    unit currentTarget = null
    real newPrio
    boolean valid

    unit u
    g.enumUnitsInRange(pos, range)
    while(true)
        u = FirstOfGroup(g)
        if u == null
            break
        g.remove(u)
        newPrio = 0
        valid = false
        if not u.isType(UNIT_TYPE_STRUCTURE) and u.isAlive() and u.isVisible(this.getOwner())
            if focus == AbilityTargetFocus.ALLY_HERO and u.isType(UNIT_TYPE_HERO) and u.getOwner().isAllyOf(this.getOwner()) and u!=this
                valid = true
            else if focus == AbilityTargetFocus.ALLY_UNIT and not u.isType(UNIT_TYPE_HERO) and u.getOwner().isAllyOf(this.getOwner()) and u.getOwner() != this.getOwner()
                valid = true
            else if focus == AbilityTargetFocus.ALLY and u.getOwner().isAllyOf(this.getOwner()) and u.getOwner() != this.getOwner()
                valid = true
            else if focus == AbilityTargetFocus.FRIEND_HERO and u.isType(UNIT_TYPE_HERO) and (u.getOwner().isAllyOf(this.getOwner()) or u.getOwner() == this.getOwner())
                valid = true
            else if focus == AbilityTargetFocus.FRIEND_UNIT and not u.isType(UNIT_TYPE_HERO) and (u.getOwner().isAllyOf(this.getOwner()) or u.getOwner() == this.getOwner())
                valid = true
            else if focus == AbilityTargetFocus.FRIEND and (u.getOwner().isAllyOf(this.getOwner()) or u.getOwner() == this.getOwner())
                valid = true
            else if focus == AbilityTargetFocus.ENEMY_HERO and u.isType(UNIT_TYPE_HERO) and u.getOwner().isEnemyOf(this.getOwner()) and not u.isType(UNIT_TYPE_ANCIENT)
                valid = true            
            else if focus == AbilityTargetFocus.ENEMY_UNIT and not u.isType(UNIT_TYPE_HERO) and u.getOwner().isEnemyOf(this.getOwner()) and not u.isType(UNIT_TYPE_ANCIENT)
                valid = true
            else if focus == AbilityTargetFocus.ENEMY and u.getOwner().isEnemyOf(this.getOwner()) and not u.isType(UNIT_TYPE_ANCIENT)
                valid = true

        if filter != null
            valid = valid and filter.filter(u)

        if valid
            if priority == AbilityTargetPriority.LOW_HEALTH
                newPrio = 1/u.getHP()
            else if priority == AbilityTargetPriority.LOW_DISTANCE
                newPrio = 1/u.getPos().distanceTo(pos)
            else if priority == AbilityTargetPriority.HIGH_VALUE
                newPrio = u.getField(UNIT_IF_GOLD_BOUNTY_AWARDED_BASE).toReal()
            else if priority == AbilityTargetPriority.HIGH_HEALTH
                newPrio = u.getHP()


        if newPrio > currentPrio
            currentTarget = u
            currentPrio = newPrio



        
    if filter != null
        destroy filter


    g.destr()
    return currentTarget

class TeamFight

    private LinkedList<HeroAIImpl> heroAIs
    private vec2 teamFightLoc
    private unit target
    private int team

    private static constant updateTimer = getTimer()
    private static constant  activeTeamFights = new LinkedList<TeamFight>

    //private Fx center

    construct(vec2 pos, int team)
        this.teamFightLoc = pos
        this.team = team
        this.target = null

        this.heroAIs = new LinkedList<HeroAIImpl>
        activeTeamFights.add(this)
        //print("teamfights: "+activeTeamFights.size().toString())

        //this.center = new Fx(this.teamFightLoc, Units.monsterLure)


    static function classInit()
        updateTimer.startPeriodic(0.1, function updateStatic)

    function addAI(HeroAIImpl ai)
        this.heroAIs.add(ai)

    function removeAI(HeroAIImpl ai)
        this.heroAIs.remove(ai)

    ondestroy
        activeTeamFights.remove(this)
        //destroy this.center
        destroy this.heroAIs
        //print("teamfights: "+activeTeamFights.size().toString())

    static function updateStatic()
        for TeamFight tf in activeTeamFights
            tf.update()
            

    function update()
        real x = 0
        real y = 0
        int count = 0
        if heroAIs.isEmpty()
            destroy this
        else
            for HeroAIImpl ai in heroAIs
                count++
                x+=ai.getHeroUnit().getPos().x
                y+=ai.getHeroUnit().getPos().y

            this.teamFightLoc = vec2(x/count, y/count)
            //this.center.setXY(this.teamFightLoc)

            determineTarget()

            let chance = determineWinChance(team, this.teamFightLoc)


            if chance < 0.4
                let allAIs = heroAIs.copy()

                for HeroAIImpl ai in allAIs
                    ai.retreatTemporarily(12, true)
                    ai.endTeamFight()
            
                destroy allAIs
            else if this.target == null
                let allAIs = heroAIs.copy()

                for HeroAIImpl ai in allAIs
                    if chance > 0.6
                        ai.changeState(AIState.ATTACK)
                    else
                        ai.retreatTemporarily(12, true)
                    ai.endTeamFight()
            
                destroy allAIs



    function determineTarget()
        real currentValue = -1
        unit currentTarget = null

        for hero in Teams.HEROES[Teams.invert(team)]
            let heroUnit = hero.toUnit()
            if hero.toUnit().isTargetableEnemy(players[Teams.army(team)]) and hero.toUnit().getPos().distanceTo(this.teamFightLoc) < TEAM_FIGHT_RANGE
                if hero.toUnit().isVisible(players[Teams.army(team)])
                    let nextValue = determineHeroOffensiveStrength(heroUnit)/determineHeroDefensiveStrength(heroUnit)
                    if nextValue > currentValue
                        currentTarget = heroUnit
                        currentValue = nextValue

        this.target = currentTarget

    function getTeamFightLoc() returns vec2
        return this.teamFightLoc

    function getTarget() returns unit
        return this.target


public function HeroAIImpl.addTeam(int team)
    teamAIs[team].add(this)


public class HeroAIImpl implements IHeroAI
    
    private int ownerId
    private player owningPlayer
    private IHero hero
    private IHeroType heroType
    private unit heroUnit
    protected AIState state
    private vec2 homeLoc
    private vec2 targetLoc
    private int team
    private boolean casting = false
    private string castOrder = ""
    protected boolean attacking = false
    private timer attackTimer = getTimer()
    private vec2 currentTargetLoc
    private vec2 currentRetreatLoc
    
    private Lane lane

    private TeamFight teamFight


    //keeps track of the damage against the hero over the last 4 seconds
    //if a lot of damage is take outside of a team fight, the hero should retreat
    private int damageIndex = 0
    private static constant damageMax = 20
    private real array[damageMax] damageCount
    private real damageSum = 0
    private real damageCurrent = 0


    private int retreatCounter = 0

    private static constant updateTimer = getTimer()
    

    private boolean hasAllItems = false
    private LinkedList<int> itemBuild
    private string skillBuild

    protected static LinkedList<IHeroAI> array heroAIs
    protected static constant heroAiMap = new HashMap<unit,HeroAIImpl>()

    private boolean paused = false


    //buy upgrades
    private int desiredUpgrade = -1
    private unit targetBlacksmith = null
    private int wantedUpgrades = 0
    private boolean noMoreUpgrades = false
    private real upgradeTimer = 0
    private int upgradeGold = 0

    override function aiMessage(string _msg)
        //print(fromPlayer(this.heroUnit.getOwner()).toColorString()+"["+this.heroUnit.getName()+"]|r "+msg)

    override function getHomeLoc() returns vec2
        return this.homeLoc

    override function getTargetLoc() returns vec2
        return this.targetLoc

    override function getOwningPlayer() returns player
        return this.owningPlayer
    
    override function getHero() returns IHero
        return this.hero

    override function getHeroUnit() returns unit
        return this.heroUnit

    override function getCasting() returns boolean
        return this.casting

    override function getAttacking() returns boolean
        return this.attacking

    override function getTeamFightLoc() returns vec2
        return this.teamFight.getTeamFightLoc()

    override function getTeamFightTarget() returns unit
        return this.teamFight.getTarget()

    static function getAI(unit hero) returns HeroAIImpl
        if heroAiMap.has(hero)
            return heroAiMap.get(hero)
        else
            return null

    static function getAiList(int id) returns LinkedList<IHeroAI>
        return heroAIs[id]

    private static function onAttackTimer()
        (GetExpiredTimer().getData() castTo HeroAIImpl).attacking = false

    @inline
    static function onAttackStart(unit attacker, unit _target)
        let ai = HeroAIImpl.getAI(attacker)
        if ai != null
            ai.attackFor(2)

    protected function attackFor(real time)
        attacking = true
        attackTimer.start(time, function onAttackTimer)

    private function updateTargetLoc()
        if lane == Lane.TOP
            //print(this.heroUnit.getPos().distanceTo(this.targetLoc))
            currentTargetLoc = gg_rct_CornerTop.getCenter()
            if this.heroUnit.getPos().distanceTo(this.targetLoc) < HALF_DISTANCE
                this.currentTargetLoc = this.targetLoc  
        else if lane == Lane.BOT
            //print(this.heroUnit.getPos().distanceTo(this.targetLoc))
            currentTargetLoc = gg_rct_CornerBot.getCenter()
            if this.heroUnit.getPos().distanceTo(this.targetLoc) < HALF_DISTANCE
                this.currentTargetLoc = this.targetLoc  
        else
            currentTargetLoc = targetLoc

    private function updateRetreatLoc()
        if lane == Lane.TOP
            currentRetreatLoc = gg_rct_CornerTop.getCenter()
            if this.heroUnit.getPos().distanceTo(this.homeLoc) < HALF_DISTANCE
                this.currentRetreatLoc = this.homeLoc  
        else if lane == Lane.BOT
            currentRetreatLoc = gg_rct_CornerBot.getCenter()
            if this.heroUnit.getPos().distanceTo(this.homeLoc) < HALF_DISTANCE
                this.currentRetreatLoc = this.homeLoc  
        else
            currentRetreatLoc = this.homeLoc

    override function attackedByTower(unit tower)
        if tower.getTypeId() == HERO_TOWER
            this.retreatTemporarily(25, false)
        else if this.state == AIState.ATTACK or this.state == AIState.RETREAT_TEMP
            let g = CreateGroup()
            unit u
            int count = 0
            let owner = this.getOwningPlayer()
            g.enumUnitsInRange(this.heroUnit.getPos(), 1000)
            while(true)
                u = FirstOfGroup(g)
                if u == null
                    break
                g.remove(u)
                if IsUnitAlly(u, owner)
                    if not u.isType(UNIT_TYPE_HERO)
                        count++

            g.destr()
            if count < 5
                this.retreatTemporarily(25, false)
            else
                this.retreatTemporarily(7, false)

    protected static function classInit()
        for i = 0 to bj_MAX_PLAYER_SLOTS
            heroAIs[i] = new LinkedList<IHeroAI>()

        updateTimer.startPeriodic(UPDATE_INTERVAL, function updateStatic)
        CreateTrigger()
        ..registerAnyUnitEvent(EVENT_PLAYER_HERO_LEVEL)
        ..addAction() ->
            let ai = getAI(GetTriggerUnit())
            if ai != null
                ai.levelUp()

    construct(IHero hero, aidifficulty diff)
        this.owningPlayer =  hero.toUnit().getOwner()
        this.ownerId = this.owningPlayer.getId()
        this.hero = hero
        this.heroType = hero.getHeroType()
        this.heroUnit = this.hero.toUnit()
        this.team = Players.team(this.ownerId)
        this.addTeam(team)

        this.state = ATTACK

        heroAIs[this.ownerId].add(this)
        heroAiMap.put(this.heroUnit, this)
        this.attackTimer.setData(this castTo int)

        //test:
        itemBuild = this.heroType.getItemBuild()
        skillBuild = this.heroType.getSkillBuild()

        if team == TEAM_1
            this.homeLoc = gg_rct_GreenAltar.getCenter()
            this.targetLoc = gg_rct_BrownAltar.getCenter()
        else
            this.homeLoc = gg_rct_BrownAltar.getCenter()
            this.targetLoc = gg_rct_GreenAltar.getCenter()

        let rand = GetRandomInt(1, 3)
        if rand == 1
            this.lane = Lane.TOP
        else if rand == 2
            this.lane = Lane.BOT
        else
            this.lane = Lane.MID

        updateTargetLoc()

        let wrapper = this.heroUnit.wrapper()

        if diff == AI_DIFFICULTY_NORMAL
            let gold = 500
            PlayerWrapper.addGoldEx(this.ownerId, gold )

            wrapper.modAttackSpeed(10)
            wrapper.modHealthRelative(100)
            wrapper.modHealthRegenRelative(100)
            wrapper.modManaRelative(100)
            wrapper.modManaRegenRelative(100)
            wrapper.modStrengthRelative(100)
            wrapper.modAgilityRelative(100)
            wrapper.modIntelligenceRelative(100)

            wrapper.modHealthRegen(300)
            wrapper.modManaRegen(200)

            
        else if diff == AI_DIFFICULTY_INSANE
            let gold = 1500
            PlayerWrapper.addGoldEx(this.ownerId, gold )
            wrapper.modAttackSpeed(20)
            wrapper.modHealthRelative(200)
            wrapper.modHealthRegenRelative(200)
            wrapper.modManaRelative(200)
            wrapper.modManaRegenRelative(200)
            wrapper.modStrengthRelative(200)
            wrapper.modAgilityRelative(200)
            wrapper.modIntelligenceRelative(200)

            wrapper.modHealthRegen(600)
            wrapper.modManaRegen(400)


        //should not happen for everyone at the same time (lag)
        doAfter(GetRandomReal(0.1, 1.0)) ->
            if not this.paused
                this.buyItems()
        // wait until hero skill is available
        doAfter(GetRandomReal(5.5, 7)) ->
            this.selectSkills()

        DamageEventUnit.fromUnit(this.heroUnit).anyHit.add() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, boolean attack, boolean _active, boolean advanced) ->
            this.onDamage(damage)
        
    protected function changeState(AIState newState)
        if this.state != newState
            this.state = newState

        if newState == AIState.RETREAT
            if casting or attacking
                this.heroUnit.issueImmediateOrder("stop")
                casting = false
                attacking = false

    override function buyItems()
        if hasAllItems
            return

        let unitTypeId = this.heroType.getUnitId()
        for i = 0 to RecommendedItems.getCount(unitTypeId) - 1
            let itm = RecommendedItems.getItem(unitTypeId, i)
            if not this.heroUnit.hasItemById(itm.getItemId())
                let bought = tryBuyPartially(this.heroUnit, itm)
                if bought == 0
                    break
                else
                    if i == RecommendedItems.getCount(unitTypeId) - 1
                        if this.heroUnit.hasItemById(itm.getItemId())
                            hasAllItems = true

    private function selectSingleSkill(string char)
        int abilcode = -1
        if char == "Q"
            abilcode = this.heroType.getAbilityId(AbilitySlot.Q)
        else if char == "W"
            abilcode = this.heroType.getAbilityId(AbilitySlot.W)
        else if char == "E"
            abilcode = this.heroType.getAbilityId(AbilitySlot.E)
        else if char == "R"
            abilcode = this.heroType.getAbilityId(AbilitySlot.R)
        else if char == "P"
            abilcode = this.heroType.getAbilityId(AbilitySlot.PASSIVE)

        SelectHeroSkill(this.heroUnit, abilcode)

    private function selectSkills()
        if not this.paused
            int skillPoints
            while true
                skillPoints = GetHeroSkillPoints(this.heroUnit)
                if skillPoints <= 0
                    if this.heroUnit.getLevel() == HERO_MAX_LEVEL
                        return
                    else
                        break

                selectSingleSkill(this.skillBuild.charAt(0))

                //now the hero should have spent one skill point
                if GetHeroSkillPoints(this.heroUnit) == skillPoints-1
                    this.skillBuild = this.skillBuild.substring(1)
                else
                    //hero could not learn skill
                    error("Unable to learn skill "+this.skillBuild.charAt(0)+" for hero "+this.heroUnit.getName())
                    break
        doAfter(GetRandomReal(30, 40)) -> 
            this.selectSkills()
            
    private function levelUp()
        this.selectSkills()

    private static function updateStatic()
        int i = 0
        for int t = TEAM_1 to TEAM_2
            for HeroAIImpl ai in teamAIs[t]
                doAfter(i * 0.03, -> ai.update())
                i++

    protected function startTeamFight(TeamFight teamFight)

        this.endTeamFight()

        this.changeState(AIState.TEAM_FIGHT)
        this.teamFight = teamFight
        this.teamFight.addAI(this)
        aiMessage("teamfight")

    protected function endTeamFight()
        if this.teamFight != null
            this.teamFight.removeAI(this)
            this.teamFight = null

    private function onDamage(real damage)
        this.damageCurrent += damage

    protected function retreatTemporarily(int counter, boolean useAI)
        if casting or attacking
            this.heroUnit.issueImmediateOrder("stop")
            casting = false
            attacking = false
            updateRetreatLoc()
            this.heroUnit.issuePointOrder("move", this.currentRetreatLoc)
        if useAI
            this.changeState(AIState.RETREAT_TEMP_AI)
        else
            this.changeState(AIState.RETREAT_TEMP)
        this.retreatCounter = counter


    private function update()

        damageIndex++
        if damageIndex >= damageMax
            damageIndex = 0
        damageSum += damageCurrent - damageCount[damageIndex]
        if damageSum.abs() < 0.01
            damageSum = 0
        damageCount[damageIndex] = damageCurrent
        damageCurrent = 0

        if not paused

            if casting
                if this.heroUnit.getCurrentOrder() != OrderId(castOrder)
                    castOrder = ""
                    casting = false

            if this.state == AIState.RETREAT

                let dist = this.heroUnit.getPos().distanceTo(this.homeLoc)
                if dist<300
                    this.changeState(AIState.HEAL)
                    if wantedUpgrades == 0
                        this.buyItems()
                else
                    if not casting
                        this.heroType.retreatAI(this)
                    if this.heroUnit.getCurrentOrder() != OrderId("move") and not casting
                        updateRetreatLoc()
                        this.heroUnit.issuePointOrder("move", this.currentRetreatLoc)

            else if this.state == AIState.HEAL
                if this.heroUnit.getHP() >= this.heroUnit.getMaxHP()*0.9 and this.heroUnit.getMana() >= this.heroUnit.getMaxMana()*0.9
                    this.changeState(AIState.BUY_UPGRADES)
                    if(not this.noMoreUpgrades)
                        this.upgradeTimer = 4
                        this.desiredUpgrade = Blacksmith.findNextUpgrade(this.team)
                        this.targetBlacksmith = Blacksmith.findNextBlacksmith(this.team, this.heroUnit.getPos())
                        if this.desiredUpgrade == -1 or this.targetBlacksmith == null
                            this.noMoreUpgrades = true
                            this.wantedUpgrades = 0
                        

            else if this.state == AIState.BUY_UPGRADES
                if this.getOwningPlayer().getGold() < 1200 or wantedUpgrades <= 0 or this.noMoreUpgrades
                    this.changeState(AIState.ATTACK)
                    let rand = GetRandomInt(1, 3)
                    if rand == 1
                        this.lane = Lane.TOP
                    else if rand == 2
                        this.lane = Lane.BOT
                    else
                        this.lane = Lane.MID

                    updateTargetLoc()
                else
                    
                    let smithPos = targetBlacksmith.getPos()
                    let dist = this.heroUnit.getPos().distanceTo(smithPos)
                    if dist<300
                        if this.upgradeTimer > 0
                            this.desiredUpgrade = Blacksmith.findNextUpgrade(this.team)
                            this.targetBlacksmith = Blacksmith.findNextBlacksmith(this.team, this.heroUnit.getPos())
                            if this.desiredUpgrade == -1 or this.targetBlacksmith == null
                                this.noMoreUpgrades = true
                                this.wantedUpgrades = 0
                            else
                                if(IssueNeutralImmediateOrderById(this.getOwningPlayer(), this.targetBlacksmith, this.desiredUpgrade))
                                    this.wantedUpgrades--
                                    //print("["+this.heroUnit.getName()+"]: bought upgrade: "+GetObjectName(this.desiredUpgrade)+" ("+I2S(this.desiredUpgrade)+")")
                                    if( this.wantedUpgrades == 0) //does not want any upgrades at the moment, so hero can go back and buy items
                                        this.changeState(AIState.RETREAT)
                                else
                                    this.upgradeTimer -= UPDATE_INTERVAL
                        else
                            this.changeState(AIState.ATTACK)
                            let rand = GetRandomInt(1, 3)
                            if rand == 1
                                this.lane = Lane.TOP
                            else if rand == 2
                                this.lane = Lane.BOT
                            else
                                this.lane = Lane.MID
        
                            updateTargetLoc()
                    else if this.heroUnit.getCurrentOrder() != OrderId("move") and not casting
                        this.heroUnit.issuePointOrder("move", smithPos)
                    
                    


            else if this.state == AIState.ATTACK
                if this.heroUnit.getHP() <= this.heroUnit.getMaxHP()*0.4
                    this.changeState(AIState.RETREAT)

                if this.damageSum > this.heroUnit.getMaxHP()*0.15
                    aiMessage("taking too much damage, retreat: "+damageSum.toString())
                    this.retreatTemporarily(5, false)
                else
                    updateTargetLoc()  


                    let g = CreateGroup()
                    unit u
                    boolean heroNearby = false
                    g.enumUnitsInRange(this.heroUnit.getPos(), TEAM_FIGHT_RANGE)
                    while(true)
                        u = FirstOfGroup(g)
                        if u == null
                            break
                        g.remove(u)
                        if u.isTargetableEnemy(this.getOwningPlayer())
                            if u.isType(UNIT_TYPE_HERO)
                                heroNearby = true
                                break

                    g.destr()

                    if heroNearby
                        let chance = determineWinChance(this.team, this.heroUnit.getPos())
                        //start team fight for all narby AIs
                        aiMessage("attack chance = "+chance.toString())
                        if chance > 0.6


                            let newTeamFight = new TeamFight(this.heroUnit.getPos(), this.team)

                            for i = 0 to MAX_HERO_COUNT-1
                                let aiList = heroAIs[i]
                                for iai in aiList
                                    let ai = iai castTo HeroAIImpl
                                    if ai.team == team and ai.heroUnit.getPos().distanceTo(this.heroUnit.getPos()) < TEAM_FIGHT_RANGE
                                        if ai.state == AIState.ATTACK or ai.state == AIState.TEAM_FIGHT
                                            if ai.state == AIState.ATTACK
                                                ai.startTeamFight(newTeamFight)
                                            else
                                                if ai.getTeamFightLoc().distanceTo(ai.heroUnit.getPos()) > newTeamFight.getTeamFightLoc().distanceTo(ai.heroUnit.getPos())
                                                    ai.startTeamFight(newTeamFight)
                            return
                        if chance < 0.4
                            this.retreatTemporarily(10, true)
                            return

                    if not casting
                        this.heroType.attackAI(this)
                    if this.heroUnit.getCurrentOrder() != OrderId("attack") and not casting
                        this.heroUnit.issuePointOrder("attack", this.currentTargetLoc)

            else if this.state == AIState.TEAM_FIGHT
                if this.heroUnit.getHP() <= this.heroUnit.getMaxHP()*0.4
                    this.changeState(AIState.RETREAT)
                    this.endTeamFight()
                    aiMessage("solo retreat")
                else
                    if not casting
                        this.heroType.teamFightAI(this)
                    if this.heroUnit.getCurrentOrder() != OrderId("attack") and not casting
                        this.heroUnit.issueTargetOrder("attack", this.getTeamFightTarget())


            else if this.state == AIState.RETREAT_TEMP or this.state == AIState.RETREAT_TEMP_AI
                let dist = this.heroUnit.getPos().distanceTo(this.homeLoc)
                if dist<300
                    this.changeState(AIState.HEAL)
                    if wantedUpgrades == 0
                        this.buyItems()
                else if this.heroUnit.getHP() <= this.heroUnit.getMaxHP()*0.4
                    this.changeState(AIState.RETREAT)
                else
                    

                    if retreatCounter <= 0
                        this.changeState(AIState.ATTACK)
                    else
                        retreatCounter--
                        if this.state == AIState.RETREAT_TEMP_AI
                            if not casting
                                skip
                                //this.heroType.retreatAI(this)
                        if this.heroUnit.getCurrentOrder() != OrderId("move") and not casting
                            updateRetreatLoc()
                            this.heroUnit.issuePointOrder("move", this.currentRetreatLoc)



    override function issue(string order) returns boolean
        boolean ret = false
        if not casting
            casting = this.heroUnit.issueImmediateOrder(order)
            castOrder = order
            ret = casting
        return ret

    override function issue(string order, vec2 target) returns boolean
        boolean ret = false
        if not casting
            casting = this.heroUnit.issuePointOrder(order, target)
            castOrder = order
            ret = casting
        return ret

    override function issue(string order, widget targetWidget) returns boolean
        boolean ret = false
        if not casting
            casting = this.heroUnit.issueTargetOrder(order, targetWidget)
            castOrder = order
            ret = casting
        return ret

    override function attack(widget targetWidget) returns boolean
        boolean ret = false
        if not casting and not attacking
            ret = this.heroUnit.issueTargetOrder("attack", targetWidget)
        return ret


                


    override function togglePause()
        this.paused = not this.paused

    // for every 5000 gold the AI gets, it buys one upgrade
    override function addGold(int gold)
        if not this.noMoreUpgrades
            this.upgradeGold += gold
            if this.upgradeGold > 5000
                this.wantedUpgrades++
                this.upgradeGold -= 5000

                //print(this.heroUnit.getOwner().getColor().toColor().toColorString()+"["+this.heroUnit.getName()+"]|r "+" wants upgrades: "+I2S(this.wantedUpgrades))


/*
    Determines the win chance of a team, if a fight is initiated at a certain position.
    I have no idea how this works. :/
    Factors to take into consideration:
    - Hero; hp, mana, lvl, item value, controlled by AI?
    - Towers nearby
    - Units nearby

    Towers and units are more relevant for the defending team, as the offensive team usually won't benefit from tower support.

*/
function determineWinChance(int team, vec2 pos) returns real

    real strengthTeam1
    real strengthTeam2

    real unitStrength1 = 0
    real unitStrength2 = 0

    real towerStrength1 = 0
    real towerStrength2 = 0

    real heroStrength1 = 0
    real heroStrength2 = 0

    //don't fight inside the hero tower
    if gg_rct_GreenHeroTower.contains(pos)
        return team == TEAM_1 ? 1 : 0
    else if gg_rct_BrownHeroTower.contains(pos)
        return team == TEAM_1 ? 0 : 1

    let g = CreateGroup()
    g.enumUnitsInRange(pos, TEAM_FIGHT_RANGE)
    unit u
    while true
        u = FirstOfGroup(g)
        if u == null
            break
        g.remove(u)

        if u.isAlive()
            let p = u.getOwner().getId()
            let uTeam1 = Players.team(p) == TEAM_1
            let uTeam2 = Players.team(p) == TEAM_2
            let uType = u.getTypeId()

            if u.isType(UNIT_TYPE_STRUCTURE)
                if uType == HERO_TOWER
                    if uTeam1
                        towerStrength1 += 100000
                    else
                        towerStrength2 += 100000
                else
                    if u.isType(UNIT_TYPE_ATTACKS_GROUND) // tower
                        if uType == OUTER_TOWER
                            if uTeam1
                                if team == TEAM_1
                                    towerStrength1 += 100
                                else
                                    towerStrength1 += 600
                            else if uTeam2
                                if team == TEAM_1
                                    towerStrength2 += 600
                                else
                                    towerStrength2 += 100
                        else if uType == GATE_TOWER or uType == BASE_TOWER
                            if uTeam1
                                if team == TEAM_1
                                    towerStrength1 += 150
                                else
                                    towerStrength1 += 900
                            else if uTeam2
                                if team == TEAM_1
                                    towerStrength2 += 900
                                else
                                    towerStrength2 += 150

            else if u.isType(UNIT_TYPE_HERO)
                if uTeam1
                    heroStrength1 += determineHeroStrength(u)
                else if uTeam2
                    heroStrength2 += determineHeroStrength(u)
            else
                if uTeam1
                    if team == TEAM_1
                        unitStrength1 += 15
                    else
                        unitStrength1 += 25
                else if uTeam2
                    if team == TEAM_1
                        unitStrength2 += 25
                    else
                        unitStrength2 += 15

    g.destr()

    strengthTeam1 = unitStrength1 + towerStrength1 + heroStrength1
    strengthTeam2 = unitStrength2 + towerStrength2 + heroStrength2
    

    //print(unitStrength1.toString()+"|"+towerStrength1.toString()+"|"+heroStrength1.toString()+" vs "+unitStrength2.toString()+"|"+towerStrength2.toString()+"|"+heroStrength2.toString())

    let chance1 = strengthTeam1/(strengthTeam1 + strengthTeam2)

    real ret
    if team == TEAM_1
        ret = chance1
    else
        ret = 1-chance1


    return ret


/*
    A hero with a lot of strength or intelligence is considered to have a lot of offensive power.
    This hero will be focused with a higher priority.
*/
function determineHeroOffensiveStrength(unit hero) returns real
    let mana = hero.getMana()/hero.getMaxMana()
    let str = hero.getHeroStr()
    let intel = hero.getHeroInt()
    let lvl = hero.getLevel() + 5

    return (str + str * mana * (lvl/30) + 2 * intel * mana * (lvl/30)) / 4 //0-100 (standard values, can be higher)

/*
    A hero with more ehp is considered to have a lot of defensive power.
    This hero will be focused with a lower priority.
*/
function determineHeroDefensiveStrength(unit hero) returns real
    let hp = hero.getHP()
    let armor = hero.getArmor()
    let wp = hero.getHeroWp()
    bool inBase
    if hero.getOwner().getId() <= Teams.last1()
        inBase = gg_rct_GreenHeroTower.contains(hero.getPos())
    else
        inBase = gg_rct_BrownHeroTower.contains(hero.getPos())

    return (inBase ? 3 : 1) * (hp * (1 + ARMOR_REDUCTION * armor) + hp * (1 + MAGIC_REDUCTION * wp)) / 120 //0-100 (standard values, can be higher)


/*
    Relevant information:
        level, hp factor, mana factor, total item value
*/
function determineHeroStrength(unit hero) returns real
    let lvl = hero.getLevel()
    let hp = hero.getHP()/hero.getMaxHP()
    let mana = hero.getMana()/hero.getMaxMana()
    int itemValue = 0

    bool inBase
    if hero.getOwner().getId() <= Teams.last1()
        inBase = gg_rct_GreenHeroTower.contains(hero.getPos())
    else
        inBase = gg_rct_BrownHeroTower.contains(hero.getPos())

    for i = 0 to 5
        let itm = hero.itemInSlot(i)
        if itm != null
            itemValue += ItemInShop.getItemFromId(itm.getTypeId()).getTotalCost()

    let result = (0.25 + 0.25 * mana + 0.25 + 1.25 * hp)/2 * (5 + lvl)/30 * (0.2 + 0.8 * hp)

    let ai = HeroAIImpl.getAI(hero)
    real ret = (result * ( 20000 + itemValue) )/16
    if inBase
        ret += 2500
    if ai != null
        if ai.state == AIState.RETREAT or ai.state == AIState.RETREAT_TEMP or ai.state == AIState.RETREAT_TEMP_AI
            ret = 0


    return ret

public function unit.toHeroAI() returns IHeroAI
    return HeroAIImpl.getAI(this)
public abstract class HeroAI
    static function getAiList(int i) returns LinkedList<IHeroAI>
        return HeroAIImpl.getAiList(i)
    static function create(IHero hero, aidifficulty diff) returns IHeroAI
        return new HeroAIImpl(hero, diff)

init
    HeroAIImpl.classInit()
    TeamFight.classInit()
