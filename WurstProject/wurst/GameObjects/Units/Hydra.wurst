package Hydra

import ClosureTimers
import Assets
import SoundUtils
import PlayerControl
import Constants
import UnitTypeConfig
import UnitLib
import TeamUtil
import Buff
import FastDamageEvent
import IUnit

constant REVIVE_TIME = 300.
constant MAX_LEVEL = 5
constant DEATH_SOUND = new SoundDefinition(Sounds.hydraDeath1, false)

vec2 spawnPos
angle facing

int creepLevel
unit hydraIcon

constant int array HP = [0, 2000, 4000, 6000, 8000, 10000]
constant int array DMG = [0, 50, 100, 150, 200, 250]

constant int array ARMOR = [0, 20, 40, 60, 80, 100]
constant int array WILLPOWER = [0, 20, 40, 60, 80, 100]

constant int array ATTACK_SPEED = [0, 10, 20, 30, 40, 50]

constant int ACID_BREATH_ARMOR = 20
constant int ACID_BREATH_SLOW = 40
constant real ACID_BREATH_DUR = 5

constant BUFF_ACID_BREATH = compiletime(setupBuff("Acid Breath", "This unit was hit by a Hydra; it moves and attacks slower and has reduced armor.", Icons.bTNCorrosiveBreath, false, 1, Abilities.bottleImpact, "chest", DispelLevel.DISPEL))

function hydraStats(unit u, int lvl)
    u.wrapper()
    ..modStrength(DMG[lvl])
    ..modHealth(HP[lvl])
    ..modArmor(ARMOR[lvl])
    ..modAgility(WILLPOWER[lvl])
    ..modAttackSpeed(ATTACK_SPEED[lvl])

    DamageEventUnit.fromUnit(u).attackDamageNoBuilding.add() (unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, bool attack, bool arrow, bool alternate) ->
        target.addBuffReduced(source, ACID_BREATH_DUR, BUFF_ACID_BREATH, 1)

function onHydraDeath()
    let target = GetTriggerUnit()
    if target == udg_Hydra
        hydraIcon.hide()
        DEATH_SOUND.play().snd.setVolume(150)

        let killerId = GetKillingUnit().getOwner().getId()
        let killingTeam = Players.team(killerId)
        let teamName = Players.coloredName(Teams.army(killingTeam))

        if not Players.isTeamNeutral(killerId)
            printTimed("Team "+teamName+" has killed a Hydra. Their heroes gain 3 stat upgrades for every stat. The Hydra will respawn in "+REVIVE_TIME.toInt().toString()+" seconds.", 10)
            PingMinimap(target.getX(), target.getY(), 3)
            PlayerWrapper.statHydrasKilled[killerId]++
            for hero in Teams.HEROES[killingTeam]
                hero.toUnit().hydraBonus()

        doAfter(REVIVE_TIME) ->
            udg_Hydra = createUnit(players[CREEP_NORMAL_OWNER], HYDRA, spawnPos, facing)
            hydraIcon.show()
            SetUnitAcquireRange(udg_Hydra, 200)
            if creepLevel < MAX_LEVEL
                creepLevel++

            hydraStats(udg_Hydra, creepLevel)

function unit.hydraBonus()
    this.wrapper()
    ..modAttackSpeed(6)
    ..modStrength(3)
    ..modAgility(3)
    ..modIntelligence(3)
    ..modArmor(3)
    ..modHealth(45)
    ..modHealthRegen(90)
    ..modMana(30)
    ..modManaRegen(30)


init 
    spawnPos = udg_Hydra.getPos() + vec2(-1,1) * 800
    hydraIcon = createUnit(players[CREEP_ICON_OWNER], HYDRA_ICON, spawnPos, angle(0))
    SetAltMinimapIcon("UI\\Minimap\\minimap-hydra.blp")
    UnitSetUsesAltIcon(hydraIcon, true)
    facing = udg_Hydra.getFacingAngle()
    creepLevel = 0

    doAfter(0) ->
        hydraStats(udg_Hydra, creepLevel)


    CreateTrigger()
        ..registerPlayerUnitEvent(players[CREEP_NORMAL_OWNER], EVENT_PLAYER_UNIT_DEATH, null)
        ..addAction(function onHydraDeath)

    BUFF_ACID_BREATH.addSetupFunction() (Buff thisBuff, int factor) ->
        if factor == 1
            thisBuff.getTarget().wrapper()
            ..modAttackSpeed( -ACID_BREATH_SLOW)
            ..modMoveSpeedRelative(-ACID_BREATH_SLOW*10)
            ..modArmor(-ACID_BREATH_ARMOR)
            thisBuff.setData(1)
        else
            let stacks = thisBuff.getData()
            thisBuff.getTarget().wrapper()
            ..modAttackSpeed( ACID_BREATH_SLOW)
            ..modMoveSpeedRelative(ACID_BREATH_SLOW*10)
            ..modArmor(ACID_BREATH_ARMOR * stacks)

    BUFF_ACID_BREATH.addStackFunction() (Buff whichBuff) ->
        let stacks = whichBuff.getData() + 1
        whichBuff.setData(stacks)
        whichBuff.getTarget().wrapper()
        ..modArmor(-ACID_BREATH_ARMOR)
    

