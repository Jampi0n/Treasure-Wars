package IUnit

import ErrorHandling
import Constants
import HeroTypeImpl
import TeamUtil
import IHero
import UnitWrapper
import UnitInfo
import UnitBuffs
import UnitColor
import UnitStats
import BonusMod
import Buff

class IUnitSingleton extends UnitWrapperSingleton
    override function createNew(unit u)
        new IUnit(u)

public class IUnit extends UnitWrapper
    use UnitInfo
    use UnitColor
    use UnitStats
    use UnitBuffs
    IHero hero
    IHeroType heroType
    IHero owningHero
    int revealCount = 0
    int team
    bool isHero
    real scaleAttackAnimation

    ondestroy
        destroyBuffs()
        destroyStats()
        destroyColor()
        destroyInfo()
        destroyWrapper()

    construct(unit u)
        super(u)
        this.setStatBaseInternal(Stat.STR, this.getDamageBase())
        this.setStatBaseInternal(Stat.AD, 0)
        this.applyBaseStats()
        this.team = Players.team(this.getOwnerId())

        this.isHero = u.isType(UNIT_TYPE_HERO)
        if this.isHero
            this.scaleAttackAnimation = ATTACK_ANIMATION_FACTOR
            this.heroType = HeroType.get(this.getTypeId())
            if this.heroType == null
                error("HeroType could not be resolved: " + u.getName())

    function initAsHero(IHero hero)
        this.hero = hero

    function getHeroType() returns IHeroType
        return this.heroType

    function toHero() returns IHero
        return this.hero

    function isHero() returns bool
        return this.isHero

    function getOwningHero() returns IHero
        return this.owningHero

    function setOwningHero(IHero owningHero)
        this.owningHero = owningHero

    function incReveal()
        revealCount++
        if revealCount == 1
            if this.team == TEAM_1
                UnitShareVision(this.toUnit(), players[Teams.army2()], true)
            else if this.team == TEAM_2
                UnitShareVision(this.toUnit(), players[Teams.army1()], true)

    function decReveal()
        revealCount--
        if revealCount == 0
            if this.team == TEAM_1
                UnitShareVision(this.toUnit(), players[Teams.army2()], false)
            else if this.team == TEAM_2
                UnitShareVision(this.toUnit(), players[Teams.army1()], false)

    function modReveal(int value)
        revealCount += value
        if revealCount > 0
            if this.team == TEAM_1
                UnitShareVision(this.toUnit(), players[Teams.army2()], true)
            else if this.team == TEAM_2
                UnitShareVision(this.toUnit(), players[Teams.army1()], true)
        else
            if this.team == TEAM_1
                UnitShareVision(this.toUnit(), players[Teams.army2()], false)
            else if this.team == TEAM_2
                UnitShareVision(this.toUnit(), players[Teams.army1()], false)
                
    override function applyDamage()
    override function applyArmor()
        this.toUnit().setBonusArmor(this.getArmorBonus())
    override function applyAttackSpeed()
        this.toUnit().setBonusAttackSpeed((this.getAttackSpeedBonus() * this.scaleAttackAnimation).round())
    override function applyStrength()
        if this.isHero
            this.toUnit().setBonusStrength(this.getStrengthBonus())
            if this.hero != null
                this.hero.updateTooltipsStr()
        else
            this.toUnit().setBonusDamage(this.getStrengthBonus())
    override function applyAgility()
        this.toUnit().setBonusAgility(this.getAgilityBonus())
    override function applyIntelligence()
        this.toUnit().setBonusIntelligence(this.getIntelligenceBonus())
        if this.isHero
            if this.hero != null
                this.hero.updateTooltipsInt()
    override function applyMoveSpeed()
        this.toUnit().setMoveSpeed(this.getMoveSpeed().toReal())
    override function applyHealth()
        this.toUnit().setMaxHP(this.getHealth(), true)
    override function applyMana()
        this.toUnit().setMaxMana(this.getMana(), true)
    override function applyHealthRegen()
    override function applyManaRegen()
    override function applyCooldown()
        if this.isHero
            if this.hero != null // when the hero us created, the unit wrapper exists before the hero, so hero may still be null
                this.hero.updateCooldowns()

public function unit.wrapper() returns IUnit
    return IUnit.getWrapper(this) castTo IUnit

init
    new IUnitSingleton()
