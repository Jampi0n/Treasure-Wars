package UnitLib

import Buff
import CommonBuffs
import AbilityScaling
import ErrorHandling
import Execute
import PlayerControl
import ItemIdDefinitions
import Missile
import Constants
import IUnit
import DamageDetection

public enum ReductionType
    PHYSICAL
    MAGIC
    NONE

public abstract class DamageType
    static constant ATTACK = DAMAGE_TYPE_NORMAL         // only used by attacks
    static constant PHYSICAL = DAMAGE_TYPE_ENHANCED     // ReductionType.PHYSICAL
    static constant MAGIC = DAMAGE_TYPE_MAGIC           // ReductionType.MAGIC
    static constant UNIVERSAL = DAMAGE_TYPE_UNIVERSAL   // ReductionType.NONE

ReductionType damageReductionType = ReductionType.NONE

public function getDamageReductionType() returns ReductionType
    return damageReductionType

public function unit.isBuilding() returns boolean
    return IsUnitType(this, UNIT_TYPE_STRUCTURE)


public function unit.isVisible(player source) returns boolean
    return IsUnitVisible(this, source)
public function unit.isTargetable() returns boolean
    return this != null and this.isAlive() and not IsUnitType(this, UNIT_TYPE_SAPPER)
public function unit.isTargetableEnemy(player source) returns boolean
    return this.isTargetable() and IsUnitEnemy(this, source) and not IsUnitType(this, UNIT_TYPE_ANCIENT)
public function unit.isTargetableEnemyUnit(player source) returns boolean
    return this.isTargetable() and IsUnitEnemy(this, source) and not IsUnitType(this, UNIT_TYPE_ANCIENT) and not this.isBuilding()
public function unit.isTargetableAllied(player source) returns boolean
    return this.isTargetable() and IsUnitAlly(this, source)
public function unit.isTargetableAlliedUnit(player source) returns boolean
    return this.isTargetable() and IsUnitAlly(this, source) and not this.isBuilding()
public function unit.isTargetableAny(player source) returns boolean
    if this.isTargetable()
        if IsUnitAlly(this, source)
            return true
        else
            return not IsUnitType(this, UNIT_TYPE_ANCIENT)
    return false
public function unit.isTargetableAnyUnit(player source) returns boolean
    if this.isTargetable() and not this.isBuilding()
        if IsUnitAlly(this, source)
            return true
        else
            return not IsUnitType(this, UNIT_TYPE_ANCIENT)
    return false

public function unit.isVisible(unit source) returns boolean
    return this.isVisible(source.getOwner())
public function unit.isTargetableEnemy(unit source) returns boolean
    return this.isTargetableEnemy(source.getOwner())
public function unit.isTargetableEnemyUnit(unit source) returns boolean
    return this.isTargetableEnemyUnit(source.getOwner())
public function unit.isTargetableAllied(unit source) returns boolean
    return this.isTargetableAllied(source.getOwner())
public function unit.isTargetableAlliedUnit(unit source) returns boolean
    return this.isTargetableAlliedUnit(source.getOwner())
public function unit.isTargetableAny(unit source) returns boolean
    return this.isTargetableAny(source.getOwner())
public function unit.isTargetableAnyUnit(unit source) returns boolean
    return this.isTargetableAnyUnit(source.getOwner())




public function unit.isMovable() returns boolean
    if GetUnitPropWindow(this) < 0.00001
        return false
    if this.wrapper().hasBuffOfType(ENSNARED)
        return false
    if this.wrapper().hasBuffOfType(ENTANGLED)
        return false
    if this.getDefaultMovespeed() == 0
        return false
    return true

public function unit.getUnitStr() returns int
    return this.wrapper().getStrength()

public function unit.getUnitWp() returns int
    return this.wrapper().getAgility()

public function unit.getUnitInt() returns int
    return this.wrapper().getIntelligence()

public function unit.getHeroStr() returns int
    return this.getStr(true)

public function unit.getHeroWp() returns int
    return this.getAgi(true)

public function unit.getHeroInt() returns int
    return this.getInt(true)

public function unit.addBuff(unit caster, real duration, BuffType buffType, int level) returns Buff
    Buff ret = null
    if (duration > 600 or duration < 0) and not duration == -1
        error("addBuff add buff with unusual duration: " + duration.toString())
    if this.isAlive()
        execute() () ->
            this.wrapper().addBuff(caster, buffType, duration, level)
        ret = this.wrapper().getBuffOfType(buffType)
    return ret

public function unit.addBuffReduced(unit caster, real duration, BuffType buffType, int level) returns Buff
    //buff reduction only uses 1/4 of the wp, so it reduces duration not as much as it reduces damage
    real realDuration =  duration.reduce( (this.getUnitWp()/4).toInt() , 0.01 )
    if this.hasItemById(ITEM_ID_ARCANE_SHIELD)
        realDuration = realDuration * 0.85
    Buff ret = null
    if (realDuration > 600 or realDuration < 0) and not realDuration == -1
        error("addBuffReduced add buff with unusual duration: " + realDuration.toString() + " " + (buffType castTo int).toString())
    if this.isAlive()
        execute() () ->
            this.wrapper().addBuff(caster, buffType, realDuration, level)
        ret = this.wrapper().getBuffOfType(buffType)
    return ret


function unit.dealDamageAlways(unit target, real amount, ReductionType reductionType)
    if reductionType == ReductionType.MAGIC
        UnitDamageTarget(this, target, amount.reduceMagic(target.getUnitWp()), false, true, ATTACK_TYPE_NORMAL, DamageType.MAGIC, WEAPON_TYPE_WHOKNOWS)
    else if reductionType == ReductionType.PHYSICAL
        UnitDamageTarget(this, target, amount.reduceArmor(target.getArmor().round()), false, true, ATTACK_TYPE_NORMAL, DamageType.PHYSICAL, WEAPON_TYPE_WHOKNOWS)
    else
        UnitDamageTarget(this, target, amount, false, true, ATTACK_TYPE_NORMAL, DamageType.UNIVERSAL, WEAPON_TYPE_WHOKNOWS)


public function unit.dealDamage(unit target, real amount, ReductionType reductionType)
    if not target.isType(UNIT_TYPE_ANCIENT)
        this.dealDamageAlways(target, amount, reductionType)
        if not IsUnitEnemy(target, this.getOwner()) and this != target
            Log.warn(this.getName()+" damages ally: "+target.getName())

public function unit.dealDamageNoEvent(unit target, real amount, ReductionType reductionType)
    disableDamageDetect()
    this.dealDamage(target, amount, reductionType)
    enableDamageDetect()

public function unit.damageMana(unit target, real amount, ReductionType reductionType)
    real newAmount
    if reductionType == ReductionType.MAGIC
        let wp = target.getUnitWp()
        newAmount = amount.reduceMagic(wp)
    else if reductionType == ReductionType.PHYSICAL
        let ar = target.getArmor().round()
        newAmount = amount.reduceMagic(ar)
    else
        newAmount = amount
    target.addMana(-newAmount)

public function unit.healHP(unit target, real amount)
    real realAmount = amount
    if this.hasItemById(ITEM_ID_BRACER_OF_ABJURATION)
        realAmount *= 1.25

    realAmount = min(realAmount, target.getMaxHP()-target.getHP())
    target.setHP(target.getHP() + realAmount)

    PlayerWrapper.statHealingReceived[target.getOwner().getId()] += realAmount
    PlayerWrapper.statHealingDone[this.getOwner().getId()] += realAmount

public function unit.healMana(unit target, real amount)
    real realAmount = amount
    if this.hasItemById(ITEM_ID_BRACER_OF_ABJURATION)
        realAmount *= 1.25

    realAmount = min(realAmount, target.getMaxMana()-target.getMana())
    target.setMana(target.getMana() + realAmount)

    PlayerWrapper.statManaHealed[target.getOwner().getId()] += realAmount

public function unit.dispelPositiveBuffs(DispelLevel dispelLevel)
    let buffList = this.wrapper().getBuffList()
    if buffList != null
        for Buff currentBuff in buffList.getLinkedList()
            let buffType =currentBuff.getBuffType()
            if buffType.isPositive() and currentBuff.getDispelLevel() castTo int <= dispelLevel castTo int
                currentBuff.dispel()

public function unit.dispelNegativeBuffs(DispelLevel dispelLevel)
    let buffList = this.wrapper().getBuffList()
    if buffList != null
        for Buff currentBuff in buffList.getLinkedList()
            let buffType =currentBuff.getBuffType()
            if not buffType.isPositive() and currentBuff.getDispelLevel() castTo int <= dispelLevel castTo int
                currentBuff.dispel()


public function unit.dispelBuffs(DispelLevel dispelLevel)
    let buffList = this.wrapper().getBuffList()
    if buffList != null
        for Buff currentBuff in buffList.getLinkedList()
            if currentBuff.getDispelLevel() castTo int <= dispelLevel castTo int
                currentBuff.dispel()


public function unit.hitBoxDistanceTo(vec2 pos) returns real
    return max(0, this.getPos().distanceTo(pos) - this.getHitBox())

public function unit.countItemsOfType(int itemTypeId) returns int
    item indexItem
    int count = 0

    for i = 0 to bj_MAX_INVENTORY-1
        indexItem = UnitItemInSlot(this, i)
        if (indexItem != null) and (indexItem.getTypeId() == itemTypeId)
            count++

    return count

public function unit.cancelChannel()
    this.addBuff(this, 0.01, STUNNED, 1)

/*
The item manipulation functions are applied to all items in the inventory.
They are not public, because they need to be used together to ensure correctness.
If dropping, picking up or abilities need to be disabled individually,
triggers need to be set up to update items when they are picked up or dropped.
If this is required, a new system using IHero or IUnit should be implemented instead.
*/
function unit.toggleItemDrop(bool flag)
    this.wrapper().setAllowItemDrop(flag)

function unit.toggleItemPickup(bool flag)
    this.wrapper().setAllowItemPickup(flag)

function unit.toggleItemAbilities(bool flag)
    for i = 0 to 5
        let itm = this.itemInSlot(i)
        if itm != null
            if flag
                if not itm.getField(ITEM_BF_INCLUDE_AS_RANDOM_CHOICE)
                    itm.setField(ITEM_BF_ACTIVELY_USED, true)
                    itm.setField(ITEM_BF_INCLUDE_AS_RANDOM_CHOICE, true)
            else
                if itm.getField(ITEM_BF_ACTIVELY_USED)
                    itm.setField(ITEM_BF_ACTIVELY_USED, false)
                    itm.setField(ITEM_BF_INCLUDE_AS_RANDOM_CHOICE, false)
            

public function unit.toggleInventory(bool flag)
    this.toggleItemPickup(flag)
    this.toggleItemDrop(flag)
    this.toggleItemAbilities(flag)


public function enumUnitsInHitBoxRange(vec2 pos, real range) returns group
    let g = CreateGroup()
    g.enumUnitsInRange(pos, range + MAX_HIT_BOX)
    let returnGroup = CreateGroup()
    while(true)
        let u = FirstOfGroup(g)
        if u == null
            break
        g.remove(u)
        if u.hitBoxDistanceTo(pos) <= range
            returnGroup.add(u)
    
    g.destr()
    return returnGroup

public function unit.isDummy() returns bool
    return this.getAbilityLevel('Aloc') > 0
