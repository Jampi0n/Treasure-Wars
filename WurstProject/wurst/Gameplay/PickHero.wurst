package PickHero
import TimerUtils
import ClosureTimers
import Gameplay
import ShopUI
import ShopManager
import ErrorHandling
import HeroAIImpl
import TeamUtil
import Constants
import PlayerControl
import UnitLib
import CommonBuffs
import IHero
import HeroImpl
import HeroTypeImpl
import IUnit
import RandomSet

public PickMode pickMode
timer chooseModeTimer
timer pickTimer
timerdialog timerWindow
trigger chooseModeTrigger
trigger onPickTrigger = null
trigger onClickButtonTrigger
int clickedButtonId
int array playerGoldArray
bool locked = false
region pickRegion

unit array tavern
unit array patron
fogmodifier array tavernVision
bool array playerHasPicked
constant randomHeroes = new RandomSet<IHeroType>()

enum PickMode
    UNDECIDED
    ALLRANDOM
    ALLPICK
    //...
    /*
ban, reverse pick, same heroes
    */

//debug
boolean itemCarry = false

function setupCreatedHero(IHero hero)
    let heroUnit = hero.toUnit()
    let owner = heroUnit.getOwner()
    let ownerId = owner.getId()
    playerHasPicked[ownerId] = true
    owner.setGold(500)
        
    vec2 pos// = gg_rct_CenterMid.getCenter()
    patron[ownerId].remove()

    if Players.team(ownerId) == TEAM_1
        pos = gg_rct_GreenAltar.getCenter()+vec2(128,128)
    else
        pos = gg_rct_BrownAltar.getCenter()-vec2(128,128)

    if owner.getController() == MAP_CONTROL_COMPUTER and owner.getSlotState() == PLAYER_SLOT_STATE_PLAYING
        doAfter(GetRandomReal(1, 3)) ->
            let ai = HeroAI.create(hero, GetAIDifficulty(owner))
            ai.togglePause()
            doAfter(GetRandomReal(48, 52)) ->
                ai.togglePause()

    heroUnit.setPos(pos)
    getGUI(owner.getId())
    ..start(heroUnit)
    if GetLocalPlayer() == owner
        ClearTextMessages()
    printTimedToPlayer("You can now open/close the shop by pressing escape.", 25, owner)
    //prevent using skills for first 5 seconds, as skills will be initialized
    if(GetHeroSkillPoints(heroUnit) != 1)
        error("hero has unexpexted number of skill points at setup: " + GetHeroSkillPoints(heroUnit).toString())
    UnitModifySkillPoints(heroUnit, -1)
    
    doAfter(5) ->
        UnitModifySkillPoints(heroUnit, 1)

    if GetLocalPlayer() == owner
        owner.resetToGameCamera(0)
        PanCameraTo(pos.x, pos.y)


function createRandomHeroForAI(int id, boolean removeFromTavern) returns IHero
    IHeroType random
    while(true)
        random = randomHeroes.getRandom()
        if random.hasAI()
            break
    let hero = Hero.create(id, random.getUnitId() , gg_rct_CenterMid.getCenter(), angle(0))
    setupCreatedHero(hero)
    removeHeroType(random, removeFromTavern)
    return hero


//creates a random hero for a player
function createRandomHero(int id, boolean removeFromTavern)
    let random = randomHeroes.getRandom()
    let hero = Hero.create(id, random.getUnitId() , gg_rct_CenterMid.getCenter(), angle(0))
    setupCreatedHero(hero)
    removeHeroType(random, removeFromTavern)


function removeHeroType(IHeroType heroType, boolean _removeFromTavern)
    randomHeroes.remove(heroType)


function allRandom()
    for i = 0 to MAX_HERO_COUNT-1
        if PlayerWrapper.getPlayerType(i) == PlayerType.HERO
            if players[i].getController() == MAP_CONTROL_COMPUTER
                createRandomHeroForAI(i, false)
            else
                createRandomHero(i, false)

    allHeroesPicked()
    
function allPick()
    let pickTime = DEBUG_MODE?10:60
    print("|cffffcc00All Pick was chosen. You have " + pickTime.toString() + " seconds to pick a Hero!|r")

    tavern[0] = createUnit(players[PLAYER_NEUTRAL_PASSIVE], 'n002', gg_rct_Tavern0.getCenter(), angle(0) )
    tavern[0].setColor(PLAYER_COLOR_RED)
    tavern[1] = createUnit(players[PLAYER_NEUTRAL_PASSIVE], 'n003', gg_rct_Tavern1.getCenter(), angle(0) )
    tavern[1].setColor(PLAYER_COLOR_BLUE)
    tavern[2] = createUnit(players[PLAYER_NEUTRAL_PASSIVE], 'n004', gg_rct_Tavern2.getCenter(), angle(0) )
    tavern[2].setColor(PLAYER_COLOR_YELLOW)
    tavern[3] = createUnit(players[PLAYER_NEUTRAL_PASSIVE], 'n005', gg_rct_Tavern3.getCenter(), angle(0) )
    tavern[3].setColor(PLAYER_COLOR_GREEN)

    for i = 0 to 47
        tavern[i div 12].addAbility(getTavernButton(i))
    
    for i = 0 to MAX_HERO_COUNT-1
        if PlayerWrapper.getPlayerType(i) == PlayerType.HERO
            players[i].setGold(HERO_GOLD_COST)
            patron[i] = createUnit(players[i], 'n006', gg_rct_CenterMid.getCenter(), angle(0))
            players[i].setCameraTargetControllerNoZ(patron[i], vec2(0,0), false)
            tavernVision[i] = CreateFogModifierRadius(players[i], FOG_OF_WAR_VISIBLE,
                                gg_rct_CenterMid.getCenterX(),  gg_rct_CenterMid.getCenterX(), 900, true, false)
            FogModifierStart(tavernVision[i])

    pickRegion = CreateRegion()
    ..addRect(bj_mapInitialPlayableArea)
    onPickTrigger = CreateTrigger()
    ..addAction(function onPick)
    ..registerEnterRegion(pickRegion, null)

    onClickButtonTrigger = CreateTrigger()
    ..addAction(function onClick)
    for i = 0 to 3
        onClickButtonTrigger.registerUnitEvent(tavern[i], EVENT_UNIT_SPELL_EFFECT)

    pickTimer = getTimer()
    ..start(pickTime.toReal(), function allPickEnd)

    doAfter(1) () ->
        timerWindow = CreateTimerDialog(pickTimer)
        TimerDialogSetTitle(timerWindow,"Pick hero:")
        TimerDialogDisplay(timerWindow, true)
    

function onClick()
    if locked
        error("Two players bought at the same time.")
        return

    locked = true
    clickedButtonId = GetSpellAbilityId()
    let triggerTavern = GetTriggerUnit()
    for i = Teams.first1() to Teams.last2()
        playerGoldArray[i] = players[i].getGold()

    doAfter(0) ->
        player triggerPlayer = null
        for i = Teams.first1() to Teams.last2()
            if playerGoldArray[i] - players[i].getGold() == HERO_GOLD_COST
                triggerPlayer = players[i]
                break

        triggerTavern.removeAbility(clickedButtonId)
        createUnit(triggerPlayer, getHeroFromButton(clickedButtonId).getUnitId() , tavern[0].getPos(), angle(0))

        locked = false




function onPick()
    let pickedUnit = GetTriggerUnit()
    if PlayerWrapper.getPlayerType(pickedUnit.getOwner().getId()) == PlayerType.HERO
        if HeroType.get(pickedUnit.getTypeId()) != null
            let hero = Hero.setup(pickedUnit)
            setupCreatedHero(hero)

            removeHeroType(hero.getHeroType(), true)

function allPickEnd()
    DestroyTimerDialog(timerWindow)
    pickTimer.release()
    timerWindow = null
    pickRegion.clearRect(bj_mapInitialPlayableArea)
    pickRegion.destr()
    for i = 0 to 3
        tavern[i].remove()
        tavern[i]=null
    for i = 0 to MAX_HERO_COUNT-1
        if PlayerWrapper.getPlayerType(i) == PlayerType.HERO
            patron[i].remove()
            patron[i]=null
            if not playerHasPicked[i]
                if(GetLocalPlayer()==players[i])
                    print("|cffffcc00You have not picked a hero in time. You will get a random one.")
                if players[i].getController() == MAP_CONTROL_COMPUTER
                    createRandomHeroForAI(i, false)
                else
                    createRandomHero(i, false)

            FogModifierStop(tavernVision[i])
            DestroyFogModifier(tavernVision[i])

    onClickButtonTrigger
    ..clearActions()
    ..destr()

    onPickTrigger
    ..clearActions()
    ..destr()   
    onPickTrigger = null

    allHeroesPicked()

function endPickMode()
    
    DestroyTimerDialog(timerWindow)
    chooseModeTimer.release()

    if(pickMode == PickMode.ALLPICK)
        allPick()
    if(pickMode == PickMode.ALLRANDOM)
        print("|cffffcc00All Random was chosen. Heroes will be random!|r")
        allRandom()
    if(pickMode == PickMode.UNDECIDED)
        print("|cffffcc00No mode was chosen. Heroes will be random!|r")
        pickMode = PickMode.ALLRANDOM
        allRandom()

    chooseModeTrigger
    ..clearActions()
    ..destr()

function onModePick()
    let s = GetEventPlayerChatString().toLowerCase()
    if s == "-ap"
        pickMode = PickMode.ALLPICK
    else
        pickMode = PickMode.ALLRANDOM

    endPickMode()

function startPickMode()

    for i = 0 to MAX_HERO_COUNT-1
        playerHasPicked[i] = false

    //copies the array of hero types
    
    for i = 0 to HeroType.getNumberOfTypes()
        randomHeroes.add(HeroType.getNthType(i))

    PanCameraToTimed(gg_rct_CenterMid.getCenterX(), gg_rct_CenterMid.getCenterY(), 0)
    

    pickMode = PickMode.UNDECIDED
    chooseModeTrigger = CreateTrigger()
    ..registerPlayerChatEvent(players[adminPlayer], "-ap", true)
    ..registerPlayerChatEvent(players[adminPlayer], "-ar", true)
    ..addAction(function onModePick)
    
    chooseModeTimer= getTimer()
    ..start(30, function endPickMode)

    doAfter(1) () ->
        if pickMode == PickMode.UNDECIDED
            timerWindow = CreateTimerDialog(chooseModeTimer)
            TimerDialogSetTitle(timerWindow,"Choose pick mode:")
            TimerDialogDisplay(timerWindow, true)
    

    print("|cffffcc00"+players[adminPlayer].getName()+" has 30 seconds to pick a mode!|r")
    print("|cffffcc00Available modes are all random (-ar) and all pick (-ap).|r")




init
    doAfter(0, ()-> startPickMode())

    // DEBUG_MODE automatically chooses all pick
    if DEBUG_MODE
        doAfter(0.1) () ->
            pickMode = PickMode.ALLPICK
            endPickMode()
        

    
    if DEBUG_MODE
        // you can spawn new heroes in DEBUG_MODE
        CreateTrigger()
        ..registerPlayerChatEvent(players[0], "hero ", false)
        ..addAction() ->
            if onPickTrigger == null
                let i = GetEventPlayerChatString().substring(5).toInt()

                if i >= 0 and i<=MAX_HERO_COUNT-1 and not playerHasPicked[i]

                    
                    PlayerWrapper.createPlayerWrapper(i, PlayerType.HERO)
                    createRandomHero(i, false)


                    if not itemCarry
                        itemCarry = true
                        let carry = createUnit(players[0], 'Hmkg', gg_rct_BrownAltar.getLeftBot(), angle(0))
                        UnitAddType(carry, UNIT_TYPE_ANCIENT)
                        carry.addBuff(carry, -1, DISARMED, 1)

                    SetPlayerAlliance(players[i], players[0], ALLIANCE_SHARED_VISION, true)
                    SetPlayerAlliance(players[i], players[0], ALLIANCE_SHARED_CONTROL, true)
                    SetPlayerAlliance(players[0], players[i], ALLIANCE_SHARED_CONTROL, true)
                    SetPlayerAlliance(players[i], players[0], ALLIANCE_SHARED_ADVANCED_CONTROL, true)


        CreateTrigger()
        ..registerPlayerChatEvent(players[0], "ai ", false)
        ..addAction() ->
            if onPickTrigger == null
                let i = GetEventPlayerChatString().substring(3).toInt()

                if i >= 0 and i<=MAX_HERO_COUNT-1 and not playerHasPicked[i]

                    

                    if i!= 0
                        PlayerWrapper.createPlayerWrapper(i, PlayerType.HERO)

                    let hero = createRandomHeroForAI(i, false)

                    HeroAI.create(hero, AI_DIFFICULTY_NEWBIE)

                    SetPlayerAlliance(players[i], players[0], ALLIANCE_SHARED_VISION, true)
                    SetPlayerAlliance(players[i], players[0], ALLIANCE_SHARED_CONTROL, true)
                    SetPlayerAlliance(players[0], players[i], ALLIANCE_SHARED_CONTROL, true)
                    SetPlayerAlliance(players[i], players[0], ALLIANCE_SHARED_ADVANCED_CONTROL, true)

        CreateTrigger()
        ..registerPlayerChatEvent(players[0], "full2", false)
        ..addAction() ->
            if onPickTrigger == null
                for i = Teams.first2() to Teams.last2()
                    if i >= 0 and i<=MAX_HERO_COUNT-1 and not playerHasPicked[i]
                        if i!= 0
                            PlayerWrapper.createPlayerWrapper(i, PlayerType.HERO)

                        let hero = createRandomHeroForAI(i, false)


                        let ai = HeroAI.create(hero, AI_DIFFICULTY_INSANE)

                        for IHero h in Players.heroList(i)
                            h.toUnit().setLevel(25, false)

                        doAfter(6) ->
                            players[i].addGold(100000)
                            ai.buyItems()

                        SetPlayerAlliance(players[i], players[0], ALLIANCE_SHARED_VISION, true)
                        SetPlayerAlliance(players[i], players[0], ALLIANCE_SHARED_CONTROL, true)
                        SetPlayerAlliance(players[0], players[i], ALLIANCE_SHARED_CONTROL, true)
                        SetPlayerAlliance(players[i], players[0], ALLIANCE_SHARED_ADVANCED_CONTROL, true)


        CreateTrigger()
        ..registerPlayerChatEvent(players[0], "pause ", false)
        ..addAction() ->
            let i = GetEventPlayerChatString().substring(6).toInt()
            if i >= 0 and i<=MAX_HERO_COUNT-1 and HeroAI.getAiList(i)!=null
                for ai in HeroAI.getAiList(i)
                    ai.togglePause()

        // teleport heroes mid
        CreateTrigger()
        ..registerPlayerChatEvent(players[0], "mid ", false)
        ..addAction() ->
            let i = GetEventPlayerChatString().substring(4).toInt()
            for IHero hero in Players.heroList(i)
                hero.toUnit().setXY(gg_rct_CenterMid.getCenter())

        CreateTrigger()
        ..registerPlayerChatEvent(players[0], "mid", true)
        ..addAction() ->
            for IHero hero in Players.heroList(0)
                hero.toUnit().setXY(gg_rct_CenterMid.getCenter())

        CreateTrigger()
        ..registerPlayerChatEvent(players[0], "g", true)
        ..addAction() ->
            players[0].addGold(100000)

        CreateTrigger()
        ..registerPlayerChatEvent(players[0], "castle", true)
        ..addAction() ->
            for IHero hero in Players.heroList(0)
                hero.toUnit().setXY(gg_rct_BrownCastle.getCenter())
                hero.toUnit().wrapper().modStrength( 10000)
                hero.toUnit().wrapper().modAttackSpeed( 200)
                hero.toUnit().wrapper().modHealth( 10000)

        CreateTrigger()
        ..registerPlayerChatEvent(players[0], "lvl ", false)
        ..addAction() ->
            let i = GetEventPlayerChatString().substring(4).toInt()
            for IHero hero in Players.heroList(i)
                hero.toUnit().setLevel(25, false)

        CreateTrigger()
        ..registerPlayerChatEvent(players[0], "lvl", true)
        ..addAction() ->
            for IHero hero in Players.heroList(0)
                hero.toUnit().setLevel(25, false)

     //SetHeroLevel(hero.toUnit(), 25, true)