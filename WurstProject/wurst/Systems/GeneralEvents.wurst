package GeneralEvents

import HashMap
import ErrorHandling
import DamageDetection

//  Animation Speed

constant ANIMATION_SPEED_MAP = new HashMap<int,real>

public function setAnimationSpeed(int abilityId, real speed)
    if not ANIMATION_SPEED_MAP.has(abilityId)  
        ANIMATION_SPEED_MAP.put(abilityId, speed)
    else
        error("Multiple animation speeds for id: " + abilityId.toString())

function getAnimationSpeed(int abilityId) returns real
    if ANIMATION_SPEED_MAP.has(abilityId)
        return ANIMATION_SPEED_MAP.get(abilityId)
    else
        return 1.0


// Impact

int array impactBuffId
OnImpact array impactFunction
int impactCounter = -1

public interface OnImpact
    function onImpact(unit source, unit target)


public function onImpact(int buffId, OnImpact onImpact)
    impactCounter++
    impactBuffId[impactCounter] = buffId
    impactFunction[impactCounter] = onImpact
    
function onImpactTrigger()
    let source = GetEventDamageSource()
    let target = GetTriggerUnit()
    for i = 0 to impactCounter
        if target.hasAbility(impactBuffId[i])
            target.removeAbility(impactBuffId[i])
            impactFunction[i].onImpact(source, target)


init
    addOnDamageFunc(function onImpactTrigger)

    CreateTrigger()
    ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_SPELL_CAST)
    ..addAction(() -> (begin
        GetTriggerUnit().setTimeScale(getAnimationSpeed(GetSpellAbilityId()))
    end))

    CreateTrigger()
    ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_SPELL_ENDCAST)
    ..addAction(() -> (begin
        GetTriggerUnit().setTimeScale(1)
    end))

   
    


