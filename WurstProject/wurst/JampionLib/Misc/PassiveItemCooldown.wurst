package PassiveItemCooldown

import ClosureTimers
import JHandles
import AbilityObjEditing
import GameTimer
import ObjectIdGenerator

public interface ToggleItemTriggers
    function toggle(bool enable)


public class PassiveItemCooldown
    protected static constant table = InitHashtable()
    protected static constant ITEM_LOCKED_UNTIL = 0
    protected static constant ITEM_ABILITY_ID = 1
    protected static constant UNIT_NUM_LOCKS = 0
    protected static constant ITEM_TYPE_ABILITY_ID = 0
    protected static ToggleItemTriggers toggleItemTriggers = null

    /**
    Attempts to start the cooldown of ability abil for item itm and unit u.
    The arguments are not checked for correctness.
    If the ability is not on cooldown the cooldown will be started and true is returned.
    If the abiltiy is still on cooldown false is returned.
    **/
    static function tryStartCooldown(unit u, int itm, int abil, real cd) returns bool
        if u.getAbilityCooldownRemaining(abil) == 0.0
            lockUnit(u, itm, abil, cd)
            return true
        return false

    /**
    This function should be run when an item is picked up and will process potential cooldowns.
    If the item is immediatly dropped, this function may be omitted.
    **/
    static function onItemPickUp(unit triggerUnit, item triggerItem, int itemTypeId)
        // item is locked
        let itemHandleId = triggerItem.getHandleId()
        let lockedUntilItem = PassiveItemCooldown.checkLockItem(itemHandleId)
            
        // hero is locked for item type
        let unitHandleId = triggerUnit.getHandleId()
        let lockedUntilUnit = PassiveItemCooldown.checkLockUnit(unitHandleId, itemTypeId)

        if lockedUntilItem > lockedUntilUnit and lockedUntilItem >= 0
            let abil = PassiveItemCooldown.table.loadInt(itemHandleId, PassiveItemCooldown.ITEM_ABILITY_ID)
            let cd = lockedUntilItem - getElapsedGameTime()
            // the item is locked, but the unit x item type may not be locked yet
            PassiveItemCooldown.lockUnit(triggerUnit, itemTypeId, abil, cd)
        else if lockedUntilUnit >= 0
            let abil = PassiveItemCooldown.table.loadInt(itemTypeId, PassiveItemCooldown.ITEM_TYPE_ABILITY_ID)
            let cd = lockedUntilUnit - getElapsedGameTime()
            // the unit x item type is locked, but the item may not be locked yet
            PassiveItemCooldown.lockItem(triggerItem, abil, cd)
            BlzStartUnitAbilityCooldown(triggerUnit, abil, cd)
            
    /**
    This function allows you to configure a function that toggles item triggers.
    PassiveCooldown has to drop and pick up items to apply cooldowns.
    If you configure a function that toggles your item triggers, the item triggers will not for these drop and pickup events.
    **/
    static function setup(ToggleItemTriggers toggleItemTriggers)
        PassiveItemCooldown.toggleItemTriggers = toggleItemTriggers

    private static function lockItem(item itm, int abil, real cd)
        let h = itm.getHandleId()
        table.saveReal(h, ITEM_LOCKED_UNTIL, getElapsedGameTime() + cd)
        table.saveInt(h, ITEM_ABILITY_ID, abil)
        doAfter(cd + 1) ->
            checkLockItem(h)

    private static function checkLockItem(int h) returns real
        if table.hasReal(h, 0)
            let lockedUntil = table.loadReal(h, ITEM_LOCKED_UNTIL)
            if lockedUntil < getElapsedGameTime()
                unlockItem(h)
                return -1
            return lockedUntil
        return -1

    private static function unlockItem(int h)
        PassiveItemCooldown.table.flushChild(h)

    private static function lockUnit(unit u, int itm, int abil, real cd)
        BlzStartUnitAbilityCooldown(u, abil, cd)

        let h = u.getHandleId()
        let current = table.hasReal(h, itm) ? table.loadReal(h, itm) : 0
        if current == 0.0 // previously no lock for this item type
            table.saveInt(h, UNIT_NUM_LOCKS, table.hasInt(h, UNIT_NUM_LOCKS) ? table.loadInt(h, UNIT_NUM_LOCKS) + 1 : 1)
        table.saveReal(h, itm, max(current, getElapsedGameTime() + cd))
        table.saveInt(itm, ITEM_TYPE_ABILITY_ID, abil)

        if toggleItemTriggers != null
            toggleItemTriggers.toggle(false)
        for i = 0 to 5
            var itmInSlot = u.itemInSlot(i)
            if itmInSlot.getTypeId() == itm
                u.removeItem(itmInSlot)
                u.addItemHandleToSlot(itmInSlot, i)
                itmInSlot = u.itemInSlot(i)
                lockItem(itmInSlot, abil, cd)
        if toggleItemTriggers != null
            toggleItemTriggers.toggle(true)

        doAfter(cd + 1) -> 
            checkLockUnit(h, itm)


    private static function checkLockUnit(int h, int itm) returns real
        if table.hasReal(h, itm)
            let lockedUntil = table.loadReal(h, itm)
            if lockedUntil < getElapsedGameTime()
                unlockUnit(h, itm)
                return -1
            return lockedUntil
        return -1

    private static function unlockUnit(int h, int itm)
        table.removeReal(h, itm)
        let locks = table.loadInt(h, UNIT_NUM_LOCKS)
        if locks == 1
            table.flushChild(h)
        else
            table.saveInt(h, UNIT_NUM_LOCKS, locks - 1)

public function generateCooldownAbility() returns int
    let id = ABIL_ID_GEN.next()
    new AbilityDefinitionAnimateDead(id)
    return id
