package BonusMod

import NoWurst
import AbilityObjEditing
import ObjectIdGenerator
import Preloader
import Annotations
import Maths
import Integer
import MagicFunctions
import Unit
import Printing

/*
This system is based on Bonus Mod by
    Earth-Fury
based on the work of
    weaaddar
*/

/* API */

/*
    The valid bonus values are -(2^MAX_LEVEL) to (2^MAX_LEVEL)-1
*/
@configurable constant int MAX_LEVEL_ATTRIBUTE = 10
@configurable constant int MAX_LEVEL_DAMAGE = 10
@configurable constant int MAX_LEVEL_ARMOR = 10
@configurable constant int MAX_LEVEL_ATTACK_SPEED = 10

/*
    Only setter functions are provided. If required, you need to keep track of the current values yourself.
*/
@inline public function unit.setBonusDamage(int bonus)
    this.setBonus(BonusMod.indexAD, BonusMod.MAX_BONUS_DAMAGE, BonusMod.MIN_BONUS_DAMAGE, MAX_LEVEL_DAMAGE, bonus)
@inline public function unit.setBonusAttackSpeed(int bonus)
    this.setBonus(BonusMod.indexAS, BonusMod.MAX_BONUS_ATTACK_SPEED, BonusMod.MIN_BONUS_ATTACK_SPEED, MAX_LEVEL_ATTACK_SPEED, bonus)
@inline public function unit.setBonusArmor(int bonus)
    this.setBonus(BonusMod.indexAR, BonusMod.MAX_BONUS_ARMOR, BonusMod.MIN_BONUS_ARMOR, MAX_LEVEL_ARMOR, bonus)
@inline public function unit.setBonusStrength(int bonus)
    this.setBonus(BonusMod.indexSTR, BonusMod.MAX_BONUS_ATTRIBUTE, BonusMod.MIN_BONUS_ATTRIBUTE, MAX_LEVEL_ATTRIBUTE, bonus)
@inline public function unit.setBonusAgility(int bonus)
    this.setBonus(BonusMod.indexAGI, BonusMod.MAX_BONUS_ATTRIBUTE, BonusMod.MIN_BONUS_ATTRIBUTE, MAX_LEVEL_ATTRIBUTE, bonus)
@inline public function unit.setBonusIntelligence(int bonus)
    this.setBonus(BonusMod.indexINT, BonusMod.MAX_BONUS_ATTRIBUTE, BonusMod.MIN_BONUS_ATTRIBUTE, MAX_LEVEL_ATTRIBUTE, bonus)

/* Implementation */

int array abilityIds
int array powersOfTwo

int offset = 0
function fillArray(int baseId, int maxLevel) returns int
    abilityIds[offset] = baseId
    let gen = new IdGenerator(baseId)
    for i = 1 to maxLevel
        abilityIds[offset + i] = gen.next()
    offset += maxLevel + 1
    destroy gen
    return offset - maxLevel - 1

//movement speed is also handled via trigger
constant BM_ATTACK_SPEED = compiletime(generateIds(MAX_LEVEL_ATTACK_SPEED))
constant BM_ATTACK_DAMAGE = compiletime(generateIds(MAX_LEVEL_DAMAGE))
constant BM_ARMOR = compiletime(generateIds(MAX_LEVEL_ARMOR))

constant BM_STRENGTH = compiletime(generateIds(MAX_LEVEL_ATTRIBUTE))
constant BM_AGILITY = compiletime(generateIds(MAX_LEVEL_ATTRIBUTE))
constant BM_INTELLIGENCE = compiletime(generateIds(MAX_LEVEL_ATTRIBUTE))

// Use a class to define globals below public API
class BonusMod
    /*
    0...MAX_LEVEL-1 positive -> MAX_LEVEL positive abilities
    MAX_LEVEL negative
    */
    static int MAX_BONUS_ATTRIBUTE = (2).pow(MAX_LEVEL_ATTRIBUTE)-1
    static int MIN_BONUS_ATTRIBUTE = -MAX_BONUS_ATTRIBUTE-1
    static int MAX_BONUS_DAMAGE = (2).pow(MAX_LEVEL_DAMAGE)-1
    static int MIN_BONUS_DAMAGE = -MAX_BONUS_DAMAGE-1
    static int MAX_BONUS_ARMOR = (2).pow(MAX_LEVEL_ARMOR)-1
    static int MIN_BONUS_ARMOR = -MAX_BONUS_ARMOR-1
    static int MAX_BONUS_ATTACK_SPEED = (2).pow(MAX_LEVEL_ATTACK_SPEED)-1
    static int MIN_BONUS_ATTACK_SPEED = -MAX_BONUS_ATTACK_SPEED-1

    static constant indexAD = fillArray(BM_ATTACK_DAMAGE, MAX_LEVEL_DAMAGE)
    static constant indexAS = fillArray(BM_ATTACK_SPEED, MAX_LEVEL_ATTACK_SPEED)
    static constant indexAR = fillArray(BM_ARMOR, MAX_LEVEL_ARMOR)

    static constant indexSTR = fillArray(BM_STRENGTH, MAX_LEVEL_ATTRIBUTE)
    static constant indexAGI = fillArray(BM_AGILITY, MAX_LEVEL_ATTRIBUTE)
    static constant indexINT = fillArray(BM_INTELLIGENCE, MAX_LEVEL_ATTRIBUTE)

    static function initialize()



function generateIds(int maxLevel) returns int
    let first = ABIL_ID_GEN.next()
    for i = 0 to maxLevel
        ABIL_ID_GEN.next()

    return first

   
function unit.setBonus(int abilityIndex, int maxBonus, int minBonus, int maxLevel, int bonus)
    if(bonus > maxBonus)
        print("Error. This Bonus is too high." + bonus.toString() + "/" + maxBonus.toString())
        this.setBonus(abilityIndex, maxBonus, minBonus, maxLevel, maxBonus)
        return

    if(bonus < minBonus)
        print("Error. This Bonus is too low:" + bonus.toString() + "/" + minBonus.toString())
        this.setBonus(abilityIndex, maxBonus, minBonus, maxLevel, minBonus)
        return

    var remainingBonus = bonus
    if( bonus < 0)
        remainingBonus = maxBonus + bonus + 1
        this.addAbility(abilityIds[abilityIndex + maxLevel])
        this.makeAbilityPermanent(abilityIds[abilityIndex + maxLevel], true)
    else
        this.removeAbility(abilityIds[abilityIndex + maxLevel])

    for i = maxLevel-1 downto 0
        let iBonus = powersOfTwo[i]
        if remainingBonus >= iBonus
            this.addAbility(abilityIds[abilityIndex + i])
            this.makeAbilityPermanent(abilityIds[abilityIndex + i], true)
            remainingBonus -= iBonus
        else
            this.removeAbility(abilityIds[abilityIndex + i])

public function unit.getBonus(int abilityIndex, int _maxBonus, int minBonus, int maxLevel) returns int
    int amount = 0

    if this.hasAbility(abilityIds[abilityIndex])
        amount = minBonus

    for i = 0 to maxLevel-1
        if this.hasAbility(abilityIds[abilityIndex + i])
            amount += powersOfTwo[i]

    return amount

public function unit.addBonus(int abilityIndex, int maxBonus, int minBonus, int maxLevel, int bonus)
    this.setBonus(abilityIndex, maxBonus, minBonus, maxLevel, this.getBonus(abilityIndex, maxBonus, minBonus, maxLevel)+bonus)

init
    for i = 0 to max(MAX_LEVEL_ATTRIBUTE, MAX_LEVEL_ATTACK_SPEED, MAX_LEVEL_DAMAGE, MAX_LEVEL_ARMOR)
        powersOfTwo[i] = (2).pow(i)

    for i = 0 to offset - 1
        preloadAbility(abilityIds[i])

@compiletime
function generateAttackSpeedBonus()
    AbilityDefinitionAttackSpeedIncrease aDef
    aDef = new AbilityDefinitionAttackSpeedIncrease(BM_ATTACK_SPEED)
    aDef.setAttackSpeedIncrease(1, 0.01 )
    let gen = new IdGenerator(BM_ATTACK_SPEED)
    for i = 1 to MAX_LEVEL_ATTACK_SPEED-1
        aDef = new AbilityDefinitionAttackSpeedIncrease(gen.next())
        aDef.setAttackSpeedIncrease(1, (2).pow(i)/100 )

    aDef = new AbilityDefinitionAttackSpeedIncrease(gen.next())
    aDef.setAttackSpeedIncrease(1, -(2).pow(MAX_LEVEL_ATTACK_SPEED)/100 )
    destroy gen

@compiletime
function generateAttackDamageBonus()
    AbilityDefinitionAttackBonus aDef
    aDef = new AbilityDefinitionAttackBonus(BM_ATTACK_DAMAGE)
    aDef.setAttackBonus(1, 1 )
    let gen = new IdGenerator(BM_ATTACK_DAMAGE)
    for i = 1 to MAX_LEVEL_DAMAGE-1
        aDef = new AbilityDefinitionAttackBonus(gen.next())
        aDef.setAttackBonus(1, (2).pow(i) )

    aDef = new AbilityDefinitionAttackBonus(gen.next())
    aDef.setAttackBonus(1, -(2).pow(MAX_LEVEL_DAMAGE) )
    destroy gen
                
@compiletime
function generateArmorBonus()
    AbilityDefinitionDefenseBonusPlus1 aDef
    aDef = new AbilityDefinitionDefenseBonusPlus1(BM_ARMOR)
    aDef.setDefenseBonus(1, 1 )
    let gen = new IdGenerator(BM_ARMOR)
    for i = 1 to MAX_LEVEL_ARMOR-1
        aDef = new AbilityDefinitionDefenseBonusPlus1(gen.next())
        aDef.setDefenseBonus(1, (2).pow(i) )

    aDef = new AbilityDefinitionDefenseBonusPlus1(gen.next())
    aDef.setDefenseBonus(1, -(2).pow(MAX_LEVEL_ARMOR) )
    destroy gen
     
@compiletime
function generateStrengthBonus()
    AbilityDefinitionStrengthBonusPlus1 aDef
    aDef = new AbilityDefinitionStrengthBonusPlus1(BM_STRENGTH)
    aDef.setStrengthBonus(1, 1 )
    let gen = new IdGenerator(BM_STRENGTH)
    for i = 1 to MAX_LEVEL_ATTRIBUTE-1
        aDef = new AbilityDefinitionStrengthBonusPlus1(gen.next())
        aDef.setStrengthBonus(1, (2).pow(i) )

    aDef = new AbilityDefinitionStrengthBonusPlus1(gen.next())
    aDef.setStrengthBonus(1, -(2).pow(MAX_LEVEL_ATTRIBUTE) )
    destroy gen
             
@compiletime
function generateAgilityBonus()
    AbilityDefinitionAgilityBonusPlus1 aDef
    aDef = new AbilityDefinitionAgilityBonusPlus1(BM_AGILITY)
    aDef.setAgilityBonus(1, 1 )
    let gen = new IdGenerator(BM_AGILITY)
    for i = 1 to MAX_LEVEL_ATTRIBUTE-1
        aDef = new AbilityDefinitionAgilityBonusPlus1(gen.next())
        aDef.setAgilityBonus(1, (2).pow(i) )

    aDef = new AbilityDefinitionAgilityBonusPlus1(gen.next())
    aDef.setAgilityBonus(1, -(2).pow(MAX_LEVEL_ATTRIBUTE) )
    destroy gen
             
@compiletime
function generateIntelligenceBonus()
    AbilityDefinitionIntelligenceBonusPlus1 aDef
    aDef = new AbilityDefinitionIntelligenceBonusPlus1(BM_INTELLIGENCE)
    aDef.setIntelligenceBonus(1, 1 )
    let gen = new IdGenerator(BM_INTELLIGENCE)
    for i = 1 to MAX_LEVEL_ATTRIBUTE-1
        aDef = new AbilityDefinitionIntelligenceBonusPlus1(gen.next())
        aDef.setIntelligenceBonus(1, (2).pow(i) )

    aDef = new AbilityDefinitionIntelligenceBonusPlus1(gen.next())
    aDef.setIntelligenceBonus(1, -(2).pow(MAX_LEVEL_ATTRIBUTE) )
    destroy gen

init
    BonusMod.initialize()
