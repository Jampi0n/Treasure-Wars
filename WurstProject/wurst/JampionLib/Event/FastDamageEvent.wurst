/**
    FastDamageEvent aims to offer efficient damage detection and damage events.

    Feature Overview:

        Unit specific damage events:

            Every unit has an individual list of damage events. This reduces the number of condition, since the list can already be built based on the conditions.

            The following lists exist per unit:
             -anyDamage: any damage dealt by the unit
             -anyHit: any damage taken by the unit
             -attackDamageNoBuilding: attacks done by the unit against units that are no building
             -attackHitNoBuilding: attacks suffered by the unit against units that are no building

            Everything can be implemented using the first two groups. The other groups are for convenience and efficiency. The attack and building conditions are very common and the two last groups avoid having to use them on every damage function.

            API:
                DamageEventUnit.DamageEventGroup.add(...)
                DamageEventUnit.DamageEventGroup.remove(...)

            Note:
                The pointer returned by DamageEventUnit.DamageEventGroup.add(...) is used to remove the damage function with DamageEventUnit.DamageEventGroup.remove(...).


        Global damage modification function:

            To give full control over the order of damage modifiers, a single global damage modification function is used.

        Unit specific integer storage:

            Since the damage modification function runs for every damage event, its speed is important.
            Instead of checking for buffs or items directly in the function fast integer access can be used instead.
            When the buff or item is added to the unit, an integer is saved, which can be used inside the damage modification function.

            The fast storage can only save a few integers. For additional storage, slower hashtable based functions can be used instead.

            API:
                DamageEventUnit.saveIntFast(...)
                DamageEventUnit.saveIntSlow(...)
                DamageEventUnit.loadIntFast(...)
                DamageEventUnit.loadIntSlow(...)

        Alternate attacks:

            Offers additional on hit detection for alternate and arrow attacks.
            This is implemented by having two additional buffs.

            The arrow buff can be used on arrow abilities like Frost Arrow in order to detect them.
            The alternate buff can be toggled for units individually.
            This is only useful for ranged units, where the damage event does not happen at the same time as the attack.
            For example, an active attack modifying ability should only work, if it is used before the attack is launched. Otherwise players could use the ability shortly before the missile lands, giving the opponent no chance to react.
            This can be implemented by using the alternate attack after using the attack modifying ability. Then only attacks launched afterwars will use the alternate buff and can be detected.

            API:
                DamageEvent.useAlternate(...)
                DamageFunction.damage(..., bool active, bool alternate)
**/
package FastDamageEvent

import NoWurst
import OnUnitEnterLeave
import ErrorHandling
import DamageDetection
import HashMap
import Annotations
import Unit
import Maths

public interface DamageFunction
    function damage(unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, bool attack, bool active, bool alternate)

/** This ability is used during special attacks. **/
@configurable public var ON_HIT_ABILITY_ALTERNATE = 0

// It is recommended to use the ON_HIT_BUFF_ARROW buff for all arrow abilities. Then arrow abilities can easily be detected.

/** This buff is used to detect special attacks **/
@configurable public var ON_HIT_BUFF_ARROW = 0
/** This buff is used to detect special attacks **/
@configurable public var ON_HIT_BUFF_ALTERNATE = 0

/*
Special attacks are mostly interesting for ranged units, because the hit can be delayed.
Using the arrow or alternate buffs, the unit will produce attacks with different buffs.
Even if the special attack phase is over, special attacks that hit afterwards can still be identified as special attacks.
*/

/**
Controls the size of fast data for every unit
Fast data is implemented as an array with inline access
Due to the array size limit, the number of units times the fast data size must be below 32678
Larger fast data sizes also require more time cleaning up when the unit is removed
**/
@configurable public var FAST_DATA_SIZE = 8

/**
The modDamage function modifies the damage. All damage modifiers are handled by this function to set up a deterministic order.
In order to improve speed, it is recommended to use DamageEventUnit save and load int functions whenever possible.
Instead of checking for an item the state can be saved when the item is picked up and dropped.
This is especially useful when a lot of damage modifiers are used, that only rarely are enabled.
**/
@configurable public function modDamage(unit _source, unit _target, DamageEventUnit _sourceWrapper, DamageEventUnit _targetWrapper, int _sourceTypeId, int _targetTypeId, real damage, bool _attack, bool _arrow, bool _alternate) returns real
    return damage

@configurable public function filterDamageEvent(unit _source, unit _target) returns bool
    return true

class DamageFunctionListElement
    DamageFunction f
    DamageFunctionListElement next
    DamageFunctionListElement prev
    DamageFunctionList list
    construct(DamageFunction f, DamageFunctionList list)
        this.f = f
        this.list = list

    ondestroy
        destroy f

/**
Efficient list implementation for damage functions.
New elements are inserted at the head.
Elements are removed by pointer.
**/
class DamageFunctionList
    DamageFunctionListElement first = null
    function add(DamageFunction f) returns int
        let newElement = new DamageFunctionListElement(f, this)
        newElement.next = this.first
        newElement.prev = null
        if this.first != null
            this.first.prev = newElement
        this.first = newElement
        return newElement castTo int
    function remove(int pointer)
        let removeElement = pointer castTo DamageFunctionListElement
        if removeElement.list != this
            error("Tried to remove a damage function from a different list!")
        else
            if first == removeElement
                first = removeElement.next
                if removeElement.next != null
                    removeElement.next.prev = null
                    destroy removeElement
            else
                removeElement.prev.next = removeElement.next
                if removeElement.next != null
                    removeElement.next.prev = removeElement.prev
                destroy removeElement

    ondestroy
        DamageFunctionListElement current = this.first
        while current != null
            let next = current.next
            destroy current
            current = next

/**
A damage event group contains a damage function list.
Damage event groups are used to optimize common conditions and provide cleaner API.
A common condition is that neither the source nor target are buildings.
In order to avoid repeated conditions in every damage event function, the condition is put before the group is run.
**/
class DamageEventGroup
    int n = 0
    DamageFunctionList list = new DamageFunctionList()

    ondestroy
        destroy list

    function add(DamageFunction f) returns int
        n += 1
        return list.add(f)

    function remove(int pointer)
        n -= 1
        list.remove(pointer)

/*
Extension methods are used to prevent null checks and enable inlining.
*/
@inline function DamageEventGroup.hasEvents() returns bool
    return this.n > 0
@inline public function DamageEventGroup.runEvents(unit source, unit target, DamageEventUnit sourceWrapper, DamageEventUnit targetWrapper, real damage, bool attack, bool active, bool alternate)
    DamageFunctionListElement current = this.list.first
    while current != null
        current.f.damage(source, target, sourceWrapper, targetWrapper, damage, attack, active, alternate)
        current = current.next

/*
DamageEventUnitType and DamageEventUnit provide two functions to retrieve these objects:
fromUnit/fromUnitTypeId: creates a new object if it does not exist already
get: returns a default object without events if it does not exist already
The get function is protected and is used to speed up the performance critical function onDamage.
There are no null checks necessary, because a default object without events will be used.
*/

/**
Damage events for units.
For temporary effects, e.g. based on items, spells, ...
**/
public class DamageEventUnit
    static constant unitMap = new HashMap<unit, DamageEventUnit>()

    static function fromUnit(unit u) returns DamageEventUnit
        if unitMap.has(u)
            return unitMap.get(u)
        else
            return new DamageEventUnit(u)

    protected static function get(unit u) returns DamageEventUnit
        if unitMap.has(u)
            return unitMap.get(u)
        else
            return DamageEvent.nullUnit

    protected static function classInit()
        onLeave() ->
            let d = DamageEventUnit.get(getEnterLeaveUnit())
            if d != null and d != DamageEvent.nullUnit
                destroy d

    protected static int array data

    private unit u
    private int h
    DamageEventGroup anyDamage = new DamageEventGroup()
    DamageEventGroup anyHit = new DamageEventGroup()
    DamageEventGroup attackDamageNoBuilding = new DamageEventGroup()
    DamageEventGroup attackHitNoBuilding = new DamageEventGroup()

    construct(unit u)
        this.u = u
        this.h = u.getHandleId()
        unitMap.put(this.u, this)
    ondestroy
        unitMap.remove(this.u)
        DamageEvent.damageEventTable.flushChild(h)
        for i = 0 to FAST_DATA_SIZE-1
            this.saveIntFast(i, 0)
        destroy anyDamage
        destroy anyHit
        destroy attackDamageNoBuilding
        destroy attackHitNoBuilding
    
    @inline
    function saveIntSlow(int key, int value)
        DamageEvent.damageEventTable.saveInt(h, key, value)
    @inline
    function saveIntFast(int key, int value)
        data[(this castTo int) * FAST_DATA_SIZE + key] = value

    @inline
    function loadIntSlow(int key) returns int
        return DamageEvent.damageEventTable.loadInt(h, key)
    @inline
    function loadIntFast(int key) returns int
        return data[(this castTo int) * FAST_DATA_SIZE + key]

public abstract class DamageEvent
    protected static hashtable damageEventTable = InitHashtable()
    protected static DamageEventUnit nullUnit = new DamageEventUnit(null)

    /*
    This function runs when a unit takes damage and should be optimized as best as possible.
    All function calls are inlined.
    */
    protected static function onDamage()
        let source = GetEventDamageSource()
        let target = GetTriggerUnit()
        real damage = GetEventDamage()
        let attack = BlzGetEventDamageType() == DAMAGE_TYPE_NORMAL
        bool alternate = false
        bool arrow = false

        if(target.hasAbility(ON_HIT_BUFF_ALTERNATE))
            target.removeAbility(ON_HIT_BUFF_ALTERNATE)
            alternate = true
        if(target.hasAbility(ON_HIT_BUFF_ARROW))
            target.removeAbility(ON_HIT_BUFF_ARROW)
            arrow = true

        let sourceTypeId = source.getTypeId()
        let sourceWrapper = DamageEventUnit.get(source)

        let targetTypeId = target.getTypeId()
        let targetWrapper = DamageEventUnit.get(target)
        
        damage = modDamage(source, target, sourceWrapper, targetWrapper, sourceTypeId, targetTypeId, damage, attack, arrow, alternate)
        sourceWrapper.anyDamage.runEvents(source, target, sourceWrapper, targetWrapper, damage, attack, arrow, alternate)
        targetWrapper.anyHit.runEvents(source, target, sourceWrapper, targetWrapper, damage, attack, arrow, alternate)
        if attack
            if not target.isType(UNIT_TYPE_STRUCTURE)
                sourceWrapper.attackDamageNoBuilding.runEvents(source, target, sourceWrapper, targetWrapper, damage, attack, arrow, alternate)
            if not source.isType(UNIT_TYPE_STRUCTURE)
                targetWrapper.attackHitNoBuilding.runEvents(source, target, sourceWrapper, targetWrapper, damage, attack, arrow, alternate)
        damage = max(0, damage)
        BlzSetEventDamage(damage)


    static function useAlternate(unit whichUnit, boolean advanced)
        if advanced
            whichUnit
                ..addAbility(ON_HIT_ABILITY_ALTERNATE)
        else
            whichUnit
                ..removeAbility(ON_HIT_ABILITY_ALTERNATE)
        
init
    DamageEventUnit.classInit()
    addOnDamageFunc() -> 
        DamageEvent.onDamage()
